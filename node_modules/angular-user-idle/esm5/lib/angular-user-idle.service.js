/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Optional } from '@angular/core';
import { from, fromEvent, interval, merge, of, Subject, timer } from 'rxjs';
import { bufferTime, distinctUntilChanged, filter, finalize, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { UserIdleConfig } from './angular-user-idle.config';
import * as i0 from "@angular/core";
import * as i1 from "./angular-user-idle.config";
/**
 * User's idle service.
 */
var UserIdleService = /** @class */ (function () {
    function UserIdleService(config, _ngZone) {
        this._ngZone = _ngZone;
        this.timerStart$ = new Subject();
        this.idleDetected$ = new Subject();
        this.timeout$ = new Subject();
        /**
         * Idle value in milliseconds.
         * Default equals to 10 minutes.
         */
        this.idleMillisec = 600 * 1000;
        /**
         * Idle buffer wait time milliseconds to collect user action
         * Default equals to 1 Sec.
         */
        this.idleSensitivityMillisec = 1000;
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /**
         * Ping value in milliseconds.
         * Default equals to 2 minutes.
         */
        this.pingMillisec = 120 * 1000;
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Start watching for user idle and setup timer and ping.
     */
    /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    UserIdleService.prototype.startWatching = /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.activityEvents$) {
            this.activityEvents$ = merge(fromEvent(window, 'mousemove'), fromEvent(window, 'resize'), fromEvent(document, 'keydown'));
        }
        this.idle$ = from(this.activityEvents$);
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(bufferTime(this.idleSensitivityMillisec), // Starting point of detecting of user's inactivity
        filter(function (arr) { return !arr.length && !_this.isIdleDetected && !_this.isInactivityTimer; }), tap(function () {
            _this.isIdleDetected = true;
            _this.idleDetected$.next(true);
        }), switchMap(function () {
            return _this._ngZone.runOutsideAngular(function () {
                return interval(1000).pipe(takeUntil(merge(_this.activityEvents$, timer(_this.idleMillisec).pipe(tap(function () {
                    _this.isInactivityTimer = true;
                    _this.timerStart$.next(true);
                })))), finalize(function () {
                    _this.isIdleDetected = false;
                    _this.idleDetected$.next(false);
                }));
            });
        }))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.pingMillisec);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopWatching = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        this.isInactivityTimer = false;
        this.timerStart$.next(false);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.resetTimer = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        this.isTimeout = false;
    };
    /**
     * Return observable for timer's countdown number that emits after idle.
     */
    /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    UserIdleService.prototype.onTimerStart = /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timerStart$.pipe(distinctUntilChanged(), switchMap(function (start) { return (start ? _this.timer$ : of(null)); }));
    };
    /**
     * Return observable for idle status changed
     */
    /**
     * Return observable for idle status changed
     * @return {?}
     */
    UserIdleService.prototype.onIdleStatusChanged = /**
     * Return observable for idle status changed
     * @return {?}
     */
    function () {
        return this.idleDetected$.asObservable();
    };
    /**
     * Return observable for timeout is fired.
     */
    /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    UserIdleService.prototype.onTimeout = /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timeout$.pipe(filter(function (timeout) { return !!timeout; }), tap(function () { return (_this.isTimeout = true); }), map(function () { return true; }));
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.getConfigValue = /**
     * @return {?}
     */
    function () {
        return {
            idle: this.idleMillisec / 1000,
            idleSensitivity: this.idleSensitivityMillisec / 1000,
            timeout: this.timeout,
            ping: this.pingMillisec / 1000
        };
    };
    /**
     * Set config values.
     * @param config
     */
    /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    UserIdleService.prototype.setConfigValues = /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        this.setConfig(config);
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    UserIdleService.prototype.setConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config.idle) {
            this.idleMillisec = config.idle * 1000;
        }
        if (config.ping) {
            this.pingMillisec = config.ping * 1000;
        }
        if (config.idleSensitivity) {
            this.idleSensitivityMillisec = config.idleSensitivity * 1000;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    };
    /**
     * Set custom activity events
     *
     * @param customEvents Example: merge(
     *   fromEvent(window, 'mousemove'),
     *   fromEvent(window, 'resize'),
     *   fromEvent(document, 'keydown'),
     *   fromEvent(document, 'touchstart'),
     *   fromEvent(document, 'touchend')
     * )
     */
    /**
     * Set custom activity events
     *
     * @param {?} customEvents Example: merge(
     *   fromEvent(window, 'mousemove'),
     *   fromEvent(window, 'resize'),
     *   fromEvent(document, 'keydown'),
     *   fromEvent(document, 'touchstart'),
     *   fromEvent(document, 'touchend')
     * )
     * @return {?}
     */
    UserIdleService.prototype.setCustomActivityEvents = /**
     * Set custom activity events
     *
     * @param {?} customEvents Example: merge(
     *   fromEvent(window, 'mousemove'),
     *   fromEvent(window, 'resize'),
     *   fromEvent(document, 'keydown'),
     *   fromEvent(document, 'touchstart'),
     *   fromEvent(document, 'touchend')
     * )
     * @return {?}
     */
    function (customEvents) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set custom activity events');
            return;
        }
        this.activityEvents$ = customEvents;
    };
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param timeout Timeout in seconds.
     */
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    UserIdleService.prototype.setupTimer = /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    function (timeout) {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this.timer$ = of(function () { return new Date(); }).pipe(map(function (fn) { return fn(); }), switchMap(function (startDate) { return interval(1000).pipe(map(function () { return Math.round((new Date().valueOf() - startDate.valueOf()) / 1000); }), //   convert elapsed count to seconds
            tap(function (elapsed) {
                if (elapsed >= timeout) {
                    _this.timeout$.next(true);
                }
            })); }));
        });
    };
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param pingMillisec
     */
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} pingMillisec
     * @return {?}
     */
    UserIdleService.prototype.setupPing = /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} pingMillisec
     * @return {?}
     */
    function (pingMillisec) {
        var _this = this;
        this.ping$ = interval(pingMillisec).pipe(filter(function () { return !_this.isTimeout; }));
    };
    UserIdleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    UserIdleService.ctorParameters = function () { return [
        { type: UserIdleConfig, decorators: [{ type: Optional }] },
        { type: NgZone }
    ]; };
    /** @nocollapse */ UserIdleService.ngInjectableDef = i0.defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(i0.inject(i1.UserIdleConfig, 8), i0.inject(i0.NgZone)); }, token: UserIdleService, providedIn: "root" });
    return UserIdleService;
}());
export { UserIdleService };
if (false) {
    /** @type {?} */
    UserIdleService.prototype.ping$;
    /**
     * Events that can interrupts user's inactivity timer.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.activityEvents$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timerStart$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idleDetected$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timeout$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idle$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timer$;
    /**
     * Idle value in milliseconds.
     * Default equals to 10 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idleMillisec;
    /**
     * Idle buffer wait time milliseconds to collect user action
     * Default equals to 1 Sec.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idleSensitivityMillisec;
    /**
     * Timeout value in seconds.
     * Default equals to 5 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timeout;
    /**
     * Ping value in milliseconds.
     * Default equals to 2 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.pingMillisec;
    /**
     * Timeout status.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isTimeout;
    /**
     * Timer of user's inactivity is in progress.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isInactivityTimer;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isIdleDetected;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idleSubscription;
    /**
     * @type {?}
     * @private
     */
    UserIdleService.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,