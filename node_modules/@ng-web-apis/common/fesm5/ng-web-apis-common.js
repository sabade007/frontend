import { DOCUMENT } from '@angular/common';
import { Observable, fromEvent } from 'rxjs';
import { share, distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { inject, InjectionToken } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WINDOW = new InjectionToken('An abstraction over global window object', {
    factory: function () {
        var defaultView = inject(DOCUMENT).defaultView;
        if (!defaultView) {
            throw new Error('Window is not available');
        }
        return defaultView;
    },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ANIMATION_FRAME = new InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {
    factory: function () {
        var _a = inject(WINDOW), requestAnimationFrame = _a.requestAnimationFrame, cancelAnimationFrame = _a.cancelAnimationFrame;
        /** @type {?} */
        var animationFrame$ = new Observable(function (subscriber) {
            /** @type {?} */
            var id = NaN;
            /** @type {?} */
            var callback = function (timestamp) {
                subscriber.next(timestamp);
                id = requestAnimationFrame(callback);
            };
            id = requestAnimationFrame(callback);
            return function () {
                cancelAnimationFrame(id);
            };
        });
        return animationFrame$.pipe(share());
    },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CACHES = new InjectionToken('An abstraction over window.caches object', {
    factory: function () { return inject(WINDOW).caches; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CRYPTO = new InjectionToken('An abstraction over window.crypto object', {
    factory: function () { return inject(WINDOW).crypto; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CSS = new InjectionToken('An abstraction over window.CSS object', {
    factory: function () {
        return ((/** @type {?} */ (inject(WINDOW)))).CSS || {
            escape: function (v) { return v; },
            supports: function () { return false; },
        };
    },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var HISTORY = new InjectionToken('An abstraction over window.history object', {
    factory: function () { return inject(WINDOW).history; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOCAL_STORAGE = new InjectionToken('An abstraction over window.localStorage object', {
    factory: function () { return inject(WINDOW).localStorage; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOCATION = new InjectionToken('An abstraction over window.location object', {
    factory: function () { return inject(WINDOW).location; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NAVIGATOR = new InjectionToken('An abstraction over window.navigator object', {
    factory: function () { return inject(WINDOW).navigator; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MEDIA_DEVICES = new InjectionToken('An abstraction over window.navigator.mediaDevices object', {
    factory: function () { return inject(NAVIGATOR).mediaDevices; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NETWORK_INFORMATION = new InjectionToken('An abstraction over window.navigator.connection object', {
    // @ts-ignore
    factory: function () { return inject(NAVIGATOR).connection || null; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PAGE_VISIBILITY = new InjectionToken('Shared Observable based on `document visibility changed`', {
    factory: function () {
        /** @type {?} */
        var documentRef = inject(DOCUMENT);
        return fromEvent(documentRef, 'visibilitychange').pipe(startWith(0), map(function () { return documentRef.visibilityState !== 'hidden'; }), distinctUntilChanged(), share());
    },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PERFORMANCE = new InjectionToken('An abstraction over window.performance object', {
    factory: function () { return inject(WINDOW).performance; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SESSION_STORAGE = new InjectionToken('An abstraction over window.sessionStorage object', {
    factory: function () { return inject(WINDOW).sessionStorage; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SPEECH_RECOGNITION = new InjectionToken('An abstraction over SpeechRecognition class', {
    factory: function () {
        /** @type {?} */
        var windowRef = inject(WINDOW);
        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;
    },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SPEECH_SYNTHESIS = new InjectionToken('An abstraction over window.speechSynthesis object', {
    factory: function () { return inject(WINDOW).speechSynthesis; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var USER_AGENT = new InjectionToken('An abstraction over window.navigator.userAgent object', {
    factory: function () { return inject(NAVIGATOR).userAgent; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ANIMATION_FRAME, CACHES, CRYPTO, CSS, HISTORY, LOCAL_STORAGE, LOCATION, MEDIA_DEVICES, NAVIGATOR, NETWORK_INFORMATION, PAGE_VISIBILITY, PERFORMANCE, SESSION_STORAGE, SPEECH_RECOGNITION, SPEECH_SYNTHESIS, USER_AGENT, WINDOW };

//# sourceMappingURL=ng-web-apis-common.js.map