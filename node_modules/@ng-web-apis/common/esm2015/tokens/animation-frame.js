/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { inject, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { WINDOW } from './window';
/** @type {?} */
export const ANIMATION_FRAME = new InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {
    factory: () => {
        const { requestAnimationFrame, cancelAnimationFrame } = inject(WINDOW);
        /** @type {?} */
        const animationFrame$ = new Observable(subscriber => {
            /** @type {?} */
            let id = NaN;
            /** @type {?} */
            const callback = (timestamp) => {
                subscriber.next(timestamp);
                id = requestAnimationFrame(callback);
            };
            id = requestAnimationFrame(callback);
            return () => {
                cancelAnimationFrame(id);
            };
        });
        return animationFrame$.pipe(share());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWZyYW1lLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLXdlYi1hcGlzL2NvbW1vbi8iLCJzb3VyY2VzIjpbInRva2Vucy9hbmltYXRpb24tZnJhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7O0FBRWhDLE1BQU0sT0FBTyxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQzdDLDJEQUEyRCxFQUMzRDtJQUNJLE9BQU8sRUFBRSxHQUFHLEVBQUU7Y0FDSixFQUFDLHFCQUFxQixFQUFFLG9CQUFvQixFQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7Y0FDOUQsZUFBZSxHQUFHLElBQUksVUFBVSxDQUFzQixVQUFVLENBQUMsRUFBRTs7Z0JBQ2pFLEVBQUUsR0FBRyxHQUFHOztrQkFDTixRQUFRLEdBQUcsQ0FBQyxTQUE4QixFQUFFLEVBQUU7Z0JBQ2hELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBRUQsRUFBRSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXJDLE9BQU8sR0FBRyxFQUFFO2dCQUNSLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQztRQUVGLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDSixDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpbmplY3QsIEluamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge1dJTkRPV30gZnJvbSAnLi93aW5kb3cnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFOSU1BVElPTl9GUkFNRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPERPTUhpZ2hSZXNUaW1lU3RhbXA+PihcclxuICAgICdTaGFyZWQgT2JzZXJ2YWJsZSBiYXNlZCBvbiBgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZWAnLFxyXG4gICAge1xyXG4gICAgICAgIGZhY3Rvcnk6ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qge3JlcXVlc3RBbmltYXRpb25GcmFtZSwgY2FuY2VsQW5pbWF0aW9uRnJhbWV9ID0gaW5qZWN0KFdJTkRPVyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbkZyYW1lJCA9IG5ldyBPYnNlcnZhYmxlPERPTUhpZ2hSZXNUaW1lU3RhbXA+KHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkID0gTmFOO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAodGltZXN0YW1wOiBET01IaWdoUmVzVGltZVN0YW1wKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRpb25GcmFtZSQucGlwZShzaGFyZSgpKTtcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuKTtcclxuIl19