{"version":3,"sources":["ng://@ng-web-apis/common/tokens/window.ts","ng://@ng-web-apis/common/tokens/animation-frame.ts","ng://@ng-web-apis/common/tokens/caches.ts","ng://@ng-web-apis/common/tokens/crypto.ts","ng://@ng-web-apis/common/tokens/css.ts","ng://@ng-web-apis/common/tokens/history.ts","ng://@ng-web-apis/common/tokens/local-storage.ts","ng://@ng-web-apis/common/tokens/location.ts","ng://@ng-web-apis/common/tokens/navigator.ts","ng://@ng-web-apis/common/tokens/media-devices.ts","ng://@ng-web-apis/common/tokens/network-information.ts","ng://@ng-web-apis/common/tokens/page-visibility.ts","ng://@ng-web-apis/common/tokens/performance.ts","ng://@ng-web-apis/common/tokens/session-storage.ts","ng://@ng-web-apis/common/tokens/speech-recognition.ts","ng://@ng-web-apis/common/tokens/speech-synthesis.ts","ng://@ng-web-apis/common/tokens/user-agent.ts"],"sourcesContent":["import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n    'An abstraction over global window object',\r\n    {\r\n        factory: () => {\r\n            const {defaultView} = inject(DOCUMENT);\r\n\r\n            if (!defaultView) {\r\n                throw new Error('Window is not available');\r\n            }\r\n\r\n            return defaultView;\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {share} from 'rxjs/operators';\r\nimport {WINDOW} from './window';\r\n\r\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\r\n    'Shared Observable based on `window.requestAnimationFrame`',\r\n    {\r\n        factory: () => {\r\n            const {requestAnimationFrame, cancelAnimationFrame} = inject(WINDOW);\r\n            const animationFrame$ = new Observable<DOMHighResTimeStamp>(subscriber => {\r\n                let id = NaN;\r\n                const callback = (timestamp: DOMHighResTimeStamp) => {\r\n                    subscriber.next(timestamp);\r\n                    id = requestAnimationFrame(callback);\r\n                };\r\n\r\n                id = requestAnimationFrame(callback);\r\n\r\n                return () => {\r\n                    cancelAnimationFrame(id);\r\n                };\r\n            });\r\n\r\n            return animationFrame$.pipe(share());\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const CACHES = new InjectionToken<CacheStorage>(\r\n    'An abstraction over window.caches object',\r\n    {\r\n        factory: () => inject(WINDOW).caches,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const CRYPTO = new InjectionToken<Crypto>(\r\n    'An abstraction over window.crypto object',\r\n    {\r\n        factory: () => inject(WINDOW).crypto,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\n/**\r\n * Use Window['CSS'], this is a workaround to support Angular 6+\r\n */\r\ninterface Css {\r\n    escape(ident: string): string;\r\n    supports(property: string, value: string): boolean;\r\n    supports(conditionText: string): boolean;\r\n}\r\n\r\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\r\n    factory: () =>\r\n        (inject(WINDOW) as any).CSS || {\r\n            escape: v => v,\r\n            supports: () => false,\r\n        },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const HISTORY = new InjectionToken<History>(\r\n    'An abstraction over window.history object',\r\n    {\r\n        factory: () => inject(WINDOW).history,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.localStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).localStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCATION = new InjectionToken<Location>(\r\n    'An abstraction over window.location object',\r\n    {\r\n        factory: () => inject(WINDOW).location,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const NAVIGATOR = new InjectionToken<Navigator>(\r\n    'An abstraction over window.navigator object',\r\n    {\r\n        factory: () => inject(WINDOW).navigator,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const MEDIA_DEVICES = new InjectionToken<MediaDevices>(\r\n    'An abstraction over window.navigator.mediaDevices object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).mediaDevices,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const NETWORK_INFORMATION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof navigator['connection'] | null\r\n>('An abstraction over window.navigator.connection object', {\r\n    // @ts-ignore\r\n    factory: () => inject(NAVIGATOR).connection || null,\r\n});\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {fromEvent, Observable} from 'rxjs';\r\nimport {distinctUntilChanged, map, share, startWith} from 'rxjs/operators';\r\n\r\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n    'Shared Observable based on `document visibility changed`',\r\n    {\r\n        factory: () => {\r\n            const documentRef = inject(DOCUMENT);\r\n\r\n            return fromEvent(documentRef, 'visibilitychange').pipe(\r\n                startWith(0),\r\n                map(() => documentRef.visibilityState !== 'hidden'),\r\n                distinctUntilChanged(),\r\n                share(),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const PERFORMANCE = new InjectionToken<Performance>(\r\n    'An abstraction over window.performance object',\r\n    {\r\n        factory: () => inject(WINDOW).performance,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.sessionStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).sessionStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_RECOGNITION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof window['speechRecognition'] | null\r\n>('An abstraction over SpeechRecognition class', {\r\n    factory: () => {\r\n        const windowRef: any = inject(WINDOW);\r\n\r\n        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\r\n    },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\r\n    'An abstraction over window.speechSynthesis object',\r\n    {\r\n        factory: () => inject(WINDOW).speechSynthesis,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const USER_AGENT = new InjectionToken<string>(\r\n    'An abstraction over window.navigator.userAgent object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).userAgent,\r\n    },\r\n);\r\n"],"names":["WINDOW","InjectionToken","factory","defaultView","core","inject","common","DOCUMENT","Error","ANIMATION_FRAME","_a","requestAnimationFrame","cancelAnimationFrame","Observable","subscriber","id","NaN","callback","timestamp","next","pipe","share","CACHES","caches","CRYPTO","crypto","CSS","escape","v","supports","HISTORY","history","LOCAL_STORAGE","localStorage","LOCATION","location","NAVIGATOR","navigator","MEDIA_DEVICES","mediaDevices","NETWORK_INFORMATION","connection","PAGE_VISIBILITY","documentRef","fromEvent","startWith","map","visibilityState","distinctUntilChanged","PERFORMANCE","performance","SESSION_STORAGE","sessionStorage","SPEECH_RECOGNITION","windowRef","speechRecognition","webkitSpeechRecognition","SPEECH_SYNTHESIS","speechSynthesis","USER_AGENT","userAgent"],"mappings":"odAGA,IAAaA,EAAS,IAAIC,EAAAA,eACtB,2CACA,CACIC,QAAS,WACE,IAAAC,EAAAC,EAAAC,OAAAC,EAAAC,UAAAJ,YAEP,IAAKA,EACD,MAAM,IAAIK,MAAM,2BAGpB,OAAOL,KCRNM,EAAkB,IAAIR,EAAAA,eAC/B,4DACA,CACIC,QAAS,WACC,IAAAQ,EAAAN,EAAAC,OAAAL,GAACW,EAAAD,EAAAC,sBAAuBC,EAAAF,EAAAE,qBAe9B,OAdwB,IAAIC,EAAAA,WAAgC,SAAAC,G,IACpDC,EAAKC,IACHC,EAAW,SAACC,GACdJ,EAAWK,KAAKD,GAChBH,EAAKJ,EAAsBM,IAG/BF,EAAKJ,EAAsBM,GAE3B,OAAO,WACHL,EAAqBG,MAINK,KAAKC,EAAAA,YCrB3BC,EAAS,IAAIrB,EAAAA,eACtB,2CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQuB,UCHzBC,EAAS,IAAIvB,EAAAA,eACtB,2CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQyB,UCMzBC,EAAM,IAAIzB,EAAAA,eAAoB,wCAAyC,CAChFC,QAAS,WACL,OAACG,EAAAA,OAAOL,GAAgB0B,KAAO,CAC3BC,OAAQ,SAAAC,GAAK,OAAAA,GACbC,SAAU,WAAM,OAAA,OCbfC,EAAU,IAAI7B,EAAAA,eACvB,4CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQ+B,WCHzBC,EAAgB,IAAI/B,EAAAA,eAC7B,iDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQiC,gBCHzBC,EAAW,IAAIjC,EAAAA,eACxB,6CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQmC,YCHzBC,EAAY,IAAInC,EAAAA,eACzB,8CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQqC,aCHzBC,EAAgB,IAAIrC,EAAAA,eAC7B,2DACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAO+B,GAAWG,gBCH5BC,EAAsB,IAAIvC,EAAAA,eAGrC,yDAA0D,CAExDC,QAAS,WAAM,OAAAG,EAAAA,OAAO+B,GAAWK,YAAc,QCHtCC,EAAkB,IAAIzC,EAAAA,eAC/B,2DACA,CACIC,QAAS,W,IACCyC,EAActC,EAAAA,OAAOE,EAAAA,UAE3B,OAAOqC,EAAAA,UAAUD,EAAa,oBAAoBvB,KAC9CyB,EAAAA,UAAU,GACVC,EAAAA,IAAI,WAAM,MAAgC,WAAhCH,EAAYI,kBACtBC,EAAAA,uBACA3B,EAAAA,YCZH4B,EAAc,IAAIhD,EAAAA,eAC3B,gDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQkD,eCHzBC,EAAkB,IAAIlD,EAAAA,eAC/B,mDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQoD,kBCHzBC,EAAqB,IAAIpD,EAAAA,eAGpC,8CAA+C,CAC7CC,QAAS,W,IACCoD,EAAiBjD,EAAAA,OAAOL,GAE9B,OAAOsD,EAAUC,mBAAqBD,EAAUE,yBAA2B,QCPtEC,EAAmB,IAAIxD,EAAAA,eAChC,oDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQ0D,mBCHzBC,EAAa,IAAI1D,EAAAA,eAC1B,wDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAO+B,GAAWwB,a"}