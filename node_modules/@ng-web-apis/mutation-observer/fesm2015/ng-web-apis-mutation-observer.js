import { Observable } from 'rxjs';
import { InjectionToken, Attribute, Directive, ElementRef, EventEmitter, Inject, Output, Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MUTATION_OBSERVER_INIT = new InjectionToken('MutationObserver config');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @param {?} attribute
 * @return {?}
 */
function booleanAttribute(element, attribute) {
    return element.getAttribute(attribute) !== null || undefined;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} __0
 * @return {?}
 */
function mutationObserverInitFactory({ nativeElement, }) {
    /** @type {?} */
    const attributeFilterAttr = nativeElement.getAttribute('attributeFilter');
    /** @type {?} */
    const attributeFilter = attributeFilterAttr
        ? attributeFilterAttr.split(',').map(attr => attr.trim())
        : undefined;
    return {
        attributeFilter,
        attributeOldValue: booleanAttribute(nativeElement, 'attributeOldValue'),
        attributes: booleanAttribute(nativeElement, 'attributes'),
        characterData: booleanAttribute(nativeElement, 'characterData'),
        characterDataOldValue: booleanAttribute(nativeElement, 'characterDataOldValue'),
        childList: booleanAttribute(nativeElement, 'childList'),
        subtree: booleanAttribute(nativeElement, 'subtree'),
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = mutationObserverInitFactory;
// @dynamic
class MutationObserverDirective extends MutationObserver {
    /**
     * @param {?} __0
     * @param {?} config
     * @param {?} _1
     * @param {?} _2
     * @param {?} _3
     * @param {?} _4
     * @param {?} _5
     * @param {?} _6
     * @param {?} _7
     */
    constructor({ nativeElement }, config, _1, _2, _3, _4, _5, _6, _7) {
        super(records => {
            this.waMutationObserver.emit(records);
        });
        this.waMutationObserver = new EventEmitter();
        this.observe(nativeElement, config);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disconnect();
    }
}
MutationObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[waMutationObserver]',
                exportAs: 'MutationObserver',
                providers: [
                    {
                        provide: MUTATION_OBSERVER_INIT,
                        deps: [ElementRef],
                        useFactory: ɵ0,
                    },
                ],
            },] }
];
/** @nocollapse */
MutationObserverDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributeFilter',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributeOldValue',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributes',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['characterData',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['characterDataOldValue',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['childList',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['subtree',] }] }
];
MutationObserverDirective.propDecorators = {
    waMutationObserver: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class MutationObserverService extends Observable {
    /**
     * @param {?} __0
     * @param {?} config
     */
    constructor({ nativeElement }, config) {
        super(subscriber => {
            /** @type {?} */
            const observer = new MutationObserver(records => {
                subscriber.next(records);
            });
            observer.observe(nativeElement, config);
            return () => {
                observer.disconnect();
            };
        });
    }
}
MutationObserverService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MutationObserverService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MutationObserverModule {
}
MutationObserverModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MutationObserverDirective],
                exports: [MutationObserverDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MutationObserverDirective, MutationObserverService, MUTATION_OBSERVER_INIT, MutationObserverModule, mutationObserverInitFactory as ɵa };

//# sourceMappingURL=ng-web-apis-mutation-observer.js.map