/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Attribute, Directive, ElementRef, EventEmitter, Inject, Output, } from '@angular/core';
import { MUTATION_OBSERVER_INIT } from '../tokens/mutation-observer-init';
import { mutationObserverInitFactory } from '../utils/mutation-observer-init-factory';
var ɵ0 = mutationObserverInitFactory;
// @dynamic
var MutationObserverDirective = /** @class */ (function (_super) {
    tslib_1.__extends(MutationObserverDirective, _super);
    function MutationObserverDirective(_a, config, _1, _2, _3, _4, _5, _6, _7) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (records) {
            _this.waMutationObserver.emit(records);
        }) || this;
        _this.waMutationObserver = new EventEmitter();
        _this.observe(nativeElement, config);
        return _this;
    }
    /**
     * @return {?}
     */
    MutationObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disconnect();
    };
    MutationObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[waMutationObserver]',
                    exportAs: 'MutationObserver',
                    providers: [
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            deps: [ElementRef],
                            useFactory: ɵ0,
                        },
                    ],
                },] }
    ];
    /** @nocollapse */
    MutationObserverDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributeFilter',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributeOldValue',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributes',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['characterData',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['characterDataOldValue',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['childList',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['subtree',] }] }
    ]; };
    MutationObserverDirective.propDecorators = {
        waMutationObserver: [{ type: Output }]
    };
    return MutationObserverDirective;
}(MutationObserver));
export { MutationObserverDirective };
if (false) {
    /** @type {?} */
    MutationObserverDirective.prototype.waMutationObserver;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9tdXRhdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFFTixNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0seUNBQXlDLENBQUM7U0FVNUQsMkJBQTJCOztBQVBuRDtJQVcrQyxxREFBZ0I7SUFJM0QsbUNBQ0ksRUFBcUQsRUFDckIsTUFBNEIsRUFDOUIsRUFBVyxFQUNULEVBQVcsRUFDbEIsRUFBVyxFQUNSLEVBQVcsRUFDSCxFQUFXLEVBQ3ZCLEVBQVcsRUFDYixFQUFXO1lBUlosZ0NBQWE7UUFEdEMsWUFXSSxrQkFBTSxVQUFBLE9BQU87WUFDVCxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxTQUdMO1FBbEJRLHdCQUFrQixHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO1FBaUIvRCxLQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7SUFDeEMsQ0FBQzs7OztJQUVELCtDQUFXOzs7SUFBWDtRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDOztnQkFuQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFNBQVMsRUFBRTt3QkFDUDs0QkFDSSxPQUFPLEVBQUUsc0JBQXNCOzRCQUMvQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7NEJBQ2xCLFVBQVUsSUFBNkI7eUJBQzFDO3FCQUNKO2lCQUNKOzs7O2dCQXBCRyxVQUFVLHVCQTBCTCxNQUFNLFNBQUMsVUFBVTtnREFDakIsTUFBTSxTQUFDLHNCQUFzQjtnREFDN0IsU0FBUyxTQUFDLGlCQUFpQjtnREFDM0IsU0FBUyxTQUFDLG1CQUFtQjtnREFDN0IsU0FBUyxTQUFDLFlBQVk7Z0RBQ3RCLFNBQVMsU0FBQyxlQUFlO2dEQUN6QixTQUFTLFNBQUMsdUJBQXVCO2dEQUNqQyxTQUFTLFNBQUMsV0FBVztnREFDckIsU0FBUyxTQUFDLFNBQVM7OztxQ0FadkIsTUFBTTs7SUF3QlgsZ0NBQUM7Q0FBQSxBQXBDRCxDQVcrQyxnQkFBZ0IsR0F5QjlEO1NBekJZLHlCQUF5Qjs7O0lBQ2xDLHVEQUNtRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBdHRyaWJ1dGUsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT3V0cHV0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge01VVEFUSU9OX09CU0VSVkVSX0lOSVR9IGZyb20gJy4uL3Rva2Vucy9tdXRhdGlvbi1vYnNlcnZlci1pbml0JztcclxuaW1wb3J0IHttdXRhdGlvbk9ic2VydmVySW5pdEZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL211dGF0aW9uLW9ic2VydmVyLWluaXQtZmFjdG9yeSc7XHJcblxyXG4vLyBAZHluYW1pY1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3dhTXV0YXRpb25PYnNlcnZlcl0nLFxyXG4gICAgZXhwb3J0QXM6ICdNdXRhdGlvbk9ic2VydmVyJyxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcclxuICAgICAgICAgICAgZGVwczogW0VsZW1lbnRSZWZdLFxyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBtdXRhdGlvbk9ic2VydmVySW5pdEZhY3RvcnksXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNdXRhdGlvbk9ic2VydmVyRGlyZWN0aXZlIGV4dGVuZHMgTXV0YXRpb25PYnNlcnZlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBAT3V0cHV0KClcclxuICAgIHJlYWRvbmx5IHdhTXV0YXRpb25PYnNlcnZlciA9IG5ldyBFdmVudEVtaXR0ZXI8TXV0YXRpb25SZWNvcmRbXT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxOb2RlPixcclxuICAgICAgICBASW5qZWN0KE1VVEFUSU9OX09CU0VSVkVSX0lOSVQpIGNvbmZpZzogTXV0YXRpb25PYnNlcnZlckluaXQsXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnYXR0cmlidXRlRmlsdGVyJykgXzE6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnYXR0cmlidXRlT2xkVmFsdWUnKSBfMjogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdhdHRyaWJ1dGVzJykgXzM6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnY2hhcmFjdGVyRGF0YScpIF80OiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2NoYXJhY3RlckRhdGFPbGRWYWx1ZScpIF81OiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2NoaWxkTGlzdCcpIF82OiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3N1YnRyZWUnKSBfNzogdW5rbm93bixcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHJlY29yZHMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndhTXV0YXRpb25PYnNlcnZlci5lbWl0KHJlY29yZHMpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm9ic2VydmUobmF0aXZlRWxlbWVudCwgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxufVxyXG4iXX0=