/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Directive, ElementRef, EventEmitter, Inject, Output, } from '@angular/core';
import { MUTATION_OBSERVER_INIT } from '../tokens/mutation-observer-init';
import { mutationObserverInitFactory } from '../utils/mutation-observer-init-factory';
const ɵ0 = mutationObserverInitFactory;
// @dynamic
export class MutationObserverDirective extends MutationObserver {
    /**
     * @param {?} __0
     * @param {?} config
     * @param {?} _1
     * @param {?} _2
     * @param {?} _3
     * @param {?} _4
     * @param {?} _5
     * @param {?} _6
     * @param {?} _7
     */
    constructor({ nativeElement }, config, _1, _2, _3, _4, _5, _6, _7) {
        super(records => {
            this.waMutationObserver.emit(records);
        });
        this.waMutationObserver = new EventEmitter();
        this.observe(nativeElement, config);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disconnect();
    }
}
MutationObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[waMutationObserver]',
                exportAs: 'MutationObserver',
                providers: [
                    {
                        provide: MUTATION_OBSERVER_INIT,
                        deps: [ElementRef],
                        useFactory: ɵ0,
                    },
                ],
            },] }
];
/** @nocollapse */
MutationObserverDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributeFilter',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributeOldValue',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['attributes',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['characterData',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['characterDataOldValue',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['childList',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['subtree',] }] }
];
MutationObserverDirective.propDecorators = {
    waMutationObserver: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MutationObserverDirective.prototype.waMutationObserver;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9tdXRhdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUVOLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSx5Q0FBeUMsQ0FBQztXQVU1RCwyQkFBMkI7O0FBSW5ELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxnQkFBZ0I7Ozs7Ozs7Ozs7OztJQUkzRCxZQUN3QixFQUFDLGFBQWEsRUFBbUIsRUFDckIsTUFBNEIsRUFDOUIsRUFBVyxFQUNULEVBQVcsRUFDbEIsRUFBVyxFQUNSLEVBQVcsRUFDSCxFQUFXLEVBQ3ZCLEVBQVcsRUFDYixFQUFXO1FBRWpDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFmRSx1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQWlCL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7O1lBbkNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixTQUFTLEVBQUU7b0JBQ1A7d0JBQ0ksT0FBTyxFQUFFLHNCQUFzQjt3QkFDL0IsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO3dCQUNsQixVQUFVLElBQTZCO3FCQUMxQztpQkFDSjthQUNKOzs7O1lBcEJHLFVBQVUsdUJBMEJMLE1BQU0sU0FBQyxVQUFVOzRDQUNqQixNQUFNLFNBQUMsc0JBQXNCOzRDQUM3QixTQUFTLFNBQUMsaUJBQWlCOzRDQUMzQixTQUFTLFNBQUMsbUJBQW1COzRDQUM3QixTQUFTLFNBQUMsWUFBWTs0Q0FDdEIsU0FBUyxTQUFDLGVBQWU7NENBQ3pCLFNBQVMsU0FBQyx1QkFBdUI7NENBQ2pDLFNBQVMsU0FBQyxXQUFXOzRDQUNyQixTQUFTLFNBQUMsU0FBUzs7O2lDQVp2QixNQUFNOzs7O0lBQVAsdURBQ21FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEF0dHJpYnV0ZSxcclxuICAgIERpcmVjdGl2ZSxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBFdmVudEVtaXR0ZXIsXHJcbiAgICBJbmplY3QsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBPdXRwdXQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TVVUQVRJT05fT0JTRVJWRVJfSU5JVH0gZnJvbSAnLi4vdG9rZW5zL211dGF0aW9uLW9ic2VydmVyLWluaXQnO1xyXG5pbXBvcnQge211dGF0aW9uT2JzZXJ2ZXJJbml0RmFjdG9yeX0gZnJvbSAnLi4vdXRpbHMvbXV0YXRpb24tb2JzZXJ2ZXItaW5pdC1mYWN0b3J5JztcclxuXHJcbi8vIEBkeW5hbWljXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbd2FNdXRhdGlvbk9ic2VydmVyXScsXHJcbiAgICBleHBvcnRBczogJ011dGF0aW9uT2JzZXJ2ZXInLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBNVVRBVElPTl9PQlNFUlZFUl9JTklULFxyXG4gICAgICAgICAgICBkZXBzOiBbRWxlbWVudFJlZl0sXHJcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IG11dGF0aW9uT2JzZXJ2ZXJJbml0RmFjdG9yeSxcclxuICAgICAgICB9LFxyXG4gICAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE11dGF0aW9uT2JzZXJ2ZXJEaXJlY3RpdmUgZXh0ZW5kcyBNdXRhdGlvbk9ic2VydmVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIEBPdXRwdXQoKVxyXG4gICAgcmVhZG9ubHkgd2FNdXRhdGlvbk9ic2VydmVyID0gbmV3IEV2ZW50RW1pdHRlcjxNdXRhdGlvblJlY29yZFtdPigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPE5vZGU+LFxyXG4gICAgICAgIEBJbmplY3QoTVVUQVRJT05fT0JTRVJWRVJfSU5JVCkgY29uZmlnOiBNdXRhdGlvbk9ic2VydmVySW5pdCxcclxuICAgICAgICBAQXR0cmlidXRlKCdhdHRyaWJ1dGVGaWx0ZXInKSBfMTogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdhdHRyaWJ1dGVPbGRWYWx1ZScpIF8yOiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2F0dHJpYnV0ZXMnKSBfMzogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdjaGFyYWN0ZXJEYXRhJykgXzQ6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnY2hhcmFjdGVyRGF0YU9sZFZhbHVlJykgXzU6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnY2hpbGRMaXN0JykgXzY6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnc3VidHJlZScpIF83OiB1bmtub3duLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIocmVjb3JkcyA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2FNdXRhdGlvbk9ic2VydmVyLmVtaXQocmVjb3Jkcyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZShuYXRpdmVFbGVtZW50LCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==