import { __extends } from 'tslib';
import { Observable } from 'rxjs';
import { InjectionToken, Attribute, Directive, ElementRef, EventEmitter, Inject, Output, Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MUTATION_OBSERVER_INIT = new InjectionToken('MutationObserver config');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @param {?} attribute
 * @return {?}
 */
function booleanAttribute(element, attribute) {
    return element.getAttribute(attribute) !== null || undefined;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} __0
 * @return {?}
 */
function mutationObserverInitFactory(_a) {
    var nativeElement = _a.nativeElement;
    /** @type {?} */
    var attributeFilterAttr = nativeElement.getAttribute('attributeFilter');
    /** @type {?} */
    var attributeFilter = attributeFilterAttr
        ? attributeFilterAttr.split(',').map(function (attr) { return attr.trim(); })
        : undefined;
    return {
        attributeFilter: attributeFilter,
        attributeOldValue: booleanAttribute(nativeElement, 'attributeOldValue'),
        attributes: booleanAttribute(nativeElement, 'attributes'),
        characterData: booleanAttribute(nativeElement, 'characterData'),
        characterDataOldValue: booleanAttribute(nativeElement, 'characterDataOldValue'),
        childList: booleanAttribute(nativeElement, 'childList'),
        subtree: booleanAttribute(nativeElement, 'subtree'),
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = mutationObserverInitFactory;
// @dynamic
var MutationObserverDirective = /** @class */ (function (_super) {
    __extends(MutationObserverDirective, _super);
    function MutationObserverDirective(_a, config, _1, _2, _3, _4, _5, _6, _7) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (records) {
            _this.waMutationObserver.emit(records);
        }) || this;
        _this.waMutationObserver = new EventEmitter();
        _this.observe(nativeElement, config);
        return _this;
    }
    /**
     * @return {?}
     */
    MutationObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disconnect();
    };
    MutationObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[waMutationObserver]',
                    exportAs: 'MutationObserver',
                    providers: [
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            deps: [ElementRef],
                            useFactory: ɵ0,
                        },
                    ],
                },] }
    ];
    /** @nocollapse */
    MutationObserverDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributeFilter',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributeOldValue',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['attributes',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['characterData',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['characterDataOldValue',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['childList',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['subtree',] }] }
    ]; };
    MutationObserverDirective.propDecorators = {
        waMutationObserver: [{ type: Output }]
    };
    return MutationObserverDirective;
}(MutationObserver));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var MutationObserverService = /** @class */ (function (_super) {
    __extends(MutationObserverService, _super);
    function MutationObserverService(_a, config) {
        var nativeElement = _a.nativeElement;
        return _super.call(this, function (subscriber) {
            /** @type {?} */
            var observer = new MutationObserver(function (records) {
                subscriber.next(records);
            });
            observer.observe(nativeElement, config);
            return function () {
                observer.disconnect();
            };
        }) || this;
    }
    MutationObserverService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MutationObserverService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MUTATION_OBSERVER_INIT,] }] }
    ]; };
    return MutationObserverService;
}(Observable));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MutationObserverModule = /** @class */ (function () {
    function MutationObserverModule() {
    }
    MutationObserverModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [MutationObserverDirective],
                    exports: [MutationObserverDirective],
                },] }
    ];
    return MutationObserverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MutationObserverDirective, MutationObserverService, MUTATION_OBSERVER_INIT, MutationObserverModule, mutationObserverInitFactory as ɵa };

//# sourceMappingURL=ng-web-apis-mutation-observer.js.map