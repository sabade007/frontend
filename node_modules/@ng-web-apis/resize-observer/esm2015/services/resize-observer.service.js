/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { RESIZE_OPTION_BOX } from '../tokens/resize-option-box';
import { RESIZE_OBSERVER_SUPPORT } from '../tokens/support';
// @dynamic
export class ResizeObserverService extends Observable {
    /**
     * @param {?} __0
     * @param {?} ngZone
     * @param {?} support
     * @param {?} box
     */
    constructor({ nativeElement }, ngZone, support, box) {
        /** @type {?} */
        let observer;
        super(subscriber => {
            if (!support) {
                subscriber.error('ResizeObserver is not supported in your browser');
                return;
            }
            observer = new ResizeObserver(entries => {
                ngZone.run(() => {
                    subscriber.next(entries);
                });
            });
            observer.observe(nativeElement, { box });
            return () => {
                observer.disconnect();
            };
        });
        return this.pipe(share());
    }
}
ResizeObserverService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ResizeObserverService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmctd2ViLWFwaXMvcmVzaXplLW9ic2VydmVyLyIsInNvdXJjZXMiOlsic2VydmljZXMvcmVzaXplLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7O0FBSTFELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUUxQzs7Ozs7OztJQUNHLFlBQ3dCLEVBQUMsYUFBYSxFQUFzQixFQUN4QyxNQUFjLEVBQ0csT0FBZ0IsRUFDdEIsR0FBaUM7O1lBRXhELFFBQXdCO1FBRTVCLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1YsVUFBVSxDQUFDLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO2dCQUVwRSxPQUFPO2FBQ1Y7WUFFRCxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNaLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDSCxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7WUFFdkMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1IsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzFCLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7O1lBaENKLFVBQVU7Ozs7WUFQSCxVQUFVLHVCQVlULE1BQU0sU0FBQyxVQUFVO1lBWmMsTUFBTSx1QkFhckMsTUFBTSxTQUFDLE1BQU07MENBQ2IsTUFBTSxTQUFDLHVCQUF1Qjs0Q0FDOUIsTUFBTSxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7c2hhcmV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7UkVTSVpFX09QVElPTl9CT1h9IGZyb20gJy4uL3Rva2Vucy9yZXNpemUtb3B0aW9uLWJveCc7XG5pbXBvcnQge1JFU0laRV9PQlNFUlZFUl9TVVBQT1JUfSBmcm9tICcuLi90b2tlbnMvc3VwcG9ydCc7XG5cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxcbiAgICBSZWFkb25seUFycmF5PFJlc2l6ZU9ic2VydmVyRW50cnk+XG4+IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChSRVNJWkVfT0JTRVJWRVJfU1VQUE9SVCkgc3VwcG9ydDogYm9vbGVhbixcbiAgICAgICAgQEluamVjdChSRVNJWkVfT1BUSU9OX0JPWCkgYm94OiBSZXNpemVPYnNlcnZlck9wdGlvbnNbJ2JveCddLFxuICAgICkge1xuICAgICAgICBsZXQgb2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xuXG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcignUmVzaXplT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXInKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICAgICAgICAgICAgbmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChlbnRyaWVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShuYXRpdmVFbGVtZW50LCB7Ym94fSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShzaGFyZSgpKTtcbiAgICB9XG59XG4iXX0=