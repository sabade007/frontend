(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@ng-web-apis/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@ng-web-apis/resize-observer', ['exports', 'rxjs', 'rxjs/operators', '@ng-web-apis/common', '@angular/core'], factory) :
    (factory((global['ng-web-apis'] = global['ng-web-apis'] || {}, global['ng-web-apis']['resize-observer'] = {}),global.rxjs,global.rxjs.operators,global.common,global.ng.core));
}(this, (function (exports,rxjs,operators,common,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var RESIZE_OPTION_BOX_DEFAULT = 'content-box';
    /** @type {?} */
    var RESIZE_OPTION_BOX = new core.InjectionToken('Box model to observe changes', {
        providedIn: 'root',
        factory: function () { return RESIZE_OPTION_BOX_DEFAULT; },
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var RESIZE_OBSERVER_SUPPORT = new core.InjectionToken('Resize Observer API support', {
        providedIn: 'root',
        factory: function () { return !!core.inject(common.WINDOW).ResizeObserver; },
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var ResizeObserverService = /** @class */ (function (_super) {
        __extends(ResizeObserverService, _super);
        function ResizeObserverService(_a, ngZone, support, box) {
            var nativeElement = _a.nativeElement;
            var _this = this;
            /** @type {?} */
            var observer;
            _this = _super.call(this, function (subscriber) {
                if (!support) {
                    subscriber.error('ResizeObserver is not supported in your browser');
                    return;
                }
                observer = new ResizeObserver(function (entries) {
                    ngZone.run(function () {
                        subscriber.next(entries);
                    });
                });
                observer.observe(nativeElement, { box: box });
                return function () {
                    observer.disconnect();
                };
            }) || this;
            return _this.pipe(operators.share());
        }
        ResizeObserverService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ResizeObserverService.ctorParameters = function () {
            return [
                { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },
                { type: core.NgZone, decorators: [{ type: core.Inject, args: [core.NgZone,] }] },
                { type: Boolean, decorators: [{ type: core.Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [RESIZE_OPTION_BOX,] }] }
            ];
        };
        return ResizeObserverService;
    }(rxjs.Observable));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
    /**
     * @param {?} __0
     * @return {?}
     */
    function boxExtractor(_a) {
        var nativeElement = _a.nativeElement;
        /** @type {?} */
        var attribute = ( /** @type {?} */(nativeElement.getAttribute('waResizeBox')));
        return boxFactory(attribute);
    }
    /**
     * @param {?} box
     * @return {?}
     */
    function boxFactory(box) {
        return box || RESIZE_OPTION_BOX_DEFAULT;
    }
    // @dynamic
    var ResizeObserverDirective = /** @class */ (function () {
        function ResizeObserverDirective(entries$, _box) {
            this.waResizeObserver = entries$;
        }
        ResizeObserverDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[waResizeObserver]',
                        providers: [
                            ResizeObserverService,
                            {
                                provide: RESIZE_OPTION_BOX,
                                deps: [core.ElementRef],
                                useFactory: boxExtractor,
                            },
                        ],
                    },] }
        ];
        /** @nocollapse */
        ResizeObserverDirective.ctorParameters = function () {
            return [
                { type: rxjs.Observable, decorators: [{ type: core.Inject, args: [ResizeObserverService,] }] },
                { type: undefined, decorators: [{ type: core.Attribute, args: ['waResizeBox',] }] }
            ];
        };
        ResizeObserverDirective.propDecorators = {
            waResizeObserver: [{ type: core.Output }]
        };
        return ResizeObserverDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResizeObserverModule = /** @class */ (function () {
        function ResizeObserverModule() {
        }
        ResizeObserverModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ResizeObserverDirective],
                        exports: [ResizeObserverDirective],
                    },] }
        ];
        return ResizeObserverModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.boxExtractor = boxExtractor;
    exports.boxFactory = boxFactory;
    exports.ResizeObserverDirective = ResizeObserverDirective;
    exports.ResizeObserverModule = ResizeObserverModule;
    exports.ResizeObserverService = ResizeObserverService;
    exports.RESIZE_OPTION_BOX_DEFAULT = RESIZE_OPTION_BOX_DEFAULT;
    exports.RESIZE_OPTION_BOX = RESIZE_OPTION_BOX;
    exports.RESIZE_OBSERVER_SUPPORT = RESIZE_OBSERVER_SUPPORT;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-web-apis-resize-observer.umd.js.map