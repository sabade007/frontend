import { __extends } from 'tslib';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { WINDOW } from '@ng-web-apis/common';
import { InjectionToken, inject, ElementRef, Inject, Injectable, NgZone, Attribute, Directive, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var RESIZE_OPTION_BOX_DEFAULT = 'content-box';
/** @type {?} */
var RESIZE_OPTION_BOX = new InjectionToken('Box model to observe changes', {
    providedIn: 'root',
    factory: function () { return RESIZE_OPTION_BOX_DEFAULT; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var RESIZE_OBSERVER_SUPPORT = new InjectionToken('Resize Observer API support', {
    providedIn: 'root',
    factory: function () { return !!inject(WINDOW).ResizeObserver; },
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var ResizeObserverService = /** @class */ (function (_super) {
    __extends(ResizeObserverService, _super);
    function ResizeObserverService(_a, ngZone, support, box) {
        var nativeElement = _a.nativeElement;
        var _this = this;
        /** @type {?} */
        var observer;
        _this = _super.call(this, function (subscriber) {
            if (!support) {
                subscriber.error('ResizeObserver is not supported in your browser');
                return;
            }
            observer = new ResizeObserver(function (entries) {
                ngZone.run(function () {
                    subscriber.next(entries);
                });
            });
            observer.observe(nativeElement, { box: box });
            return function () {
                observer.disconnect();
            };
        }) || this;
        return _this.pipe(share());
    }
    ResizeObserverService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ResizeObserverService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] }
    ]; };
    return ResizeObserverService;
}(Observable));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
/**
 * @param {?} __0
 * @return {?}
 */
function boxExtractor(_a) {
    var nativeElement = _a.nativeElement;
    /** @type {?} */
    var attribute = (/** @type {?} */ (nativeElement.getAttribute('waResizeBox')));
    return boxFactory(attribute);
}
/**
 * @param {?} box
 * @return {?}
 */
function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
// @dynamic
var ResizeObserverDirective = /** @class */ (function () {
    function ResizeObserverDirective(entries$, _box) {
        this.waResizeObserver = entries$;
    }
    ResizeObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[waResizeObserver]',
                    providers: [
                        ResizeObserverService,
                        {
                            provide: RESIZE_OPTION_BOX,
                            deps: [ElementRef],
                            useFactory: boxExtractor,
                        },
                    ],
                },] }
    ];
    /** @nocollapse */
    ResizeObserverDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [ResizeObserverService,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waResizeBox',] }] }
    ]; };
    ResizeObserverDirective.propDecorators = {
        waResizeObserver: [{ type: Output }]
    };
    return ResizeObserverDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResizeObserverModule = /** @class */ (function () {
    function ResizeObserverModule() {
    }
    ResizeObserverModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ResizeObserverDirective],
                    exports: [ResizeObserverDirective],
                },] }
    ];
    return ResizeObserverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { boxExtractor, boxFactory, ResizeObserverDirective, ResizeObserverModule, ResizeObserverService, RESIZE_OPTION_BOX_DEFAULT, RESIZE_OPTION_BOX, RESIZE_OBSERVER_SUPPORT };

//# sourceMappingURL=ng-web-apis-resize-observer.js.map