/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { RESIZE_OPTION_BOX } from '../tokens/resize-option-box';
import { RESIZE_OBSERVER_SUPPORT } from '../tokens/support';
// @dynamic
var ResizeObserverService = /** @class */ (function (_super) {
    tslib_1.__extends(ResizeObserverService, _super);
    function ResizeObserverService(_a, ngZone, support, box) {
        var nativeElement = _a.nativeElement;
        var _this = this;
        /** @type {?} */
        var observer;
        _this = _super.call(this, function (subscriber) {
            if (!support) {
                subscriber.error('ResizeObserver is not supported in your browser');
                return;
            }
            observer = new ResizeObserver(function (entries) {
                ngZone.run(function () {
                    subscriber.next(entries);
                });
            });
            observer.observe(nativeElement, { box: box });
            return function () {
                observer.disconnect();
            };
        }) || this;
        return _this.pipe(share());
    }
    ResizeObserverService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ResizeObserverService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] }
    ]; };
    return ResizeObserverService;
}(Observable));
export { ResizeObserverService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmctd2ViLWFwaXMvcmVzaXplLW9ic2VydmVyLyIsInNvdXJjZXMiOlsic2VydmljZXMvcmVzaXplLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDOztBQUcxRDtJQUMyQyxpREFFMUM7SUFDRywrQkFDSSxFQUF3RCxFQUN4QyxNQUFjLEVBQ0csT0FBZ0IsRUFDdEIsR0FBaUM7WUFIdkMsZ0NBQWE7UUFEdEMsaUJBNEJDOztZQXRCTyxRQUF3QjtRQUU1QixRQUFBLGtCQUFNLFVBQUEsVUFBVTtZQUNaLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1YsVUFBVSxDQUFDLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO2dCQUVwRSxPQUFPO2FBQ1Y7WUFFRCxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsVUFBQSxPQUFPO2dCQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUNQLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDSCxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFDLEdBQUcsS0FBQSxFQUFDLENBQUMsQ0FBQztZQUV2QyxPQUFPO2dCQUNILFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsU0FBQztRQUVILE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7O2dCQWhDSixVQUFVOzs7O2dCQVBILFVBQVUsdUJBWVQsTUFBTSxTQUFDLFVBQVU7Z0JBWmMsTUFBTSx1QkFhckMsTUFBTSxTQUFDLE1BQU07OENBQ2IsTUFBTSxTQUFDLHVCQUF1QjtnREFDOUIsTUFBTSxTQUFDLGlCQUFpQjs7SUF5QmpDLDRCQUFDO0NBQUEsQUFqQ0QsQ0FDMkMsVUFBVSxHQWdDcEQ7U0FoQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtSRVNJWkVfT1BUSU9OX0JPWH0gZnJvbSAnLi4vdG9rZW5zL3Jlc2l6ZS1vcHRpb24tYm94JztcbmltcG9ydCB7UkVTSVpFX09CU0VSVkVSX1NVUFBPUlR9IGZyb20gJy4uL3Rva2Vucy9zdXBwb3J0JztcblxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZXNpemVPYnNlcnZlclNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFxuICAgIFJlYWRvbmx5QXJyYXk8UmVzaXplT2JzZXJ2ZXJFbnRyeT5cbj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KFJFU0laRV9PQlNFUlZFUl9TVVBQT1JUKSBzdXBwb3J0OiBib29sZWFuLFxuICAgICAgICBASW5qZWN0KFJFU0laRV9PUFRJT05fQk9YKSBib3g6IFJlc2l6ZU9ic2VydmVyT3B0aW9uc1snYm94J10sXG4gICAgKSB7XG4gICAgICAgIGxldCBvYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XG5cbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB7XG4gICAgICAgICAgICBpZiAoIXN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKCdSZXNpemVPYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgICAgICAgICBuZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGVudHJpZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQsIHtib3h9KTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5waXBlKHNoYXJlKCkpO1xuICAgIH1cbn1cbiJdfQ==