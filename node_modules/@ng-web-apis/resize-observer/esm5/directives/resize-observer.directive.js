/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Directive, ElementRef, Inject, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { ResizeObserverService } from '../services/resize-observer.service';
import { RESIZE_OPTION_BOX, RESIZE_OPTION_BOX_DEFAULT } from '../tokens/resize-option-box';
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
/**
 * @param {?} __0
 * @return {?}
 */
export function boxExtractor(_a) {
    var nativeElement = _a.nativeElement;
    /** @type {?} */
    var attribute = (/** @type {?} */ (nativeElement.getAttribute('waResizeBox')));
    return boxFactory(attribute);
}
/**
 * @param {?} box
 * @return {?}
 */
export function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
// @dynamic
var ResizeObserverDirective = /** @class */ (function () {
    function ResizeObserverDirective(entries$, _box) {
        this.waResizeObserver = entries$;
    }
    ResizeObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[waResizeObserver]',
                    providers: [
                        ResizeObserverService,
                        {
                            provide: RESIZE_OPTION_BOX,
                            deps: [ElementRef],
                            useFactory: boxExtractor,
                        },
                    ],
                },] }
    ];
    /** @nocollapse */
    ResizeObserverDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [ResizeObserverService,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waResizeBox',] }] }
    ]; };
    ResizeObserverDirective.propDecorators = {
        waResizeObserver: [{ type: Output }]
    };
    return ResizeObserverDirective;
}());
export { ResizeObserverDirective };
if (false) {
    /** @type {?} */
    ResizeObserverDirective.prototype.waResizeObserver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9yZXNpemUtb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3Jlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7Ozs7OztBQUd6RixNQUFNLFVBQVUsWUFBWSxDQUFDLEVBRVA7UUFEbEIsZ0NBQWE7O1FBRVAsU0FBUyxHQUFHLG1CQUFBLGFBQWEsQ0FBQyxZQUFZLENBQ3hDLGFBQWEsQ0FDaEIsRUFBZ0M7SUFFakMsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUN0QixHQUF3QztJQUV4QyxPQUFPLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQztBQUM1QyxDQUFDOztBQUdEO0lBZUksaUNBRUksUUFBMkMsRUFDakIsSUFBa0M7UUFFNUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztJQUNyQyxDQUFDOztnQkFyQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFNBQVMsRUFBRTt3QkFDUCxxQkFBcUI7d0JBQ3JCOzRCQUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzs0QkFDbEIsVUFBVSxFQUFFLFlBQVk7eUJBQzNCO3FCQUNKO2lCQUNKOzs7O2dCQWhDTyxVQUFVLHVCQXNDVCxNQUFNLFNBQUMscUJBQXFCO2dEQUU1QixTQUFTLFNBQUMsYUFBYTs7O21DQU4zQixNQUFNOztJQVVYLDhCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FYWSx1QkFBdUI7OztJQUNoQyxtREFDNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F0dHJpYnV0ZSwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtSZXNpemVPYnNlcnZlclNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL3Jlc2l6ZS1vYnNlcnZlci5zZXJ2aWNlJztcbmltcG9ydCB7UkVTSVpFX09QVElPTl9CT1gsIFJFU0laRV9PUFRJT05fQk9YX0RFRkFVTFR9IGZyb20gJy4uL3Rva2Vucy9yZXNpemUtb3B0aW9uLWJveCc7XG5cbi8vIFRPRE8gc3dpdGNoIHRvIEF0dHJpYnV0ZSBvbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzM2NDc5IGlzIGZpeGVkXG5leHBvcnQgZnVuY3Rpb24gYm94RXh0cmFjdG9yKHtcbiAgICBuYXRpdmVFbGVtZW50LFxufTogRWxlbWVudFJlZjxFbGVtZW50Pik6IFJlc2l6ZU9ic2VydmVyT3B0aW9uc1snYm94J10ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgICAnd2FSZXNpemVCb3gnLFxuICAgICkgYXMgUmVzaXplT2JzZXJ2ZXJPcHRpb25zWydib3gnXTtcblxuICAgIHJldHVybiBib3hGYWN0b3J5KGF0dHJpYnV0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3hGYWN0b3J5KFxuICAgIGJveDogUmVzaXplT2JzZXJ2ZXJPcHRpb25zWydib3gnXSB8IG51bGwsXG4pOiBSZXNpemVPYnNlcnZlck9wdGlvbnNbJ2JveCddIHtcbiAgICByZXR1cm4gYm94IHx8IFJFU0laRV9PUFRJT05fQk9YX0RFRkFVTFQ7XG59XG5cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t3YVJlc2l6ZU9ic2VydmVyXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFJlc2l6ZU9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogUkVTSVpFX09QVElPTl9CT1gsXG4gICAgICAgICAgICBkZXBzOiBbRWxlbWVudFJlZl0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBib3hFeHRyYWN0b3IsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUge1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHdhUmVzaXplT2JzZXJ2ZXI6IE9ic2VydmFibGU8UmVzaXplT2JzZXJ2ZXJFbnRyeVtdPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFJlc2l6ZU9ic2VydmVyU2VydmljZSlcbiAgICAgICAgZW50cmllcyQ6IE9ic2VydmFibGU8UmVzaXplT2JzZXJ2ZXJFbnRyeVtdPixcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FSZXNpemVCb3gnKSBfYm94OiBSZXNpemVPYnNlcnZlck9wdGlvbnNbJ2JveCddLFxuICAgICkge1xuICAgICAgICB0aGlzLndhUmVzaXplT2JzZXJ2ZXIgPSBlbnRyaWVzJDtcbiAgICB9XG59XG4iXX0=