/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
var IntersectionObserverDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IntersectionObserverDirective, _super);
    function IntersectionObserverDirective(root, rootMargin, threshold) {
        var _this = _super.call(this, function (entries) {
            _this.callbacks.forEach(function (callback, element) {
                /** @type {?} */
                var filtered = entries.filter(function (_a) {
                    var target = _a.target;
                    return target === element;
                });
                return filtered.length && callback(filtered, _this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        }) || this;
        _this.callbacks = new Map();
        return _this;
    }
    /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    IntersectionObserverDirective.prototype.observe = /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    function (target, callback) {
        if (callback === void 0) { callback = function () { }; }
        _super.prototype.observe.call(this, target);
        this.callbacks.set(target, callback);
    };
    /**
     * @param {?} target
     * @return {?}
     */
    IntersectionObserverDirective.prototype.unobserve = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        _super.prototype.unobserve.call(this, target);
        this.callbacks.delete(target);
    };
    /**
     * @return {?}
     */
    IntersectionObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disconnect();
    };
    IntersectionObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[waIntersectionObserver]',
                    exportAs: 'IntersectionObserver',
                },] }
    ];
    /** @nocollapse */
    IntersectionObserverDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionRootMargin',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionThreshold',] }] }
    ]; };
    return IntersectionObserverDirective;
}(IntersectionObserver));
export { IntersectionObserverDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntersectionObserverDirective.prototype.callbacks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFNBQVMsRUFFVCxNQUFNLEVBRU4sUUFBUSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRTVEO0lBSW1ELHlEQUFvQjtJQUluRSx1Q0FDMkMsSUFBZ0MsRUFDaEMsVUFBeUIsRUFDMUIsU0FBd0I7UUFIbEUsWUFLSSxrQkFDSSxVQUFBLE9BQU87WUFDSCxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVEsRUFBRSxPQUFPOztvQkFDL0IsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxFQUFRO3dCQUFQLGtCQUFNO29CQUFNLE9BQUEsTUFBTSxLQUFLLE9BQU87Z0JBQWxCLENBQWtCLENBQUM7Z0JBRWpFLE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxFQUNEO1lBQ0ksSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYTtZQUNoQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1lBQ3pDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7U0FDekMsQ0FDSixTQUNKO1FBckJnQixlQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXlDLENBQUM7O0lBcUI5RSxDQUFDOzs7Ozs7SUFFRCwrQ0FBTzs7Ozs7SUFBUCxVQUFRLE1BQWUsRUFBRSxRQUFpRDtRQUFqRCx5QkFBQSxFQUFBLHlCQUFnRCxDQUFDO1FBQ3RFLGlCQUFNLE9BQU8sWUFBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7SUFFRCxpREFBUzs7OztJQUFULFVBQVUsTUFBZTtRQUNyQixpQkFBTSxTQUFTLFlBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELG1EQUFXOzs7SUFBWDtRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDOztnQkF6Q0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ25DOzs7O2dEQU1RLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCO2dEQUNwQyxTQUFTLFNBQUMsMEJBQTBCO2dEQUNwQyxTQUFTLFNBQUMseUJBQXlCOztJQStCNUMsb0NBQUM7Q0FBQSxBQTFDRCxDQUltRCxvQkFBb0IsR0FzQ3RFO1NBdENZLDZCQUE2Qjs7Ozs7O0lBRXRDLGtEQUE4RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBdHRyaWJ1dGUsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT3B0aW9uYWwsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1JPT1R9IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tcm9vdCc7XHJcbmltcG9ydCB7cm9vdE1hcmdpbkZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3Jvb3QtbWFyZ2luLWZhY3RvcnknO1xyXG5pbXBvcnQge3RocmVzaG9sZEZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3RocmVzaG9sZC1mYWN0b3J5JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbd2FJbnRlcnNlY3Rpb25PYnNlcnZlcl0nLFxyXG4gICAgZXhwb3J0QXM6ICdJbnRlcnNlY3Rpb25PYnNlcnZlcicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyc2VjdGlvbk9ic2VydmVyXHJcbiAgICBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrcyA9IG5ldyBNYXA8RWxlbWVudCwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjaz4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KElOVEVSU0VDVElPTl9ST09UKSByb290OiBFbGVtZW50UmVmPEVsZW1lbnQ+IHwgbnVsbCxcclxuICAgICAgICBAQXR0cmlidXRlKCd3YUludGVyc2VjdGlvblJvb3RNYXJnaW4nKSByb290TWFyZ2luOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3dhSW50ZXJzZWN0aW9uVGhyZXNob2xkJykgdGhyZXNob2xkOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoXHJcbiAgICAgICAgICAgIGVudHJpZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2ssIGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGVudHJpZXMuZmlsdGVyKCh7dGFyZ2V0fSkgPT4gdGFyZ2V0ID09PSBlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkLmxlbmd0aCAmJiBjYWxsYmFjayhmaWx0ZXJlZCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcm9vdDogcm9vdCAmJiByb290Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luRmFjdG9yeShyb290TWFyZ2luKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogdGhyZXNob2xkRmFjdG9yeSh0aHJlc2hvbGQpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb2JzZXJ2ZSh0YXJnZXQ6IEVsZW1lbnQsIGNhbGxiYWNrOiBJbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrID0gKCkgPT4ge30pIHtcclxuICAgICAgICBzdXBlci5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3Muc2V0KHRhcmdldCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHVub2JzZXJ2ZSh0YXJnZXQ6IEVsZW1lbnQpIHtcclxuICAgICAgICBzdXBlci51bm9ic2VydmUodGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxufVxyXG4iXX0=