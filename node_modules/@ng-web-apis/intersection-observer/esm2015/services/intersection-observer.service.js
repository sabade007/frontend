/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { INTERSECTION_ROOT_MARGIN } from '../tokens/intersection-root-margin';
import { INTERSECTION_THRESHOLD } from '../tokens/intersection-threshold';
import { INTERSECTION_OBSERVER_SUPPORT } from '../tokens/support';
export class IntersectionObserverService extends Observable {
    /**
     * @param {?} __0
     * @param {?} support
     * @param {?} rootMargin
     * @param {?} threshold
     * @param {?} root
     */
    constructor({ nativeElement }, support, rootMargin, threshold, root) {
        super(subscriber => {
            if (!support) {
                subscriber.error('IntersectionObserver is not supported in your browser');
                return;
            }
            /** @type {?} */
            const observer = new IntersectionObserver(entries => {
                subscriber.next(entries);
            }, {
                root: root && root.nativeElement,
                rootMargin,
                threshold,
            });
            observer.observe(nativeElement);
            return () => {
                observer.disconnect();
            };
        });
        return this.pipe(share());
    }
}
IntersectionObserverService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IntersectionObserverService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [INTERSECTION_OBSERVER_SUPPORT,] }] },
    { type: String, decorators: [{ type: Inject, args: [INTERSECTION_ROOT_MARGIN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [INTERSECTION_THRESHOLD,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmctd2ViLWFwaXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDNUUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFDLDZCQUE2QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHaEUsTUFBTSxPQUFPLDJCQUE0QixTQUFRLFVBQXVDOzs7Ozs7OztJQUNwRixZQUN3QixFQUFDLGFBQWEsRUFBc0IsRUFDakIsT0FBZ0IsRUFDckIsVUFBa0IsRUFDcEIsU0FBNEIsRUFDckIsSUFBZ0M7UUFFdkUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDVixVQUFVLENBQUMsS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7Z0JBRTFFLE9BQU87YUFDVjs7a0JBRUssUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQ3JDLE9BQU8sQ0FBQyxFQUFFO2dCQUNOLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxFQUNEO2dCQUNJLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWE7Z0JBQ2hDLFVBQVU7Z0JBQ1YsU0FBUzthQUNaLENBQ0o7WUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRWhDLE9BQU8sR0FBRyxFQUFFO2dCQUNSLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQW5DSixVQUFVOzs7O1lBUkgsVUFBVSx1QkFXVCxNQUFNLFNBQUMsVUFBVTswQ0FDakIsTUFBTSxTQUFDLDZCQUE2Qjt5Q0FDcEMsTUFBTSxTQUFDLHdCQUF3Qjs0Q0FDL0IsTUFBTSxTQUFDLHNCQUFzQjs0Q0FDN0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge3NoYXJlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1JPT1R9IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tcm9vdCc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1JPT1RfTUFSR0lOfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXJvb3QtbWFyZ2luJztcclxuaW1wb3J0IHtJTlRFUlNFQ1RJT05fVEhSRVNIT0xEfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXRocmVzaG9sZCc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX09CU0VSVkVSX1NVUFBPUlR9IGZyb20gJy4uL3Rva2Vucy9zdXBwb3J0JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyU2VydmljZSBleHRlbmRzIE9ic2VydmFibGU8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdPiB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxFbGVtZW50PixcclxuICAgICAgICBASW5qZWN0KElOVEVSU0VDVElPTl9PQlNFUlZFUl9TVVBQT1JUKSBzdXBwb3J0OiBib29sZWFuLFxyXG4gICAgICAgIEBJbmplY3QoSU5URVJTRUNUSU9OX1JPT1RfTUFSR0lOKSByb290TWFyZ2luOiBzdHJpbmcsXHJcbiAgICAgICAgQEluamVjdChJTlRFUlNFQ1RJT05fVEhSRVNIT0xEKSB0aHJlc2hvbGQ6IG51bWJlciB8IG51bWJlcltdLFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoSU5URVJTRUNUSU9OX1JPT1QpIHJvb3Q6IEVsZW1lbnRSZWY8RWxlbWVudD4gfCBudWxsLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICghc3VwcG9ydCkge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcignSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXInKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxyXG4gICAgICAgICAgICAgICAgZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGVudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByb290OiByb290ICYmIHJvb3QubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShzaGFyZSgpKTtcclxuICAgIH1cclxufVxyXG4iXX0=