/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
export class IntersectionObserverDirective extends IntersectionObserver {
    /**
     * @param {?} root
     * @param {?} rootMargin
     * @param {?} threshold
     */
    constructor(root, rootMargin, threshold) {
        super(entries => {
            this.callbacks.forEach((callback, element) => {
                /** @type {?} */
                const filtered = entries.filter(({ target }) => target === element);
                return filtered.length && callback(filtered, this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        });
        this.callbacks = new Map();
    }
    /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    observe(target, callback = () => { }) {
        super.observe(target);
        this.callbacks.set(target, callback);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    unobserve(target) {
        super.unobserve(target);
        this.callbacks.delete(target);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disconnect();
    }
}
IntersectionObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[waIntersectionObserver]',
                exportAs: 'IntersectionObserver',
            },] }
];
/** @nocollapse */
IntersectionObserverDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionRootMargin',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionThreshold',] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntersectionObserverDirective.prototype.callbacks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUVULE1BQU0sRUFFTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFNNUQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLG9CQUFvQjs7Ozs7O0lBSW5FLFlBQzJDLElBQWdDLEVBQ2hDLFVBQXlCLEVBQzFCLFNBQXdCO1FBRTlELEtBQUssQ0FDRCxPQUFPLENBQUMsRUFBRTtZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFOztzQkFDbkMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDO2dCQUVqRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRDtZQUNJLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWE7WUFDaEMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztZQUN6QyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1NBQ3pDLENBQ0osQ0FBQztRQXBCVyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXlDLENBQUM7SUFxQjlFLENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxNQUFlLEVBQUUsV0FBeUMsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUN0RSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxNQUFlO1FBQ3JCLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7O1lBekNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOzs7OzRDQU1RLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCOzRDQUNwQyxTQUFTLFNBQUMsMEJBQTBCOzRDQUNwQyxTQUFTLFNBQUMseUJBQXlCOzs7Ozs7O0lBTHhDLGtEQUE4RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBdHRyaWJ1dGUsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT3B0aW9uYWwsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1JPT1R9IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tcm9vdCc7XHJcbmltcG9ydCB7cm9vdE1hcmdpbkZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3Jvb3QtbWFyZ2luLWZhY3RvcnknO1xyXG5pbXBvcnQge3RocmVzaG9sZEZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3RocmVzaG9sZC1mYWN0b3J5JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbd2FJbnRlcnNlY3Rpb25PYnNlcnZlcl0nLFxyXG4gICAgZXhwb3J0QXM6ICdJbnRlcnNlY3Rpb25PYnNlcnZlcicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyc2VjdGlvbk9ic2VydmVyXHJcbiAgICBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrcyA9IG5ldyBNYXA8RWxlbWVudCwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjaz4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KElOVEVSU0VDVElPTl9ST09UKSByb290OiBFbGVtZW50UmVmPEVsZW1lbnQ+IHwgbnVsbCxcclxuICAgICAgICBAQXR0cmlidXRlKCd3YUludGVyc2VjdGlvblJvb3RNYXJnaW4nKSByb290TWFyZ2luOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3dhSW50ZXJzZWN0aW9uVGhyZXNob2xkJykgdGhyZXNob2xkOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoXHJcbiAgICAgICAgICAgIGVudHJpZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2ssIGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGVudHJpZXMuZmlsdGVyKCh7dGFyZ2V0fSkgPT4gdGFyZ2V0ID09PSBlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkLmxlbmd0aCAmJiBjYWxsYmFjayhmaWx0ZXJlZCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcm9vdDogcm9vdCAmJiByb290Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luRmFjdG9yeShyb290TWFyZ2luKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogdGhyZXNob2xkRmFjdG9yeSh0aHJlc2hvbGQpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb2JzZXJ2ZSh0YXJnZXQ6IEVsZW1lbnQsIGNhbGxiYWNrOiBJbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrID0gKCkgPT4ge30pIHtcclxuICAgICAgICBzdXBlci5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3Muc2V0KHRhcmdldCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHVub2JzZXJ2ZSh0YXJnZXQ6IEVsZW1lbnQpIHtcclxuICAgICAgICBzdXBlci51bm9ic2VydmUodGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxufVxyXG4iXX0=