{"version":3,"sources":["../../src/prefetch-registry.service.ts","../../src/link-handler.service.ts","../../src/link.directive.ts","../../src/quicklink-strategy.service.ts","../../src/quicklink.module.ts"],"names":["globalRegistry","PrefetchRegistry","router","this","trees","prototype","add","tree","push","shouldPrefetch","url","parseUrl","some","containsTree","bind","containee","container","Object","keys","length","every","key","containsQueryParams","queryParams","containsSegmentGroup","root","segments","containeePaths","equalPath","current","slice","hasChildren","c","children","next","PRIMARY_OUTLET","as","bs","a","i","path","startsWith","Injectable","Router","requestIdleCallback","window","cb","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","observerSupported","IntersectionObserver","LinkHandler","InjectionToken","ObservableLinkHandler","loader","registry","ngZone","_this","elementLink","Map","observer","entries","forEach","entry","isIntersecting","link","target","routerLink","get","urlTree","unobserve","preload","subscribe","register","el","set","element","runOutsideAngular","observe","unregister","has","delete","supported","RouterPreloader","NgZone","PreloadLinkHandler","_","LinkDirective","linkHandlers","linkWithHref","linkHandler","filter","h","shift","rl","setAttribute","ngOnChanges","ngOnDestroy","defineProperty","nativeElement","Directive","args","selector","Inject","ElementRef","RouterLink","decorators","type","Optional","RouterLinkWithHref","Input","QuicklinkStrategy","loading","Set","route","load","EMPTY","conn","navigator","connection","undefined","effectiveType","includes","saveData","data","fullPath","findPath","config","parent","visited","current_1","_loadedConfig","routes","concat","r","isPrimaryRoute","outlet","replace","NgModule","declarations","providers","provide","useClass","multi","exports"],"mappings":"wZAYA,IAAMA,EAA4B,gBAKhC,SAAAC,EAAoBC,GAAAC,KAAAD,OAAAA,EADZC,KAAAC,MAAmBJ,SAG3BC,EAAAI,UAAAC,IAAA,SAAIC,GACFJ,KAAKC,MAAMI,KAAKD,IAGlBN,EAAAI,UAAAI,eAAA,SAAeC,GACb,IAAMH,EAAOJ,KAAKD,OAAOS,SAASD,GAClC,OAAOP,KAAKC,MAAMQ,KAAKC,EAAaC,KAAK,KAAMP,mBAYnCM,EAAaE,EAAoBC,GAC/C,OATF,SAA6BA,EAAmBD,GAE9C,OACEE,OAAOC,KAAKH,GAAWI,QAAUF,OAAOC,KAAKF,GAAWG,QACxDF,OAAOC,KAAKH,GAAWK,OAAM,SAAAC,GAAO,OAAAN,EAAUM,KAASL,EAAUK,MAMjEC,CAAoBN,EAAUO,YAAaR,EAAUQ,cACrDC,EAAqBR,EAAUS,KAAMV,EAAUU,KAAMV,EAAUU,KAAKC,UAIxE,SAASF,EACPR,EACAD,EACAY,GAEA,GAAIX,EAAUU,SAASP,OAASQ,EAAeR,OAE7C,QAAKS,EADCC,EAAUb,EAAUU,SAASI,MAAM,EAAGH,EAAeR,QACnCQ,KACpBZ,EAAUgB,cAET,GAAIf,EAAUU,SAASP,SAAWQ,EAAeR,OAAQ,CAC9D,IAAKS,EAAUZ,EAAUU,SAAUC,GAAiB,OAAO,EAC3D,IAAKZ,EAAUgB,cAAe,OAAO,EAErC,IAAK,IAAMC,KAAKjB,EAAUkB,SAAU,CAClC,IAAKjB,EAAUiB,SAASD,GAAI,MAC5B,GACER,EACER,EAAUiB,SAASD,GACnBjB,EAAUkB,SAASD,GACnBjB,EAAUkB,SAASD,GAAGN,UAGxB,OAAO,EAEX,OAAO,EAEP,IAAMG,EAAUF,EAAeG,MAAM,EAAGd,EAAUU,SAASP,QACrDe,EAAOP,EAAeG,MAAMd,EAAUU,SAASP,QACrD,QAAKS,EAAUZ,EAAUU,SAAUG,OAC9Bb,EAAUiB,SAASE,EAAAA,iBACjBX,EAAqBR,EAAUiB,SAASE,EAAAA,gBAAiBpB,EAAWmB,aAI/DN,EAAUQ,EAAkBC,GAC1C,OAAID,EAAGjB,SAAWkB,EAAGlB,QACdiB,EAAGhB,OACR,SAACkB,EAAGC,GAAM,OAAAD,EAAEE,OAASH,EAAGE,GAAGC,MAAQF,EAAEE,KAAKC,WAAW,MAAQJ,EAAGE,GAAGC,KAAKC,WAAW,4BApEtFC,EAAAA,sDAbCC,EAAAA,cCmBIC,EACc,oBAAXC,OACFA,OAAeD,qBAChB,SAASE,GACP,IAAMC,EAAQC,KAAKC,MACnB,OAAOC,YAAW,WAChBJ,EAAG,CACDK,YAAY,EACZC,cAAe,WACb,OAAOC,KAAKC,IAAI,EAAG,IAAMN,KAAKC,MAAQF,SAGzC,IAEL,aAEAQ,EAAoB,WACxB,MAAkB,oBAAXV,UAA4BA,OAAeW,sBAEvCC,EAAc,IAAIC,EAAAA,eAAe,4BAwB5C,SAAAC,EACUC,EACAC,EACAC,GAHV,IAAAC,EAAA5D,KACUA,KAAAyD,OAAAA,EACAzD,KAAA0D,SAAAA,EACA1D,KAAA2D,OAAAA,EAvBF3D,KAAA6D,YAAc,IAAIC,IAClB9D,KAAA+D,SAAwCX,IAC5C,IAAIC,sBAAqB,SAAAW,GACvBA,EAAQC,SAAQ,SAAAC,GACd,GAAIA,EAAMC,eAAgB,CACxB,IAAMC,EAAOF,EAAMG,OAEbC,EAAaV,EAAKC,YAAYU,IAAIH,GACxC,IAAME,IAAeA,EAAWE,QAAU,OAE1CZ,EAAKF,SAASvD,IAAImE,EAAWE,SAC7BZ,EAAKG,SAASU,UAAUL,GACxB3B,GAAoB,WAClBmB,EAAKH,OAAOiB,UAAUC,WAAU,yBAKxC,YAQJnB,EAAAtD,UAAA0E,SAAA,SAASC,GAAT,IAAAjB,EAAA5D,KACEA,KAAK6D,YAAYiB,IAAID,EAAGE,QAASF,GACjC7E,KAAK2D,OAAOqB,mBAAkB,WAC5BpB,EAAKG,SAASkB,QAAQJ,EAAGE,aAK7BvB,EAAAtD,UAAAgF,WAAA,SAAWL,GACL7E,KAAK6D,YAAYsB,IAAIN,EAAGE,WAC1B/E,KAAK+D,SAASU,UAAUI,EAAGE,SAC3B/E,KAAK6D,YAAYuB,OAAOP,EAAGE,WAI/BvB,EAAAtD,UAAAmF,UAAA,WACE,OAAOjC,8BA5CVb,EAAAA,sDAvCQ+C,EAAAA,uBAEAxF,SAJ4ByF,EAAAA,2BA4FnC,SAAAC,EACU/B,EACAC,GADA1D,KAAAyD,OAAAA,EACAzD,KAAA0D,SAAAA,SAGV8B,EAAAtF,UAAA0E,SAAA,SAASC,GAAT,IAAAjB,EAAA5D,KACEA,KAAK0D,SAASvD,IAAI0E,EAAGL,SACrB/B,GAAoB,WAAM,OAAAmB,EAAKH,OAAOiB,UAAUC,WAAU,mBAG5Da,EAAAtF,UAAAgF,WAAA,SAAWO,KAEXD,EAAAtF,UAAAmF,UAAA,WACE,OAAO,4BAfV9C,EAAAA,sDAxFQ+C,EAAAA,uBAEAxF,sBCkBP,SAAA4F,EAC+BC,EACrBd,EACIT,EACAwB,GAHiB5F,KAAA2F,aAAAA,EACrB3F,KAAA6E,GAAAA,EAIR7E,KAAK6F,YAAc7F,KAAK2F,aAAaG,QAAO,SAAAC,GAAK,OAAAA,EAAEV,eAAaW,QAChEhG,KAAKiG,GAAK7B,GAAQwB,EACd5F,KAAK+E,SAAW/E,KAAK+E,QAAQmB,cAC/BlG,KAAK+E,QAAQmB,aAAa,SAAU,WAIxCR,EAAAxF,UAAAiG,YAAA,SAAYtE,GACNA,EAAEyC,aACJtE,KAAK6F,YAAYX,WAAWlF,MAC5BA,KAAK6F,YAAYjB,SAAS5E,QAI9B0F,EAAAxF,UAAAkG,YAAA,WACEpG,KAAK6F,YAAYX,WAAWlF,OAG9Bc,OAAAuF,eAAIX,EAAAxF,UAAA,UAAO,KAAX,WACE,OAAOF,KAAK6E,GAAGyB,+CAGjBxF,OAAAuF,eAAIX,EAAAxF,UAAA,UAAO,KAAX,WACE,OAAOF,KAAKiG,GAAGzB,kEArClB+B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oFAQPC,EAAAA,OAAMF,KAAA,CAAClD,YArBVqD,EAAAA,kBAQOC,EAAAA,WAAUC,WAAA,CAAA,CAAAC,KAedC,EAAAA,kBAfgBC,EAAAA,mBAAkBH,WAAA,CAAA,CAAAC,KAgBlCC,EAAAA,kDARFE,EAAAA,0BCTD,SAAAC,EACUxD,EACA3D,GADAC,KAAA0D,SAAAA,EACA1D,KAAAD,OAAAA,EAJVC,KAAAmH,QAAU,IAAIC,WAOdF,EAAAhH,UAAAwE,QAAA,SAAQ2C,EAAcC,GACpB,GAAItH,KAAKmH,QAAQhC,IAAIkC,GAEnB,OAAOE,EAAAA,MAET,IAAMC,EAA4B,oBAAdC,UAA6BA,UAAkBC,gBAAaC,EAChF,GAAIH,KAEGA,EAAKI,eAAiB,IAAIC,SAAS,OAASL,EAAKM,UAAU,OAAOP,EAAAA,MAGzE,GAAIF,EAAMU,OAA+B,IAAvBV,EAAMU,KAAKrD,QAC3B,OAAO6C,EAAAA,MAET,IAAMS,EAAWC,EAASjI,KAAKD,OAAOmI,OAAQb,GAC9C,OAAIrH,KAAK0D,SAASpD,eAAe0H,IAC/BhI,KAAKmH,QAAQhH,IAAIkH,GACVC,KAGFC,EAAAA,gCA7BVhF,EAAAA,sDAHQzC,SADoB0C,EAAAA,UAqC7B,IAAMyF,EAAW,SAACC,EAAiBb,GACjCa,EAASA,EAAOvG,QAGhB,IAFA,IAAMwG,EAAS,IAAIrE,IACbsE,EAAU,IAAIhB,iBAElB,IAAMvC,EAAKqD,EAAOlC,QAElB,GADAoC,EAAQjI,IAAI0E,GACRA,IAAOwC,gBACX,IAAIvF,EAAW+C,EAAG/C,UAAY,GACxBuG,EAAWxD,EAAWyD,cACxBD,GAAWA,EAAQE,SACrBzG,EAAWA,EAAS0G,OAAOH,EAAQE,SAErCzG,EAASmC,SAAQ,SAACwE,GACZL,EAAQjD,IAAIsD,KAChBN,EAAOrD,IAAI2D,EAAG5D,GACdqD,EAAO7H,KAAKoI,QAZTP,EAAOlH,QAAM,wBAkBpB,IAHA,IAAIqB,EAAO,GACPX,EAAU2F,EAEP3F,GAEHW,EADEqG,EAAehH,GACV,IAAIA,EAAQW,KAAOA,EAEnB,KAAKX,EAAQiH,OAAM,IAAIjH,EAAQW,KAAOA,EAAI,IAEnDX,EAAUyG,EAAO5D,IAAI7C,GAGvB,OAAOW,EAAKuG,QAAQ,OAAQ,MAG9B,SAASF,EAAerB,GACtB,OAAOA,EAAMsB,SAAW3G,EAAAA,iBAAmBqF,EAAMsB,aCjDnD,iCAlBCE,EAAAA,SAAQrC,KAAA,CAAC,CACRsC,aAAc,CAACpD,GACfqD,UAAW,CACT,CACEC,QAAS1F,EACT2F,SAAUzF,EACV0F,OAAO,GAET,CACEF,QAAS1F,EACT2F,SAAUzD,EACV0D,OAAO,GAETpJ,EACAoH,GAEFiC,QAAS,CAACzD","sourcesContent":["import {\n  Router,\n  UrlTree,\n  Params,\n  UrlSegmentGroup,\n  UrlSegment,\n  PRIMARY_OUTLET\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry: UrlTree[] = [];\n\n@Injectable()\nexport class PrefetchRegistry {\n  private trees: UrlTree[] = globalRegistry;\n  constructor(private router: Router) {}\n\n  add(tree: UrlTree) {\n    this.trees.push(tree);\n  }\n\n  shouldPrefetch(url: string) {\n    const tree = this.router.parseUrl(url);\n    return this.trees.some(containsTree.bind(null, tree));\n  }\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return (\n    Object.keys(containee).length <= Object.keys(container).length &&\n    Object.keys(containee).every(key => containee[key] === container[key])\n  );\n}\n\nexport function containsTree(containee: UrlTree, container: UrlTree): boolean {\n  return (\n    containsQueryParams(container.queryParams, containee.queryParams) &&\n    containsSegmentGroup(container.root, containee.root, containee.root.segments)\n  );\n}\n\nfunction containsSegmentGroup(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  containeePaths: UrlSegment[]\n): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (\n        containsSegmentGroup(\n          container.children[c],\n          containee.children[c],\n          containee.children[c].segments\n        )\n      )\n        return true;\n    }\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every(\n    (a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':')\n  );\n}\n","import { Injectable, InjectionToken, NgZone } from '@angular/core';\nimport { LinkDirective } from './link.directive';\nimport { RouterPreloader } from '@angular/router';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\nimport { PrefetchRegistry } from './prefetch-registry.service';\n\ntype RequestIdleCallbackHandle = any;\ntype RequestIdleCallbackOptions = {\n  timeout: number;\n};\ntype RequestIdleCallbackDeadline = {\n  readonly didTimeout: boolean;\n  timeRemaining: (() => number);\n};\n\ntype RequestIdleCallback = ((\n  callback: ((deadline: RequestIdleCallbackDeadline) => void),\n  opts?: RequestIdleCallbackOptions\n) => RequestIdleCallbackHandle);\n\nconst requestIdleCallback: RequestIdleCallback =\n  typeof window !== 'undefined'\n    ? (window as any).requestIdleCallback ||\n      function(cb: Function) {\n        const start = Date.now();\n        return setTimeout(function() {\n          cb({\n            didTimeout: false,\n            timeRemaining: function() {\n              return Math.max(0, 50 - (Date.now() - start));\n            }\n          });\n        }, 1);\n      }\n    : () => {};\n\nconst observerSupported = () =>\n  typeof window !== 'undefined' ? !!(window as any).IntersectionObserver : false;\n\nexport const LinkHandler = new InjectionToken('LinkHandler');\n\n@Injectable()\nexport class ObservableLinkHandler implements LinkHandlerStrategy {\n  private elementLink = new Map<Element, LinkDirective>();\n  private observer: IntersectionObserver | null = observerSupported()\n    ? new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const link = entry.target as HTMLAnchorElement;\n\n            const routerLink = this.elementLink.get(link);\n            if ( !routerLink || !routerLink.urlTree ) return;\n\n            this.registry.add(routerLink.urlTree);\n            this.observer.unobserve(link);\n            requestIdleCallback(() => {\n              this.loader.preload().subscribe(() => void 0);\n            });\n          }\n        });\n      })\n    : null;\n\n  constructor(\n    private loader: RouterPreloader,\n    private registry: PrefetchRegistry,\n    private ngZone: NgZone,\n  ) {}\n\n  register(el: LinkDirective) {\n    this.elementLink.set(el.element, el);\n    this.ngZone.runOutsideAngular(() => {\n      this.observer.observe(el.element);\n    });\n  }\n\n  // First call to unregister will not hit this.\n  unregister(el: LinkDirective) {\n    if (this.elementLink.has(el.element)) {\n      this.observer.unobserve(el.element);\n      this.elementLink.delete(el.element);\n    }\n  }\n\n  supported() {\n    return observerSupported();\n  }\n\n}\n\n@Injectable()\nexport class PreloadLinkHandler implements LinkHandlerStrategy {\n  constructor(\n    private loader: RouterPreloader,\n    private registry: PrefetchRegistry,\n  ) {}\n\n  register(el: LinkDirective) {\n    this.registry.add(el.urlTree);\n    requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n  }\n\n  unregister(_: LinkDirective) {}\n\n  supported() {\n    return true;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Optional,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Input,\n  SimpleChanges\n} from '@angular/core';\nimport { RouterLink, RouterLinkWithHref } from '@angular/router';\nimport { LinkHandler } from './link-handler.service';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\n\n@Directive({\n  selector: '[routerLink]'\n})\nexport class LinkDirective implements OnChanges, OnDestroy {\n  @Input() routerLink: Pick<RouterLink | RouterLinkWithHref, 'routerLink'>['routerLink'];\n  private rl: RouterLink | RouterLinkWithHref;\n  private linkHandler: LinkHandlerStrategy;\n\n  constructor(\n    @Inject(LinkHandler) private linkHandlers: LinkHandlerStrategy[],\n    private el: ElementRef,\n    @Optional() link: RouterLink,\n    @Optional() linkWithHref: RouterLinkWithHref\n  ) {\n    this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n    this.rl = link || linkWithHref;\n    if (this.element && this.element.setAttribute) {\n      this.element.setAttribute('ngx-ql', '');\n    }\n  }\n\n  ngOnChanges(c: SimpleChanges) {\n    if (c.routerLink) {\n      this.linkHandler.unregister(this);\n      this.linkHandler.register(this);\n    }\n  }\n\n  ngOnDestroy() {\n    this.linkHandler.unregister(this);\n  }\n\n  get element(): Element {\n    return this.el.nativeElement;\n  }\n\n  get urlTree(): any {\n    return this.rl.urlTree;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Router, Route, PRIMARY_OUTLET } from '@angular/router';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { EMPTY } from 'rxjs';\n\n@Injectable()\nexport class QuicklinkStrategy implements PreloadingStrategy {\n  loading = new Set<Route>();\n\n  constructor(\n    private registry: PrefetchRegistry,\n    private router: Router,\n  ) {}\n\n  preload(route: Route, load: Function) {\n    if (this.loading.has(route)) {\n      // Don't preload the same route twice\n      return EMPTY;\n    }\n    const conn = typeof navigator !== 'undefined' ? (navigator as any).connection : undefined;\n    if (conn) {\n      // Don't preload if the user is on 2G. or if Save-Data is enabled..\n      if ((conn.effectiveType || '').includes('2g') || conn.saveData) return EMPTY;\n    }\n    // Prevent from preloading\n    if (route.data && route.data.preload === false) {\n      return EMPTY;\n    }\n    const fullPath = findPath(this.router.config, route);\n    if (this.registry.shouldPrefetch(fullPath)) {\n      this.loading.add(route);\n      return load();\n    }\n\n    return EMPTY;\n  }\n}\n\nconst findPath = (config: Route[], route: Route): string => {\n  config = config.slice();\n  const parent = new Map<Route, Route>();\n  const visited = new Set<Route>();\n  while (config.length) {\n    const el = config.shift();\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = (el as any)._loadedConfig;\n    if (current && current.routes) {\n      children = children.concat(current.routes);\n    }\n    children.forEach((r: Route) => {\n      if (visited.has(r)) return;\n      parent.set(r, el);\n      config.push(r);\n    });\n  }\n  let path = '';\n  let current = route;\n\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n    current = parent.get(current);\n  }\n\n  return path.replace(/\\/\\//, '/');\n};\n\nfunction isPrimaryRoute(route: Route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n","import { NgModule } from '@angular/core';\nimport { LinkDirective } from './link.directive';\nimport { ObservableLinkHandler, PreloadLinkHandler, LinkHandler } from './link-handler.service';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { QuicklinkStrategy } from './quicklink-strategy.service';\n\n@NgModule({\n  declarations: [LinkDirective],\n  providers: [\n    {\n      provide: LinkHandler,\n      useClass: ObservableLinkHandler,\n      multi: true\n    },\n    {\n      provide: LinkHandler,\n      useClass: PreloadLinkHandler,\n      multi: true\n    },\n    PrefetchRegistry,\n    QuicklinkStrategy\n  ],\n  exports: [LinkDirective]\n})\nexport class QuicklinkModule {}\n"]}