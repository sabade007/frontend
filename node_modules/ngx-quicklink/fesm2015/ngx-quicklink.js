import { Injectable, InjectionToken, NgZone, Directive, Inject, ElementRef, Optional, Input, NgModule } from '@angular/core';
import { Router, PRIMARY_OUTLET, RouterPreloader, RouterLink, RouterLinkWithHref } from '@angular/router';
import { EMPTY } from 'rxjs';

// Using a global registry so we can keep it populated across lazy-loaded
// modules with different parent injectors which create instance of the registry.
const globalRegistry = [];
class PrefetchRegistry {
    constructor(router) {
        this.router = router;
        this.trees = globalRegistry;
    }
    add(tree) {
        this.trees.push(tree);
    }
    shouldPrefetch(url) {
        const tree = this.router.parseUrl(url);
        return this.trees.some(containsTree.bind(null, tree));
    }
}
PrefetchRegistry.decorators = [
    { type: Injectable }
];
PrefetchRegistry.ctorParameters = () => [
    { type: Router }
];
function containsQueryParams(container, containee) {
    // TODO: This does not handle array params correctly.
    return (Object.keys(containee).length <= Object.keys(container).length &&
        Object.keys(containee).every(key => containee[key] === container[key]));
}
function containsTree(containee, container) {
    return (containsQueryParams(container.queryParams, containee.queryParams) &&
        containsSegmentGroup(container.root, containee.root, containee.root.segments));
}
function containsSegmentGroup(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
        const current = container.segments.slice(0, containeePaths.length);
        if (!equalPath(current, containeePaths))
            return false;
        if (containee.hasChildren())
            return false;
        return true;
    }
    else if (container.segments.length === containeePaths.length) {
        if (!equalPath(container.segments, containeePaths))
            return false;
        if (!containee.hasChildren())
            return true;
        for (const c in containee.children) {
            if (!container.children[c])
                break;
            if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments))
                return true;
        }
        return false;
    }
    else {
        const current = containeePaths.slice(0, container.segments.length);
        const next = containeePaths.slice(container.segments.length);
        if (!equalPath(container.segments, current))
            return false;
        if (!container.children[PRIMARY_OUTLET])
            return false;
        return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);
    }
}
function equalPath(as, bs) {
    if (as.length !== bs.length)
        return false;
    return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));
}

const ɵ0 = function (cb) {
    const start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = () => { };
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
const ɵ2 = observerSupported;
const LinkHandler = new InjectionToken('LinkHandler');
class ObservableLinkHandler {
    constructor(loader, registry, ngZone) {
        this.loader = loader;
        this.registry = registry;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        if (!routerLink || !routerLink.urlTree)
                            return;
                        this.registry.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(() => {
            this.observer.observe(el.element);
        });
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
}
ObservableLinkHandler.decorators = [
    { type: Injectable }
];
ObservableLinkHandler.ctorParameters = () => [
    { type: RouterPreloader },
    { type: PrefetchRegistry },
    { type: NgZone }
];
class PreloadLinkHandler {
    constructor(loader, registry) {
        this.loader = loader;
        this.registry = registry;
    }
    register(el) {
        this.registry.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
}
PreloadLinkHandler.decorators = [
    { type: Injectable }
];
PreloadLinkHandler.ctorParameters = () => [
    { type: RouterPreloader },
    { type: PrefetchRegistry }
];

class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
        if (this.element && this.element.setAttribute) {
            this.element.setAttribute('ngx-ql', '');
        }
    }
    ngOnChanges(c) {
        if (c.routerLink) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
}
LinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[routerLink]'
            },] }
];
LinkDirective.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [LinkHandler,] }] },
    { type: ElementRef },
    { type: RouterLink, decorators: [{ type: Optional }] },
    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }
];
LinkDirective.propDecorators = {
    routerLink: [{ type: Input }]
};

class QuicklinkStrategy {
    constructor(registry, router) {
        this.registry = registry;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.registry.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
}
QuicklinkStrategy.decorators = [
    { type: Injectable }
];
QuicklinkStrategy.ctorParameters = () => [
    { type: PrefetchRegistry },
    { type: Router }
];
const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedConfig;
        if (current && current.routes) {
            children = children.concat(current.routes);
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    return path.replace(/\/\//, '/');
};
const ɵ0$1 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}

class QuicklinkModule {
}
QuicklinkModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LinkDirective],
                providers: [
                    {
                        provide: LinkHandler,
                        useClass: ObservableLinkHandler,
                        multi: true
                    },
                    {
                        provide: LinkHandler,
                        useClass: PreloadLinkHandler,
                        multi: true
                    },
                    PrefetchRegistry,
                    QuicklinkStrategy
                ],
                exports: [LinkDirective]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { QuicklinkModule, QuicklinkStrategy, LinkHandler as ɵa, ObservableLinkHandler as ɵb, PreloadLinkHandler as ɵc, PrefetchRegistry as ɵe, LinkDirective as ɵɵLinkDirective };
//# sourceMappingURL=ngx-quicklink.js.map
