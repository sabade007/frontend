import { Injectable } from '@angular/core';
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import { EMPTY } from 'rxjs';
export class QuicklinkStrategy {
    constructor(registry, router) {
        this.registry = registry;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.registry.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
}
QuicklinkStrategy.decorators = [
    { type: Injectable }
];
QuicklinkStrategy.ctorParameters = () => [
    { type: PrefetchRegistry },
    { type: Router }
];
const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedConfig;
        if (current && current.routes) {
            children = children.concat(current.routes);
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    return path.replace(/\/\//, '/');
};
const ɵ0 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXNCLE1BQU0sRUFBUyxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzdCLE1BQU0sT0FBTyxpQkFBaUI7SUFHNUIsWUFDVSxRQUEwQixFQUMxQixNQUFjO1FBRGQsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUp4QixZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQztJQUt4QixDQUFDO0lBRUosT0FBTyxDQUFDLEtBQVksRUFBRSxJQUFjO1FBQ2xDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0IscUNBQXFDO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLElBQUksR0FBRyxPQUFPLFNBQVMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFFLFNBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUYsSUFBSSxJQUFJLEVBQUU7WUFDUixtRUFBbUU7WUFDbkUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1NBQzlFO1FBQ0QsMEJBQTBCO1FBQzFCLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7WUFDOUMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBOUJGLFVBQVU7OztZQUhGLGdCQUFnQjtZQURJLE1BQU07O0FBcUNuQyxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWUsRUFBRSxLQUFZLEVBQVUsRUFBRTtJQUN6RCxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7SUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxLQUFLLEtBQUs7WUFBRSxNQUFNO1FBQ3hCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFJLEVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUM3QixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUM7UUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBUSxFQUFFLEVBQUU7WUFDNUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLE9BQU8sRUFBRTtRQUNkLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDbEM7YUFBTTtZQUNMLElBQUksR0FBRyxLQUFLLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQztTQUN0RDtRQUNELE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9CO0lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUM7O0FBRUYsU0FBUyxjQUFjLENBQUMsS0FBWTtJQUNsQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssY0FBYyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUMxRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJlbG9hZGluZ1N0cmF0ZWd5LCBSb3V0ZXIsIFJvdXRlLCBQUklNQVJZX09VVExFVCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBQcmVmZXRjaFJlZ2lzdHJ5IH0gZnJvbSAnLi9wcmVmZXRjaC1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBRdWlja2xpbmtTdHJhdGVneSBpbXBsZW1lbnRzIFByZWxvYWRpbmdTdHJhdGVneSB7XG4gIGxvYWRpbmcgPSBuZXcgU2V0PFJvdXRlPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVnaXN0cnk6IFByZWZldGNoUmVnaXN0cnksXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgKSB7fVxuXG4gIHByZWxvYWQocm91dGU6IFJvdXRlLCBsb2FkOiBGdW5jdGlvbikge1xuICAgIGlmICh0aGlzLmxvYWRpbmcuaGFzKHJvdXRlKSkge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCB0aGUgc2FtZSByb3V0ZSB0d2ljZVxuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBjb25zdCBjb25uID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyAobmF2aWdhdG9yIGFzIGFueSkuY29ubmVjdGlvbiA6IHVuZGVmaW5lZDtcbiAgICBpZiAoY29ubikge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCBpZiB0aGUgdXNlciBpcyBvbiAyRy4gb3IgaWYgU2F2ZS1EYXRhIGlzIGVuYWJsZWQuLlxuICAgICAgaWYgKChjb25uLmVmZmVjdGl2ZVR5cGUgfHwgJycpLmluY2x1ZGVzKCcyZycpIHx8IGNvbm4uc2F2ZURhdGEpIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBmcm9tIHByZWxvYWRpbmdcbiAgICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhLnByZWxvYWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxQYXRoID0gZmluZFBhdGgodGhpcy5yb3V0ZXIuY29uZmlnLCByb3V0ZSk7XG4gICAgaWYgKHRoaXMucmVnaXN0cnkuc2hvdWxkUHJlZmV0Y2goZnVsbFBhdGgpKSB7XG4gICAgICB0aGlzLmxvYWRpbmcuYWRkKHJvdXRlKTtcbiAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEVNUFRZO1xuICB9XG59XG5cbmNvbnN0IGZpbmRQYXRoID0gKGNvbmZpZzogUm91dGVbXSwgcm91dGU6IFJvdXRlKTogc3RyaW5nID0+IHtcbiAgY29uZmlnID0gY29uZmlnLnNsaWNlKCk7XG4gIGNvbnN0IHBhcmVudCA9IG5ldyBNYXA8Um91dGUsIFJvdXRlPigpO1xuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldDxSb3V0ZT4oKTtcbiAgd2hpbGUgKGNvbmZpZy5sZW5ndGgpIHtcbiAgICBjb25zdCBlbCA9IGNvbmZpZy5zaGlmdCgpO1xuICAgIHZpc2l0ZWQuYWRkKGVsKTtcbiAgICBpZiAoZWwgPT09IHJvdXRlKSBicmVhaztcbiAgICBsZXQgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbiB8fCBbXTtcbiAgICBjb25zdCBjdXJyZW50ID0gKGVsIGFzIGFueSkuX2xvYWRlZENvbmZpZztcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LnJvdXRlcykge1xuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoY3VycmVudC5yb3V0ZXMpO1xuICAgIH1cbiAgICBjaGlsZHJlbi5mb3JFYWNoKChyOiBSb3V0ZSkgPT4ge1xuICAgICAgaWYgKHZpc2l0ZWQuaGFzKHIpKSByZXR1cm47XG4gICAgICBwYXJlbnQuc2V0KHIsIGVsKTtcbiAgICAgIGNvbmZpZy5wdXNoKHIpO1xuICAgIH0pO1xuICB9XG4gIGxldCBwYXRoID0gJyc7XG4gIGxldCBjdXJyZW50ID0gcm91dGU7XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoaXNQcmltYXJ5Um91dGUoY3VycmVudCkpIHtcbiAgICAgIHBhdGggPSBgLyR7Y3VycmVudC5wYXRofSR7cGF0aH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gYC8oJHtjdXJyZW50Lm91dGxldH06JHtjdXJyZW50LnBhdGh9JHtwYXRofSlgO1xuICAgIH1cbiAgICBjdXJyZW50ID0gcGFyZW50LmdldChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy8sICcvJyk7XG59O1xuXG5mdW5jdGlvbiBpc1ByaW1hcnlSb3V0ZShyb3V0ZTogUm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQgfHwgIXJvdXRlLm91dGxldDtcbn1cbiJdfQ==