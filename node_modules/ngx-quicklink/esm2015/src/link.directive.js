import { Directive, ElementRef, Optional, Inject, Input } from '@angular/core';
import { RouterLink, RouterLinkWithHref } from '@angular/router';
import { LinkHandler } from './link-handler.service';
export class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
        if (this.element && this.element.setAttribute) {
            this.element.setAttribute('ngx-ql', '');
        }
    }
    ngOnChanges(c) {
        if (c.routerLink) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
}
LinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[routerLink]'
            },] }
];
LinkDirective.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [LinkHandler,] }] },
    { type: ElementRef },
    { type: RouterLink, decorators: [{ type: Optional }] },
    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }
];
LinkDirective.propDecorators = {
    routerLink: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsUUFBUSxFQUNSLE1BQU0sRUFHTixLQUFLLEVBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU1yRCxNQUFNLE9BQU8sYUFBYTtJQUt4QixZQUMrQixZQUFtQyxFQUN4RCxFQUFjLEVBQ1YsSUFBZ0IsRUFDaEIsWUFBZ0M7UUFIZixpQkFBWSxHQUFaLFlBQVksQ0FBdUI7UUFDeEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUl0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksWUFBWSxDQUFDO1FBQy9CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLENBQWdCO1FBQzFCLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRTtZQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFDekIsQ0FBQzs7O1lBdENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7O3dDQU9JLE1BQU0sU0FBQyxXQUFXO1lBckJyQixVQUFVO1lBUUgsVUFBVSx1QkFlZCxRQUFRO1lBZlEsa0JBQWtCLHVCQWdCbEMsUUFBUTs7O3lCQVJWLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIE9wdGlvbmFsLFxuICBJbmplY3QsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlckxpbmssIFJvdXRlckxpbmtXaXRoSHJlZiB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMaW5rSGFuZGxlciB9IGZyb20gJy4vbGluay1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGlua0hhbmRsZXJTdHJhdGVneSB9IGZyb20gJy4vbGluay1oYW5kbGVyLXN0cmF0ZWd5JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3JvdXRlckxpbmtdJ1xufSlcbmV4cG9ydCBjbGFzcyBMaW5rRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSByb3V0ZXJMaW5rOiBQaWNrPFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rV2l0aEhyZWYsICdyb3V0ZXJMaW5rJz5bJ3JvdXRlckxpbmsnXTtcbiAgcHJpdmF0ZSBybDogUm91dGVyTGluayB8IFJvdXRlckxpbmtXaXRoSHJlZjtcbiAgcHJpdmF0ZSBsaW5rSGFuZGxlcjogTGlua0hhbmRsZXJTdHJhdGVneTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KExpbmtIYW5kbGVyKSBwcml2YXRlIGxpbmtIYW5kbGVyczogTGlua0hhbmRsZXJTdHJhdGVneVtdLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgQE9wdGlvbmFsKCkgbGluazogUm91dGVyTGluayxcbiAgICBAT3B0aW9uYWwoKSBsaW5rV2l0aEhyZWY6IFJvdXRlckxpbmtXaXRoSHJlZlxuICApIHtcbiAgICB0aGlzLmxpbmtIYW5kbGVyID0gdGhpcy5saW5rSGFuZGxlcnMuZmlsdGVyKGggPT4gaC5zdXBwb3J0ZWQoKSkuc2hpZnQoKTtcbiAgICB0aGlzLnJsID0gbGluayB8fCBsaW5rV2l0aEhyZWY7XG4gICAgaWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCduZ3gtcWwnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoYzogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjLnJvdXRlckxpbmspIHtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlci51bnJlZ2lzdGVyKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGdldCB1cmxUcmVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMucmwudXJsVHJlZTtcbiAgfVxufVxuIl19