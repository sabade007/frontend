import { Injectable, InjectionToken, NgZone } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
const ɵ0 = function (cb) {
    const start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = () => { };
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
const ɵ2 = observerSupported;
export const LinkHandler = new InjectionToken('LinkHandler');
export class ObservableLinkHandler {
    constructor(loader, registry, ngZone) {
        this.loader = loader;
        this.registry = registry;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        if (!routerLink || !routerLink.urlTree)
                            return;
                        this.registry.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(() => {
            this.observer.observe(el.element);
        });
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
}
ObservableLinkHandler.decorators = [
    { type: Injectable }
];
ObservableLinkHandler.ctorParameters = () => [
    { type: RouterPreloader },
    { type: PrefetchRegistry },
    { type: NgZone }
];
export class PreloadLinkHandler {
    constructor(loader, registry) {
        this.loader = loader;
        this.registry = registry;
    }
    register(el) {
        this.registry.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
}
PreloadLinkHandler.decorators = [
    { type: Injectable }
];
PreloadLinkHandler.ctorParameters = () => [
    { type: RouterPreloader },
    { type: PrefetchRegistry }
];
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGluay1oYW5kbGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztXQW1CekQsVUFBUyxFQUFZO0lBQ25CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QixPQUFPLFVBQVUsQ0FBQztRQUNoQixFQUFFLENBQUM7WUFDRCxVQUFVLEVBQUUsS0FBSztZQUNqQixhQUFhLEVBQUU7Z0JBQ2IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNoRCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxPQUNELEdBQUcsRUFBRSxHQUFFLENBQUM7QUFkZCxNQUFNLG1CQUFtQixHQUN2QixPQUFPLE1BQU0sS0FBSyxXQUFXO0lBQzNCLENBQUMsQ0FBRSxNQUFjLENBQUMsbUJBQW1CLE1BV2xDO0lBQ0gsQ0FBQyxHQUFTLENBQUM7QUFFZixNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxDQUM3QixPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxNQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFakYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLElBQUksY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFD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O1lBaEJGLFVBQVU7OztZQXhGRixlQUFlO1lBRWYsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlua0RpcmVjdGl2ZSB9IGZyb20gJy4vbGluay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUm91dGVyUHJlbG9hZGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IExpbmtIYW5kbGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xpbmstaGFuZGxlci1zdHJhdGVneSc7XG5pbXBvcnQgeyBQcmVmZXRjaFJlZ2lzdHJ5IH0gZnJvbSAnLi9wcmVmZXRjaC1yZWdpc3RyeS5zZXJ2aWNlJztcblxudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrSGFuZGxlID0gYW55O1xudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrT3B0aW9ucyA9IHtcbiAgdGltZW91dDogbnVtYmVyO1xufTtcbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja0RlYWRsaW5lID0ge1xuICByZWFkb25seSBkaWRUaW1lb3V0OiBib29sZWFuO1xuICB0aW1lUmVtYWluaW5nOiAoKCkgPT4gbnVtYmVyKTtcbn07XG5cbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFjayA9ICgoXG4gIGNhbGxiYWNrOiAoKGRlYWRsaW5lOiBSZXF1ZXN0SWRsZUNhbGxiYWNrRGVhZGxpbmUpID0+IHZvaWQpLFxuICBvcHRzPzogUmVxdWVzdElkbGVDYWxsYmFja09wdGlvbnNcbikgPT4gUmVxdWVzdElkbGVDYWxsYmFja0hhbmRsZSk7XG5cbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2s6IFJlcXVlc3RJZGxlQ2FsbGJhY2sgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKHdpbmRvdyBhcyBhbnkpLnJlcXVlc3RJZGxlQ2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKGNiOiBGdW5jdGlvbikge1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNiKHtcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9XG4gICAgOiAoKSA9PiB7fTtcblxuY29uc3Qgb2JzZXJ2ZXJTdXBwb3J0ZWQgPSAoKSA9PlxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/ICEhKHdpbmRvdyBhcyBhbnkpLkludGVyc2VjdGlvbk9ic2VydmVyIDogZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBMaW5rSGFuZGxlciA9IG5ldyBJbmplY3Rpb25Ub2tlbignTGlua0hhbmRsZXInKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVMaW5rSGFuZGxlciBpbXBsZW1lbnRzIExpbmtIYW5kbGVyU3RyYXRlZ3kge1xuICBwcml2YXRlIGVsZW1lbnRMaW5rID0gbmV3IE1hcDxFbGVtZW50LCBMaW5rRGlyZWN0aXZlPigpO1xuICBwcml2YXRlIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlciB8IG51bGwgPSBvYnNlcnZlclN1cHBvcnRlZCgpXG4gICAgPyBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZW50cnkudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50O1xuXG4gICAgICAgICAgICBjb25zdCByb3V0ZXJMaW5rID0gdGhpcy5lbGVtZW50TGluay5nZXQobGluayk7XG4gICAgICAgICAgICBpZiAoICFyb3V0ZXJMaW5rIHx8ICFyb3V0ZXJMaW5rLnVybFRyZWUgKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0cnkuYWRkKHJvdXRlckxpbmsudXJsVHJlZSk7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShsaW5rKTtcbiAgICAgICAgICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvYWRlci5wcmVsb2FkKCkuc3Vic2NyaWJlKCgpID0+IHZvaWQgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICA6IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBsb2FkZXI6IFJvdXRlclByZWxvYWRlcixcbiAgICBwcml2YXRlIHJlZ2lzdHJ5OiBQcmVmZXRjaFJlZ2lzdHJ5LFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICkge31cblxuICByZWdpc3RlcihlbDogTGlua0RpcmVjdGl2ZSkge1xuICAgIHRoaXMuZWxlbWVudExpbmsuc2V0KGVsLmVsZW1lbnQsIGVsKTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoZWwuZWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBGaXJzdCBjYWxsIHRvIHVucmVnaXN0ZXIgd2lsbCBub3QgaGl0IHRoaXMuXG4gIHVucmVnaXN0ZXIoZWw6IExpbmtEaXJlY3RpdmUpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50TGluay5oYXMoZWwuZWxlbWVudCkpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKGVsLmVsZW1lbnQpO1xuICAgICAgdGhpcy5lbGVtZW50TGluay5kZWxldGUoZWwuZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgc3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBvYnNlcnZlclN1cHBvcnRlZCgpO1xuICB9XG5cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByZWxvYWRMaW5rSGFuZGxlciBpbXBsZW1lbnRzIExpbmtIYW5kbGVyU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxvYWRlcjogUm91dGVyUHJlbG9hZGVyLFxuICAgIHByaXZhdGUgcmVnaXN0cnk6IFByZWZldGNoUmVnaXN0cnksXG4gICkge31cblxuICByZWdpc3RlcihlbDogTGlua0RpcmVjdGl2ZSkge1xuICAgIHRoaXMucmVnaXN0cnkuYWRkKGVsLnVybFRyZWUpO1xuICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4gdGhpcy5sb2FkZXIucHJlbG9hZCgpLnN1YnNjcmliZSgoKSA9PiB2b2lkIDApKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXIoXzogTGlua0RpcmVjdGl2ZSkge31cblxuICBzdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiJdfQ==