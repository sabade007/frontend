{"version":3,"file":"link-preview.umd.js","sources":["../../tmp/module/service/mat-link-preview.service.ts","../../tmp/module/directives/mat-link-preview.directive.ts","../../tmp/module/components/mat-link-preview/mat-link-preview.component.ts","../../tmp/module/components/mat-link-preview-container/mat-link-preview-container.component.ts","../../tmp/module/mat-link-preview.module.ts"],"sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../..';\n\n@Injectable()\nexport class MatLinkPreviewService {\n\n  private _accessKey = '5b54e80a65c77848ceaa4630331e8384950e09d392365';\n  private _apiURL = 'https://api.linkpreview.net/';\n\n  onLinkFound: EventEmitter<Array<Link>> = new EventEmitter<Array<Link>>();\n\n  links: Link[] = [];\n\n  constructor(private http: HttpClient) {\n    this.onLinkFound.subscribe((links: Array<Link>) => this.links = links);\n  }\n\n  fetchLink(url: string): Observable<LinkPreview> {\n    console.log('fetching the following link: ', url);\n    const params = new HttpParams()\n      .append('key', this._accessKey)\n      .append('q', url);\n\n    return this.http.get(this._apiURL, {params: params}).pipe(map(value => value as LinkPreview));\n  }\n}\n","import {Directive, OnInit} from '@angular/core';\nimport {fromEvent} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, map} from 'rxjs/operators';\nimport {Link, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../module/service/mat-link-preview.service';\n\n@Directive({\n  selector: '[matLinkPreview]',\n  exportAs: '[matLinkPreview]',\n})\nexport class MatLinkPreviewDirective implements OnInit {\n\n  constructor(public linkifyService: NgxLinkifyjsService,\n              public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    this._init();\n  }\n\n  private _init() {\n    fromEvent(document, 'input')\n      .pipe(\n        debounceTime(2000),\n        distinctUntilChanged(),\n        map(event => {\n          const data = event.target['value'];\n          const links: Link[] = this.linkifyService.find(data);\n          console.log('data: ', data);\n          console.log('links: ', links);\n          // event.target['value'] = this.linkifyService.linkify(data);\n          return links;\n        })).subscribe((links) => {\n      this.linkPreviewService.onLinkFound.emit(links);\n    });\n  }\n\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../../interfaces/linkpreview.interface';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview',\n  exportAs: 'matLinkPreview',\n  template: `\n    <ng-container *ngIf=\"!this.linkPreview && !this.loaded && this.showLoadingsProgress;then fetch else preview\">\n    </ng-container>\n    <ng-template #preview>\n      <mat-card *ngIf=\"this.linkPreview\">\n        <mat-card-content class=\"cut-text\">\n          <div class=\"img-container\" *ngIf=\"linkPreview.image\">\n            <img mat-card-image [src]=\"linkPreview?.image\">\n          </div>\n          <div>\n            <mat-card-title>{{linkPreview?.title}}</mat-card-title>\n            <mat-card-subtitle>{{linkPreview?.description}}</mat-card-subtitle>\n            <a [href]=\"linkPreview?.url\" mat-button [color]=\"color\">{{linkPreview?.url}}</a>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n\n    <ng-template #fetch>\n      <mat-spinner *ngIf=\"!this.hasError\"></mat-spinner>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}mat-card-content{flex-direction:row;box-sizing:border-box;display:flex}mat-card-content a{padding-left:0;padding-right:0}.img-container{margin-right:1rem;place-content:center;align-items:center;flex-direction:row;box-sizing:border-box;display:flex;flex:1 1 100%;max-width:20%;padding:24px 16px}.center-auto{margin-left:auto!important;margin-right:auto!important}.cut-text{text-overflow:ellipsis;overflow:hidden}\n  `]\n})\nexport class MatLinkPreviewComponent implements OnInit, OnDestroy {\n\n  @Input() link: Link;\n  @Input() linkPreview: LinkPreview;\n\n  // forwarded from the container\n  @Input() color = 'primary'; // accent | warn\n  @Input() showLoadingsProgress = true;\n\n  loaded: boolean;\n  hasError: boolean;\n  private _subscription: Subscription;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    if (this.link && !this.linkPreview) {\n      // this.loaded = false;\n      this._subscription = this.linkPreviewService\n        .fetchLink(this.link.href)\n        .subscribe(value => this.linkPreview = value,\n          error => this.hasError = true,\n          () => this.loaded = true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {Link} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview-container',\n  exportAs: 'matLinkPreviewContainer',\n  template: `\n    <ng-container *ngIf=\"!multiple && linkPreviewService.links.length > 0; then first else list\"></ng-container>\n\n    <ng-template #first>\n      <mat-link-preview [link]=\"linkPreviewService?.links[0]\"\n                        [showLoadingsProgress]=\"showLoadingsProgress\">\n      </mat-link-preview>\n    </ng-template>\n    <ng-template #list>\n      <div *ngFor=\"let link of linkPreviewService.links; trackBy: trackLinks\">\n        <mat-link-preview [link]=\"link\"\n                          [showLoadingsProgress]=\"showLoadingsProgress\">\n        </mat-link-preview>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}\n  `]\n})\nexport class MatLinkPreviewContainerComponent {\n\n  // to forward\n  @Input() color = 'primary'; // accent | warn\n  @Input() multiple: boolean;\n  @Input() showLoadingsProgress = true;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  trackLinks(index: number, link: Link) {\n    return link ? link.href : undefined;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MatLinkPreviewService} from './service/mat-link-preview.service';\nimport {DEFAULT_CONFIG, NgxLinkifyjsConfigToken, NgxLinkifyjsModule, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatButtonModule, MatCardModule, MatProgressSpinnerModule} from '@angular/material';\nimport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nimport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nimport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\n\n// Export module's public API\nexport {LinkPreview} from './interfaces/linkpreview.interface'\nexport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nexport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\nexport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nexport {MatLinkPreviewService} from './service/mat-link-preview.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    NgxLinkifyjsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective],\n  declarations: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective]\n})\nexport class MatLinkPreviewModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatLinkPreviewModule,\n      providers: [\n        MatLinkPreviewService,\n        NgxLinkifyjsService,\n        {\n          provide: NgxLinkifyjsConfigToken,\n          useValue: DEFAULT_CONFIG\n        }]\n    };\n  }\n}\n"],"names":["http","EventEmitter","HttpParams","map","Injectable","HttpClient","fromEvent","debounceTime","distinctUntilChanged","Directive","NgxLinkifyjsService","Component","Input","NgxLinkifyjsConfigToken","DEFAULT_CONFIG","NgModule","CommonModule","HttpClientModule","NgxLinkifyjsModule","MatCardModule","MatButtonModule","MatProgressSpinnerModule"],"mappings":";;;;;;;;;;AAAA;QAiBE,+BAAoBA,OAAgB;YAApC,iBAEC;YAFmB,SAAI,GAAJA,OAAI,CAAY;YAP5B,eAAU,GAAG,+CAA+C,CAAC;YAC7D,YAAO,GAAG,8BAA8B,CAAC;YAEjD,gBAAW,GAA8B,IAAIC,iBAAY,EAAe,CAAC;YAEzE,UAAK,GAAW,EAAE,CAAC;YAGjB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,KAAkB,IAAK,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,GAAA,CAAC,CAAC;SACxE;;;;;QAED,yCAAS;;;;QAAT,UAAU,GAAW;YACnB,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;;gBAC5C,MAAM,GAAG,IAAIC,eAAU,EAAE;iBAC5B,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC;iBAC9B,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YAEnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC,IAAI,CAACC,aAAG,CAAC,UAAA,KAAK,8BAAI,KAAK,KAAe,CAAC,CAAC,CAAC;SAC/F;;oBArBFC,eAAU;;;;oBANHC,eAAU;;QA4BlB,4BAAC;KAtBD;;;;;;ACPA;QAYE,iCAAmB,cAAmC,EACnC,kBAAyC;YADzC,mBAAc,GAAd,cAAc,CAAqB;YACnC,uBAAkB,GAAlB,kBAAkB,CAAuB;SAC3D;;;;QAED,0CAAQ;;;QAAR;YACE,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;;;;QAEO,uCAAK;;;QAAb;YAAA,iBAeC;YAdCC,cAAS,CAAC,QAAQ,EAAE,OAAO,CAAC;iBACzB,IAAI,CACHC,sBAAY,CAAC,IAAI,CAAC,EAClBC,8BAAoB,EAAE,EACtBL,aAAG,CAAC,UAAA,KAAK;;oBACD,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;;oBAC5B,KAAK,GAAW,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;gBACpD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;;gBAE9B,OAAO,KAAK,CAAC;aACd,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;gBACtB,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjD,CAAC,CAAC;SACJ;;oBA7BFM,cAAS,SAAC;wBACT,QAAQ,EAAE,kBAAkB;wBAC5B,QAAQ,EAAE,kBAAkB;qBAC7B;;;;oBANaC,gCAAmB;oBACzB,qBAAqB;;QAiC7B,8BAAC;KA/BD;;;;;;ACNA;QAgDE,iCAAmB,kBAAyC;YAAzC,uBAAkB,GAAlB,kBAAkB,CAAuB;;YAPnD,UAAK,GAAG,SAAS,CAAC;;YAClB,yBAAoB,GAAG,IAAI,CAAC;SAOpC;;;;QAED,0CAAQ;;;QAAR;YAAA,iBASC;YARC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;;gBAElC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB;qBACzC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;qBACzB,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,GAAG,KAAK,GAAA,EAC1C,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,GAAA,EAC7B,cAAM,OAAA,KAAI,CAAC,MAAM,GAAG,IAAI,GAAA,CAAC,CAAC;aAC/B;SACF;;;;QAED,6CAAW;;;QAAX;YACE,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;aAClC;SACF;;oBA5DFC,cAAS,SAAC;wBACT,QAAQ,EAAE,kBAAkB;wBAC5B,QAAQ,EAAE,gBAAgB;wBAC1B,QAAQ,EAAE,y2BAqBT;wBACD,MAAM,EAAE,CAAC,2bAER,CAAC;qBACH;;;;oBA9BO,qBAAqB;;;2BAiC1BC,UAAK;kCACLA,UAAK;4BAGLA,UAAK;2CACLA,UAAK;;QA0BR,8BAAC;KA9DD;;;;;;ACNA;QAkCE,0CAAmB,kBAAyC;YAAzC,uBAAkB,GAAlB,kBAAkB,CAAuB;;YAJnD,UAAK,GAAG,SAAS,CAAC;YAElB,yBAAoB,GAAG,IAAI,CAAC;SAGpC;;;;;;QAED,qDAAU;;;;;QAAV,UAAW,KAAa,EAAE,IAAU;YAClC,OAAO,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;SACrC;;oBAnCFD,cAAS,SAAC;wBACT,QAAQ,EAAE,4BAA4B;wBACtC,QAAQ,EAAE,yBAAyB;wBACnC,QAAQ,EAAE,inBAeT;wBACD,MAAM,EAAE,CAAC,gCAER,CAAC;qBACH;;;;oBAxBO,qBAAqB;;;4BA4B1BC,UAAK;+BACLA,UAAK;2CACLA,UAAK;;QAQR,uCAAC;KApCD;;;;;;ACJA;QAmBA;SAyBC;;;;QAZQ,4BAAO;;;QAAd;YACE,OAAO;gBACL,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE;oBACT,qBAAqB;oBACrBF,gCAAmB;oBACnB;wBACE,OAAO,EAAEG,oCAAuB;wBAChC,QAAQ,EAAEC,2BAAc;qBACzB;iBAAC;aACL,CAAC;SACH;;oBAxBFC,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;4BACZC,qBAAgB;4BAChBC,+BAAkB;4BAClBC,sBAAa;4BACbC,wBAAe;4BACfC,iCAAwB;yBACzB;wBACD,OAAO,EAAE,CAAC,uBAAuB,EAAE,gCAAgC,EAAE,uBAAuB,CAAC;wBAC7F,YAAY,EAAE,CAAC,uBAAuB,EAAE,gCAAgC,EAAE,uBAAuB,CAAC;qBACnG;;QAcD,2BAAC;KAzBD;;;;;;;;;;;;;;;;;;;;;;;;;;"}