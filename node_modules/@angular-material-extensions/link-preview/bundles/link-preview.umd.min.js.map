{"version":3,"file":"link-preview.umd.min.js","sources":["../../tmp/module/service/mat-link-preview.service.ts","../../tmp/module/directives/mat-link-preview.directive.ts","../../tmp/module/components/mat-link-preview/mat-link-preview.component.ts","../../tmp/module/components/mat-link-preview-container/mat-link-preview-container.component.ts","../../tmp/module/mat-link-preview.module.ts"],"sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../..';\n\n@Injectable()\nexport class MatLinkPreviewService {\n\n  private _accessKey = '5b54e80a65c77848ceaa4630331e8384950e09d392365';\n  private _apiURL = 'https://api.linkpreview.net/';\n\n  onLinkFound: EventEmitter<Array<Link>> = new EventEmitter<Array<Link>>();\n\n  links: Link[] = [];\n\n  constructor(private http: HttpClient) {\n    this.onLinkFound.subscribe((links: Array<Link>) => this.links = links);\n  }\n\n  fetchLink(url: string): Observable<LinkPreview> {\n    console.log('fetching the following link: ', url);\n    const params = new HttpParams()\n      .append('key', this._accessKey)\n      .append('q', url);\n\n    return this.http.get(this._apiURL, {params: params}).pipe(map(value => value as LinkPreview));\n  }\n}\n","import {Directive, OnInit} from '@angular/core';\nimport {fromEvent} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, map} from 'rxjs/operators';\nimport {Link, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../module/service/mat-link-preview.service';\n\n@Directive({\n  selector: '[matLinkPreview]',\n  exportAs: '[matLinkPreview]',\n})\nexport class MatLinkPreviewDirective implements OnInit {\n\n  constructor(public linkifyService: NgxLinkifyjsService,\n              public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    this._init();\n  }\n\n  private _init() {\n    fromEvent(document, 'input')\n      .pipe(\n        debounceTime(2000),\n        distinctUntilChanged(),\n        map(event => {\n          const data = event.target['value'];\n          const links: Link[] = this.linkifyService.find(data);\n          console.log('data: ', data);\n          console.log('links: ', links);\n          // event.target['value'] = this.linkifyService.linkify(data);\n          return links;\n        })).subscribe((links) => {\n      this.linkPreviewService.onLinkFound.emit(links);\n    });\n  }\n\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../../interfaces/linkpreview.interface';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview',\n  exportAs: 'matLinkPreview',\n  template: `\n    <ng-container *ngIf=\"!this.linkPreview && !this.loaded && this.showLoadingsProgress;then fetch else preview\">\n    </ng-container>\n    <ng-template #preview>\n      <mat-card *ngIf=\"this.linkPreview\">\n        <mat-card-content class=\"cut-text\">\n          <div class=\"img-container\" *ngIf=\"linkPreview.image\">\n            <img mat-card-image [src]=\"linkPreview?.image\">\n          </div>\n          <div>\n            <mat-card-title>{{linkPreview?.title}}</mat-card-title>\n            <mat-card-subtitle>{{linkPreview?.description}}</mat-card-subtitle>\n            <a [href]=\"linkPreview?.url\" mat-button [color]=\"color\">{{linkPreview?.url}}</a>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n\n    <ng-template #fetch>\n      <mat-spinner *ngIf=\"!this.hasError\"></mat-spinner>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}mat-card-content{flex-direction:row;box-sizing:border-box;display:flex}mat-card-content a{padding-left:0;padding-right:0}.img-container{margin-right:1rem;place-content:center;align-items:center;flex-direction:row;box-sizing:border-box;display:flex;flex:1 1 100%;max-width:20%;padding:24px 16px}.center-auto{margin-left:auto!important;margin-right:auto!important}.cut-text{text-overflow:ellipsis;overflow:hidden}\n  `]\n})\nexport class MatLinkPreviewComponent implements OnInit, OnDestroy {\n\n  @Input() link: Link;\n  @Input() linkPreview: LinkPreview;\n\n  // forwarded from the container\n  @Input() color = 'primary'; // accent | warn\n  @Input() showLoadingsProgress = true;\n\n  loaded: boolean;\n  hasError: boolean;\n  private _subscription: Subscription;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    if (this.link && !this.linkPreview) {\n      // this.loaded = false;\n      this._subscription = this.linkPreviewService\n        .fetchLink(this.link.href)\n        .subscribe(value => this.linkPreview = value,\n          error => this.hasError = true,\n          () => this.loaded = true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {Link} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview-container',\n  exportAs: 'matLinkPreviewContainer',\n  template: `\n    <ng-container *ngIf=\"!multiple && linkPreviewService.links.length > 0; then first else list\"></ng-container>\n\n    <ng-template #first>\n      <mat-link-preview [link]=\"linkPreviewService?.links[0]\"\n                        [showLoadingsProgress]=\"showLoadingsProgress\">\n      </mat-link-preview>\n    </ng-template>\n    <ng-template #list>\n      <div *ngFor=\"let link of linkPreviewService.links; trackBy: trackLinks\">\n        <mat-link-preview [link]=\"link\"\n                          [showLoadingsProgress]=\"showLoadingsProgress\">\n        </mat-link-preview>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}\n  `]\n})\nexport class MatLinkPreviewContainerComponent {\n\n  // to forward\n  @Input() color = 'primary'; // accent | warn\n  @Input() multiple: boolean;\n  @Input() showLoadingsProgress = true;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  trackLinks(index: number, link: Link) {\n    return link ? link.href : undefined;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MatLinkPreviewService} from './service/mat-link-preview.service';\nimport {DEFAULT_CONFIG, NgxLinkifyjsConfigToken, NgxLinkifyjsModule, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatButtonModule, MatCardModule, MatProgressSpinnerModule} from '@angular/material';\nimport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nimport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nimport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\n\n// Export module's public API\nexport {LinkPreview} from './interfaces/linkpreview.interface'\nexport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nexport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\nexport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nexport {MatLinkPreviewService} from './service/mat-link-preview.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    NgxLinkifyjsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective],\n  declarations: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective]\n})\nexport class MatLinkPreviewModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatLinkPreviewModule,\n      providers: [\n        MatLinkPreviewService,\n        NgxLinkifyjsService,\n        {\n          provide: NgxLinkifyjsConfigToken,\n          useValue: DEFAULT_CONFIG\n        }]\n    };\n  }\n}\n"],"names":["http","this","EventEmitter","onLinkFound","subscribe","links","_this","MatLinkPreviewService","url","console","log","params","HttpParams","append","_accessKey","get","_apiURL","pipe","map","value","Injectable","HttpClient","linkifyService","linkPreviewService","MatLinkPreviewDirective","_init","fromEvent","document","debounceTime","distinctUntilChanged","event","data","target","find","emit","Directive","selector","exportAs","NgxLinkifyjsService","MatLinkPreviewComponent","link","linkPreview","_subscription","fetchLink","href","error","hasError","loaded","unsubscribe","Component","template","styles","Input","MatLinkPreviewContainerComponent","index","undefined","MatLinkPreviewModule","ngModule","providers","provide","NgxLinkifyjsConfigToken","useValue","DEFAULT_CONFIG","NgModule","imports","CommonModule","HttpClientModule","NgxLinkifyjsModule","MatCardModule","MatButtonModule","MatProgressSpinnerModule","exports","declarations"],"mappings":"goBAiBE,WAAoBA,GAApB,WAAoBC,UAAAD,EAPZC,gBAAa,gDACbA,aAAU,+BAElBA,iBAAyC,IAAIC,eAE7CD,cAGEA,KAAKE,YAAYC,UAAU,SAACC,GAAuB,OAAAC,EAAKD,MAAQA,IAWpE,OAREE,sBAAA,SAAUC,GACRC,QAAQC,IAAI,gCAAiCF,OACvCG,GAAS,IAAIC,cAChBC,OAAO,MAAOZ,KAAKa,YACnBD,OAAO,IAAKL,GAEf,OAAOP,KAAKD,KAAKe,IAAId,KAAKe,SAAUL,OAAQA,IAASM,KAAKC,MAAI,SAAAC,oCApBjEC,wDANOC,kCCWN,WAAmBC,EACAC,GADAtB,oBAAAqB,EACArB,wBAAAsB,EAwBrB,OArBEC,qBAAA,WACEvB,KAAKwB,SAGCD,kBAAR,WAAA,WACEE,YAAUC,SAAU,SACjBV,KACCW,eAAa,KACbC,yBACAX,MAAI,SAAAY,OACIC,EAAOD,EAAME,OAAc,MAC3B3B,EAAgBC,EAAKgB,eAAeW,KAAKF,GAI/C,OAHAtB,QAAQC,IAAI,SAAUqB,GACtBtB,QAAQC,IAAI,UAAWL,GAEhBA,KACLD,UAAU,SAACC,GACjBC,EAAKiB,mBAAmBpB,YAAY+B,KAAK7B,0BA3B9C8B,mBACCC,SAAU,mBACVC,SAAU,gEALEC,6BACN/B,uBC4CN,WAAmBgB,GAAAtB,wBAAAsB,EAPVtB,WAAQ,UACRA,2BAAuB,EA0BlC,OAjBEsC,qBAAA,WAAA,WACMtC,KAAKuC,OAASvC,KAAKwC,cAErBxC,KAAKyC,cAAgBzC,KAAKsB,mBACvBoB,UAAU1C,KAAKuC,KAAKI,MACpBxC,UAAU,SAAAe,GAAS,OAAAb,EAAKmC,YAActB,GACrC,SAAA0B,GAAS,OAAAvC,EAAKwC,UAAW,GACzB,WAAM,OAAAxC,EAAKyC,QAAS,MAI5BR,wBAAA,WACMtC,KAAKyC,eACPzC,KAAKyC,cAAcM,mCA1DxBC,mBACCb,SAAU,mBACVC,SAAU,iBACVa,SAAU,w1BAsBVC,QAAS,0eA3BH5C,mCAiCL6C,6BACAA,uBAGAA,sCACAA,6BCRD,WAAmB7B,GAAAtB,wBAAAsB,EAJVtB,WAAQ,UAERA,2BAAuB,EAQlC,OAHEoD,uBAAA,SAAWC,EAAed,GACxB,OAAOA,EAAOA,EAAKI,UAAOW,uBAlC7BN,mBACCb,SAAU,6BACVC,SAAU,0BACVa,SAAU,smBAgBVC,QAAS,+EArBH5C,oCA4BL6C,0BACAA,sCACAA,6BCbH,cAyBA,OAZSI,UAAP,WACE,OACEC,SAAUD,EACVE,WACEnD,EACA+B,uBAEEqB,QAASC,0BACTC,SAAUC,yCArBnBC,kBACCC,SACEC,eACAC,mBACAC,qBACAC,gBACAC,kBACAC,4BAEFC,SAAUhC,EAAyBc,EAAkC7B,GACrEgD,cAAejC,EAAyBc,EAAkC7B"}