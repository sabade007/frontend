import { NgModule } from '@angular/core';
import { MaxPipe } from './max';
import { MinPipe } from './min';
import { PercentagePipe } from './percentage';
import { SumPipe } from './sum';
import { FloorPipe } from './floor';
import { RoundPipe } from './round';
import { SqrtPipe } from './sqrt';
import { PowerPipe } from './pow';
import { CeilPipe } from './ceil';
import { DegreesPipe } from './degrees';
import { BytesPipe } from './bytes';
import { RadiansPipe } from './radians';
export const MATH_PIPES = [
    MaxPipe,
    MinPipe,
    PercentagePipe,
    SumPipe,
    FloorPipe,
    RoundPipe,
    SqrtPipe,
    PowerPipe,
    CeilPipe,
    DegreesPipe,
    BytesPipe,
    RadiansPipe,
];
export class NgMathPipesModule {
}
NgMathPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: MATH_PIPES,
                imports: [],
                exports: MATH_PIPES,
            },] }
];
export { MaxPipe } from './max';
export { MinPipe } from './min';
export { PercentagePipe } from './percentage';
export { SumPipe } from './sum';
export { FloorPipe } from './floor';
export { RoundPipe } from './round';
export { SqrtPipe } from './sqrt';
export { PowerPipe } from './pow';
export { CeilPipe } from './ceil';
export { DegreesPipe } from './degrees';
export { BytesPipe } from './bytes';
export { RadiansPipe } from './radians';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbnJldmFoL3ByaXZhdGUvbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL25nLXBpcGVzL3BpcGVzL21hdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsT0FBTztJQUNQLE9BQU87SUFDUCxjQUFjO0lBQ2QsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0NBQ1osQ0FBQztBQU9GLE1BQU0sT0FBTyxpQkFBaUI7OztZQUw3QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLFVBQVU7Z0JBQ3hCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxVQUFVO2FBQ3BCOztBQUdELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNoQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNsQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1heFBpcGUgfSBmcm9tICcuL21heCc7XG5pbXBvcnQgeyBNaW5QaXBlIH0gZnJvbSAnLi9taW4nO1xuaW1wb3J0IHsgUGVyY2VudGFnZVBpcGUgfSBmcm9tICcuL3BlcmNlbnRhZ2UnO1xuaW1wb3J0IHsgU3VtUGlwZSB9IGZyb20gJy4vc3VtJztcbmltcG9ydCB7IEZsb29yUGlwZSB9IGZyb20gJy4vZmxvb3InO1xuaW1wb3J0IHsgUm91bmRQaXBlIH0gZnJvbSAnLi9yb3VuZCc7XG5pbXBvcnQgeyBTcXJ0UGlwZSB9IGZyb20gJy4vc3FydCc7XG5pbXBvcnQgeyBQb3dlclBpcGUgfSBmcm9tICcuL3Bvdyc7XG5pbXBvcnQgeyBDZWlsUGlwZSB9IGZyb20gJy4vY2VpbCc7XG5pbXBvcnQgeyBEZWdyZWVzUGlwZSB9IGZyb20gJy4vZGVncmVlcyc7XG5pbXBvcnQgeyBCeXRlc1BpcGUgfSBmcm9tICcuL2J5dGVzJztcbmltcG9ydCB7IFJhZGlhbnNQaXBlIH0gZnJvbSAnLi9yYWRpYW5zJztcblxuZXhwb3J0IGNvbnN0IE1BVEhfUElQRVMgPSBbXG4gIE1heFBpcGUsXG4gIE1pblBpcGUsXG4gIFBlcmNlbnRhZ2VQaXBlLFxuICBTdW1QaXBlLFxuICBGbG9vclBpcGUsXG4gIFJvdW5kUGlwZSxcbiAgU3FydFBpcGUsXG4gIFBvd2VyUGlwZSxcbiAgQ2VpbFBpcGUsXG4gIERlZ3JlZXNQaXBlLFxuICBCeXRlc1BpcGUsXG4gIFJhZGlhbnNQaXBlLFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBNQVRIX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogTUFUSF9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdNYXRoUGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgTWF4UGlwZSB9IGZyb20gJy4vbWF4JztcbmV4cG9ydCB7IE1pblBpcGUgfSBmcm9tICcuL21pbic7XG5leHBvcnQgeyBQZXJjZW50YWdlUGlwZSB9IGZyb20gJy4vcGVyY2VudGFnZSc7XG5leHBvcnQgeyBTdW1QaXBlIH0gZnJvbSAnLi9zdW0nO1xuZXhwb3J0IHsgRmxvb3JQaXBlIH0gZnJvbSAnLi9mbG9vcic7XG5leHBvcnQgeyBSb3VuZFBpcGUgfSBmcm9tICcuL3JvdW5kJztcbmV4cG9ydCB7IFNxcnRQaXBlIH0gZnJvbSAnLi9zcXJ0JztcbmV4cG9ydCB7IFBvd2VyUGlwZSB9IGZyb20gJy4vcG93JztcbmV4cG9ydCB7IENlaWxQaXBlIH0gZnJvbSAnLi9jZWlsJztcbmV4cG9ydCB7IERlZ3JlZXNQaXBlIH0gZnJvbSAnLi9kZWdyZWVzJztcbmV4cG9ydCB7IEJ5dGVzUGlwZSB9IGZyb20gJy4vYnl0ZXMnO1xuZXhwb3J0IHsgUmFkaWFuc1BpcGUgfSBmcm9tICcuL3JhZGlhbnMnO1xuIl19