import { Pipe } from '@angular/core';
export class TimeAgoPipe {
    /**
     * @param inputDate: Date | Moment - not included as TypeScript interface,
     * in order to keep `ngx-pipes` "pure" from dependencies!
     */
    transform(inputDate) {
        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
            return 'Invalid date';
        }
        const past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
        const now = +new Date();
        if (past > now) {
            return 'in the future';
        }
        for (let i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {
            const elm = TimeAgoPipe.MAPPER[i];
            const unit = Math.floor(ms / (div /= elm.div));
            if (unit >= 1) {
                return unit === 1 ? elm.single : `${unit} ${elm.many} ago`;
            }
        }
        return 'just now';
    }
}
TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
TimeAgoPipe.MAPPER = [
    { single: 'last year', many: 'years', div: 1 },
    { single: 'last month', many: 'months', div: 12 },
    { single: 'last week', many: 'weeks', div: 4 },
    { single: 'yesterday', many: 'days', div: 7 },
    { single: 'an hour ago', many: 'hours', div: 24 },
    { single: 'just now', many: 'minutes', div: 60 },
];
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{ name: 'timeAgo' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbnJldmFoL3ByaXZhdGUvbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL25nLXBpcGVzL3BpcGVzL2RhdGUvdGltZS1hZ28udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQsTUFBTSxPQUFPLFdBQVc7SUFXdEI7OztPQUdHO0lBQ0ksU0FBUyxDQUFDLFNBQWM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pFLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV4QixJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLGVBQWUsQ0FBQztTQUN4QjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JHLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFL0MsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUNiLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDO2FBQzVEO1NBQ0Y7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOztBQXBDYyxtQkFBTyxHQUFXLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNuRCxrQkFBTSxHQUFRO0lBQzNCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDOUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUNqRCxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO0lBQzlDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDN0MsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUNqRCxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0NBQ2pELENBQUM7O1lBVkgsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoeyBuYW1lOiAndGltZUFnbycgfSlcbmV4cG9ydCBjbGFzcyBUaW1lQWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHN0YXRpYyBZRUFSX01TOiBudW1iZXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogNyAqIDQgKiAxMjtcbiAgcHJpdmF0ZSBzdGF0aWMgTUFQUEVSOiBhbnkgPSBbXG4gICAgeyBzaW5nbGU6ICdsYXN0IHllYXInLCBtYW55OiAneWVhcnMnLCBkaXY6IDEgfSxcbiAgICB7IHNpbmdsZTogJ2xhc3QgbW9udGgnLCBtYW55OiAnbW9udGhzJywgZGl2OiAxMiB9LFxuICAgIHsgc2luZ2xlOiAnbGFzdCB3ZWVrJywgbWFueTogJ3dlZWtzJywgZGl2OiA0IH0sXG4gICAgeyBzaW5nbGU6ICd5ZXN0ZXJkYXknLCBtYW55OiAnZGF5cycsIGRpdjogNyB9LFxuICAgIHsgc2luZ2xlOiAnYW4gaG91ciBhZ28nLCBtYW55OiAnaG91cnMnLCBkaXY6IDI0IH0sXG4gICAgeyBzaW5nbGU6ICdqdXN0IG5vdycsIG1hbnk6ICdtaW51dGVzJywgZGl2OiA2MCB9LFxuICBdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gaW5wdXREYXRlOiBEYXRlIHwgTW9tZW50IC0gbm90IGluY2x1ZGVkIGFzIFR5cGVTY3JpcHQgaW50ZXJmYWNlLFxuICAgKiBpbiBvcmRlciB0byBrZWVwIGBuZ3gtcGlwZXNgIFwicHVyZVwiIGZyb20gZGVwZW5kZW5jaWVzIVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybShpbnB1dERhdGU6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKCFpbnB1dERhdGUgfHwgKCFpbnB1dERhdGUuZ2V0VGltZSAmJiAhaW5wdXREYXRlLnRvRGF0ZSkpIHtcbiAgICAgIHJldHVybiAnSW52YWxpZCBkYXRlJztcbiAgICB9XG5cbiAgICBjb25zdCBwYXN0ID0gaW5wdXREYXRlLnRvRGF0ZSA/IGlucHV0RGF0ZS50b0RhdGUoKSA6IGlucHV0RGF0ZS5nZXRUaW1lKCk7XG4gICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKCk7XG5cbiAgICBpZiAocGFzdCA+IG5vdykge1xuICAgICAgcmV0dXJuICdpbiB0aGUgZnV0dXJlJztcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IFRpbWVBZ29QaXBlLk1BUFBFUi5sZW5ndGgsIG1zID0gbm93IC0gcGFzdCwgZGl2ID0gVGltZUFnb1BpcGUuWUVBUl9NUzsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgZWxtID0gVGltZUFnb1BpcGUuTUFQUEVSW2ldO1xuICAgICAgY29uc3QgdW5pdCA9IE1hdGguZmxvb3IobXMgLyAoZGl2IC89IGVsbS5kaXYpKTtcblxuICAgICAgaWYgKHVuaXQgPj0gMSkge1xuICAgICAgICByZXR1cm4gdW5pdCA9PT0gMSA/IGVsbS5zaW5nbGUgOiBgJHt1bml0fSAke2VsbS5tYW55fSBhZ29gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnanVzdCBub3cnO1xuICB9XG59XG4iXX0=