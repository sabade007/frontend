import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
export class OrderByPipe {
    transform(input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        const out = [...input];
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort((a, b) => {
                const l = config.length;
                for (let i = 0; i < l; ++i) {
                    const [prop, asc] = OrderByPipe.extractFromConfig(config[i]);
                    const pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            const [prop, asc, sign] = OrderByPipe.extractFromConfig(config);
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    }
    static simpleSort(a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    }
    static orderCompare(prop, asc, a, b) {
        const first = extractDeepPropertyByMapKey(a, prop);
        const second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            const pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    }
    static extractFromConfig(config) {
        const sign = config.substr(0, 1);
        const prop = config.replace(/^[-+]/, '');
        const asc = sign !== '-';
        return [prop, asc, sign];
    }
}
OrderByPipe.decorators = [
    { type: Pipe, args: [{ name: 'orderBy' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbnJldmFoL3ByaXZhdGUvbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL25nLXBpcGVzL3BpcGVzL2FycmF5L29yZGVyLWJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHeEYsTUFBTSxPQUFPLFdBQVc7SUFJdEIsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFZO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFFdkIsOEJBQThCO1FBQzlCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQzFCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM3RCxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7d0JBQ2IsT0FBTyxHQUFHLENBQUM7cUJBQ1o7aUJBQ0Y7Z0JBRUQsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVoRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN2QiwwQ0FBMEM7Z0JBQzFDLFFBQVEsSUFBSSxFQUFFO29CQUNaLEtBQUssR0FBRzt3QkFDTixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDckQsS0FBSyxHQUFHO3dCQUNOLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUNoRTthQUNGO1lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNqRTtRQUVELHdCQUF3QjtRQUN4QixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtRQUN0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVPLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBWSxFQUFFLEdBQVksRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUNwRSxNQUFNLEtBQUssR0FBRywyQkFBMkIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQUcsMkJBQTJCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBELElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtZQUNwQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUN0QyxPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ1g7UUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUVwRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUN6QjtRQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQy9DLENBQUM7SUFFTyxNQUFNLENBQUMsaUJBQWlCLENBQUMsTUFBVztRQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssR0FBRyxDQUFDO1FBRXpCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7OztZQXBGRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LCBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdvcmRlckJ5JyB9KVxuZXhwb3J0IGNsYXNzIE9yZGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgY29uZmlnPzogYW55KTogVDtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgY29uZmlnPzogYW55KTogYW55W107XG5cbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGNvbmZpZz86IGFueSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IG91dCA9IFsuLi5pbnB1dF07XG5cbiAgICAvLyBzb3J0IGJ5IG11bHRpcGxlIHByb3BlcnRpZXNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcpKSB7XG4gICAgICByZXR1cm4gb3V0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgbCA9IGNvbmZpZy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgW3Byb3AsIGFzY10gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWdbaV0pO1xuICAgICAgICAgIGNvbnN0IHBvcyA9IE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZShwcm9wLCBhc2MsIGEsIGIpO1xuICAgICAgICAgIGlmIChwb3MgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzb3J0IGJ5IGEgc2luZ2xlIHByb3BlcnR5IHZhbHVlXG4gICAgaWYgKGlzU3RyaW5nKGNvbmZpZykpIHtcbiAgICAgIGNvbnN0IFtwcm9wLCBhc2MsIHNpZ25dID0gT3JkZXJCeVBpcGUuZXh0cmFjdEZyb21Db25maWcoY29uZmlnKTtcblxuICAgICAgaWYgKGNvbmZpZy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN3aXRjaC1kZWZhdWx0XG4gICAgICAgIHN3aXRjaCAoc2lnbikge1xuICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZS5iaW5kKHRoaXMsIHByb3AsIGFzYykpO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc29ydCBieSB2YWx1ZVxuICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc2ltcGxlU29ydChhOiBhbnksIGI6IGFueSkge1xuICAgIHJldHVybiBpc1N0cmluZyhhKSAmJiBpc1N0cmluZyhiKSA/IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkgOiBhIC0gYjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG9yZGVyQ29tcGFyZShwcm9wOiBzdHJpbmcsIGFzYzogYm9vbGVhbiwgYTogYW55LCBiOiBhbnkpIHtcbiAgICBjb25zdCBmaXJzdCA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShhLCBwcm9wKTtcbiAgICBjb25zdCBzZWNvbmQgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYiwgcHJvcCk7XG5cbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZpcnN0KSB8fCBmaXJzdCA9PT0gJycpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChzZWNvbmQpIHx8IHNlY29uZCA9PT0gJycpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoZmlyc3QpICYmIGlzU3RyaW5nKHNlY29uZCkpIHtcbiAgICAgIGNvbnN0IHBvcyA9IGZpcnN0LnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShzZWNvbmQudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgIHJldHVybiBhc2MgPyBwb3MgOiAtcG9zO1xuICAgIH1cblxuICAgIHJldHVybiBhc2MgPyBmaXJzdCAtIHNlY29uZCA6IHNlY29uZCAtIGZpcnN0O1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZXh0cmFjdEZyb21Db25maWcoY29uZmlnOiBhbnkpIHtcbiAgICBjb25zdCBzaWduID0gY29uZmlnLnN1YnN0cigwLCAxKTtcbiAgICBjb25zdCBwcm9wID0gY29uZmlnLnJlcGxhY2UoL15bLStdLywgJycpO1xuICAgIGNvbnN0IGFzYyA9IHNpZ24gIT09ICctJztcblxuICAgIHJldHVybiBbcHJvcCwgYXNjLCBzaWduXTtcbiAgfVxufVxuIl19