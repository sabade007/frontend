import { DiffPipe } from './diff';
import { InitialPipe } from './initial';
import { FlattenPipe } from './flatten';
import { IntersectionPipe } from './intersection';
import { ReversePipe } from './reverse';
import { TailPipe } from './tail';
import { TrurthifyPipe } from './truthify';
import { UnionPipe } from './union';
import { UniquePipe } from './unique';
import { WithoutPipe } from './without';
import { PluckPipe } from './pluck';
import { ShufflePipe } from './shuffle';
import { EveryPipe } from './every';
import { SomePipe } from './some';
import { SamplePipe } from './sample';
import { GroupByPipe } from './group-by';
import { FilterByPipe } from './filter-by';
import { OrderByPipe } from './order-by';
import { NgModule } from '@angular/core';
import { GroupByImpurePipe } from './group-by-impure';
import { FilterByImpurePipe } from './filter-by-impure';
import { OrderByImpurePipe } from './order-by-impure';
import { RangePipe } from './range';
import { ChunkPipe } from './chunk';
import { FromPairsPipe } from './from-pairs';
const ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
    ChunkPipe,
    FromPairsPipe
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES,
            },] }
];
export { DiffPipe } from './diff';
export { InitialPipe } from './initial';
export { FlattenPipe } from './flatten';
export { IntersectionPipe } from './intersection';
export { ReversePipe } from './reverse';
export { TailPipe } from './tail';
export { TrurthifyPipe } from './truthify';
export { UnionPipe } from './union';
export { UniquePipe } from './unique';
export { WithoutPipe } from './without';
export { PluckPipe } from './pluck';
export { ShufflePipe } from './shuffle';
export { EveryPipe } from './every';
export { SomePipe } from './some';
export { SamplePipe } from './sample';
export { GroupByPipe } from './group-by';
export { FilterByPipe } from './filter-by';
export { OrderByPipe } from './order-by';
export { GroupByImpurePipe } from './group-by-impure';
export { FilterByImpurePipe } from './filter-by-impure';
export { OrderByImpurePipe } from './order-by-impure';
export { RangePipe } from './range';
export { ChunkPipe } from './chunk';
export { FromPairsPipe } from './from-pairs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbnJldmFoL3ByaXZhdGUvbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL25nLXBpcGVzL3BpcGVzL2FycmF5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTdDLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsUUFBUTtJQUNSLGFBQWE7SUFDYixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsYUFBYTtDQUNkLENBQUM7QUFPRixNQUFNLE9BQU8sa0JBQWtCOzs7WUFMOUIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxXQUFXO2dCQUN6QixPQUFPLEVBQUUsRUFBRTtnQkFDWCxPQUFPLEVBQUUsV0FBVzthQUNyQjs7QUFHRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWZmUGlwZSB9IGZyb20gJy4vZGlmZic7XG5pbXBvcnQgeyBJbml0aWFsUGlwZSB9IGZyb20gJy4vaW5pdGlhbCc7XG5pbXBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gJy4vZmxhdHRlbic7XG5pbXBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSAnLi9pbnRlcnNlY3Rpb24nO1xuaW1wb3J0IHsgUmV2ZXJzZVBpcGUgfSBmcm9tICcuL3JldmVyc2UnO1xuaW1wb3J0IHsgVGFpbFBpcGUgfSBmcm9tICcuL3RhaWwnO1xuaW1wb3J0IHsgVHJ1cnRoaWZ5UGlwZSB9IGZyb20gJy4vdHJ1dGhpZnknO1xuaW1wb3J0IHsgVW5pb25QaXBlIH0gZnJvbSAnLi91bmlvbic7XG5pbXBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSAnLi91bmlxdWUnO1xuaW1wb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tICcuL3dpdGhvdXQnO1xuaW1wb3J0IHsgUGx1Y2tQaXBlIH0gZnJvbSAnLi9wbHVjayc7XG5pbXBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gJy4vc2h1ZmZsZSc7XG5pbXBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tICcuL2V2ZXJ5JztcbmltcG9ydCB7IFNvbWVQaXBlIH0gZnJvbSAnLi9zb21lJztcbmltcG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tICcuL3NhbXBsZSc7XG5pbXBvcnQgeyBHcm91cEJ5UGlwZSB9IGZyb20gJy4vZ3JvdXAtYnknO1xuaW1wb3J0IHsgRmlsdGVyQnlQaXBlIH0gZnJvbSAnLi9maWx0ZXItYnknO1xuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5JztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cEJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZ3JvdXAtYnktaW1wdXJlJztcbmltcG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5LWltcHVyZSc7XG5pbXBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vb3JkZXItYnktaW1wdXJlJztcbmltcG9ydCB7IFJhbmdlUGlwZSB9IGZyb20gJy4vcmFuZ2UnO1xuaW1wb3J0IHsgQ2h1bmtQaXBlIH0gZnJvbSAnLi9jaHVuayc7XG5pbXBvcnQgeyBGcm9tUGFpcnNQaXBlIH0gZnJvbSAnLi9mcm9tLXBhaXJzJztcblxuY29uc3QgQVJSQVlfUElQRVMgPSBbXG4gIERpZmZQaXBlLFxuICBGbGF0dGVuUGlwZSxcbiAgSW5pdGlhbFBpcGUsXG4gIEludGVyc2VjdGlvblBpcGUsXG4gIFJldmVyc2VQaXBlLFxuICBUYWlsUGlwZSxcbiAgVHJ1cnRoaWZ5UGlwZSxcbiAgVW5pb25QaXBlLFxuICBVbmlxdWVQaXBlLFxuICBXaXRob3V0UGlwZSxcbiAgUGx1Y2tQaXBlLFxuICBTaHVmZmxlUGlwZSxcbiAgRXZlcnlQaXBlLFxuICBTb21lUGlwZSxcbiAgU2FtcGxlUGlwZSxcbiAgR3JvdXBCeVBpcGUsXG4gIEdyb3VwQnlJbXB1cmVQaXBlLFxuICBGaWx0ZXJCeVBpcGUsXG4gIEZpbHRlckJ5SW1wdXJlUGlwZSxcbiAgT3JkZXJCeVBpcGUsXG4gIE9yZGVyQnlJbXB1cmVQaXBlLFxuICBSYW5nZVBpcGUsXG4gIENodW5rUGlwZSxcbiAgRnJvbVBhaXJzUGlwZVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBBUlJBWV9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IEFSUkFZX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0FycmF5UGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgRGlmZlBpcGUgfSBmcm9tICcuL2RpZmYnO1xuZXhwb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tICcuL2luaXRpYWwnO1xuZXhwb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tICcuL2ZsYXR0ZW4nO1xuZXhwb3J0IHsgSW50ZXJzZWN0aW9uUGlwZSB9IGZyb20gJy4vaW50ZXJzZWN0aW9uJztcbmV4cG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSAnLi9yZXZlcnNlJztcbmV4cG9ydCB7IFRhaWxQaXBlIH0gZnJvbSAnLi90YWlsJztcbmV4cG9ydCB7IFRydXJ0aGlmeVBpcGUgfSBmcm9tICcuL3RydXRoaWZ5JztcbmV4cG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gJy4vdW5pb24nO1xuZXhwb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gJy4vdW5pcXVlJztcbmV4cG9ydCB7IFdpdGhvdXRQaXBlIH0gZnJvbSAnLi93aXRob3V0JztcbmV4cG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gJy4vcGx1Y2snO1xuZXhwb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tICcuL3NodWZmbGUnO1xuZXhwb3J0IHsgRXZlcnlQaXBlIH0gZnJvbSAnLi9ldmVyeSc7XG5leHBvcnQgeyBTb21lUGlwZSB9IGZyb20gJy4vc29tZSc7XG5leHBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSAnLi9zYW1wbGUnO1xuZXhwb3J0IHsgR3JvdXBCeVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5JztcbmV4cG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5JztcbmV4cG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSAnLi9vcmRlci1ieSc7XG5leHBvcnQgeyBHcm91cEJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZ3JvdXAtYnktaW1wdXJlJztcbmV4cG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5LWltcHVyZSc7XG5leHBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vb3JkZXItYnktaW1wdXJlJztcbmV4cG9ydCB7IFJhbmdlUGlwZSB9IGZyb20gJy4vcmFuZ2UnO1xuZXhwb3J0IHsgQ2h1bmtQaXBlIH0gZnJvbSAnLi9jaHVuayc7XG5leHBvcnQgeyBGcm9tUGFpcnNQaXBlIH0gZnJvbSAnLi9mcm9tLXBhaXJzJztcbiJdfQ==