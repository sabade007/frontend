import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { DAYS_IN_WEEK } from '@taiga-ui/cdk';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';
import { getDayFromMonthRowCol } from './utils';
const CALENDAR_ROWS_COUNT = 6;
let TuiCalendarSheetPipe = class TuiCalendarSheetPipe {
    constructor(firstDayOfWeek) {
        this.firstDayOfWeek = firstDayOfWeek;
        this.currentMonth = null;
        this.currentSheet = [];
    }
    transform(month, showAdjacentDays = false) {
        var _a;
        if ((_a = this.currentMonth) === null || _a === void 0 ? void 0 : _a.monthSame(month)) {
            return this.currentSheet;
        }
        const sheet = [];
        for (let rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
            const row = [];
            for (let colIndex = 0; colIndex < DAYS_IN_WEEK; colIndex++) {
                const day = getDayFromMonthRowCol({
                    month,
                    rowIndex,
                    colIndex,
                    firstDayOfWeek: this.firstDayOfWeek,
                });
                const isPrevMonthDay = (day, relativeToMonth = month) => day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                const isNextMonthDay = (day, relativeToMonth = month) => day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                if (isPrevMonthDay(day) && !showAdjacentDays) {
                    continue;
                }
                if (isNextMonthDay(day) && !showAdjacentDays) {
                    break;
                }
                row.push(day);
            }
            sheet.push(row);
        }
        this.currentSheet = sheet.filter(row => row.length);
        this.currentMonth = month;
        return this.currentSheet;
    }
};
TuiCalendarSheetPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_FIRST_DAY_OF_WEEK,] }] }
];
TuiCalendarSheetPipe = __decorate([
    Pipe({
        name: `tuiCalendarSheet`,
    }),
    __param(0, Inject(TUI_FIRST_DAY_OF_WEEK))
], TuiCalendarSheetPipe);
export { TuiCalendarSheetPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2hlZXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3BpcGVzL2NhbGVuZGFyLXNoZWV0LyIsInNvdXJjZXMiOlsiY2FsZW5kYXItc2hlZXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQWlDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUU5QyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUs5QixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUk3QixZQUVxQixjQUE0QjtRQUE1QixtQkFBYyxHQUFkLGNBQWMsQ0FBYztRQUx6QyxpQkFBWSxHQUFvQixJQUFJLENBQUM7UUFDckMsaUJBQVksR0FBcUMsRUFBRSxDQUFDO0lBS3pELENBQUM7SUFFSixTQUFTLENBQ0wsS0FBZSxFQUNmLG1CQUE0QixLQUFLOztRQUVqQyxVQUFJLElBQUksQ0FBQyxZQUFZLDBDQUFFLFNBQVMsQ0FBQyxLQUFLLEdBQUc7WUFDckMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzVCO1FBRUQsTUFBTSxLQUFLLEdBQTZCLEVBQUUsQ0FBQztRQUUzQyxLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDL0QsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO1lBRXpCLEtBQUssSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUU7Z0JBQ3hELE1BQU0sR0FBRyxHQUFHLHFCQUFxQixDQUFDO29CQUM5QixLQUFLO29CQUNMLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7aUJBQ3RDLENBQUMsQ0FBQztnQkFFSCxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBRSxlQUFlLEdBQUcsS0FBSyxFQUFXLEVBQUUsQ0FDckUsR0FBRyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFFekUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQUUsZUFBZSxHQUFHLEtBQUssRUFBVyxFQUFFLENBQ3JFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUM7Z0JBRXpFLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFDLFNBQVM7aUJBQ1o7Z0JBRUQsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDMUMsTUFBTTtpQkFDVDtnQkFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztDQUNKLENBQUE7OzRDQWxEUSxNQUFNLFNBQUMscUJBQXFCOztBQUx4QixvQkFBb0I7SUFIaEMsSUFBSSxDQUFDO1FBQ0YsSUFBSSxFQUFFLGtCQUFrQjtLQUMzQixDQUFDO0lBTU8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtHQUx6QixvQkFBb0IsQ0F1RGhDO1NBdkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7REFZU19JTl9XRUVLLCBUdWlEYXksIFR1aURheU9mV2VlaywgVHVpTW9udGh9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfRklSU1RfREFZX09GX1dFRUt9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5cbmltcG9ydCB7Z2V0RGF5RnJvbU1vbnRoUm93Q29sfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgQ0FMRU5EQVJfUk9XU19DT1VOVCA9IDY7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiBgdHVpQ2FsZW5kYXJTaGVldGAsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUNhbGVuZGFyU2hlZXRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBjdXJyZW50TW9udGg6IFR1aU1vbnRoIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBjdXJyZW50U2hlZXQ6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVHVpRGF5W10+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfRklSU1RfREFZX09GX1dFRUspXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZmlyc3REYXlPZldlZWs6IFR1aURheU9mV2VlayxcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm0oXG4gICAgICAgIG1vbnRoOiBUdWlNb250aCxcbiAgICAgICAgc2hvd0FkamFjZW50RGF5czogYm9vbGVhbiA9IGZhbHNlLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVHVpRGF5W10+IHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vbnRoPy5tb250aFNhbWUobW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U2hlZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaGVldDogQXJyYXk8cmVhZG9ubHkgVHVpRGF5W10+ID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IENBTEVOREFSX1JPV1NfQ09VTlQ7IHJvd0luZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdzogVHVpRGF5W10gPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IERBWVNfSU5fV0VFSzsgY29sSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheSA9IGdldERheUZyb21Nb250aFJvd0NvbCh7XG4gICAgICAgICAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgICAgICAgICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgY29sSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrOiB0aGlzLmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNQcmV2TW9udGhEYXkgPSAoZGF5OiBUdWlEYXksIHJlbGF0aXZlVG9Nb250aCA9IG1vbnRoKTogYm9vbGVhbiA9PlxuICAgICAgICAgICAgICAgICAgICBkYXkueWVhciA8IHJlbGF0aXZlVG9Nb250aC55ZWFyIHx8IGRheS5tb250aCA8IHJlbGF0aXZlVG9Nb250aC5tb250aDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTmV4dE1vbnRoRGF5ID0gKGRheTogVHVpRGF5LCByZWxhdGl2ZVRvTW9udGggPSBtb250aCk6IGJvb2xlYW4gPT5cbiAgICAgICAgICAgICAgICAgICAgZGF5LnllYXIgPiByZWxhdGl2ZVRvTW9udGgueWVhciB8fCBkYXkubW9udGggPiByZWxhdGl2ZVRvTW9udGgubW9udGg7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNQcmV2TW9udGhEYXkoZGF5KSAmJiAhc2hvd0FkamFjZW50RGF5cykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNOZXh0TW9udGhEYXkoZGF5KSAmJiAhc2hvd0FkamFjZW50RGF5cykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByb3cucHVzaChkYXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaGVldC5wdXNoKHJvdyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnRTaGVldCA9IHNoZWV0LmZpbHRlcihyb3cgPT4gcm93Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuY3VycmVudE1vbnRoID0gbW9udGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNoZWV0O1xuICAgIH1cbn1cbiJdfQ==