import { DAYS_IN_WEEK, inRange, tuiAssert, TuiDay, } from '@taiga-ui/cdk';
// TODO: 3.0 Remove export in ivy compilation
/**
 * Computes day of week offset of the beginning of the month
 */
export const getMonthStartDaysOffset = (month, firstDayOfWeek) => {
    const startMonthOffsetFromSunday = new Date(month.year, month.month, 1).getDay();
    return startMonthOffsetFromSunday >= firstDayOfWeek
        ? startMonthOffsetFromSunday - firstDayOfWeek
        : DAYS_IN_WEEK - (firstDayOfWeek - startMonthOffsetFromSunday);
};
/*
TODO: 3.0 delete:
 * TuiDay.getDayFromMonthRowCol
 * TuiMonth.monthStartDaysOffset
 * TuiMonth.weeksRowsCount
 * TuiYear.yearStartDaysOffset
 * TuiYear.getYearStartDaysOffset
 */
/**
 * Calculated day on a calendar grid
 * @return resulting day on these coordinates (could exceed passed month)
 */
export const getDayFromMonthRowCol = ({ month, rowIndex, colIndex, firstDayOfWeek, }) => {
    tuiAssert.assert(Number.isInteger(rowIndex));
    tuiAssert.assert(inRange(rowIndex, 0, 6));
    tuiAssert.assert(Number.isInteger(colIndex));
    tuiAssert.assert(inRange(colIndex, 0, DAYS_IN_WEEK));
    let day = rowIndex * DAYS_IN_WEEK +
        colIndex -
        getMonthStartDaysOffset(month, firstDayOfWeek) +
        1;
    if (day > month.daysCount) {
        day -= month.daysCount;
        month = month.append({ month: 1 });
    }
    if (day <= 0) {
        month = month.append({ month: -1 });
        day = month.daysCount + day;
    }
    return new TuiDay(month.year, month.month, day);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9waXBlcy9jYWxlbmRhci1zaGVldC8iLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxZQUFZLEVBQ1osT0FBTyxFQUNQLFNBQVMsRUFDVCxNQUFNLEdBR1QsTUFBTSxlQUFlLENBQUM7QUFFdkIsNkNBQTZDO0FBQzdDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDbkMsS0FBZSxFQUNmLGNBQTRCLEVBQ3RCLEVBQUU7SUFDUixNQUFNLDBCQUEwQixHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVqRixPQUFPLDBCQUEwQixJQUFJLGNBQWM7UUFDL0MsQ0FBQyxDQUFDLDBCQUEwQixHQUFHLGNBQWM7UUFDN0MsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLGNBQWMsR0FBRywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEVBQ2xDLEtBQUssRUFDTCxRQUFRLEVBQ1IsUUFBUSxFQUNSLGNBQWMsR0FlakIsRUFBVSxFQUFFO0lBQ1QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDN0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUVyRCxJQUFJLEdBQUcsR0FDSCxRQUFRLEdBQUcsWUFBWTtRQUN2QixRQUFRO1FBQ1IsdUJBQXVCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQztRQUM5QyxDQUFDLENBQUM7SUFFTixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFO1FBQ3ZCLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7S0FDcEM7SUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDVixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO0tBQy9CO0lBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEQVlTX0lOX1dFRUssXG4gICAgaW5SYW5nZSxcbiAgICB0dWlBc3NlcnQsXG4gICAgVHVpRGF5LFxuICAgIFR1aURheU9mV2VlayxcbiAgICBUdWlNb250aCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbi8vIFRPRE86IDMuMCBSZW1vdmUgZXhwb3J0IGluIGl2eSBjb21waWxhdGlvblxuLyoqXG4gKiBDb21wdXRlcyBkYXkgb2Ygd2VlayBvZmZzZXQgb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgbW9udGhcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE1vbnRoU3RhcnREYXlzT2Zmc2V0ID0gKFxuICAgIG1vbnRoOiBUdWlNb250aCxcbiAgICBmaXJzdERheU9mV2VlazogVHVpRGF5T2ZXZWVrLFxuKTogbnVtYmVyID0+IHtcbiAgICBjb25zdCBzdGFydE1vbnRoT2Zmc2V0RnJvbVN1bmRheSA9IG5ldyBEYXRlKG1vbnRoLnllYXIsIG1vbnRoLm1vbnRoLCAxKS5nZXREYXkoKTtcblxuICAgIHJldHVybiBzdGFydE1vbnRoT2Zmc2V0RnJvbVN1bmRheSA+PSBmaXJzdERheU9mV2Vla1xuICAgICAgICA/IHN0YXJ0TW9udGhPZmZzZXRGcm9tU3VuZGF5IC0gZmlyc3REYXlPZldlZWtcbiAgICAgICAgOiBEQVlTX0lOX1dFRUsgLSAoZmlyc3REYXlPZldlZWsgLSBzdGFydE1vbnRoT2Zmc2V0RnJvbVN1bmRheSk7XG59O1xuXG4vKlxuVE9ETzogMy4wIGRlbGV0ZTpcbiAqIFR1aURheS5nZXREYXlGcm9tTW9udGhSb3dDb2xcbiAqIFR1aU1vbnRoLm1vbnRoU3RhcnREYXlzT2Zmc2V0XG4gKiBUdWlNb250aC53ZWVrc1Jvd3NDb3VudFxuICogVHVpWWVhci55ZWFyU3RhcnREYXlzT2Zmc2V0XG4gKiBUdWlZZWFyLmdldFllYXJTdGFydERheXNPZmZzZXRcbiAqL1xuLyoqXG4gKiBDYWxjdWxhdGVkIGRheSBvbiBhIGNhbGVuZGFyIGdyaWRcbiAqIEByZXR1cm4gcmVzdWx0aW5nIGRheSBvbiB0aGVzZSBjb29yZGluYXRlcyAoY291bGQgZXhjZWVkIHBhc3NlZCBtb250aClcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERheUZyb21Nb250aFJvd0NvbCA9ICh7XG4gICAgbW9udGgsXG4gICAgcm93SW5kZXgsXG4gICAgY29sSW5kZXgsXG4gICAgZmlyc3REYXlPZldlZWssXG59OiB7XG4gICAgbW9udGg6IFR1aU1vbnRoO1xuICAgIC8qKlxuICAgICAqIHJvdyBpbiBhIGNhbGVuZGFyXG4gICAgICovXG4gICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBjb2x1bW4gaW4gYSBjYWxlbmRhclxuICAgICAqL1xuICAgIGNvbEluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGluZGV4IChTdW5kYXkgLSAwLCBTYXR1cmRheSAtIDYpXG4gICAgICovXG4gICAgZmlyc3REYXlPZldlZWs6IFR1aURheU9mV2Vlaztcbn0pOiBUdWlEYXkgPT4ge1xuICAgIHR1aUFzc2VydC5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihyb3dJbmRleCkpO1xuICAgIHR1aUFzc2VydC5hc3NlcnQoaW5SYW5nZShyb3dJbmRleCwgMCwgNikpO1xuICAgIHR1aUFzc2VydC5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihjb2xJbmRleCkpO1xuICAgIHR1aUFzc2VydC5hc3NlcnQoaW5SYW5nZShjb2xJbmRleCwgMCwgREFZU19JTl9XRUVLKSk7XG5cbiAgICBsZXQgZGF5ID1cbiAgICAgICAgcm93SW5kZXggKiBEQVlTX0lOX1dFRUsgK1xuICAgICAgICBjb2xJbmRleCAtXG4gICAgICAgIGdldE1vbnRoU3RhcnREYXlzT2Zmc2V0KG1vbnRoLCBmaXJzdERheU9mV2VlaykgK1xuICAgICAgICAxO1xuXG4gICAgaWYgKGRheSA+IG1vbnRoLmRheXNDb3VudCkge1xuICAgICAgICBkYXkgLT0gbW9udGguZGF5c0NvdW50O1xuICAgICAgICBtb250aCA9IG1vbnRoLmFwcGVuZCh7bW9udGg6IDF9KTtcbiAgICB9XG5cbiAgICBpZiAoZGF5IDw9IDApIHtcbiAgICAgICAgbW9udGggPSBtb250aC5hcHBlbmQoe21vbnRoOiAtMX0pO1xuICAgICAgICBkYXkgPSBtb250aC5kYXlzQ291bnQgKyBkYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUdWlEYXkobW9udGgueWVhciwgbW9udGgubW9udGgsIGRheSk7XG59O1xuIl19