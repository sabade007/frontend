import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TUI_ICONS_PATH } from '@taiga-ui/core/tokens';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
let TuiFlagPipe = class TuiFlagPipe {
    constructor(iconsPath) {
        this.iconsPath = iconsPath;
        this.staticPath = this.iconsPath(`tuiIcon`).replace(`tuiIcon.svg#tuiIcon`, ``);
    }
    transform(countryIsoCode) {
        if (!countryIsoCode) {
            return null;
        }
        switch (countryIsoCode) {
            case TuiCountryIsoCode.BL:
            case TuiCountryIsoCode.BQ:
            case TuiCountryIsoCode.CW:
            case TuiCountryIsoCode.GF:
            case TuiCountryIsoCode.GP:
            case TuiCountryIsoCode.MF:
            case TuiCountryIsoCode.MQ:
            case TuiCountryIsoCode.NC:
            case TuiCountryIsoCode.RE:
            case TuiCountryIsoCode.YT:
                return `${this.staticPath}${TuiCountryIsoCode.FR}.png`;
            case TuiCountryIsoCode.SX:
                return `${this.staticPath}${TuiCountryIsoCode.NL}.png`;
            default:
                return `${this.staticPath}${countryIsoCode}.png`;
        }
    }
};
TuiFlagPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS_PATH,] }] }
];
TuiFlagPipe = __decorate([
    Pipe({ name: `tuiFlag` }),
    __param(0, Inject(TUI_ICONS_PATH))
], TuiFlagPipe);
export { TuiFlagPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvcGlwZXMvZmxhZy8iLCJzb3VyY2VzIjpbImZsYWcucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBRTFELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUdqRCxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0lBTXBCLFlBRXFCLFNBQW1DO1FBQW5DLGNBQVMsR0FBVCxTQUFTLENBQTBCO1FBUHZDLGVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FDM0QscUJBQXFCLEVBQ3JCLEVBQUUsQ0FDTCxDQUFDO0lBS0MsQ0FBQztJQUlKLFNBQVMsQ0FBQyxjQUFrRDtRQUN4RCxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxRQUFRLGNBQWMsRUFBRTtZQUNwQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMxQixLQUFLLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ3JCLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsTUFBTSxDQUFDO1lBQzNELEtBQUssaUJBQWlCLENBQUMsRUFBRTtnQkFDckIsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxNQUFNLENBQUM7WUFDM0Q7Z0JBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxNQUFNLENBQUM7U0FDeEQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7NENBN0JRLE1BQU0sU0FBQyxjQUFjOztBQVBqQixXQUFXO0lBRHZCLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQztJQVFmLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0dBUGxCLFdBQVcsQ0FvQ3ZCO1NBcENZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aVN0cmluZ0hhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfSUNPTlNfUEFUSH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VHVpQ291bnRyeUlzb0NvZGV9IGZyb20gJ0B0YWlnYS11aS9pMThuJztcblxuQFBpcGUoe25hbWU6IGB0dWlGbGFnYH0pXG5leHBvcnQgY2xhc3MgVHVpRmxhZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXRpY1BhdGggPSB0aGlzLmljb25zUGF0aChgdHVpSWNvbmApLnJlcGxhY2UoXG4gICAgICAgIGB0dWlJY29uLnN2ZyN0dWlJY29uYCxcbiAgICAgICAgYGAsXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9JQ09OU19QQVRIKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGljb25zUGF0aDogVHVpU3RyaW5nSGFuZGxlcjxzdHJpbmc+LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShjb3VudHJ5SXNvQ29kZTogVHVpQ291bnRyeUlzb0NvZGUgfCBzdHJpbmcpOiBzdHJpbmc7XG4gICAgdHJhbnNmb3JtKGNvdW50cnlJc29Db2RlPzogVHVpQ291bnRyeUlzb0NvZGUgfCBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbDtcbiAgICB0cmFuc2Zvcm0oY291bnRyeUlzb0NvZGU/OiBUdWlDb3VudHJ5SXNvQ29kZSB8IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgaWYgKCFjb3VudHJ5SXNvQ29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGNvdW50cnlJc29Db2RlKSB7XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLkJMOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5CUTpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuQ1c6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLkdGOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5HUDpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuTUY6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLk1ROlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5OQzpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuUkU6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLllUOlxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXRpY1BhdGh9JHtUdWlDb3VudHJ5SXNvQ29kZS5GUn0ucG5nYDtcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuU1g6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhdGljUGF0aH0ke1R1aUNvdW50cnlJc29Db2RlLk5MfS5wbmdgO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5zdGF0aWNQYXRofSR7Y291bnRyeUlzb0NvZGV9LnBuZ2A7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=