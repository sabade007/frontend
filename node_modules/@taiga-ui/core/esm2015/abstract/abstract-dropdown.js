import { __decorate } from "tslib";
import { AfterViewChecked, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, Injector, Input, OnDestroy, } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp, TuiNativeFocusableElement, TuiPortalService, tuiPure, } from '@taiga-ui/cdk';
import { TuiDropdownBoxComponent } from '@taiga-ui/core/components/dropdown-box';
import { DEFAULT_MAX_HEIGHT, DEFAULT_MIN_HEIGHT } from '@taiga-ui/core/constants';
import { checkFixedPosition } from '@taiga-ui/core/utils/dom';
// @bad TODO: Possibly refactor to make more abstract
let AbstractTuiDropdown = class AbstractTuiDropdown {
    constructor(componentFactoryResolver, injector, portalService, elementRef, activeZone) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.portalService = portalService;
        this.elementRef = elementRef;
        this.activeZone = activeZone;
        this.content = ``;
        this.tuiDropdownHost = null;
        this.minHeight = DEFAULT_MIN_HEIGHT;
        this.maxHeight = DEFAULT_MAX_HEIGHT;
        this.align = `left`;
        this.direction = null;
        this.sided = false;
        this.limitMinWidth = `min`;
        this.dropdownBoxRef = null;
    }
    ngOnDestroy() {
        this.closeDropdownBox();
    }
    ngAfterViewChecked() {
        // @awful TODO: This is probably wrong to call both but in TuiHostedDropdown some changes do not propagate otherwise
        if (this.dropdownBoxRef !== null) {
            this.dropdownBoxRef.changeDetectorRef.detectChanges();
            this.dropdownBoxRef.changeDetectorRef.markForCheck();
        }
    }
    get clientRect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    get host() {
        return this.tuiDropdownHost || this.elementRef.nativeElement;
    }
    get fixed() {
        return checkFixedPosition(this.elementRef.nativeElement);
    }
    toggleDropdown(value) {
        if (value) {
            this.openDropdownBox();
        }
        else {
            this.closeDropdownBox();
        }
    }
    openDropdownBox() {
        if (this.dropdownBoxRef !== null) {
            return;
        }
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(TuiDropdownBoxComponent);
        this.dropdownBoxRef = this.portalService.add(componentFactory, this.injector);
        this.dropdownBoxRef.changeDetectorRef.detectChanges();
    }
    closeDropdownBox() {
        if (this.dropdownBoxRef === null) {
            return;
        }
        this.portalService.remove(this.dropdownBoxRef);
        this.dropdownBoxRef = null;
    }
};
AbstractTuiDropdown.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: TuiPortalService },
    { type: ElementRef },
    { type: TuiActiveZoneDirective }
];
__decorate([
    Input(`tuiDropdownContent`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "content", void 0);
__decorate([
    Input(`tuiDropdownHost`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "tuiDropdownHost", void 0);
__decorate([
    Input(`tuiDropdownMinHeight`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "minHeight", void 0);
__decorate([
    Input(`tuiDropdownMaxHeight`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "maxHeight", void 0);
__decorate([
    Input(`tuiDropdownAlign`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "align", void 0);
__decorate([
    Input(`tuiDropdownDirection`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "direction", void 0);
__decorate([
    Input(`tuiDropdownSided`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "sided", void 0);
__decorate([
    Input(`tuiDropdownLimitWidth`),
    tuiDefaultProp()
], AbstractTuiDropdown.prototype, "limitMinWidth", void 0);
__decorate([
    tuiPure
], AbstractTuiDropdown.prototype, "fixed", null);
__decorate([
    tuiPure
], AbstractTuiDropdown.prototype, "toggleDropdown", null);
AbstractTuiDropdown = __decorate([
    Directive()
], AbstractTuiDropdown);
export { AbstractTuiDropdown };
//# sourceMappingURL=data:application/json;base64,