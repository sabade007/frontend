import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiCustomEvent, TuiDestroyService, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_SCROLL_INTO_VIEW } from '@taiga-ui/core/constants';
import { Observable, timer } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * Directive scrolls element into view inside tui-scrollbar
 */
// @dynamic
let TuiScrollIntoViewDirective = class TuiScrollIntoViewDirective {
    constructor(elementRef, documentRef, destroy$) {
        this.elementRef = elementRef;
        this.documentRef = documentRef;
        this.destroy$ = destroy$;
    }
    set tuiScrollIntoView(scroll) {
        if (!scroll) {
            return;
        }
        // Timeout is necessary in order to give element render cycle to get into its final spot
        // (for example if it is inside dropdown box which has to be positioned first)
        timer(0)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.elementRef.nativeElement.dispatchEvent(tuiCustomEvent(TUI_SCROLL_INTO_VIEW, {
                bubbles: true,
                detail: this.elementRef.nativeElement,
            }, this.documentRef));
        });
    }
};
TuiScrollIntoViewDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiScrollIntoViewDirective.prototype, "tuiScrollIntoView", null);
TuiScrollIntoViewDirective = __decorate([
    Directive({
        selector: '[tuiScrollIntoView]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(DOCUMENT)),
    __param(2, Inject(TuiDestroyService))
], TuiScrollIntoViewDirective);
export { TuiScrollIntoViewDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWludG8tdmlldy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3Njcm9sbC1pbnRvLXZpZXcvIiwic291cmNlcyI6WyJzY3JvbGwtaW50by12aWV3LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFekM7O0dBRUc7QUFDSCxXQUFXO0FBS1gsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUEwQm5DLFlBQ3lDLFVBQStCLEVBQ2pDLFdBQXFCLEVBQ1osUUFBMEI7UUFGakMsZUFBVSxHQUFWLFVBQVUsQ0FBcUI7UUFDakMsZ0JBQVcsR0FBWCxXQUFXLENBQVU7UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUN2RSxDQUFDO0lBM0JKLElBQUksaUJBQWlCLENBQUMsTUFBZTtRQUNqQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTztTQUNWO1FBRUQsd0ZBQXdGO1FBQ3hGLDhFQUE4RTtRQUM5RSxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FDdkMsY0FBYyxDQUNWLG9CQUFvQixFQUNwQjtnQkFDSSxPQUFPLEVBQUUsSUFBSTtnQkFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO2FBQ3hDLEVBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FDbkIsQ0FDSixDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBT0osQ0FBQTs7WUFKd0QsVUFBVSx1QkFBMUQsTUFBTSxTQUFDLFVBQVU7WUFDOEIsUUFBUSx1QkFBdkQsTUFBTSxTQUFDLFFBQVE7WUFDc0MsVUFBVSx1QkFBL0QsTUFBTSxTQUFDLGlCQUFpQjs7QUExQjdCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsaUJBQWlCLEVBQUU7bUVBc0JuQjtBQXhCUSwwQkFBMEI7SUFKdEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQixTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNqQyxDQUFDO0lBNEJPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7R0E3QnJCLDBCQUEwQixDQStCdEM7U0EvQlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpQ3VzdG9tRXZlbnQsIFR1aURlc3Ryb3lTZXJ2aWNlLCB0dWlSZXF1aXJlZFNldHRlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9TQ1JPTExfSU5UT19WSUVXfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzY3JvbGxzIGVsZW1lbnQgaW50byB2aWV3IGluc2lkZSB0dWktc2Nyb2xsYmFyXG4gKi9cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlTY3JvbGxJbnRvVmlld10nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2Nyb2xsSW50b1ZpZXdEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgdHVpU2Nyb2xsSW50b1ZpZXcoc2Nyb2xsOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghc2Nyb2xsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaW1lb3V0IGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBnaXZlIGVsZW1lbnQgcmVuZGVyIGN5Y2xlIHRvIGdldCBpbnRvIGl0cyBmaW5hbCBzcG90XG4gICAgICAgIC8vIChmb3IgZXhhbXBsZSBpZiBpdCBpcyBpbnNpZGUgZHJvcGRvd24gYm94IHdoaWNoIGhhcyB0byBiZSBwb3NpdGlvbmVkIGZpcnN0KVxuICAgICAgICB0aW1lcigwKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgdHVpQ3VzdG9tRXZlbnQ8RWxlbWVudD4oXG4gICAgICAgICAgICAgICAgICAgICAgICBUVUlfU0NST0xMX0lOVE9fVklFVyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlZixcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICApIHt9XG59XG4iXX0=