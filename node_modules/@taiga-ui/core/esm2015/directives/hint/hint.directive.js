import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input, OnDestroy, Optional, Renderer2, Self, } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp, TuiDestroyService, TuiHoveredService, TuiObscuredService, TuiParentsScrollService, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';
import { TuiHintService } from '@taiga-ui/core/services';
import { combineLatest, of, Subject } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, switchMap, take, takeUntil, } from 'rxjs/operators';
import { TUI_HINT_OPTIONS } from './hint-options';
export const HINT_HOVERED_CLASS = '_hint_hovered';
let TuiHintDirective = class TuiHintDirective extends AbstractTuiHint {
    constructor(renderer, elementRef, hintService, destroy$, obscured$, hoveredService, activeZone, options) {
        super(elementRef, hintService, activeZone, options);
        this.renderer = renderer;
        this.options = options;
        this.tuiHintShowDelay = this.options.tuiHintShowDelay;
        this.tuiHintHideDelay = this.options.tuiHintHideDelay;
        this.tuiHintHost = null;
        this.componentHovered$ = new Subject();
        // @bad TODO: Use private provider
        combineLatest(hoveredService.createHovered$(elementRef.nativeElement), this.componentHovered$.pipe(startWith(false)))
            .pipe(map(([directiveHovered, componentHovered]) => directiveHovered || componentHovered), switchMap(visible => {
            this.toggleClass(visible);
            return of(visible).pipe(delay(visible ? this.tuiHintShowDelay : this.tuiHintHideDelay));
        }), switchMap(visible => visible && this.mode !== 'overflow'
            ? obscured$.pipe(map(obscured => !obscured), take(2))
            : of(visible)), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe(visible => {
            if (visible) {
                this.showTooltip();
            }
            else {
                this.hideTooltip();
            }
        });
        this.hintService.register(this);
    }
    // TODO: 3.0 Remove null
    set tuiHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    get id() {
        return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;
    }
    get host() {
        return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;
    }
    getElementClientRect() {
        return this.host.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.hintService.unregister(this);
    }
    showTooltip() {
        if (this.content === '') {
            return;
        }
        this.toggleClass(true);
        this.hintService.add(this);
    }
    hideTooltip() {
        this.toggleClass(false);
        this.hintService.remove(this);
    }
    toggleClass(add) {
        if (add) {
            this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
    }
};
TuiHintDirective.ctorParameters = () => [
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiObscuredService, decorators: [{ type: Inject, args: [TuiObscuredService,] }, { type: Self }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
    { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_HINT_OPTIONS,] }] }
];
__decorate([
    Input()
], TuiHintDirective.prototype, "tuiHintId", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintShowDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintHideDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintHost", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiHintDirective.prototype, "tuiHint", null);
TuiHintDirective = __decorate([
    Directive({
        selector: '[tuiHint]:not(ng-container)',
        providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
    }),
    __param(0, Inject(Renderer2)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiHintService)),
    __param(3, Inject(TuiDestroyService)),
    __param(4, Inject(TuiObscuredService)),
    __param(4, Self()),
    __param(5, Inject(TuiHoveredService)),
    __param(6, Optional()),
    __param(6, Inject(TuiActiveZoneDirective)),
    __param(7, Inject(TUI_HINT_OPTIONS))
], TuiHintDirective);
export { TuiHintDirective };
//# sourceMappingURL=data:application/json;base64,