import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, watch } from '@taiga-ui/cdk';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiTextfieldController } from './textfield.controller';
import { TUI_TEXTFIELD_AUTOCOMPLETE, } from './textfield-autocomplete.directive';
import { TUI_TEXTFIELD_CLEANER, } from './textfield-cleaner.directive';
import { TUI_TEXTFIELD_CUSTOM_CONTENT, } from './textfield-custom-content.directive';
import { TUI_TEXTFIELD_EXAMPLE_TEXT, } from './textfield-example-text.directive';
import { TUI_TEXTFIELD_INPUT_MODE, } from './textfield-input-mode.directive';
import { TUI_TEXTFIELD_LABEL_OUTSIDE, } from './textfield-label-outside.directive';
import { TUI_TEXTFIELD_MAX_LENGTH, } from './textfield-max-length.directive';
import { TUI_TEXTFIELD_SIZE } from './textfield-size.directive';
import { TUI_TEXTFIELD_TYPE } from './textfield-type.directive';
export const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken(`watched textfield controller`);
/**
 * @deprecated: use {@link tuiTextfieldWatchedControllerFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function textfieldWatchedControllerFactory(changeDetectorRef, destroy$, ...controllers) {
    const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(watch(changeDetectorRef), takeUntil(destroy$));
    change$.subscribe();
    return new TuiTextfieldController(change$, ...controllers);
}
export const TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_AUTOCOMPLETE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_EXAMPLE_TEXT,
            TUI_TEXTFIELD_INPUT_MODE,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_MAX_LENGTH,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_TYPE,
        ],
        useFactory: textfieldWatchedControllerFactory,
    },
];
export const tuiTextfieldWatchedControllerFactory = textfieldWatchedControllerFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyLyIsInNvdXJjZXMiOlsidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQ0gsMEJBQTBCLEdBRTdCLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUNILHFCQUFxQixHQUV4QixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFDSCw0QkFBNEIsR0FFL0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQ0gsMEJBQTBCLEdBRTdCLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUNILHdCQUF3QixHQUUzQixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFDSCwyQkFBMkIsR0FFOUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQ0gsd0JBQXdCLEdBRTNCLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUFDLGtCQUFrQixFQUE0QixNQUFNLDRCQUE0QixDQUFDO0FBQ3pGLE9BQU8sRUFBQyxrQkFBa0IsRUFBNEIsTUFBTSw0QkFBNEIsQ0FBQztBQUV6RixNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FDekMsSUFBSSxjQUFjLENBQXlCLDhCQUE4QixDQUFDLENBQUM7QUFFL0U7O0dBRUc7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGlDQUFpQyxDQUM3QyxpQkFBb0MsRUFDcEMsUUFBMEIsRUFDMUIsR0FBRyxXQVdGO0lBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0UsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztJQUVGLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVwQixPQUFPLElBQUksc0JBQXNCLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFhO0lBQ25ELGlCQUFpQjtJQUNqQjtRQUNJLE9BQU8sRUFBRSxnQ0FBZ0M7UUFDekMsSUFBSSxFQUFFO1lBQ0YsaUJBQWlCO1lBQ2pCLGlCQUFpQjtZQUNqQiwwQkFBMEI7WUFDMUIscUJBQXFCO1lBQ3JCLDRCQUE0QjtZQUM1QiwwQkFBMEI7WUFDMUIsd0JBQXdCO1lBQ3hCLDJCQUEyQjtZQUMzQix3QkFBd0I7WUFDeEIsa0JBQWtCO1lBQ2xCLGtCQUFrQjtTQUNyQjtRQUNELFVBQVUsRUFBRSxpQ0FBaUM7S0FDaEQ7Q0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQUcsaUNBQWlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgd2F0Y2h9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttZXJnZSwgTkVWRVIsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUZXh0ZmllbGRDb250cm9sbGVyfSBmcm9tICcuL3RleHRmaWVsZC5jb250cm9sbGVyJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9BVVRPQ09NUExFVEUsXG4gICAgVHVpVGV4dGZpZWxkQXV0b2NvbXBsZXRlRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1hdXRvY29tcGxldGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9DTEVBTkVSLFxuICAgIFR1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWNsZWFuZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9DVVNUT01fQ09OVEVOVCxcbiAgICBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1jdXN0b20tY29udGVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0VYQU1QTEVfVEVYVCxcbiAgICBUdWlUZXh0ZmllbGRFeGFtcGxlVGV4dERpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtZXhhbXBsZS10ZXh0LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfSU5QVVRfTU9ERSxcbiAgICBUdWlUZXh0ZmllbGRJbnB1dE1vZGVEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWlucHV0LW1vZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9MQUJFTF9PVVRTSURFLFxuICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX01BWF9MRU5HVEgsXG4gICAgVHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1tYXgtbGVuZ3RoLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfU0laRSwgVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtc2l6ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX1RZUEUsIFR1aVRleHRmaWVsZFR5cGVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXR5cGUuZGlyZWN0aXZlJztcblxuZXhwb3J0IGNvbnN0IFRVSV9URVhURklFTERfV0FUQ0hFRF9DT05UUk9MTEVSID1cbiAgICBuZXcgSW5qZWN0aW9uVG9rZW48VHVpVGV4dGZpZWxkQ29udHJvbGxlcj4oYHdhdGNoZWQgdGV4dGZpZWxkIGNvbnRyb2xsZXJgKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlUZXh0ZmllbGRXYXRjaGVkQ29udHJvbGxlckZhY3Rvcnl9IGluc3RlYWRcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRmaWVsZFdhdGNoZWRDb250cm9sbGVyRmFjdG9yeShcbiAgICBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgLi4uY29udHJvbGxlcnM6IFtcbiAgICAgICAgVHVpVGV4dGZpZWxkQXV0b2NvbXBsZXRlRGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRFeGFtcGxlVGV4dERpcmVjdGl2ZSxcbiAgICAgICAgVHVpVGV4dGZpZWxkSW5wdXRNb2RlRGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRMYWJlbE91dHNpZGVEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZE1heExlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZSByZW1vdmUgYWZ0ZXIgVFMgdXBkYXRlXG4gICAgICAgIFR1aVRleHRmaWVsZFR5cGVEaXJlY3RpdmUsXG4gICAgXVxuKTogVHVpVGV4dGZpZWxkQ29udHJvbGxlciB7XG4gICAgY29uc3QgY2hhbmdlJCA9IG1lcmdlKC4uLmNvbnRyb2xsZXJzLm1hcCgoe2NoYW5nZSR9KSA9PiBjaGFuZ2UkIHx8IE5FVkVSKSkucGlwZShcbiAgICAgICAgd2F0Y2goY2hhbmdlRGV0ZWN0b3JSZWYpLFxuICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICk7XG5cbiAgICBjaGFuZ2UkLnN1YnNjcmliZSgpO1xuXG4gICAgcmV0dXJuIG5ldyBUdWlUZXh0ZmllbGRDb250cm9sbGVyKGNoYW5nZSQsIC4uLmNvbnRyb2xsZXJzKTtcbn1cblxuZXhwb3J0IGNvbnN0IFRFWFRGSUVMRF9DT05UUk9MTEVSX1BST1ZJREVSOiBQcm92aWRlciA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9URVhURklFTERfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9BVVRPQ09NUExFVEUsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0NMRUFORVIsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0NVU1RPTV9DT05URU5ULFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9FWEFNUExFX1RFWFQsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0lOUFVUX01PREUsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0xBQkVMX09VVFNJREUsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX01BWF9MRU5HVEgsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX1NJWkUsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX1RZUEUsXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IHRleHRmaWVsZFdhdGNoZWRDb250cm9sbGVyRmFjdG9yeSxcbiAgICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IHR1aVRleHRmaWVsZFdhdGNoZWRDb250cm9sbGVyRmFjdG9yeSA9IHRleHRmaWVsZFdhdGNoZWRDb250cm9sbGVyRmFjdG9yeTtcbiJdfQ==