export class TuiTextfieldController {
    constructor(change$, autocompleteDirective, cleanerDirective, customContentDirective, exampleTextDirective, inputModeDirective, labelOutsideDirective, maxLengthDirective, sizeDirective, typeDirective) {
        this.change$ = change$;
        this.autocompleteDirective = autocompleteDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.exampleTextDirective = exampleTextDirective;
        this.inputModeDirective = inputModeDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.maxLengthDirective = maxLengthDirective;
        this.sizeDirective = sizeDirective;
        this.typeDirective = typeDirective;
    }
    get autocomplete() {
        return this.autocompleteDirective.autocomplete;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || ``;
    }
    get exampleText() {
        return this.exampleTextDirective.exampleText;
    }
    get inputMode() {
        return this.inputModeDirective.inputMode;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get maxLength() {
        return this.maxLengthDirective.maxLength;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get type() {
        return this.typeDirective.type;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyLyIsInNvdXJjZXMiOlsidGV4dGZpZWxkLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZUEsTUFBTSxPQUFPLHNCQUFzQjtJQUMvQixZQUNhLE9BQXlCLEVBQ2pCLHFCQUF3RCxFQUN4RCxnQkFBOEMsRUFDOUMsc0JBQTBELEVBQzFELG9CQUFzRCxFQUN0RCxrQkFBa0QsRUFDbEQscUJBQXdELEVBQ3hELGtCQUFrRCxFQUNsRCxhQUF3QyxFQUN4QyxhQUF3QztRQVRoRCxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUNqQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW1DO1FBQ3hELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBOEI7UUFDOUMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFvQztRQUMxRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWtDO1FBQ3RELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBZ0M7UUFDbEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFtQztRQUN4RCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWdDO1FBQ2xELGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7SUFDMUQsQ0FBQztJQUVKLElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO0lBQzNELENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUM7SUFDakQsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlBdXRvZmlsbEZpZWxkTmFtZSwgVHVpSW5wdXRNb2RlVCwgVHVpSW5wdXRUeXBlVH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMLCBUdWlTaXplU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlUZXh0ZmllbGRBdXRvY29tcGxldGVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWF1dG9jb21wbGV0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1jbGVhbmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWN1c3RvbS1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZEV4YW1wbGVUZXh0RGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1leGFtcGxlLXRleHQuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkSW5wdXRNb2RlRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1pbnB1dC1tb2RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRNYXhMZW5ndGhEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLW1heC1sZW5ndGguZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtc2l6ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRUeXBlRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC10eXBlLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBjbGFzcyBUdWlUZXh0ZmllbGRDb250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgY2hhbmdlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBhdXRvY29tcGxldGVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZEF1dG9jb21wbGV0ZURpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjbGVhbmVyRGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGN1c3RvbUNvbnRlbnREaXJlY3RpdmU6IFR1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZXhhbXBsZVRleHREaXJlY3RpdmU6IFR1aVRleHRmaWVsZEV4YW1wbGVUZXh0RGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGlucHV0TW9kZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkSW5wdXRNb2RlRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsT3V0c2lkZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkTGFiZWxPdXRzaWRlRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG1heExlbmd0aERpcmVjdGl2ZTogVHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNpemVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZFNpemVEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdHlwZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkVHlwZURpcmVjdGl2ZSxcbiAgICApIHt9XG5cbiAgICBnZXQgYXV0b2NvbXBsZXRlKCk6IFR1aUF1dG9maWxsRmllbGROYW1lIHwgJycge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRvY29tcGxldGVEaXJlY3RpdmUuYXV0b2NvbXBsZXRlO1xuICAgIH1cblxuICAgIGdldCBjbGVhbmVyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhbmVyRGlyZWN0aXZlLmNsZWFuZXI7XG4gICAgfVxuXG4gICAgZ2V0IGN1c3RvbUNvbnRlbnQoKTogUG9seW1vcnBoZXVzQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbUNvbnRlbnREaXJlY3RpdmUuY3VzdG9tQ29udGVudCB8fCBgYDtcbiAgICB9XG5cbiAgICBnZXQgZXhhbXBsZVRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhhbXBsZVRleHREaXJlY3RpdmUuZXhhbXBsZVRleHQ7XG4gICAgfVxuXG4gICAgZ2V0IGlucHV0TW9kZSgpOiBUdWlJbnB1dE1vZGVUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRNb2RlRGlyZWN0aXZlLmlucHV0TW9kZTtcbiAgICB9XG5cbiAgICBnZXQgbGFiZWxPdXRzaWRlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbE91dHNpZGVEaXJlY3RpdmUubGFiZWxPdXRzaWRlO1xuICAgIH1cblxuICAgIGdldCBtYXhMZW5ndGgoKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heExlbmd0aERpcmVjdGl2ZS5tYXhMZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKTogVHVpU2l6ZUwgfCBUdWlTaXplUyB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemVEaXJlY3RpdmUuc2l6ZTtcbiAgICB9XG5cbiAgICBnZXQgdHlwZSgpOiBUdWlJbnB1dFR5cGVUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZURpcmVjdGl2ZS50eXBlO1xuICAgIH1cbn1cbiJdfQ==