import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiDefaultProp, TuiDestroyService, TuiHoveredService, tuiRequiredSetter, typedFromEvent, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { of } from 'rxjs';
import { delay, distinctUntilChanged, filter, startWith, switchMap, takeUntil, } from 'rxjs/operators';
import { TUI_POINTER_HINT_OPTIONS } from './pointer-hint-options';
let TuiPointerHintDirective = class TuiPointerHintDirective extends AbstractTuiHint {
    constructor(elementRef, hintService, destroy$, hoveredService, options) {
        super(elementRef, hintService, null, options);
        this.destroy$ = destroy$;
        this.options = options;
        this.currentMouseRect = this.mousePositionToClientRect();
        this.tuiHintShowDelay = this.options.tuiHintShowDelay;
        this.tuiHintHideDelay = this.options.tuiHintHideDelay;
        this.content = '';
        const hint$ = hoveredService.createHovered$(this.elementRef.nativeElement).pipe(filter(() => !!this.content), startWith(false), distinctUntilChanged());
        hint$
            .pipe(switchMap(visible => of(visible).pipe(delay(visible ? this.tuiHintShowDelay : this.tuiHintHideDelay))), takeUntil(destroy$))
            .subscribe({
            next: visible => {
                if (visible) {
                    this.showTooltip();
                }
                else {
                    this.hideTooltip();
                }
            },
            complete: () => {
                this.hideTooltip();
            },
        });
        this.initMouseMoveSubscription();
    }
    // TODO: 3.0 Remove null
    set tuiPointerHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    getElementClientRect() {
        return this.currentMouseRect;
    }
    initMouseMoveSubscription() {
        const mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');
        mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(({ clientX, clientY }) => {
            this.currentMouseRect = this.mousePositionToClientRect(clientX, clientY);
        });
    }
    mousePositionToClientRect(x = 0, y = 0) {
        return {
            left: x,
            right: x,
            top: y,
            bottom: y,
            width: 0,
            height: 0,
        };
    }
};
TuiPointerHintDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_POINTER_HINT_OPTIONS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPointerHintDirective.prototype, "tuiHintShowDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPointerHintDirective.prototype, "tuiHintHideDelay", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiPointerHintDirective.prototype, "tuiPointerHint", null);
TuiPointerHintDirective = __decorate([
    Directive({
        selector: '[tuiPointerHint]:not(ng-container)',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiHintService)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(TuiHoveredService)),
    __param(4, Inject(TUI_POINTER_HINT_OPTIONS))
], TuiPointerHintDirective);
export { TuiPointerHintDirective };
//# sourceMappingURL=data:application/json;base64,