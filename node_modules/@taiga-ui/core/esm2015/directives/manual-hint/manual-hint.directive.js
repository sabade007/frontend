import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input, Optional } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { TUI_MANUAL_HINT_OPTIONS } from './manual-hint-options';
let TuiManualHintDirective = class TuiManualHintDirective extends AbstractTuiHint {
    constructor(elementRef, hintService, activeZone, options) {
        super(elementRef, hintService, activeZone, options);
        this.options = options;
        this.content = '';
    }
    set tuiManualHintShow(show) {
        if (show) {
            this.showTooltip();
        }
        else {
            this.hideTooltip();
        }
    }
    getElementClientRect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
};
TuiManualHintDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MANUAL_HINT_OPTIONS,] }] }
];
__decorate([
    Input('tuiManualHint'),
    tuiDefaultProp()
], TuiManualHintDirective.prototype, "content", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiManualHintDirective.prototype, "tuiManualHintShow", null);
TuiManualHintDirective = __decorate([
    Directive({
        selector: '[tuiManualHint]:not(ng-container)',
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiHintService)),
    __param(2, Optional()),
    __param(2, Inject(TuiActiveZoneDirective)),
    __param(3, Inject(TUI_MANUAL_HINT_OPTIONS))
], TuiManualHintDirective);
export { TuiManualHintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudWFsLWhpbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9tYW51YWwtaGludC8iLCJzb3VyY2VzIjpbIm1hbnVhbC1oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFDLHNCQUFzQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3ZELE9BQU8sRUFBQyx1QkFBdUIsRUFBdUIsTUFBTSx1QkFBdUIsQ0FBQztBQUtwRixJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUF1QixTQUFRLGVBQWU7SUFldkQsWUFDd0IsVUFBbUMsRUFDL0IsV0FBMkIsRUFHbkQsVUFBeUMsRUFDVyxPQUE2QjtRQUVqRixLQUFLLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFGQSxZQUFPLEdBQVAsT0FBTyxDQUFzQjtRQWxCckYsWUFBTyxHQUF3QixFQUFFLENBQUM7SUFxQmxDLENBQUM7SUFqQkQsSUFBSSxpQkFBaUIsQ0FBQyxJQUFhO1FBQy9CLElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBYUQsb0JBQW9CO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNqRSxDQUFDO0NBQ0osQ0FBQTs7WUFidUMsVUFBVSx1QkFBekMsTUFBTSxTQUFDLFVBQVU7WUFDbUIsY0FBYyx1QkFBbEQsTUFBTSxTQUFDLGNBQWM7WUFHVixzQkFBc0IsdUJBRmpDLFFBQVEsWUFDUixNQUFNLFNBQUMsc0JBQXNCOzRDQUU3QixNQUFNLFNBQUMsdUJBQXVCOztBQWxCbkM7SUFGQyxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQ3RCLGNBQWMsRUFBRTt1REFDaUI7QUFJbEM7SUFGQyxLQUFLLEVBQUU7SUFDUCxpQkFBaUIsRUFBRTsrREFPbkI7QUFiUSxzQkFBc0I7SUFIbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG1DQUFtQztLQUNoRCxDQUFDO0lBaUJPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ3RCLFdBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBRTlCLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7R0FyQjNCLHNCQUFzQixDQTZCbEM7U0E3Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQWN0aXZlWm9uZURpcmVjdGl2ZSwgdHVpRGVmYXVsdFByb3AsIHR1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QWJzdHJhY3RUdWlIaW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1R1aUhpbnRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VFVJX01BTlVBTF9ISU5UX09QVElPTlMsIFR1aU1hbnVhbEhpbnRPcHRpb25zfSBmcm9tICcuL21hbnVhbC1oaW50LW9wdGlvbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlNYW51YWxIaW50XTpub3QobmctY29udGFpbmVyKScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU1hbnVhbEhpbnREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFR1aUhpbnQge1xuICAgIEBJbnB1dCgndHVpTWFudWFsSGludCcpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlSZXF1aXJlZFNldHRlcigpXG4gICAgc2V0IHR1aU1hbnVhbEhpbnRTaG93KHNob3c6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aUhpbnRTZXJ2aWNlKSBoaW50U2VydmljZTogVHVpSGludFNlcnZpY2UsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgYWN0aXZlWm9uZTogVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoVFVJX01BTlVBTF9ISU5UX09QVElPTlMpIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zOiBUdWlNYW51YWxIaW50T3B0aW9ucyxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgaGludFNlcnZpY2UsIGFjdGl2ZVpvbmUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGdldEVsZW1lbnRDbGllbnRSZWN0KCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxufVxuIl19