import { __decorate, __param } from "tslib";
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiHintService } from '@taiga-ui/core/services';
import { Observable } from 'rxjs';
import { TUI_DESCRIBED_BY_PROVIDERS, TUI_DESCRIBED_BY_SHOW, } from './described-by.providers';
export const DESCRIBED_BY = '_described-by';
/**
 * A directive linking focusable elements and hints for accessibility
 */
let TuiDescribedByDirective = class TuiDescribedByDirective {
    constructor(hintService, visibility$) {
        this.tuiDescribedBy = '';
        visibility$.subscribe(visible => {
            if (!this.tuiDescribedBy) {
                return;
            }
            if (visible) {
                hintService.showHintForId(this.tuiDescribedBy);
            }
            else {
                hintService.hideHintForId(this.tuiDescribedBy);
            }
        });
    }
    get computedDescribedBy() {
        return this.tuiDescribedBy ? this.tuiDescribedBy + DESCRIBED_BY : null;
    }
};
TuiDescribedByDirective.ctorParameters = () => [
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DESCRIBED_BY_SHOW,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiDescribedByDirective.prototype, "tuiDescribedBy", void 0);
__decorate([
    HostBinding('attr.aria-describedby')
], TuiDescribedByDirective.prototype, "computedDescribedBy", null);
TuiDescribedByDirective = __decorate([
    Directive({
        selector: '[tuiDescribedBy]:not(ng-container)',
        providers: TUI_DESCRIBED_BY_PROVIDERS,
    }),
    __param(0, Inject(TuiHintService)),
    __param(1, Inject(TUI_DESCRIBED_BY_SHOW))
], TuiDescribedByDirective);
export { TuiDescribedByDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRWhDLE9BQU8sRUFDSCwwQkFBMEIsRUFDMUIscUJBQXFCLEdBQ3hCLE1BQU0sMEJBQTBCLENBQUM7QUFFbEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQztBQUU1Qzs7R0FFRztBQUtILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBS2hDLFlBQzRCLFdBQTJCLEVBQ3BCLFdBQWdDO1FBSm5FLG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBTWhCLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3RCLE9BQU87YUFDVjtZQUVELElBQUksT0FBTyxFQUFFO2dCQUNULFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2xEO2lCQUFNO2dCQUNILFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2xEO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBR0QsSUFBSSxtQkFBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNFLENBQUM7Q0FDSixDQUFBOztZQXBCNEMsY0FBYyx1QkFBbEQsTUFBTSxTQUFDLGNBQWM7WUFDc0IsVUFBVSx1QkFBckQsTUFBTSxTQUFDLHFCQUFxQjs7QUFKakM7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7K0RBQ0c7QUFvQnBCO0lBREMsV0FBVyxDQUFDLHVCQUF1QixDQUFDO2tFQUdwQztBQXpCUSx1QkFBdUI7SUFKbkMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9DQUFvQztRQUM5QyxTQUFTLEVBQUUsMEJBQTBCO0tBQ3hDLENBQUM7SUFPTyxXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN0QixXQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0dBUHpCLHVCQUF1QixDQTBCbkM7U0ExQlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgICBUVUlfREVTQ1JJQkVEX0JZX1BST1ZJREVSUyxcbiAgICBUVUlfREVTQ1JJQkVEX0JZX1NIT1csXG59IGZyb20gJy4vZGVzY3JpYmVkLWJ5LnByb3ZpZGVycyc7XG5cbmV4cG9ydCBjb25zdCBERVNDUklCRURfQlkgPSAnX2Rlc2NyaWJlZC1ieSc7XG5cbi8qKlxuICogQSBkaXJlY3RpdmUgbGlua2luZyBmb2N1c2FibGUgZWxlbWVudHMgYW5kIGhpbnRzIGZvciBhY2Nlc3NpYmlsaXR5XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aURlc2NyaWJlZEJ5XTpub3QobmctY29udGFpbmVyKScsXG4gICAgcHJvdmlkZXJzOiBUVUlfREVTQ1JJQkVEX0JZX1BST1ZJREVSUyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRGVzY3JpYmVkQnlEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICB0dWlEZXNjcmliZWRCeSA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSGludFNlcnZpY2UpIGhpbnRTZXJ2aWNlOiBUdWlIaW50U2VydmljZSxcbiAgICAgICAgQEluamVjdChUVUlfREVTQ1JJQkVEX0JZX1NIT1cpIHZpc2liaWxpdHkkOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgICkge1xuICAgICAgICB2aXNpYmlsaXR5JC5zdWJzY3JpYmUodmlzaWJsZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudHVpRGVzY3JpYmVkQnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgaGludFNlcnZpY2Uuc2hvd0hpbnRGb3JJZCh0aGlzLnR1aURlc2NyaWJlZEJ5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGludFNlcnZpY2UuaGlkZUhpbnRGb3JJZCh0aGlzLnR1aURlc2NyaWJlZEJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZGVzY3JpYmVkYnknKVxuICAgIGdldCBjb21wdXRlZERlc2NyaWJlZEJ5KCk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy50dWlEZXNjcmliZWRCeSA/IHRoaXMudHVpRGVzY3JpYmVkQnkgKyBERVNDUklCRURfQlkgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==