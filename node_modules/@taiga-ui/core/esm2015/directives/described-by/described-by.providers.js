import { ElementRef, InjectionToken } from '@angular/core';
import { stopPropagation, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, } from '@taiga-ui/cdk';
import { merge, timer } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMapTo, take, takeUntil, } from 'rxjs/operators';
const DELAY = 1000;
export const TUI_DESCRIBED_BY_SHOW = new InjectionToken(`Accessible tooltip visibility stream`);
export const TUI_DESCRIBED_BY_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    {
        provide: TUI_DESCRIBED_BY_SHOW,
        deps: [TuiFocusVisibleService, ElementRef],
        useFactory: describedByFactory,
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function describedByFactory(focusVisible$, { nativeElement }) {
    return focusVisible$
        .pipe(filter(Boolean), switchMapTo(timer(DELAY).pipe(mapTo(true), takeUntil(merge(typedFromEvent(nativeElement, `keydown`), typedFromEvent(nativeElement, `blur`))))), switchMapTo(merge(typedFromEvent(nativeElement, `keydown`).pipe(filter(({ key }) => key === `Escape`), take(1), stopPropagation(), mapTo(false), startWith(true)), typedFromEvent(nativeElement, `blur`).pipe(mapTo(false)))))
        .pipe(distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQ0gsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsS0FBSyxFQUFjLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxJQUFJLEVBQ0osU0FBUyxHQUNaLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRW5CLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNuRCxzQ0FBc0MsQ0FDekMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFlO0lBQ2xELGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEI7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxDQUFDLHNCQUFzQixFQUFFLFVBQVUsQ0FBQztRQUMxQyxVQUFVLEVBQUUsa0JBQWtCO0tBQ2pDO0NBQ0osQ0FBQztBQUVGLGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsa0JBQWtCLENBQzlCLGFBQWtDLEVBQ2xDLEVBQUMsYUFBYSxFQUEwQjtJQUV4QyxPQUFPLGFBQWE7U0FDZixJQUFJLENBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFdBQVcsQ0FDUCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUNiLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDWCxTQUFTLENBQ0wsS0FBSyxDQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQ3hDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQ3hDLENBQ0osQ0FDSixDQUNKLEVBQ0QsV0FBVyxDQUNQLEtBQUssQ0FDRCxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxFQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsZUFBZSxFQUFFLEVBQ2pCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFDWixTQUFTLENBQUMsSUFBSSxDQUFDLENBQ2xCLEVBQ0QsY0FBYyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzNELENBQ0osQ0FDSjtTQUNBLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgc3RvcFByb3BhZ2F0aW9uLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgdHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwVG8sXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcFRvLFxuICAgIHRha2UsXG4gICAgdGFrZVVudGlsLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IERFTEFZID0gMTAwMDtcblxuZXhwb3J0IGNvbnN0IFRVSV9ERVNDUklCRURfQllfU0hPVyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPGJvb2xlYW4+PihcbiAgICBgQWNjZXNzaWJsZSB0b29sdGlwIHZpc2liaWxpdHkgc3RyZWFtYCxcbik7XG5leHBvcnQgY29uc3QgVFVJX0RFU0NSSUJFRF9CWV9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9ERVNDUklCRURfQllfU0hPVyxcbiAgICAgICAgZGVwczogW1R1aUZvY3VzVmlzaWJsZVNlcnZpY2UsIEVsZW1lbnRSZWZdLFxuICAgICAgICB1c2VGYWN0b3J5OiBkZXNjcmliZWRCeUZhY3RvcnksXG4gICAgfSxcbl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBkZXNjcmliZWRCeUZhY3RvcnkoXG4gICAgZm9jdXNWaXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIGZvY3VzVmlzaWJsZSRcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICAgICAgICBzd2l0Y2hNYXBUbyhcbiAgICAgICAgICAgICAgICB0aW1lcihERUxBWSkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwVG8odHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbChcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGBrZXlkb3duYCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYGJsdXJgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzd2l0Y2hNYXBUbyhcbiAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYGtleWRvd25gKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKCh7a2V5fSkgPT4ga2V5ID09PSBgRXNjYXBlYCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBUbyhmYWxzZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFdpdGgodHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGBibHVyYCkucGlwZShtYXBUbyhmYWxzZSkpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICApXG4gICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xufVxuIl19