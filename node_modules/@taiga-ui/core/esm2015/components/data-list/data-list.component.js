var TuiDataListComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, QueryList, ViewEncapsulation, } from '@angular/core';
import { EMPTY_QUERY, isNativeFocusedIn, isPresent, itemsQueryListObservable, moveFocus, setNativeMouseFocused, tuiAssertIsHTMLElement, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_ACCESSOR, TUI_NOTHING_FOUND_MESSAGE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { TuiOptionComponent } from './option/option.component';
// TODO: Consider aria-activedescendant for proper accessibility implementation
// @dynamic
let TuiDataListComponent = TuiDataListComponent_1 = class TuiDataListComponent {
    constructor(elementRef, defaultEmptyContent$) {
        this.elementRef = elementRef;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.options = EMPTY_QUERY;
        this.role = 'listbox';
        this.emptyContent = '';
    }
    get empty$() {
        return itemsQueryListObservable(this.options).pipe(map(({ length }) => !length));
    }
    onFocusIn(relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    }
    noop() { }
    onKeyDownArrow(current, step) {
        const { elements } = this;
        moveFocus(elements.indexOf(current), elements, step);
    }
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    handleFocusLossIfNecessary(element = this.elementRef.nativeElement) {
        if (this.origin && isNativeFocusedIn(element)) {
            setNativeMouseFocused(this.origin, true, true);
        }
    }
    getOptions(includeDisabled = false) {
        return this.options
            .toArray()
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(isPresent);
    }
    onFocus({ target }, top) {
        tuiAssertIsHTMLElement(target);
        const { elements } = this;
        moveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(target);
    }
    get elements() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiOption]'));
    }
};
TuiDataListComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_NOTHING_FOUND_MESSAGE,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => TuiOptionComponent), { descendants: true })
], TuiDataListComponent.prototype, "options", void 0);
__decorate([
    Input(),
    HostBinding('attr.role'),
    tuiDefaultProp()
], TuiDataListComponent.prototype, "role", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiDataListComponent.prototype, "emptyContent", void 0);
__decorate([
    tuiPure
], TuiDataListComponent.prototype, "empty$", null);
__decorate([
    HostListener('focusin', ['$event.relatedTarget', '$event.currentTarget'])
], TuiDataListComponent.prototype, "onFocusIn", null);
__decorate([
    HostListener('mousedown.prevent')
], TuiDataListComponent.prototype, "noop", null);
__decorate([
    HostListener('keydown.arrowDown.prevent', ['$event.target', '1']),
    HostListener('keydown.arrowUp.prevent', ['$event.target', '-1'])
], TuiDataListComponent.prototype, "onKeyDownArrow", null);
__decorate([
    HostListener('wheel.silent.passive'),
    HostListener('mouseleave', ['$event.target'])
], TuiDataListComponent.prototype, "handleFocusLossIfNecessary", null);
TuiDataListComponent = TuiDataListComponent_1 = __decorate([
    Component({
        selector: 'tui-data-list',
        template: "<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, true)\"\n></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    polymorpheus-outlet\n    class=\"t-empty\"\n    [content]=\"emptyContent || (defaultEmptyContent$ | async)\"\n></div>\n<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, false)\"\n></div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        providers: [
            {
                provide: TUI_DATA_LIST_ACCESSOR,
                useExisting: forwardRef(() => TuiDataListComponent_1),
            },
        ],
        styles: ["tui-data-list{display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:.5rem 0;color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list>.t-empty{margin:.75rem 1rem}tui-opt-group{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;font:var(--tui-font-text-xs);flex-direction:column;line-height:2rem}tui-opt-group:empty:after,tui-opt-group:empty:before{display:none}tui-opt-group:before{content:attr(data-label);padding:.5rem 1rem;color:var(--tui-text-02);line-height:1rem;white-space:normal}tui-opt-group:not(:empty)~tui-opt-group:before{padding:1.5rem 1rem .5rem}tui-opt-group:not(:empty)~tui-opt-group[data-label='']:before{padding:1rem 0 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:'';position:absolute;left:0;right:0;top:.5rem;height:1px;background:var(--tui-base-03)}tui-opt-group[data-label='']:before{padding:0 1rem}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TUI_NOTHING_FOUND_MESSAGE))
], TuiDataListComponent);
export { TuiDataListComponent };
//# sourceMappingURL=data:application/json;base64,