import { __decorate } from "tslib";
import { ContentChildren, Directive, ElementRef, } from '@angular/core';
import { EMPTY_QUERY, getClosestKeyboardFocusable, itemsQueryListObservable, preventDefault, setNativeFocused, tuiPure, typedFromEvent, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { EMPTY, merge } from 'rxjs';
import { debounceTime, filter, map, mapTo, shareReplay, switchMap, take, tap, } from 'rxjs/operators';
// TODO: 3.0 Move into separate module
let TuiDataListDropdownManagerDirective = class TuiDataListDropdownManagerDirective {
    constructor() {
        this.dropdowns = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    ngAfterViewInit() {
        this.right$.subscribe(index => {
            this.tryToFocus(index);
        });
        merge(this.immediate$, this.debounce$)
            .pipe(switchMap(active => {
            this.dropdowns.forEach((dropdown, index) => {
                dropdown.open = index === active;
            });
            const element = this.elements.toArray()[active];
            const dropdown = this.dropdowns.toArray()[active];
            if (!element || !dropdown || !dropdown.dropdownBoxRef) {
                return EMPTY;
            }
            const { nativeElement } = dropdown.dropdownBoxRef.location;
            const mouseEnter$ = typedFromEvent(nativeElement, 'mouseenter').pipe(take(1));
            const esc$ = merge(typedFromEvent(element.nativeElement, 'keydown'), typedFromEvent(nativeElement, 'keydown')).pipe(filter(({ keyCode }) => keyCode === 27));
            return merge(mouseEnter$, esc$).pipe(tap(event => {
                if (dropdown.dropdownBoxRef) {
                    event.stopPropagation();
                }
                setNativeFocused(element.nativeElement);
                // TODO: iframe warning
                dropdown.open = event instanceof MouseEvent;
            }));
        }))
            .subscribe();
    }
    get elements$() {
        return itemsQueryListObservable(this.elements).pipe(map(array => array.map(({ nativeElement }) => nativeElement)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    get right$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => typedFromEvent(element, 'keydown').pipe(filter(({ keyCode }) => keyCode === 39), preventDefault(), mapTo(index))))));
    }
    get immediate$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => typedFromEvent(element, 'click').pipe(mapTo(index))))));
    }
    get debounce$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => merge(typedFromEvent(element, 'focus'), typedFromEvent(element, 'blur')).pipe(filter(({ relatedTarget }) => this.notInDropdown(relatedTarget, index)), map(({ type }) => (type === 'focus' ? index : NaN)))))), debounceTime(300));
    }
    notInDropdown(element, index) {
        var _a;
        const dropdown = this.dropdowns.toArray()[index];
        return !((_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(element));
    }
    tryToFocus(index) {
        var _a;
        const dropdown = this.dropdowns.toArray()[index];
        const content = (_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef;
        if (!content) {
            return;
        }
        const item = getClosestKeyboardFocusable(content.nativeElement, false, content.nativeElement);
        if (item) {
            setNativeFocused(item);
        }
    }
};
__decorate([
    ContentChildren(TuiDropdownDirective, { descendants: true })
], TuiDataListDropdownManagerDirective.prototype, "dropdowns", void 0);
__decorate([
    ContentChildren(TuiDropdownDirective, { read: ElementRef, descendants: true })
], TuiDataListDropdownManagerDirective.prototype, "elements", void 0);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "right$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
TuiDataListDropdownManagerDirective = __decorate([
    Directive({
        selector: 'tui-data-list[tuiDataListDropdownManager]',
    })
], TuiDataListDropdownManagerDirective);
export { TuiDataListDropdownManagerDirective };
//# sourceMappingURL=data:application/json;base64,