import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { tuiDefaultProp, TuiValidationError } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_ANIMATION_OPTIONS, TUI_DEFAULT_ERROR_MESSAGE, TUI_MODE, } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
let TuiErrorComponent = class TuiErrorComponent {
    constructor(options, mode$, defaultErrorMessage$) {
        this.options = options;
        this.mode$ = mode$;
        this.defaultErrorMessage$ = defaultErrorMessage$;
        this.error = null;
        this.animation = Object.assign({ value: '' }, this.options);
    }
    set errorSetter(error) {
        this.error = typeof error === 'string' ? new TuiValidationError(error) : error;
    }
};
TuiErrorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DEFAULT_ERROR_MESSAGE,] }] }
];
__decorate([
    Input('error'),
    tuiDefaultProp()
], TuiErrorComponent.prototype, "errorSetter", null);
TuiErrorComponent = __decorate([
    Component({
        selector: 'tui-error',
        template: "<div\n    *ngIf=\"error\"\n    polymorpheus-outlet\n    automation-id=\"tui-error__text\"\n    class=\"t-message-text\"\n    [@tuiHeightCollapse]=\"animation\"\n    [@tuiFadeIn]=\"animation\"\n    [class.t-message-text_light]=\"(mode$ | async) === 'onDark'\"\n    [content]=\"error.message || (defaultErrorMessage$ | async)\"\n    [context]=\"error.context || {}\"\n></div>\n",
        providers: [MODE_PROVIDER],
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [tuiHeightCollapse, tuiFadeIn],
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;color:var(--tui-negative);word-wrap:break-word}.t-message-text{margin-top:.25rem;white-space:pre-wrap}.t-message-text_light{color:var(--tui-negative-night)}"]
    }),
    __param(0, Inject(TUI_ANIMATION_OPTIONS)),
    __param(1, Inject(TUI_MODE)),
    __param(2, Inject(TUI_DEFAULT_ERROR_MESSAGE))
], TuiErrorComponent);
export { TuiErrorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9lcnJvci8iLCJzb3VyY2VzIjpbImVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHlCQUF5QixFQUN6QixRQUFRLEdBQ1gsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBVWhDLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBVzFCLFlBQ29ELE9BQXlCLEVBQzlDLEtBQXVDLEVBRXpELG9CQUF3QztRQUhELFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQzlDLFVBQUssR0FBTCxLQUFLLENBQWtDO1FBRXpELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBb0I7UUFSckQsVUFBSyxHQUE4QixJQUFJLENBQUM7UUFFL0IsY0FBUyxHQUFHLGdCQUFDLEtBQUssRUFBRSxFQUFFLElBQUssSUFBSSxDQUFDLE9BQU8sQ0FBVSxDQUFDO0lBT3hELENBQUM7SUFiSixJQUFJLFdBQVcsQ0FBQyxLQUF5QztRQUNyRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ25GLENBQUM7Q0FZSixDQUFBOzs0Q0FMUSxNQUFNLFNBQUMscUJBQXFCO1lBQ0ssVUFBVSx1QkFBM0MsTUFBTSxTQUFDLFFBQVE7WUFFZSxVQUFVLHVCQUR4QyxNQUFNLFNBQUMseUJBQXlCOztBQVhyQztJQUZDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDZCxjQUFjLEVBQUU7b0RBR2hCO0FBTFEsaUJBQWlCO0lBUjdCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLG1ZQUFvQztRQUVwQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDOztLQUM3QyxDQUFDO0lBYU8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUM3QixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQixXQUFBLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0dBZDdCLGlCQUFpQixDQWlCN0I7U0FqQlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBbmltYXRpb25PcHRpb25zfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCBUdWlWYWxpZGF0aW9uRXJyb3J9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHt0dWlGYWRlSW4sIHR1aUhlaWdodENvbGxhcHNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hbmltYXRpb25zJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvcHJvdmlkZXJzJztcbmltcG9ydCB7XG4gICAgVFVJX0FOSU1BVElPTl9PUFRJT05TLFxuICAgIFRVSV9ERUZBVUxUX0VSUk9SX01FU1NBR0UsXG4gICAgVFVJX01PREUsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aUJyaWdodG5lc3N9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWVycm9yJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXJyb3IudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZXJyb3Iuc3R5bGUubGVzcyddLFxuICAgIHByb3ZpZGVyczogW01PREVfUFJPVklERVJdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGFuaW1hdGlvbnM6IFt0dWlIZWlnaHRDb2xsYXBzZSwgdHVpRmFkZUluXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRXJyb3JDb21wb25lbnQge1xuICAgIEBJbnB1dCgnZXJyb3InKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2V0IGVycm9yU2V0dGVyKGVycm9yOiBUdWlWYWxpZGF0aW9uRXJyb3IgfCBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gbmV3IFR1aVZhbGlkYXRpb25FcnJvcihlcnJvcikgOiBlcnJvcjtcbiAgICB9XG5cbiAgICBlcnJvcjogVHVpVmFsaWRhdGlvbkVycm9yIHwgbnVsbCA9IG51bGw7XG5cbiAgICByZWFkb25seSBhbmltYXRpb24gPSB7dmFsdWU6ICcnLCAuLi50aGlzLm9wdGlvbnN9IGFzIGNvbnN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0FOSU1BVElPTl9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICAgICAgQEluamVjdChUVUlfREVGQVVMVF9FUlJPUl9NRVNTQUdFKVxuICAgICAgICByZWFkb25seSBkZWZhdWx0RXJyb3JNZXNzYWdlJDogT2JzZXJ2YWJsZTxzdHJpbmc+LFxuICAgICkge31cbn1cbiJdfQ==