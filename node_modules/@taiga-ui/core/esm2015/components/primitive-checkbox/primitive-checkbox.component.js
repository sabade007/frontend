import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_CHECKBOX_OPTIONS } from './checkbox-options';
// @dynamic
let TuiPrimitiveCheckboxComponent = class TuiPrimitiveCheckboxComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    set valueSetter(value) {
        if (value !== false) {
            this.setCurrentIcon(value);
        }
        this.value = value;
    }
    get appearance() {
        switch (this.value) {
            case false:
                return this.options.appearances.unchecked;
            case true:
                return this.options.appearances.checked;
            default:
                return this.options.appearances.indeterminate;
        }
    }
    get empty() {
        return this.value === false;
    }
    setCurrentIcon(value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    }
};
TuiPrimitiveCheckboxComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_CHECKBOX_OPTIONS,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
__decorate([
    Input('value'),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "valueSetter", null);
TuiPrimitiveCheckboxComponent = __decorate([
    Component({
        selector: 'tui-primitive-checkbox',
        template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focused]=\"focused\"\n    [hovered]=\"hovered\"\n    [pressed]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <span\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"{$implicit: size}\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                class=\"t-mark\"\n                [class.t-mark_on]=\"!empty\"\n                [src]=\"icon\"\n            ></tui-svg>\n        </ng-template>\n    </span>\n    <ng-content></ng-content>\n</tui-wrapper>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size='m']{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size='l']{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}"]
    }),
    __param(0, Inject(TUI_CHECKBOX_OPTIONS))
], TuiPrimitiveCheckboxComponent);
export { TuiPrimitiveCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvcHJpbWl0aXZlLWNoZWNrYm94LyIsInNvdXJjZXMiOlsicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF5QixjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJckUsT0FBTyxFQUFDLG9CQUFvQixFQUFxQixNQUFNLG9CQUFvQixDQUFDO0FBRTVFLFdBQVc7QUFPWCxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtJQXlDdEMsWUFDbUQsT0FBMkI7UUFBM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUF0QzlFLFNBQUksR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUluQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFJaEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUloQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFZaEIsU0FBSSxHQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUUvQixVQUFLLEdBQW1CLEtBQUssQ0FBQztJQUkzQixDQUFDO0lBZkosSUFBSSxXQUFXLENBQUMsS0FBcUI7UUFDakMsSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUI7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBV0QsSUFBSSxVQUFVO1FBQ1YsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2hCLEtBQUssS0FBSztnQkFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztZQUM5QyxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7WUFDNUM7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7U0FDckQ7SUFDTCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRU8sY0FBYyxDQUFDLEtBQXFCO1FBQ3hDLElBQUksQ0FBQyxJQUFJO1lBQ0wsS0FBSyxLQUFLLElBQUk7Z0JBQ1YsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWE7Z0JBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDekMsQ0FBQztDQUNKLENBQUE7OzRDQXhCUSxNQUFNLFNBQUMsb0JBQW9COztBQXRDaEM7SUFIQyxLQUFLLEVBQUU7SUFDUCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDN0IsY0FBYyxFQUFFOzJEQUNrQjtBQUluQztJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTsrREFDQTtBQUlqQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTs4REFDRDtBQUloQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTs4REFDRDtBQUloQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTs4REFDRDtBQUloQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTs4REFDRDtBQUloQjtJQUZDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDZCxjQUFjLEVBQUU7Z0VBT2hCO0FBbENRLDZCQUE2QjtJQU56QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLDhrQkFBaUQ7UUFFakQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUEyQ08sV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtHQTFDeEIsNkJBQTZCLENBa0V6QztTQWxFWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlDb250ZXh0V2l0aEltcGxpY2l0LCB0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VFVJX0NIRUNLQk9YX09QVElPTlMsIFR1aUNoZWNrYm94T3B0aW9uc30gZnJvbSAnLi9jaGVja2JveC1vcHRpb25zJztcblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXByaW1pdGl2ZS1jaGVja2JveCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ByaW1pdGl2ZS1jaGVja2JveC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wcmltaXRpdmUtY2hlY2tib3guc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmltaXRpdmVDaGVja2JveENvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gdGhpcy5vcHRpb25zLnNpemU7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBmb2N1c2VkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaG92ZXJlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHByZXNzZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpbnZhbGlkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoJ3ZhbHVlJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNldCB2YWx1ZVNldHRlcih2YWx1ZTogYm9vbGVhbiB8IG51bGwpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50SWNvbih2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWNvbjogUG9seW1vcnBoZXVzQ29udGVudDxUdWlDb250ZXh0V2l0aEltcGxpY2l0PFR1aVNpemVMPj4gPVxuICAgICAgICB0aGlzLm9wdGlvbnMuaWNvbnMuY2hlY2tlZDtcblxuICAgIHZhbHVlOiBib29sZWFuIHwgbnVsbCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NIRUNLQk9YX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpQ2hlY2tib3hPcHRpb25zLFxuICAgICkge31cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCAodGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLnVuY2hlY2tlZDtcbiAgICAgICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLmNoZWNrZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZXMuaW5kZXRlcm1pbmF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBlbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q3VycmVudEljb24odmFsdWU6IGJvb2xlYW4gfCBudWxsKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaWNvbiA9XG4gICAgICAgICAgICB2YWx1ZSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLmljb25zLmluZGV0ZXJtaW5hdGVcbiAgICAgICAgICAgICAgICA6IHRoaXMub3B0aW9ucy5pY29ucy5jaGVja2VkO1xuICAgIH1cbn1cbiJdfQ==