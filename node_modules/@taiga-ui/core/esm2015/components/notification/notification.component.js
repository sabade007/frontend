import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp, tuiIsObserved } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD, TUI_NOTIFICATION_OPTIONS, } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
export const STATUS_ICON = {
    info: 'tuiIconInfo',
    success: 'tuiIconCheckCircle',
    error: 'tuiIconCancel',
    warning: 'tuiIconAttention',
};
// @bad TODO: Think about moving to kit
let TuiNotificationComponent = class TuiNotificationComponent {
    constructor(closeWord$, options) {
        this.closeWord$ = closeWord$;
        this.options = options;
        this.hasIcon = this.options.hasIcon;
        this.status = this.options.status;
        this.close = new EventEmitter();
    }
    get icon() {
        return STATUS_ICON[this.status];
    }
    get hasClose() {
        return tuiIsObserved(this.close);
    }
};
TuiNotificationComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_NOTIFICATION_OPTIONS,] }] }
];
__decorate([
    Input(),
    HostBinding('class._has-icon'),
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "hasIcon", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-tui-host-status'),
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "status", void 0);
__decorate([
    Output()
], TuiNotificationComponent.prototype, "close", void 0);
__decorate([
    HostBinding('class._has-close-button')
], TuiNotificationComponent.prototype, "hasClose", null);
TuiNotificationComponent = __decorate([
    Component({
        selector: 'tui-notification',
        template: "<tui-svg\n    *ngIf=\"hasIcon\"\n    automation-id=\"tui-notification__icon\"\n    class=\"t-icon\"\n    [src]=\"icon\"\n></tui-svg>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n<button\n    *ngIf=\"hasClose\"\n    tuiIconButton\n    type=\"button\"\n    automation-id=\"tui-notification__close\"\n    size=\"xs\"\n    icon=\"tuiIconCloseLarge\"\n    appearance=\"icon\"\n    class=\"t-close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;padding:.8125rem 1rem .6875rem;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);box-sizing:border-box;overflow:hidden}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:'';pointer-events:none}:host._has-close-button{padding-right:2rem}:host._has-icon{padding-left:2.75rem}:host[data-tui-host-status=info]{color:var(--tui-info-fill)}:host[data-tui-host-status=info]:after{background:var(--tui-info-bg)}:host[data-tui-host-status=success]{color:var(--tui-success-fill)}:host[data-tui-host-status=success]:after{background:var(--tui-success-bg)}:host[data-tui-host-status=error]{color:var(--tui-error-fill)}:host[data-tui-host-status=error]:after{background:var(--tui-error-bg)}:host[data-tui-host-status=warning]{color:var(--tui-warning-fill)}:host[data-tui-host-status=warning]:after{background:var(--tui-warning-bg)}.t-content{word-wrap:break-word;color:var(--tui-text-01)}.t-icon{position:absolute;top:0;left:1rem;display:flex;width:1rem;height:100%;max-height:3rem;align-items:center}.t-close{position:absolute;top:.625rem;right:.5rem}"]
    }),
    __param(0, Inject(TUI_CLOSE_WORD)),
    __param(1, Inject(TUI_NOTIFICATION_OPTIONS))
], TuiNotificationComponent);
export { TuiNotificationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLGFBQWEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQ0gsY0FBYyxFQUNkLHdCQUF3QixHQUUzQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFaEMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3ZCLElBQUksRUFBRSxhQUFhO0lBQ25CLE9BQU8sRUFBRSxvQkFBb0I7SUFDN0IsS0FBSyxFQUFFLGVBQWU7SUFDdEIsT0FBTyxFQUFFLGtCQUFrQjtDQUNyQixDQUFDO0FBRVgsdUNBQXVDO0FBT3ZDLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBY2pDLFlBQ3FDLFVBQThCLEVBRXRELE9BQXNDO1FBRmQsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFFdEQsWUFBTyxHQUFQLE9BQU8sQ0FBK0I7UUFibkQsWUFBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBSy9CLFdBQU0sR0FBNkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFHOUQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFNdkMsQ0FBQztJQUVKLElBQUksSUFBSTtRQUNKLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBR0QsSUFBSSxRQUFRO1FBQ1IsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDSixDQUFBOztZQWJvRCxVQUFVLHVCQUF0RCxNQUFNLFNBQUMsY0FBYzs0Q0FDckIsTUFBTSxTQUFDLHdCQUF3Qjs7QUFacEM7SUFIQyxLQUFLLEVBQUU7SUFDUCxXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDOUIsY0FBYyxFQUFFO3lEQUNjO0FBSy9CO0lBSEMsS0FBSyxFQUFFO0lBQ1AsV0FBVyxDQUFDLDJCQUEyQixDQUFDO0lBQ3hDLGNBQWMsRUFBRTt3REFDc0Q7QUFHdkU7SUFEQyxNQUFNLEVBQUU7dURBQ2lDO0FBYTFDO0lBREMsV0FBVyxDQUFDLHlCQUF5QixDQUFDO3dEQUd0QztBQTNCUSx3QkFBd0I7SUFOcEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QiwyZkFBMkM7UUFFM0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUFnQk8sV0FBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDdEIsV0FBQSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtHQWhCNUIsd0JBQXdCLENBNEJwQztTQTVCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCB0dWlJc09ic2VydmVkfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVFVJX0NMT1NFX1dPUkQsXG4gICAgVFVJX05PVElGSUNBVElPTl9PUFRJT05TLFxuICAgIFR1aU5vdGlmaWNhdGlvbkRlZmF1bHRPcHRpb25zLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IFNUQVRVU19JQ09OID0ge1xuICAgIGluZm86ICd0dWlJY29uSW5mbycsXG4gICAgc3VjY2VzczogJ3R1aUljb25DaGVja0NpcmNsZScsXG4gICAgZXJyb3I6ICd0dWlJY29uQ2FuY2VsJyxcbiAgICB3YXJuaW5nOiAndHVpSWNvbkF0dGVudGlvbicsXG59IGFzIGNvbnN0O1xuXG4vLyBAYmFkIFRPRE86IFRoaW5rIGFib3V0IG1vdmluZyB0byBraXRcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLW5vdGlmaWNhdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25vdGlmaWNhdGlvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9ub3RpZmljYXRpb24uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlOb3RpZmljYXRpb25Db21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWljb24nKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaGFzSWNvbiA9IHRoaXMub3B0aW9ucy5oYXNJY29uO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS10dWktaG9zdC1zdGF0dXMnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc3RhdHVzOiAnZXJyb3InIHwgJ2luZm8nIHwgJ3N1Y2Nlc3MnIHwgJ3dhcm5pbmcnID0gdGhpcy5vcHRpb25zLnN0YXR1cztcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IGNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NMT1NFX1dPUkQpIHJlYWRvbmx5IGNsb3NlV29yZCQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICAgICAgQEluamVjdChUVUlfTk9USUZJQ0FUSU9OX09QVElPTlMpXG4gICAgICAgIHJlYWRvbmx5IG9wdGlvbnM6IFR1aU5vdGlmaWNhdGlvbkRlZmF1bHRPcHRpb25zLFxuICAgICkge31cblxuICAgIGdldCBpY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTVEFUVVNfSUNPTlt0aGlzLnN0YXR1c107XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWNsb3NlLWJ1dHRvbicpXG4gICAgZ2V0IGhhc0Nsb3NlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHVpSXNPYnNlcnZlZCh0aGlzLmNsb3NlKTtcbiAgICB9XG59XG4iXX0=