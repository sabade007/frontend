import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject } from '@angular/core';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk';
import { TuiHintService } from '@taiga-ui/core/services';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiHintBoxComponent } from './hint-box/hint-box.component';
let TuiHintsHostComponent = class TuiHintsHostComponent {
    constructor(elementRef, hints$) {
        this.elementRef = elementRef;
        this.hints$ = hints$;
        this.component = new PolymorpheusComponent(TuiHintBoxComponent);
    }
    get clientRect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
};
TuiHintsHostComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiHintService,] }] }
];
TuiHintsHostComponent = __decorate([
    Component({
        selector: 'tui-hints-host',
        template: "<div\n    *ngFor=\"let hint of hints$ | async\"\n    role=\"tooltip\"\n    polymorpheus-outlet\n    @tuiParentAnimation\n    [attr.id]=\"hint.id\"\n    [content]=\"hint.component || component\"\n    [context]=\"{$implicit: hint}\"\n    [tuiActiveZoneParent]=\"hint.activeZone\"\n></div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [TUI_PARENT_ANIMATION],
        host: {
            'aria-live': 'polite',
        },
        styles: [":host{position:fixed;bottom:0;left:0;width:100%;height:0}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiHintService))
], TuiHintsHostComponent);
export { TuiHintsHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludHMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2hpbnRzLWhvc3QvIiwic291cmNlcyI6WyJoaW50cy1ob3N0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVoQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQVlsRSxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQUc5QixZQUN5QyxVQUFtQyxFQUN2QyxNQUFzQztRQURsQyxlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUN2QyxXQUFNLEdBQU4sTUFBTSxDQUFnQztRQUpsRSxjQUFTLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBS2pFLENBQUM7SUFFSixJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDakUsQ0FBQztDQUNKLENBQUE7O1lBUHdELFVBQVUsdUJBQTFELE1BQU0sU0FBQyxVQUFVO1lBQ3VCLFVBQVUsdUJBQWxELE1BQU0sU0FBQyxjQUFjOztBQUxqQixxQkFBcUI7SUFWakMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQiw0U0FBeUM7UUFFekMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLENBQUMsb0JBQW9CLENBQUM7UUFDbEMsSUFBSSxFQUFFO1lBQ0YsV0FBVyxFQUFFLFFBQVE7U0FDeEI7O0tBQ0osQ0FBQztJQUtPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0dBTGxCLHFCQUFxQixDQVdqQztTQVhZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX1BBUkVOVF9BTklNQVRJT059IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlIaW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9pbnRlcmZhY2VzJztcbmltcG9ydCB7VHVpSGludFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3NlcnZpY2VzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlIaW50Qm94Q29tcG9uZW50fSBmcm9tICcuL2hpbnQtYm94L2hpbnQtYm94LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWhpbnRzLWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9oaW50cy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2hpbnRzLWhvc3Quc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGFuaW1hdGlvbnM6IFtUVUlfUEFSRU5UX0FOSU1BVElPTl0sXG4gICAgaG9zdDoge1xuICAgICAgICAnYXJpYS1saXZlJzogJ3BvbGl0ZScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludHNIb3N0Q29tcG9uZW50IHtcbiAgICByZWFkb25seSBjb21wb25lbnQgPSBuZXcgUG9seW1vcnBoZXVzQ29tcG9uZW50KFR1aUhpbnRCb3hDb21wb25lbnQpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlIaW50U2VydmljZSkgcmVhZG9ubHkgaGludHMkOiBPYnNlcnZhYmxlPHJlYWRvbmx5IFR1aUhpbnRbXT4sXG4gICAgKSB7fVxuXG4gICAgZ2V0IGNsaWVudFJlY3QoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG59XG4iXX0=