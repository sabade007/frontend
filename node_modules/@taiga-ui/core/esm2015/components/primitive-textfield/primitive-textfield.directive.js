var TuiPrimitiveTextfieldDirective_1;
import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Inject } from '@angular/core';
import { TuiAbstractTextfieldHost } from '@taiga-ui/core/abstract';
import { TUI_TEXTFIELD_HOST } from '@taiga-ui/core/tokens';
import { TuiPrimitiveTextfieldComponent } from './primitive-textfield.component';
let TuiPrimitiveTextfieldDirective = TuiPrimitiveTextfieldDirective_1 = class TuiPrimitiveTextfieldDirective extends TuiAbstractTextfieldHost {
    constructor(textfield) {
        /**
         * TuiPrimitiveTextfieldComponent satisfies all required parts of
         * AbstractTuiControl interface. A new interface is not introduced
         * so AbstractTuiControl is automatically injected for all other controls.
         */
        super(textfield);
        this.textfield = textfield;
    }
    get readOnly() {
        return this.textfield.readOnly || !this.textfield.editable;
    }
    onValueChange(value) {
        this.textfield.onModelChange(value);
    }
};
TuiPrimitiveTextfieldDirective.ctorParameters = () => [
    { type: TuiPrimitiveTextfieldComponent, decorators: [{ type: Inject, args: [TuiPrimitiveTextfieldComponent,] }] }
];
TuiPrimitiveTextfieldDirective = TuiPrimitiveTextfieldDirective_1 = __decorate([
    Directive({
        selector: 'tui-primitive-textfield',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiPrimitiveTextfieldDirective_1),
            },
        ],
    }),
    __param(0, Inject(TuiPrimitiveTextfieldComponent))
], TuiPrimitiveTextfieldDirective);
export { TuiPrimitiveTextfieldDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXRleHRmaWVsZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3ByaW1pdGl2ZS10ZXh0ZmllbGQvIiwic291cmNlcyI6WyJwcmltaXRpdmUtdGV4dGZpZWxkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUMsOEJBQThCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQVcvRSxJQUFhLDhCQUE4QixzQ0FBM0MsTUFBYSw4QkFBK0IsU0FBUSx3QkFBNkI7SUFDN0UsWUFFcUIsU0FBeUM7UUFFMUQ7Ozs7V0FJRztRQUNILEtBQUssQ0FBQyxTQUFtRCxDQUFDLENBQUM7UUFQMUMsY0FBUyxHQUFULFNBQVMsQ0FBZ0M7SUFROUQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUMvRCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWE7UUFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQztDQUNKLENBQUE7O1lBakJtQyw4QkFBOEIsdUJBRHpELE1BQU0sU0FBQyw4QkFBOEI7O0FBRmpDLDhCQUE4QjtJQVQxQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUseUJBQXlCO1FBQ25DLFNBQVMsRUFBRTtZQUNQO2dCQUNJLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQThCLENBQUM7YUFDaEU7U0FDSjtLQUNKLENBQUM7SUFHTyxXQUFBLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0dBRmxDLDhCQUE4QixDQW9CMUM7U0FwQlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpQ29udHJvbH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aUFic3RyYWN0VGV4dGZpZWxkSG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0hPU1R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5cbmltcG9ydCB7VHVpUHJpbWl0aXZlVGV4dGZpZWxkQ29tcG9uZW50fSBmcm9tICcuL3ByaW1pdGl2ZS10ZXh0ZmllbGQuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLXRleHRmaWVsZCcsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9URVhURklFTERfSE9TVCxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aVByaW1pdGl2ZVRleHRmaWVsZERpcmVjdGl2ZSksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJpbWl0aXZlVGV4dGZpZWxkRGlyZWN0aXZlIGV4dGVuZHMgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0PGFueT4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVByaW1pdGl2ZVRleHRmaWVsZENvbXBvbmVudClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0ZmllbGQ6IFR1aVByaW1pdGl2ZVRleHRmaWVsZENvbXBvbmVudCxcbiAgICApIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR1aVByaW1pdGl2ZVRleHRmaWVsZENvbXBvbmVudCBzYXRpc2ZpZXMgYWxsIHJlcXVpcmVkIHBhcnRzIG9mXG4gICAgICAgICAqIEFic3RyYWN0VHVpQ29udHJvbCBpbnRlcmZhY2UuIEEgbmV3IGludGVyZmFjZSBpcyBub3QgaW50cm9kdWNlZFxuICAgICAgICAgKiBzbyBBYnN0cmFjdFR1aUNvbnRyb2wgaXMgYXV0b21hdGljYWxseSBpbmplY3RlZCBmb3IgYWxsIG90aGVyIGNvbnRyb2xzLlxuICAgICAgICAgKi9cbiAgICAgICAgc3VwZXIodGV4dGZpZWxkIGFzIHVua25vd24gYXMgQWJzdHJhY3RUdWlDb250cm9sPHVua25vd24+KTtcbiAgICB9XG5cbiAgICBnZXQgcmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRmaWVsZC5yZWFkT25seSB8fCAhdGhpcy50ZXh0ZmllbGQuZWRpdGFibGU7XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGV4dGZpZWxkLm9uTW9kZWxDaGFuZ2UodmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==