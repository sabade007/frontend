import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, ViewChild, } from '@angular/core';
import { TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiTextfieldController, } from '@taiga-ui/core/directives';
import { BehaviorSubject } from 'rxjs';
import { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';
import { TuiPrimitiveTextfieldComponent } from '../primitive-textfield.component';
let TuiValueDecorationComponent = class TuiValueDecorationComponent {
    constructor(textfield, controller) {
        this.textfield = textfield;
        this.controller = controller;
        this.prefix$ = new BehaviorSubject('');
        this.pre$ = this.prefix$.pipe(delay(0), filter(() => { var _a; return !!((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.isConnected); }), distinctUntilChanged(), map(() => { var _a; return ((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) || 0; }));
    }
    get isContextTable() {
        return this.textfield.appearance === "table" /* Table */;
    }
    get value() {
        return this.textfield.value;
    }
    get filler() {
        const { focused, placeholder, exampleText, value, textfield } = this;
        if (placeholder && exampleText) {
            return '';
        }
        return focused ? exampleText || textfield.filler.slice(value.length) : '';
    }
    get prefix() {
        return this.decorationsVisible ? this.textfield.prefix : '';
    }
    get postfix() {
        return this.decorationsVisible ? this.computedPostfix : '';
    }
    ngDoCheck() {
        this.prefix$.next(this.prefix);
    }
    get placeholder() {
        var _a;
        return ((_a = this.textfield.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) || '';
    }
    get exampleText() {
        const exampleText = this.controller.exampleText || this.placeholder;
        return !this.value && this.focused ? exampleText : '';
    }
    get decorationsVisible() {
        return !!this.value || this.focused;
    }
    get focused() {
        return this.textfield.computedFocused && !this.textfield.readOnly;
    }
    get computedPostfix() {
        return this.textfield.postfix && (this.filler || this.value)
            ? ` ${this.textfield.postfix}`
            : this.textfield.postfix;
    }
};
TuiValueDecorationComponent.ctorParameters = () => [
    { type: TuiPrimitiveTextfieldComponent, decorators: [{ type: Inject, args: [TuiPrimitiveTextfieldComponent,] }] },
    { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] }
];
__decorate([
    ViewChild('pre', { read: ElementRef, static: true })
], TuiValueDecorationComponent.prototype, "pre", void 0);
__decorate([
    HostBinding('class._table')
], TuiValueDecorationComponent.prototype, "isContextTable", null);
__decorate([
    HostListener('animationstart')
], TuiValueDecorationComponent.prototype, "ngDoCheck", null);
TuiValueDecorationComponent = __decorate([
    Component({
        selector: 'tui-value-decoration',
        template: "<span\n    #pre\n    class=\"t-prefix t-inline\"\n    [textContent]=\"prefix\"\n></span>\n<span\n    class=\"t-ghost t-inline\"\n    [textContent]=\"value\"\n></span>\n<span\n    class=\"t-filler t-inline\"\n    [textContent]=\"filler\"\n></span>\n<span\n    class=\"t-postfix t-inline\"\n    [textContent]=\"postfix\"\n></span>\n",
        // It follows Change Detection of PrimitiveTextfield
        changeDetection: ChangeDetectionStrategy.Default,
        styles: [":host{position:absolute;display:block;height:1.25rem;line-height:1;width:100%;margin:-1.25rem 0;padding:.625rem 0;box-sizing:content-box;color:var(--tui-text-01);animation:1s tuiPresent}:host._table{position:static}:host-context(tui-textfield[data-mode=onDark]) :host{color:var(--tui-text-01-night)}:host:after{content:'';display:inline-block;vertical-align:middle;height:100%}.t-ghost{visibility:hidden;white-space:pre;text-overflow:clip}.t-postfix,.t-prefix{white-space:pre}.t-filler{overflow:hidden;color:var(--tui-text-03);text-overflow:ellipsis;max-width:100%;white-space:nowrap}:host-context(tui-textfield[data-mode=onDark]) .t-filler{color:var(--tui-text-03-night)}.t-inline{display:inline-block;vertical-align:middle}"]
    }),
    __param(0, Inject(TuiPrimitiveTextfieldComponent)),
    __param(1, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER))
], TuiValueDecorationComponent);
export { TuiValueDecorationComponent };
//# sourceMappingURL=data:application/json;base64,