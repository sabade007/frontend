import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { POLLING_TIME, TuiDestroyService, tuiPreventDefault, tuiScrollFrom, tuiStopPropagation, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { TUI_ELEMENT_REF, TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, throttleTime } from 'rxjs/operators';
const MIN_WIDTH = 24;
// @dynamic
let TuiScrollbarDirective = class TuiScrollbarDirective {
    constructor(ngZone, renderer, destroy$, animationFrame$, wrapper, container, doc, el) {
        this.wrapper = wrapper;
        this.container = container;
        this.doc = doc;
        this.el = el;
        this.tuiScrollbar = 'vertical';
        const { nativeElement } = this.el;
        const mousedown$ = tuiTypedFromEvent(nativeElement, 'mousedown');
        const mousemove$ = tuiTypedFromEvent(this.doc, 'mousemove');
        const mouseup$ = tuiTypedFromEvent(this.doc, 'mouseup');
        const mousedownWrapper$ = tuiTypedFromEvent(this.wrapper.nativeElement, 'mousedown');
        merge(mousedownWrapper$.pipe(tuiPreventDefault(), map(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe(tuiPreventDefault(), tuiStopPropagation(), switchMap(event => {
            const rect = nativeElement.getBoundingClientRect();
            const vertical = getOffsetVertical(event, rect);
            const horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(event => this.getScrolled(event, vertical, horizontal)), takeUntil(mouseup$));
        })))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(([scrollTop, scrollLeft]) => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setProperty(this.element, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(this.element, 'scrollLeft', scrollLeft);
            }
        });
        merge(animationFrame$.pipe(throttleTime(POLLING_TIME)), tuiScrollFrom(this.element))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(() => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setStyle(nativeElement, 'top', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'height', `${this.view * 100}%`);
            }
            else {
                renderer.setStyle(nativeElement, 'left', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'width', `${this.view * 100}%`);
            }
        });
    }
    get scrolled() {
        const { scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth, } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? scrollTop / (scrollHeight - clientHeight)
            : scrollLeft / (scrollWidth - clientWidth);
    }
    get compensation() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
            this.tuiScrollbar === 'vertical') ||
            ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                this.tuiScrollbar === 'horizontal')) {
            return 0;
        }
        return this.tuiScrollbar === 'vertical'
            ? MIN_WIDTH / clientHeight
            : MIN_WIDTH / clientWidth;
    }
    get thumb() {
        const compensation = this.compensation || this.view;
        return this.scrolled * (1 - compensation);
    }
    get view() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
            : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
    }
    get element() {
        return this.container.nativeElement;
    }
    getScrolled({ clientY, clientX }, offsetVertical, offsetHorizontal) {
        const { offsetHeight, offsetWidth } = this.el.nativeElement;
        const { top, left, width, height } = this.wrapper.nativeElement.getBoundingClientRect();
        const maxTop = this.element.scrollHeight - height;
        const maxLeft = this.element.scrollWidth - width;
        const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    }
};
TuiScrollbarDirective.ctorParameters = () => [
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [TUI_ELEMENT_REF,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [TUI_SCROLL_REF,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input()
], TuiScrollbarDirective.prototype, "tuiScrollbar", void 0);
TuiScrollbarDirective = __decorate([
    Directive({
        selector: '[tuiScrollbar]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(NgZone)),
    __param(1, Inject(Renderer2)),
    __param(2, Self()), __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(ANIMATION_FRAME)),
    __param(4, Inject(TUI_ELEMENT_REF)),
    __param(5, Inject(TUI_SCROLL_REF)),
    __param(6, Inject(DOCUMENT)),
    __param(7, Inject(ElementRef))
], TuiScrollbarDirective);
export { TuiScrollbarDirective };
function getOffsetVertical({ clientY }, { top, height }) {
    return (clientY - top) / height;
}
function getOffsetHorizontal({ clientX }, { left, width }) {
    return (clientX - left) / width;
}
//# sourceMappingURL=data:application/json;base64,