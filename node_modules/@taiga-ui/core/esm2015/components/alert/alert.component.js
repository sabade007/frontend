import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Inject, OnInit, } from '@angular/core';
import { isNumber, TuiContextWithImplicit, TuiDestroyService, TuiDialog, tuiPure, } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse, tuiSlideInRight } from '@taiga-ui/core/animations';
import { TUI_ANIMATION_OPTIONS, TUI_NOTIFICATION_OPTIONS, } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { fromEvent, timer } from 'rxjs';
import { repeatWhen, takeUntil } from 'rxjs/operators';
// TODO: 3.0 Refactor according to new context by 3.0 and get rid of $any in template
let TuiAlertComponent = class TuiAlertComponent {
    constructor(elementRef, destroy$, options, animationOptions, item) {
        this.elementRef = elementRef;
        this.destroy$ = destroy$;
        this.options = options;
        this.animationOptions = animationOptions;
        this.item = item;
        this.autoClose = typeof this.item.autoClose === 'function'
            ? this.item.autoClose(this.item.status)
            : this.item.autoClose;
        this.animation = Object.assign({ value: '' }, this.animationOptions);
    }
    ngOnInit() {
        this.initAutoClose();
    }
    get context() {
        return this.calculateContext(this.item);
    }
    closeNotification() {
        this.item.$implicit.complete();
    }
    calculateContext({ $implicit, status, data, label, }) {
        return {
            $implicit: status,
            data,
            label,
            closeHook: () => {
                $implicit.complete();
            },
            emitHook: (data) => {
                $implicit.next(data);
            },
            emitAndCloseHook: (data) => {
                $implicit.next(data);
                $implicit.complete();
            },
        };
    }
    initAutoClose() {
        if (!this.autoClose) {
            return;
        }
        timer(isNumber(this.autoClose) ? this.autoClose : this.options.defaultAutoCloseTime)
            .pipe(takeUntil(fromEvent(this.elementRef.nativeElement, 'mouseenter')), 
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(() => fromEvent(this.elementRef.nativeElement, 'mouseleave')), takeUntil(this.destroy$))
            .subscribe(() => this.closeNotification());
    }
};
TuiAlertComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_NOTIFICATION_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] }
];
__decorate([
    HostBinding('@tuiFadeIn'),
    HostBinding('@tuiSlideInRight'),
    HostBinding('@tuiHeightCollapse')
], TuiAlertComponent.prototype, "animation", void 0);
__decorate([
    tuiPure
], TuiAlertComponent.prototype, "calculateContext", null);
TuiAlertComponent = __decorate([
    Component({
        selector: 'tui-alert',
        template: "<tui-notification\n    *ngIf=\"item.hasCloseButton; else noClose\"\n    [status]=\"item.status\"\n    [hasIcon]=\"item.hasIcon\"\n    (close)=\"closeNotification()\"\n>\n    <label\n        *ngIf=\"item.label\"\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"t-heading\"\n        [content]=\"$any(item.label)\"\n        [context]=\"context\"\n    ></label>\n    <div\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__content\"\n        class=\"t-content\"\n        [content]=\"item.content\"\n        [context]=\"$any(context)\"\n    ></div>\n</tui-notification>\n<ng-template #noClose>\n    <tui-notification\n        [status]=\"item.status\"\n        [hasIcon]=\"item.hasIcon\"\n    >\n        <label\n            *ngIf=\"item.label\"\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__heading\"\n            class=\"t-heading\"\n            [content]=\"$any(item.label)\"\n            [context]=\"context\"\n        ></label>\n        <div\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__content\"\n            class=\"t-content\"\n            [content]=\"item.content\"\n            [context]=\"$any(context)\"\n        ></div>\n    </tui-notification>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiDestroyService],
        animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
        host: { role: 'alert' },
        styles: [":host{box-shadow:0 .5rem 1rem rgba(0,0,0,.16);display:block;border-radius:var(--tui-radius-m);width:18rem;margin:2rem 3rem 0 auto}:host-context(tui-root._mobile) :host{margin:1rem 1rem 0 auto}:host:not(:first-child){margin-top:.75rem}.t-heading{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:700;margin:0}.t-content{color:var(--tui-text-01);word-wrap:break-word}.t-content:empty{display:none}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiDestroyService)),
    __param(2, Inject(TUI_NOTIFICATION_OPTIONS)),
    __param(3, Inject(TUI_ANIMATION_OPTIONS)),
    __param(4, Inject(POLYMORPHEUS_CONTEXT))
], TuiAlertComponent);
export { TuiAlertComponent };
//# sourceMappingURL=data:application/json;base64,