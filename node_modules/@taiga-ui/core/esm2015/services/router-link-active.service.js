import { __decorate, __param } from "tslib";
import { Inject, Injectable, NgZone, Optional } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { TuiDestroyService, tuiZoneOptimized } from '@taiga-ui/cdk';
import { EMPTY, Observable } from 'rxjs';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
let TuiRouterLinkActiveService = class TuiRouterLinkActiveService extends Observable {
    constructor(routerLinkActive, ngZone, animationFrame$, destroy$) {
        const stream$ = routerLinkActive
            ? animationFrame$.pipe(map(() => routerLinkActive.isActive), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$))
            : EMPTY;
        super(subscriber => stream$.subscribe(subscriber));
    }
};
TuiRouterLinkActiveService.ctorParameters = () => [
    { type: RouterLinkActive, decorators: [{ type: Optional }, { type: Inject, args: [RouterLinkActive,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
TuiRouterLinkActiveService = __decorate([
    Injectable(),
    __param(0, Optional()),
    __param(0, Inject(RouterLinkActive)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(ANIMATION_FRAME)),
    __param(3, Inject(TuiDestroyService))
], TuiRouterLinkActiveService);
export { TuiRouterLinkActiveService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWxpbmstYWN0aXZlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInJvdXRlci1saW5rLWFjdGl2ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEyQixTQUFRLFVBQW1CO0lBQy9ELFlBR0ksZ0JBQXlDLEVBQ3pCLE1BQWMsRUFDTCxlQUFtQyxFQUNqQyxRQUEyQjtRQUV0RCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0I7WUFDNUIsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQ2hCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDcEMsb0JBQW9CLEVBQUUsRUFDdEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEI7WUFDSCxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRVosS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSixDQUFBOztZQWhCeUIsZ0JBQWdCLHVCQUZqQyxRQUFRLFlBQ1IsTUFBTSxTQUFDLGdCQUFnQjtZQUVBLE1BQU0sdUJBQTdCLE1BQU0sU0FBQyxNQUFNO1lBQzRCLFVBQVUsdUJBQW5ELE1BQU0sU0FBQyxlQUFlO1lBQ2MsaUJBQWlCLHVCQUFyRCxNQUFNLFNBQUMsaUJBQWlCOztBQVBwQiwwQkFBMEI7SUFEdEMsVUFBVSxFQUFFO0lBR0osV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFFeEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUN2QixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0dBUHJCLDBCQUEwQixDQW9CdEM7U0FwQlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSb3V0ZXJMaW5rQWN0aXZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUV9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgdHVpWm9uZU9wdGltaXplZH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0VNUFRZLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZSBleHRlbmRzIE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFJvdXRlckxpbmtBY3RpdmUpXG4gICAgICAgIHJvdXRlckxpbmtBY3RpdmU6IFJvdXRlckxpbmtBY3RpdmUgfCBudWxsLFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoQU5JTUFUSU9OX0ZSQU1FKSBhbmltYXRpb25GcmFtZSQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBjb25zdCBzdHJlYW0kID0gcm91dGVyTGlua0FjdGl2ZVxuICAgICAgICAgICAgPyBhbmltYXRpb25GcmFtZSQucGlwZShcbiAgICAgICAgICAgICAgICAgIG1hcCgoKSA9PiByb3V0ZXJMaW5rQWN0aXZlLmlzQWN0aXZlKSxcbiAgICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICAgICAgICB0dWlab25lT3B0aW1pemVkKG5nWm9uZSksXG4gICAgICAgICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IEVNUFRZO1xuXG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4gc3RyZWFtJC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgIH1cbn1cbiJdfQ==