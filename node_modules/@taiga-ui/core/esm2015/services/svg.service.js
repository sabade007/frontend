import { __decorate, __param } from "tslib";
import { Inject, Injectable, Optional, Sanitizer, SecurityContext } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { tuiAssert } from '@taiga-ui/cdk';
import { TUI_ICONS, TUI_SANITIZER } from '@taiga-ui/core/tokens';
import { processIcon } from '@taiga-ui/core/utils/dom';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/tokens";
import * as i2 from "@angular/platform-browser";
/**
 * Service for reusing SVGs without inlining each instance
 */
// @dynamic
let TuiSvgService = class TuiSvgService {
    constructor(tuiSanitizer, sanitizer, icons) {
        this.tuiSanitizer = tuiSanitizer;
        this.sanitizer = sanitizer;
        this.originals = {};
        this.items$ = new BehaviorSubject(new Map());
        this.define(icons);
    }
    define(icons) {
        const { value } = this.items$;
        Object.keys(icons).forEach(key => {
            this.defineIcon(key, icons[key], value);
        });
        this.items$.next(value);
    }
    getOriginal(name) {
        return this.originals[name] || null;
    }
    defineIcon(name, src, map) {
        if (map.has(name)) {
            return;
        }
        const parsed = this.parseSrc(name, src);
        if (!parsed) {
            tuiAssert.assert(false, `Unable to parse given SVG src`);
            return;
        }
        map.set(name, parsed);
        this.originals = Object.assign(Object.assign({}, this.originals), { [name]: src });
    }
    parseSrc(name, src) {
        return this.sanitize(processIcon(src, name));
    }
    sanitize(src) {
        return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer
            ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src)
            : this.sanitizer.sanitize(SecurityContext.HTML, src)) || ``);
    }
};
TuiSvgService.ctorParameters = () => [
    { type: Sanitizer, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SANITIZER,] }] },
    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS,] }] }
];
TuiSvgService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiSvgService_Factory() { return new TuiSvgService(i0.ɵɵinject(i1.TUI_SANITIZER, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i1.TUI_ICONS)); }, token: TuiSvgService, providedIn: "root" });
TuiSvgService = __decorate([
    Injectable({
        providedIn: `root`,
    }),
    __param(0, Optional()),
    __param(0, Inject(TUI_SANITIZER)),
    __param(1, Inject(DomSanitizer)),
    __param(2, Inject(TUI_ICONS))
], TuiSvgService);
export { TuiSvgService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInN2Zy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUMsWUFBWSxFQUFFLFFBQVEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQUVyQzs7R0FFRztBQUNILFdBQVc7QUFJWCxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBS3RCLFlBR3FCLFlBQThCLEVBQ1IsU0FBdUIsRUFDM0MsS0FBNkI7UUFGL0IsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQ1IsY0FBUyxHQUFULFNBQVMsQ0FBYztRQVIxRCxjQUFTLEdBQTJCLEVBQUUsQ0FBQztRQUV0QyxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQXdCLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQVNwRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBNkI7UUFDaEMsTUFBTSxFQUFDLEtBQUssRUFBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxJQUFZLEVBQUUsR0FBVyxFQUFFLEdBQTBCO1FBQ3BFLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNmLE9BQU87U0FDVjtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1lBRXpELE9BQU87U0FDVjtRQUVELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLG1DQUNQLElBQUksQ0FBQyxTQUFTLEtBQ2pCLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUNkLENBQUM7SUFDTixDQUFDO0lBRU8sUUFBUSxDQUFDLElBQVksRUFBRSxHQUFXO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FDekMsQ0FBQyxJQUFJLENBQUMsWUFBWTtZQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDbEUsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQXBEc0MsU0FBUyx1QkFGdkMsUUFBUSxZQUNSLE1BQU0sU0FBQyxhQUFhO1lBRTZCLFlBQVksdUJBQTdELE1BQU0sU0FBQyxZQUFZOzRDQUNuQixNQUFNLFNBQUMsU0FBUzs7O0FBVlosYUFBYTtJQUh6QixVQUFVLENBQUM7UUFDUixVQUFVLEVBQUUsTUFBTTtLQUNyQixDQUFDO0lBT08sV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRXJCLFdBQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3BCLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0dBVmIsYUFBYSxDQTREekI7U0E1RFksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2FuaXRpemVyLCBTZWN1cml0eUNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXIsIFNhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0lDT05TLCBUVUlfU0FOSVRJWkVSfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtwcm9jZXNzSWNvbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMvZG9tJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBTZXJ2aWNlIGZvciByZXVzaW5nIFNWR3Mgd2l0aG91dCBpbmxpbmluZyBlYWNoIGluc3RhbmNlXG4gKi9cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTdmdTZXJ2aWNlIHtcbiAgICBwcml2YXRlIG9yaWdpbmFsczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gICAgcmVhZG9ubHkgaXRlbXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYXA8c3RyaW5nLCBTYWZlSHRtbD4+KG5ldyBNYXAoKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUVUlfU0FOSVRJWkVSKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHR1aVNhbml0aXplcjogU2FuaXRpemVyIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChEb21TYW5pdGl6ZXIpIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG4gICAgICAgIEBJbmplY3QoVFVJX0lDT05TKSBpY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcbiAgICApIHtcbiAgICAgICAgdGhpcy5kZWZpbmUoaWNvbnMpO1xuICAgIH1cblxuICAgIGRlZmluZShpY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IHZvaWQge1xuICAgICAgICBjb25zdCB7dmFsdWV9ID0gdGhpcy5pdGVtcyQ7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoaWNvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lSWNvbihrZXksIGljb25zW2tleV0sIHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pdGVtcyQubmV4dCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0T3JpZ2luYWwobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsc1tuYW1lXSB8fCBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVmaW5lSWNvbihuYW1lOiBzdHJpbmcsIHNyYzogc3RyaW5nLCBtYXA6IE1hcDxzdHJpbmcsIFNhZmVIdG1sPik6IHZvaWQge1xuICAgICAgICBpZiAobWFwLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5wYXJzZVNyYyhuYW1lLCBzcmMpO1xuXG4gICAgICAgIGlmICghcGFyc2VkKSB7XG4gICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KGZhbHNlLCBgVW5hYmxlIHRvIHBhcnNlIGdpdmVuIFNWRyBzcmNgKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLnNldChuYW1lLCBwYXJzZWQpO1xuICAgICAgICB0aGlzLm9yaWdpbmFscyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3JpZ2luYWxzLFxuICAgICAgICAgICAgW25hbWVdOiBzcmMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZVNyYyhuYW1lOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogU2FmZUh0bWwge1xuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZShwcm9jZXNzSWNvbihzcmMsIG5hbWUpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhbml0aXplKHNyYzogc3RyaW5nKTogU2FmZUh0bWwge1xuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoXG4gICAgICAgICAgICAodGhpcy50dWlTYW5pdGl6ZXJcbiAgICAgICAgICAgICAgICA/IHRoaXMudHVpU2FuaXRpemVyLnNhbml0aXplKFNlY3VyaXR5Q29udGV4dC5IVE1MLCBzcmMpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuSFRNTCwgc3JjKSkgfHwgYGAsXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19