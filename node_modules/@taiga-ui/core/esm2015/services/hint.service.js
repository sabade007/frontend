import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service for displaying hints/tooltips
 */
let TuiHintService = class TuiHintService extends BehaviorSubject {
    constructor() {
        super([]);
        /**
         * TODO:
         * We need the following logic for desribedBy
         * move it into another service that can register hints and
         * manage it using TuiHintService inside
         */
        this.directives = [];
    }
    add(directive) {
        this.next(this.value.concat(directive));
    }
    remove(directive) {
        if (this.value.includes(directive)) {
            this.next(this.value.filter(hint => hint !== directive));
        }
    }
    register(directive) {
        this.directives = [...this.directives, directive];
    }
    unregister(directive) {
        this.remove(directive);
        this.directives = this.directives.filter(dir => dir !== directive);
    }
    showHintForId(id) {
        const directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.add(directive);
        }
    }
    hideHintForId(id) {
        const directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.remove(directive);
        }
    }
    findDirectiveWithHintId(id) {
        return this.directives.find(directive => directive.tuiHintId === id);
    }
};
TuiHintService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiHintService_Factory() { return new TuiHintService(); }, token: TuiHintService, providedIn: "root" });
TuiHintService = __decorate([
    Injectable({
        providedIn: `root`,
    })
], TuiHintService);
export { TuiHintService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvc2VydmljZXMvIiwic291cmNlcyI6WyJoaW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFPckM7O0dBRUc7QUFJSCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFlLFNBQVEsZUFBMkM7SUFTM0U7UUFDSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFUZDs7Ozs7V0FLRztRQUNLLGVBQVUsR0FBZ0MsRUFBRSxDQUFDO0lBSXJELENBQUM7SUFFRCxHQUFHLENBQUMsU0FBMEI7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBMEI7UUFDN0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQTJCO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFVBQVUsQ0FBQyxTQUEyQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFVO1FBQ3BCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuRCxJQUFJLFNBQVMsRUFBRTtZQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEVBQVU7UUFDcEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxFQUFVO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSixDQUFBOztBQW5EWSxjQUFjO0lBSDFCLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7R0FDVyxjQUFjLENBbUQxQjtTQW5EWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuLy8gVE9ETzogMy4wIGNhbiBpdCBiZSByZW1vdmVkPyBJdCBwcmV2ZW50ZWQgc2VwcyBjeWNsaW5nIGJlZm9yZSAyLjBcbnR5cGUgVHVpSGludERpcmVjdGl2ZSA9IGFueTtcblxudHlwZSBBYnN0cmFjdFR1aUhpbnQgPSBhbnk7XG5cbi8qKlxuICogU2VydmljZSBmb3IgZGlzcGxheWluZyBoaW50cy90b29sdGlwc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlIaW50U2VydmljZSBleHRlbmRzIEJlaGF2aW9yU3ViamVjdDxyZWFkb25seSBBYnN0cmFjdFR1aUhpbnRbXT4ge1xuICAgIC8qKlxuICAgICAqIFRPRE86XG4gICAgICogV2UgbmVlZCB0aGUgZm9sbG93aW5nIGxvZ2ljIGZvciBkZXNyaWJlZEJ5XG4gICAgICogbW92ZSBpdCBpbnRvIGFub3RoZXIgc2VydmljZSB0aGF0IGNhbiByZWdpc3RlciBoaW50cyBhbmRcbiAgICAgKiBtYW5hZ2UgaXQgdXNpbmcgVHVpSGludFNlcnZpY2UgaW5zaWRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBkaXJlY3RpdmVzOiByZWFkb25seSBUdWlIaW50RGlyZWN0aXZlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbXSk7XG4gICAgfVxuXG4gICAgYWRkKGRpcmVjdGl2ZTogQWJzdHJhY3RUdWlIaW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMubmV4dCh0aGlzLnZhbHVlLmNvbmNhdChkaXJlY3RpdmUpKTtcbiAgICB9XG5cbiAgICByZW1vdmUoZGlyZWN0aXZlOiBBYnN0cmFjdFR1aUhpbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUuaW5jbHVkZXMoZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgdGhpcy5uZXh0KHRoaXMudmFsdWUuZmlsdGVyKGhpbnQgPT4gaGludCAhPT0gZGlyZWN0aXZlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3RlcihkaXJlY3RpdmU6IFR1aUhpbnREaXJlY3RpdmUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gWy4uLnRoaXMuZGlyZWN0aXZlcywgZGlyZWN0aXZlXTtcbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyKGRpcmVjdGl2ZTogVHVpSGludERpcmVjdGl2ZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZShkaXJlY3RpdmUpO1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSB0aGlzLmRpcmVjdGl2ZXMuZmlsdGVyKGRpciA9PiBkaXIgIT09IGRpcmVjdGl2ZSk7XG4gICAgfVxuXG4gICAgc2hvd0hpbnRGb3JJZChpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuZmluZERpcmVjdGl2ZVdpdGhIaW50SWQoaWQpO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKGRpcmVjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoaWRlSGludEZvcklkKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5maW5kRGlyZWN0aXZlV2l0aEhpbnRJZChpZCk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZmluZERpcmVjdGl2ZVdpdGhIaW50SWQoaWQ6IHN0cmluZyk6IFR1aUhpbnREaXJlY3RpdmUgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmVzLmZpbmQoZGlyZWN0aXZlID0+IGRpcmVjdGl2ZS50dWlIaW50SWQgPT09IGlkKTtcbiAgICB9XG59XG4iXX0=