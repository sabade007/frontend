import { __decorate, __param } from "tslib";
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID, } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiSvgService } from '@taiga-ui/core/services';
import { innerHTML } from '@taiga-ui/core/utils/polyfills';
import { takeUntil } from 'rxjs/operators';
// @dynamic
let TuiSvgDefsHostComponent = class TuiSvgDefsHostComponent {
    constructor(documentRef, svgService, changeDetectorRef, destroy$, platformId) {
        this.svgService = svgService;
        this.changeDetectorRef = changeDetectorRef;
        this.destroy$ = destroy$;
        this.isBrowser = true;
        this.isBrowser = !isPlatformServer(platformId);
        innerHTML(documentRef);
    }
    // @bad TODO: Looks like it could be async piped but it was probably written like that for a reason
    ngOnInit() {
        this.svgService.items$.pipe(takeUntil(this.destroy$)).subscribe(defsMap => {
            this.items = defsMap.values();
            this.changeDetectorRef.detectChanges();
        });
    }
};
TuiSvgDefsHostComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
TuiSvgDefsHostComponent = __decorate([
    Component({
        selector: 'tui-svg-defs-host',
        template: "<svg:svg\n    version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n    <ng-container *ngIf=\"isBrowser; else server\">\n        <defs\n            *ngFor=\"let def of items\"\n            [innerHTML]=\"def\"\n        ></defs>\n    </ng-container>\n    <ng-template #server>\n        <!--svg[outerHTML] - to support SSR, because there is no support of innerHTML for for defs element in domino-->\n        <defs *ngFor=\"let def of items\">\n            <svg [outerHTML]=\"def\"></svg>\n        </defs>\n    </ng-template>\n</svg:svg>\n",
        providers: [TuiDestroyService],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:none}"]
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(TuiSvgService)),
    __param(2, Inject(ChangeDetectorRef)),
    __param(3, Inject(TuiDestroyService)),
    __param(4, Inject(PLATFORM_ID))
], TuiSvgDefsHostComponent);
export { TuiSvgDefsHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9pbnRlcm5hbC9zdmctZGVmcy1ob3N0LyIsInNvdXJjZXMiOlsic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXpDLFdBQVc7QUFRWCxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtJQUloQyxZQUNzQixXQUFxQixFQUNDLFVBQXlCLEVBQ3JCLGlCQUFvQyxFQUUvRCxRQUEyQixFQUN2QixVQUFtQztRQUpoQixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ3JCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFFL0QsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFQaEQsY0FBUyxHQUFHLElBQUksQ0FBQztRQVViLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELG1HQUFtRztJQUNuRyxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7O1lBbEJzQyxRQUFRLHVCQUF0QyxNQUFNLFNBQUMsUUFBUTtZQUNvQyxhQUFhLHVCQUFoRSxNQUFNLFNBQUMsYUFBYTtZQUMwQyxpQkFBaUIsdUJBQS9FLE1BQU0sU0FBQyxpQkFBaUI7WUFFRSxpQkFBaUIsdUJBRDNDLE1BQU0sU0FBQyxpQkFBaUI7NENBRXhCLE1BQU0sU0FBQyxXQUFXOztBQVZkLHVCQUF1QjtJQVBuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLDZsQkFBNEM7UUFFNUMsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7UUFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUFNTyxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQixXQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUNyQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFFekIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7R0FWZix1QkFBdUIsQ0F1Qm5DO1NBdkJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlQsIGlzUGxhdGZvcm1TZXJ2ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBJbmplY3QsXG4gICAgT25Jbml0LFxuICAgIFBMQVRGT1JNX0lELFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2FmZUh0bWx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVN2Z1NlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3NlcnZpY2VzJztcbmltcG9ydCB7aW5uZXJIVE1MfSBmcm9tICdAdGFpZ2EtdWkvY29yZS91dGlscy9wb2x5ZmlsbHMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXN2Zy1kZWZzLWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zdmctZGVmcy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3N2Zy1kZWZzLWhvc3Quc3R5bGUubGVzcyddLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU3ZnRGVmc0hvc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGl0ZW1zITogSXRlcmFibGVJdGVyYXRvcjxTYWZlSHRtbD47XG4gICAgaXNCcm93c2VyID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoVHVpU3ZnU2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBzdmdTZXJ2aWNlOiBUdWlTdmdTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgICkge1xuICAgICAgICB0aGlzLmlzQnJvd3NlciA9ICFpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpO1xuICAgICAgICBpbm5lckhUTUwoZG9jdW1lbnRSZWYpO1xuICAgIH1cblxuICAgIC8vIEBiYWQgVE9ETzogTG9va3MgbGlrZSBpdCBjb3VsZCBiZSBhc3luYyBwaXBlZCBidXQgaXQgd2FzIHByb2JhYmx5IHdyaXR0ZW4gbGlrZSB0aGF0IGZvciBhIHJlYXNvblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN2Z1NlcnZpY2UuaXRlbXMkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoZGVmc01hcCA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gZGVmc01hcC52YWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=