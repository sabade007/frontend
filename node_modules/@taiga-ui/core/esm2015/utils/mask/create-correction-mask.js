import { tuiAssert } from '@taiga-ui/cdk';
import { MASK_CARET_TRAP } from '@taiga-ui/core/constants';
const ASSERTION = `Correction function must return single char or null`;
export function tuiCreateCorrectionMask(allowed, correctionHandler) {
    return rawValue => {
        const mask = rawValue.split(``).reduce((result, char, index) => {
            const corrected = correctionHandler(char, index);
            tuiAssert.assert(corrected === null || corrected.length === 1, ASSERTION);
            if (!allowed.test(char) && !corrected) {
                return result;
            }
            if (allowed.test(char)) {
                return [...result, allowed];
            }
            if (corrected) {
                return [...result, corrected, MASK_CARET_TRAP];
            }
            return result;
        }, []);
        const lastIndex = mask.lastIndexOf(MASK_CARET_TRAP);
        const filtered = mask.filter((item, index) => item !== MASK_CARET_TRAP || index === lastIndex);
        return filtered.some(item => item !== allowed)
            ? [...filtered, allowed]
            : filtered;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNvcnJlY3Rpb24tbWFzay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL21hc2svIiwic291cmNlcyI6WyJjcmVhdGUtY29ycmVjdGlvbi1tYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBT3pELE1BQU0sU0FBUyxHQUFHLHFEQUFxRCxDQUFDO0FBRXhFLE1BQU0sVUFBVSx1QkFBdUIsQ0FDbkMsT0FBZSxFQUNmLGlCQUErQztJQUUvQyxPQUFPLFFBQVEsQ0FBQyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQWtCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM1RSxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFakQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRTFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNuQyxPQUFPLE1BQU0sQ0FBQzthQUNqQjtZQUVELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLEdBQUcsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQy9CO1lBRUQsSUFBSSxTQUFTLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLEdBQUcsTUFBTSxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQzthQUNsRDtZQUVELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNQLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDeEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssZUFBZSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQ25FLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLE9BQU8sQ0FBQztZQUN4QixDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ25CLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge01BU0tfQ0FSRVRfVFJBUH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gICAgVHVpVGV4dE1hc2tDb3JyZWN0aW9uSGFuZGxlcixcbiAgICBUdWlUZXh0TWFza0xpc3QsXG4gICAgVHVpVGV4dE1hc2tMaXN0SGFuZGxlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvbWFzayc7XG5cbmNvbnN0IEFTU0VSVElPTiA9IGBDb3JyZWN0aW9uIGZ1bmN0aW9uIG11c3QgcmV0dXJuIHNpbmdsZSBjaGFyIG9yIG51bGxgO1xuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlQ29ycmVjdGlvbk1hc2soXG4gICAgYWxsb3dlZDogUmVnRXhwLFxuICAgIGNvcnJlY3Rpb25IYW5kbGVyOiBUdWlUZXh0TWFza0NvcnJlY3Rpb25IYW5kbGVyLFxuKTogVHVpVGV4dE1hc2tMaXN0SGFuZGxlciB7XG4gICAgcmV0dXJuIHJhd1ZhbHVlID0+IHtcbiAgICAgICAgY29uc3QgbWFzayA9IHJhd1ZhbHVlLnNwbGl0KGBgKS5yZWR1Y2U8VHVpVGV4dE1hc2tMaXN0PigocmVzdWx0LCBjaGFyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29ycmVjdGVkID0gY29ycmVjdGlvbkhhbmRsZXIoY2hhciwgaW5kZXgpO1xuXG4gICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KGNvcnJlY3RlZCA9PT0gbnVsbCB8fCBjb3JyZWN0ZWQubGVuZ3RoID09PSAxLCBBU1NFUlRJT04pO1xuXG4gICAgICAgICAgICBpZiAoIWFsbG93ZWQudGVzdChjaGFyKSAmJiAhY29ycmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFsbG93ZWQudGVzdChjaGFyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbLi4ucmVzdWx0LCBhbGxvd2VkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvcnJlY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbLi4ucmVzdWx0LCBjb3JyZWN0ZWQsIE1BU0tfQ0FSRVRfVFJBUF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gbWFzay5sYXN0SW5kZXhPZihNQVNLX0NBUkVUX1RSQVApO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IG1hc2suZmlsdGVyKFxuICAgICAgICAgICAgKGl0ZW0sIGluZGV4KSA9PiBpdGVtICE9PSBNQVNLX0NBUkVUX1RSQVAgfHwgaW5kZXggPT09IGxhc3RJbmRleCxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gZmlsdGVyZWQuc29tZShpdGVtID0+IGl0ZW0gIT09IGFsbG93ZWQpXG4gICAgICAgICAgICA/IFsuLi5maWx0ZXJlZCwgYWxsb3dlZF1cbiAgICAgICAgICAgIDogZmlsdGVyZWQ7XG4gICAgfTtcbn1cbiJdfQ==