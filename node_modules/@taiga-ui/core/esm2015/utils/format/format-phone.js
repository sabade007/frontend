import { CHAR_PLUS } from '@taiga-ui/cdk';
/**
 * @deprecated: use {@link tuiFormatPhone} instead
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function formatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return ``;
    }
    let result = countryCode;
    countryCode = countryCode.replace(/[()]/g, ``);
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace(CHAR_PLUS, ``);
    }
    const splitPhoneMask = phoneMask.split(``);
    const splitValue = value.slice(countryCode.length).split(``);
    result += ` `;
    if (splitValue.length === 0) {
        return result;
    }
    for (let i = 0; i < splitPhoneMask.length; i++) {
        if (splitValue.length === 0) {
            break;
        }
        if (splitPhoneMask[i] === `#`) {
            result += splitValue[0] || ``;
            splitValue.splice(0, 1);
        }
        else {
            result += splitPhoneMask[i];
        }
    }
    return result;
}
export const tuiFormatPhone = formatPhone;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXBob25lLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvdXRpbHMvZm9ybWF0LyIsInNvdXJjZXMiOlsiZm9ybWF0LXBob25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEM7Ozs7Ozs7OztHQVNHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxXQUFXLENBQ3ZCLEtBQWEsRUFDYixXQUFtQixFQUNuQixTQUFpQjtJQUVqQixJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUVELElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQztJQUV6QixXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDaEMsS0FBSyxHQUFHLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN0RDtJQUVELE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTdELE1BQU0sSUFBSSxHQUFHLENBQUM7SUFFZCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUMsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNO1NBQ1Q7UUFFRCxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDM0IsTUFBTSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDOUIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNILE1BQU0sSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDSEFSX1BMVVN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUZvcm1hdFBob25lfSBpbnN0ZWFkXG4gKiBGb3JtYXRzIGEgc3RyaW5nIHdpdGggdGhlIHBob25lIGZvcm1hdCArN1hYWFhYWFhYWFhYWCBvciBYWFhYWFhYWFhYWFgsXG4gKiBhZGRpbmcgcGFyZW50aGVzZXMgYW5kIGh5cGhlbnMuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSBpbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSBjb3VudHJ5Q29kZSBhIGNvdW50cnkgY29kZVxuICogQHBhcmFtIHBob25lTWFzayBhIHBob25lIG51bWJlciBtYXNrXG4gKiBAcmV0dXJuIHRoZSBmb3JtYXR0ZWQgcGhvbmUgc3RyaW5nIG9mIHRoZSBmb3JtICs3IFhYWCBYWFgtWFgtWFhcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFBob25lKFxuICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgY291bnRyeUNvZGU6IHN0cmluZyxcbiAgICBwaG9uZU1hc2s6IHN0cmluZyxcbik6IHN0cmluZyB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYGA7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IGNvdW50cnlDb2RlO1xuXG4gICAgY291bnRyeUNvZGUgPSBjb3VudHJ5Q29kZS5yZXBsYWNlKC9bKCldL2csIGBgKTtcblxuICAgIGlmICghdmFsdWUuc3RhcnRzV2l0aChjb3VudHJ5Q29kZSkpIHtcbiAgICAgICAgdmFsdWUgPSBjb3VudHJ5Q29kZSArIHZhbHVlLnJlcGxhY2UoQ0hBUl9QTFVTLCBgYCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3BsaXRQaG9uZU1hc2sgPSBwaG9uZU1hc2suc3BsaXQoYGApO1xuICAgIGNvbnN0IHNwbGl0VmFsdWUgPSB2YWx1ZS5zbGljZShjb3VudHJ5Q29kZS5sZW5ndGgpLnNwbGl0KGBgKTtcblxuICAgIHJlc3VsdCArPSBgIGA7XG5cbiAgICBpZiAoc3BsaXRWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGl0UGhvbmVNYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzcGxpdFZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BsaXRQaG9uZU1hc2tbaV0gPT09IGAjYCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHNwbGl0VmFsdWVbMF0gfHwgYGA7XG4gICAgICAgICAgICBzcGxpdFZhbHVlLnNwbGljZSgwLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzcGxpdFBob25lTWFza1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCB0dWlGb3JtYXRQaG9uZSA9IGZvcm1hdFBob25lO1xuIl19