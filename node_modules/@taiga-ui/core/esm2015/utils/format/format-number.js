import { CHAR_HYPHEN, CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
import { getFractionPartPadded } from './get-fractional-part-padded';
// TODO: refactor later to `formatNumber(value: number, options: Partial<AllTheStuff>)`
/**
 * @deprecated: use {@link tuiFormatNumber} instead
 * Formats number adding a thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @param zeroPadding enable zeros at the end of decimal part
 * @return the formatted string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function formatNumber(value, decimalLimit = null, decimalSeparator = `,`, thousandSeparator = CHAR_NO_BREAK_SPACE, zeroPadding = true) {
    const integerPartString = String(Math.floor(Math.abs(value)));
    let fractionPartPadded = getFractionPartPadded(value, decimalLimit);
    if (decimalLimit !== null) {
        if (zeroPadding) {
            const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);
            const zeroPartString = `0`.repeat(zeroPaddingSize);
            fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;
        }
        else {
            fractionPartPadded = fractionPartPadded.replace(/0*$/, ``);
        }
    }
    const remainder = integerPartString.length % 3;
    const sign = value < 0 ? CHAR_HYPHEN : ``;
    let result = sign + integerPartString.charAt(0);
    for (let i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;
}
export const tuiFormatNumber = formatNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LW51bWJlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL2Zvcm1hdC8iLCJzb3VyY2VzIjpbImZvcm1hdC1udW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUvRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVuRSx1RkFBdUY7QUFDdkY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLFlBQVksQ0FDeEIsS0FBYSxFQUNiLGVBQThCLElBQUksRUFDbEMsbUJBQTJCLEdBQUcsRUFDOUIsb0JBQTRCLG1CQUFtQixFQUMvQyxjQUF1QixJQUFJO0lBRTNCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUQsSUFBSSxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFcEUsSUFBSSxZQUFZLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLElBQUksV0FBVyxFQUFFO1lBQ2IsTUFBTSxlQUFlLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FDcEMsWUFBWSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sRUFDeEMsQ0FBQyxDQUNKLENBQUM7WUFDRixNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRW5ELGtCQUFrQixHQUFHLEdBQUcsa0JBQWtCLEdBQUcsY0FBYyxFQUFFLENBQUM7U0FDakU7YUFBTTtZQUNILGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDOUQ7S0FDSjtJQUVELE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDL0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRCxNQUFNLElBQUksaUJBQWlCLENBQUM7U0FDL0I7UUFFRCxNQUFNLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDeEYsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NIQVJfSFlQSEVOLCBDSEFSX05PX0JSRUFLX1NQQUNFfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuaW1wb3J0IHtnZXRGcmFjdGlvblBhcnRQYWRkZWR9IGZyb20gJy4vZ2V0LWZyYWN0aW9uYWwtcGFydC1wYWRkZWQnO1xuXG4vLyBUT0RPOiByZWZhY3RvciBsYXRlciB0byBgZm9ybWF0TnVtYmVyKHZhbHVlOiBudW1iZXIsIG9wdGlvbnM6IFBhcnRpYWw8QWxsVGhlU3R1ZmY+KWBcbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpRm9ybWF0TnVtYmVyfSBpbnN0ZWFkXG4gKiBGb3JtYXRzIG51bWJlciBhZGRpbmcgYSB0aG91c2FuZCBzZXBhcmF0b3JzIGFuZCBjb3JyZWN0IGRlY2ltYWwgc2VwYXJhdG9yXG4gKiBwYWRkaW5nIGRlY2ltYWwgcGFydCB3aXRoIHplcm9lcyB0byBnaXZlbiBsZW5ndGhcbiAqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIGlucHV0IG51bWJlclxuICogQHBhcmFtIGRlY2ltYWxMaW1pdCBudW1iZXIgb2YgZGlnaXRzIG9mIGRlY2ltYWwgcGFydCwgbnVsbCB0byBrZWVwIHVudG91Y2hlZFxuICogQHBhcmFtIGRlY2ltYWxTZXBhcmF0b3Igc2VwYXJhdG9yIGJldHdlZW4gdGhlIGludGVnZXIgYW5kIHRoZSBkZWNpbWFsIHBhcnRcbiAqIEBwYXJhbSB0aG91c2FuZFNlcGFyYXRvciBzZXBhcmF0b3IgYmV0d2VlbiB0aG91c2FuZHNcbiAqIEBwYXJhbSB6ZXJvUGFkZGluZyBlbmFibGUgemVyb3MgYXQgdGhlIGVuZCBvZiBkZWNpbWFsIHBhcnRcbiAqIEByZXR1cm4gdGhlIGZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIGRlY2ltYWxMaW1pdDogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgZGVjaW1hbFNlcGFyYXRvcjogc3RyaW5nID0gYCxgLFxuICAgIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSBDSEFSX05PX0JSRUFLX1NQQUNFLFxuICAgIHplcm9QYWRkaW5nOiBib29sZWFuID0gdHJ1ZSxcbik6IHN0cmluZyB7XG4gICAgY29uc3QgaW50ZWdlclBhcnRTdHJpbmcgPSBTdHJpbmcoTWF0aC5mbG9vcihNYXRoLmFicyh2YWx1ZSkpKTtcblxuICAgIGxldCBmcmFjdGlvblBhcnRQYWRkZWQgPSBnZXRGcmFjdGlvblBhcnRQYWRkZWQodmFsdWUsIGRlY2ltYWxMaW1pdCk7XG5cbiAgICBpZiAoZGVjaW1hbExpbWl0ICE9PSBudWxsKSB7XG4gICAgICAgIGlmICh6ZXJvUGFkZGluZykge1xuICAgICAgICAgICAgY29uc3QgemVyb1BhZGRpbmdTaXplOiBudW1iZXIgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICBkZWNpbWFsTGltaXQgLSBmcmFjdGlvblBhcnRQYWRkZWQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgemVyb1BhcnRTdHJpbmcgPSBgMGAucmVwZWF0KHplcm9QYWRkaW5nU2l6ZSk7XG5cbiAgICAgICAgICAgIGZyYWN0aW9uUGFydFBhZGRlZCA9IGAke2ZyYWN0aW9uUGFydFBhZGRlZH0ke3plcm9QYXJ0U3RyaW5nfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFjdGlvblBhcnRQYWRkZWQgPSBmcmFjdGlvblBhcnRQYWRkZWQucmVwbGFjZSgvMCokLywgYGApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVtYWluZGVyID0gaW50ZWdlclBhcnRTdHJpbmcubGVuZ3RoICUgMztcbiAgICBjb25zdCBzaWduID0gdmFsdWUgPCAwID8gQ0hBUl9IWVBIRU4gOiBgYDtcbiAgICBsZXQgcmVzdWx0ID0gc2lnbiArIGludGVnZXJQYXJ0U3RyaW5nLmNoYXJBdCgwKTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaW50ZWdlclBhcnRTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkgJSAzID09PSByZW1haW5kZXIgJiYgaW50ZWdlclBhcnRTdHJpbmcubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRob3VzYW5kU2VwYXJhdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ICs9IGludGVnZXJQYXJ0U3RyaW5nLmNoYXJBdChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhY3Rpb25QYXJ0UGFkZGVkID8gcmVzdWx0ICsgZGVjaW1hbFNlcGFyYXRvciArIGZyYWN0aW9uUGFydFBhZGRlZCA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aUZvcm1hdE51bWJlciA9IGZvcm1hdE51bWJlcjtcbiJdfQ==