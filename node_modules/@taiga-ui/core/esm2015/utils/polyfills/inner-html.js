import { TuiXmlParsingException } from '@taiga-ui/cdk';
/**
 * @deprecated
 * TODO: remove in v3.0
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function innerHTML(documentRef) {
    const svg = documentRef.createElementNS(`http://www.w3.org/2000/svg`, `svg`);
    if (svg.innerHTML !== undefined) {
        return;
    }
    const serializer = new XMLSerializer();
    const parser = new DOMParser();
    Object.defineProperty(SVGElement.prototype, `innerHTML`, {
        get() {
            const result = [];
            let childNode = this.firstChild;
            while (childNode) {
                result.push(serializer.serializeToString(childNode));
                childNode = childNode.nextSibling;
            }
            return result.join(``);
        },
        set(text) {
            while (this.firstChild) {
                this.removeChild(this.firstChild);
            }
            try {
                const svgDocElement = parser.parseFromString(text, `image/svg+xml`).documentElement;
                if (this.ownerDocument) {
                    this.appendChild(this.ownerDocument.importNode(svgDocElement, true));
                }
            }
            catch (e) {
                throw new TuiXmlParsingException();
            }
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5uZXItaHRtbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL3BvbHlmaWxscy8iLCJzb3VyY2VzIjpbImlubmVyLWh0bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJEOzs7R0FHRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsU0FBUyxDQUFDLFdBQXFCO0lBQzNDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFN0UsSUFBSSxHQUFHLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUM3QixPQUFPO0tBQ1Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFFL0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRTtRQUNyRCxHQUFHO1lBQ0MsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1lBQzVCLElBQUksU0FBUyxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFckMsT0FBTyxTQUFTLEVBQUU7Z0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDckQsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7YUFDckM7WUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUNELEdBQUcsQ0FBbUIsSUFBWTtZQUM5QixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3JDO1lBRUQsSUFBSTtnQkFDQSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUN4QyxJQUFJLEVBQ0osZUFBZSxDQUNsQixDQUFDLGVBQWUsQ0FBQztnQkFFbEIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO29CQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN4RTthQUNKO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1IsTUFBTSxJQUFJLHNCQUFzQixFQUFFLENBQUM7YUFDdEM7UUFDTCxDQUFDO0tBQ0osQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpWG1sUGFyc2luZ0V4Y2VwdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIFRPRE86IHJlbW92ZSBpbiB2My4wXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBpbm5lckhUTUwoZG9jdW1lbnRSZWY6IERvY3VtZW50KTogdm9pZCB7XG4gICAgY29uc3Qgc3ZnID0gZG9jdW1lbnRSZWYuY3JlYXRlRWxlbWVudE5TKGBodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z2AsIGBzdmdgKTtcblxuICAgIGlmIChzdmcuaW5uZXJIVE1MICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSBuZXcgWE1MU2VyaWFsaXplcigpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdFbGVtZW50LnByb3RvdHlwZSwgYGlubmVySFRNTGAsIHtcbiAgICAgICAgZ2V0KHRoaXM6IFNWR0VsZW1lbnQpOiBzdHJpbmcge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IGNoaWxkTm9kZTogYW55ID0gdGhpcy5maXJzdENoaWxkO1xuXG4gICAgICAgICAgICB3aGlsZSAoY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyhjaGlsZE5vZGUpKTtcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbihgYCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh0aGlzOiBTVkdFbGVtZW50LCB0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnRG9jRWxlbWVudCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIGBpbWFnZS9zdmcreG1sYCxcbiAgICAgICAgICAgICAgICApLmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLm93bmVyRG9jdW1lbnQuaW1wb3J0Tm9kZShzdmdEb2NFbGVtZW50LCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUdWlYbWxQYXJzaW5nRXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4iXX0=