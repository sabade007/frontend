import { __decorate, __param } from 'tslib';
import { InjectionToken, ElementRef, Inject, HostBinding, Component, ChangeDetectionStrategy, ɵɵdefineInjectable, ɵɵinject, Injectable, Directive, NgModule } from '@angular/core';
import { typedFromEvent, isCurrentTarget, getActualTarget, tuiIsElement, tuiContainsOrAfter, TuiDestroyService, TUI_IS_MOBILE, AbstractTuiDialogService, AbstractTuiDialogDirective, TuiPreventDefaultModule, TUI_DIALOGS } from '@taiga-ui/cdk';
import { tuiSlideInTop, tuiFadeIn } from '@taiga-ui/core/animations';
import { TUI_ANIMATIONS_DURATION, TUI_CLOSE_WORD } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge, Observable } from 'rxjs';
import { DOCUMENT, CommonModule } from '@angular/common';
import { WINDOW } from '@ng-web-apis/common';
import { tuiGetViewportWidth } from '@taiga-ui/core/utils/dom';
import { filter, switchMap, take, takeUntil } from 'rxjs/operators';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { TuiButtonModule } from '@taiga-ui/core/components/button';

const TUI_DIALOGS_CLOSE = new InjectionToken(`A stream to close dialogs`, {
    factory: () => EMPTY,
});
const SCROLLBAR_PLACEHOLDER = 17;
// eslint-disable-next-line @typescript-eslint/naming-convention
function dialogCloseStreamFactory(documentRef, windowRef, { nativeElement }, close$, destroy$, { dismissible }) {
    return dismissible
        ? merge(typedFromEvent(nativeElement, `click`).pipe(filter(isCurrentTarget)), typedFromEvent(documentRef, `keydown`).pipe(filter(event => {
            const key = event.key;
            const target = getActualTarget(event);
            return (key === `Escape` &&
                tuiIsElement(target) &&
                (!tuiContainsOrAfter(nativeElement, target) ||
                    nativeElement.contains(target)));
        })), typedFromEvent(documentRef, `mousedown`).pipe(filter(event => {
            const target = getActualTarget(event);
            const clientX = event.clientX;
            return (tuiIsElement(target) &&
                tuiGetViewportWidth(windowRef) - clientX >
                    SCROLLBAR_PLACEHOLDER &&
                !tuiContainsOrAfter(nativeElement, target));
        }), switchMap(() => typedFromEvent(documentRef, `mouseup`).pipe(take(1), filter(event => {
            const target = getActualTarget(event);
            return (tuiIsElement(target) &&
                !tuiContainsOrAfter(nativeElement, target));
        })))), close$).pipe(takeUntil(destroy$))
        : close$;
}
const TUI_DIALOG_CLOSE_STREAM = new InjectionToken(`Dialogs closing stream`);
const TUI_DIALOG_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_DIALOG_CLOSE_STREAM,
        deps: [
            DOCUMENT,
            WINDOW,
            ElementRef,
            TUI_DIALOGS_CLOSE,
            TuiDestroyService,
            POLYMORPHEUS_CONTEXT,
        ],
        useFactory: dialogCloseStreamFactory,
    },
];

const REQUIRED_ERROR = new Error('Required dialog was dismissed');
// @dynamic
let TuiDialogComponent = class TuiDialogComponent {
    constructor(duration, isMobile, context, close$, closeWord$) {
        this.duration = duration;
        this.isMobile = isMobile;
        this.context = context;
        this.closeWord$ = closeWord$;
        this.animation = {
            value: '',
            params: {
                start: '40px',
                duration: this.duration,
            },
        };
        this.fullscreenAnimation = {
            value: '',
            params: {
                start: '100vh',
                duration: this.duration,
            },
        };
        close$.subscribe(() => {
            this.close();
        });
    }
    get size() {
        return this.context.size;
    }
    get header() {
        return this.context.header;
    }
    get slideInTop() {
        return this.size === 'fullscreen' || this.size === 'page' || this.isMobile
            ? this.fullscreenAnimation
            : this.animation;
    }
    close() {
        if (this.context.required) {
            this.context.$implicit.error(REQUIRED_ERROR);
        }
        else {
            this.context.$implicit.complete();
        }
    }
};
TuiDialogComponent.ctorParameters = () => [
    { type: Number, decorators: [{ type: Inject, args: [TUI_ANIMATIONS_DURATION,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DIALOG_CLOSE_STREAM,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] }
];
__decorate([
    HostBinding('attr.data-size')
], TuiDialogComponent.prototype, "size", null);
__decorate([
    HostBinding('class._centered')
], TuiDialogComponent.prototype, "header", null);
__decorate([
    HostBinding('@tuiSlideInTop'),
    HostBinding('@tuiFadeIn')
], TuiDialogComponent.prototype, "slideInTop", null);
TuiDialogComponent = __decorate([
    Component({
        selector: 'tui-dialog',
        template: "<header\n    *ngIf=\"header\"\n    polymorpheus-outlet\n    class=\"t-header\"\n    [content]=\"header\"\n    [context]=\"context\"\n></header>\n<div class=\"t-content\">\n    <h2\n        class=\"t-heading\"\n        [id]=\"context.id\"\n        [textContent]=\"context.label\"\n    ></h2>\n    <section\n        polymorpheus-outlet\n        [context]=\"context\"\n        [content]=\"context.content\"\n    >\n        <ng-template let-text>\n            {{ text }}\n            <div class=\"t-buttons\">\n                <button\n                    tuiButton\n                    size=\"m\"\n                    (click)=\"context.$implicit.complete()\"\n                >\n                    {{ $any(context.data)?.button || 'OK' }}\n                </button>\n            </div>\n        </ng-template>\n    </section>\n</div>\n<div\n    *ngIf=\"context.closeable\"\n    class=\"t-wrapper\"\n>\n    <button\n        tuiIconButton\n        tuiPreventDefault=\"mousedown\"\n        automation-id=\"tui-dialog__close\"\n        size=\"s\"\n        appearance=\"\"\n        icon=\"tuiIconCloseLarge\"\n        shape=\"rounded\"\n        class=\"t-close\"\n        [title]=\"closeWord$ | async\"\n        (click)=\"close()\"\n    ></button>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_DIALOG_PROVIDERS,
        animations: [tuiSlideInTop, tuiFadeIn],
        styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);flex-direction:column;box-sizing:border-box;margin:auto;border-radius:1rem;border:2.5rem solid transparent}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;box-shadow:0 1.125rem 1.875rem rgba(0,0,0,.48);content:'';border-radius:inherit;pointer-events:none}:host[data-size=auto]{width:auto}:host[data-size='s']{width:30rem}:host[data-size='s'] .t-content{padding:1.5rem}:host[data-size='s'] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}:host[data-size='m']{width:42.5rem}:host[data-size='m'] .t-heading{margin-bottom:.75rem;font:var(--tui-font-heading-4)}:host[data-size='l']{width:55rem}:host[data-size='l'] .t-heading{margin-bottom:1rem}:host[data-size=fullscreen],:host[data-size=page]{width:100%;min-height:100%;border-radius:0;border:none;background:var(--tui-elevation-01);box-shadow:0 4rem var(--tui-base-01)}:host[data-size=fullscreen] .t-content,:host[data-size=page] .t-content{padding:3rem calc(50vw - (45rem / 2))}:host[data-size=fullscreen] .t-heading,:host[data-size=page] .t-heading{margin-bottom:1rem}:host[data-size=page] .t-content{padding:0}:host._centered{text-align:center}:host :host-context(tui-root._mobile)[data-size]{min-width:100%;width:100%;max-width:100%;border-radius:0;border:none;margin:auto 0 0}:host :host-context(tui-root._mobile)[data-size] .t-content{padding:1.5rem}:host :host-context(tui-root._mobile)[data-size] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}.t-heading{margin:0;word-wrap:break-word;font:var(--tui-font-heading-3)}.t-heading:empty{display:none}.t-header{display:flex;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden}:host[data-size=fullscreen] :host-context(tui-root._mobile) .t-header{flex:1}.t-content{border-radius:inherit;padding:2rem;background:var(--tui-base-01)}.t-content:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.t-wrapper{position:-webkit-sticky;position:sticky;top:0;order:-1}.t-close{transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:fixed;top:1.5rem;right:1.5rem;color:var(--tui-base-01);background:rgba(104,104,104,.96)}.t-close:hover{background:rgba(159,159,159,.86)}:host:not([data-size=fullscreen]) .t-close{animation:tuiFadeIn var(--tui-duration)}:host:not([data-size=fullscreen]).ng-animating .t-close{display:none}:host-context(tui-root._mobile) .t-close{position:absolute;top:0;right:0;background:0 0;color:var(--tui-base-06)}:host-context(tui-root._mobile) .t-close:hover{color:var(--tui-base-07)}.t-buttons{margin-top:1.25rem;text-align:right}"]
    }),
    __param(0, Inject(TUI_ANIMATIONS_DURATION)),
    __param(1, Inject(TUI_IS_MOBILE)),
    __param(2, Inject(POLYMORPHEUS_CONTEXT)),
    __param(3, Inject(TUI_DIALOG_CLOSE_STREAM)),
    __param(4, Inject(TUI_CLOSE_WORD))
], TuiDialogComponent);

const DIALOG = new PolymorpheusComponent(TuiDialogComponent);
const DEFAULT_OPTIONS = {
    size: `m`,
    required: false,
    closeable: true,
    dismissible: true,
    label: ``,
    header: ``,
};
let TuiDialogService = class TuiDialogService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = DIALOG;
        this.defaultOptions = DEFAULT_OPTIONS;
    }
};
TuiDialogService.ɵprov = ɵɵdefineInjectable({ factory: function TuiDialogService_Factory() { return new TuiDialogService(ɵɵinject(TuiIdService)); }, token: TuiDialogService, providedIn: "root" });
TuiDialogService = __decorate([
    Injectable({
        providedIn: `root`,
    })
], TuiDialogService);

let TuiDialogDirective = class TuiDialogDirective extends AbstractTuiDialogDirective {
};
TuiDialogDirective = __decorate([
    Directive({
        selector: 'ng-template[tuiDialog]',
        providers: [
            {
                provide: AbstractTuiDialogService,
                useExisting: TuiDialogService,
            },
        ],
        inputs: ['options: tuiDialogOptions', 'open: tuiDialog'],
        outputs: ['openChange: tuiDialogChange'],
    })
], TuiDialogDirective);

let TuiDialogModule = class TuiDialogModule {
};
TuiDialogModule = __decorate([
    NgModule({
        imports: [PolymorpheusModule, TuiButtonModule, CommonModule, TuiPreventDefaultModule],
        declarations: [TuiDialogComponent, TuiDialogDirective],
        exports: [TuiDialogComponent, TuiDialogDirective],
        entryComponents: [TuiDialogComponent],
        providers: [
            {
                provide: TUI_DIALOGS,
                useExisting: TuiDialogService,
                multi: true,
            },
        ],
    })
], TuiDialogModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DIALOGS_CLOSE, TUI_DIALOG_CLOSE_STREAM, TUI_DIALOG_PROVIDERS, TuiDialogComponent, TuiDialogDirective, TuiDialogModule, TuiDialogService, dialogCloseStreamFactory };
//# sourceMappingURL=taiga-ui-core-components-dialog.js.map
