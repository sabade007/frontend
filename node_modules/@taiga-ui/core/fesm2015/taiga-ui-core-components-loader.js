import { __decorate, __param } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { InjectionToken, Inject, ElementRef, Input, HostBinding, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isSafari, blurNativeFocused, isNativeFocusedIn, TUI_IS_IOS, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { sizeBigger } from '@taiga-ui/core/utils/miscellaneous';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the loader options. */
const TUI_LOADER_DEFAULT_OPTIONS = {
    size: `m`,
    inheritColor: false,
    overlay: false,
};
const TUI_LOADER_OPTIONS = new InjectionToken(`Default parameters for loader component`, {
    factory: () => TUI_LOADER_DEFAULT_OPTIONS,
});
const tuiLoaderOptionsProvider = (options) => ({
    provide: TUI_LOADER_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_LOADER_DEFAULT_OPTIONS), options),
});

// @dynamic
let TuiLoaderComponent = class TuiLoaderComponent {
    constructor(documentRef, elementRef, isIos, options) {
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.isIos = isIos;
        this.options = options;
        this.size = this.options.size;
        this.inheritColor = this.options.inheritColor;
        this.overlay = this.options.overlay;
        // TODO: 3.0 Remove null
        this.textContent = null;
        this.loading = true;
        this.isApple = isSafari(this.elementRef.nativeElement) || this.isIos;
    }
    set showLoader(value) {
        // @bad TODO: https://github.com/angular/angular/issues/32083 think of a better way
        if (value && this.focused) {
            blurNativeFocused(this.documentRef);
        }
        this.loading = value;
    }
    get hasOverlay() {
        return this.overlay && this.loading;
    }
    get hasText() {
        return !!this.textContent;
    }
    get isHorizontal() {
        return !sizeBigger(this.size);
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
};
TuiLoaderComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_LOADER_OPTIONS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "inheritColor", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "overlay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "textContent", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiLoaderComponent.prototype, "showLoader", null);
__decorate([
    HostBinding('class._loading')
], TuiLoaderComponent.prototype, "loading", void 0);
TuiLoaderComponent = __decorate([
    Component({
        selector: 'tui-loader',
        template: "<fieldset\n    class=\"t-content\"\n    [class.t-content_has-overlay]=\"hasOverlay\"\n    [class.t-content_loading]=\"loading\"\n    [disabled]=\"loading && !isApple\"\n>\n    <ng-content></ng-content>\n</fieldset>\n\n<div\n    *ngIf=\"loading\"\n    class=\"t-loader\"\n    [class.t-loader_horizontal]=\"isHorizontal\"\n    [class.t-loader_inherit-color]=\"inheritColor\"\n    [attr.data-tui-element-size]=\"size\"\n>\n    <svg\n        automation-id=\"tui-loader__loader\"\n        focusable=\"false\"\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"t-icon\"\n    >\n        <circle\n            cx=\"50\"\n            cy=\"50\"\n            r=\"50\"\n            stroke-dasharray=\"314\"\n            class=\"t-circle\"\n        ></circle>\n    </svg>\n\n    <div\n        *ngIf=\"hasText\"\n        polymorpheus-outlet\n        automation-id=\"tui-loader__text\"\n        class=\"t-text\"\n        [class.t-text_horizontal]=\"isHorizontal\"\n        [content]=\"textContent\"\n    ></div>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["@keyframes tuiLoaderDashOffset{0%,100%{stroke-dashoffset:-66}50%{stroke-dashoffset:-314}}@keyframes tuiLoaderRotate{0%{transform:rotate(0)}50%{transform:rotate(1turn)}100%{transform:rotate(3turn)}}:host{position:relative;display:flex}:host._loading{overflow:hidden}.t-content{z-index:0;min-width:100%;height:100%;padding:0;margin:0;border:none}.t-content_has-overlay{opacity:.3}.t-content_loading{pointer-events:none}.t-loader{position:relative;left:-100%;display:flex;flex-direction:column;align-items:center;justify-content:center;min-width:100%;flex-shrink:0;align-self:center;color:var(--tui-text-01);stroke:var(--tui-primary);animation:tuiFadeIn var(--tui-duration)}.t-loader.t-loader_horizontal{flex-direction:row}.t-loader.t-loader_inherit-color{color:inherit;stroke:currentColor}.t-loader[data-tui-element-size=xs]{font-size:.75rem;stroke-width:38}.t-loader[data-tui-element-size='s']{font-size:1rem;stroke-width:25}.t-loader[data-tui-element-size='m']{font-size:1.5rem;stroke-width:17}.t-loader[data-tui-element-size='l']{font-size:2.5rem;stroke-width:15}.t-loader[data-tui-element-size=xl]{font-size:3.5rem;stroke-width:14}.t-loader[data-tui-element-size=xxl]{font-size:5rem;stroke-width:10}.t-text{font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-top:1rem;color:inherit;max-width:100%;text-align:center;stroke-width:0}.t-text_horizontal{margin:0 0 0 1rem}.t-icon{display:block;min-width:1em;max-width:1em;min-height:1em;max-height:1em;margin:.25rem -.5em;border-radius:100%;overflow:hidden;transform:scale(1,-1);animation:3s linear infinite tuiLoaderRotate}.t-circle{fill:none;stroke:inherit;stroke-width:inherit;animation:3s linear infinite tuiLoaderDashOffset}"]
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TUI_IS_IOS)),
    __param(3, Inject(TUI_LOADER_OPTIONS))
], TuiLoaderComponent);

let TuiLoaderModule = class TuiLoaderModule {
};
TuiLoaderModule = __decorate([
    NgModule({
        imports: [CommonModule, PolymorpheusModule],
        declarations: [TuiLoaderComponent],
        exports: [TuiLoaderComponent],
    })
], TuiLoaderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_LOADER_DEFAULT_OPTIONS, TUI_LOADER_OPTIONS, TuiLoaderComponent, TuiLoaderModule, tuiLoaderOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-loader.js.map
