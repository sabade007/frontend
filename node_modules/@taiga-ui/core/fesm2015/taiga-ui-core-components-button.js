import { __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Inject, ElementRef, ChangeDetectorRef, Input, HostBinding, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { AbstractTuiInteractive, watch, pressedObservable, isNativeFocused, TuiFocusVisibleService, TuiHoveredService, TuiDestroyService, TUI_TAKE_ONLY_TRUSTED_EVENTS, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core/directives';
import { EMPTY, Observable } from 'rxjs';
import { startWith, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiLoaderModule } from '@taiga-ui/core/components/loader';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { TuiWrapperModule } from '@taiga-ui/core/directives/wrapper';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const TUI_BUTTON_DEFAULT_OPTIONS = {
    size: `l`,
    shape: null,
    appearance: "primary" /* Primary */,
};
const TUI_BUTTON_OPTIONS = new InjectionToken(`Default parameters for button component`, {
    factory: () => TUI_BUTTON_DEFAULT_OPTIONS,
});
const tuiButtonOptionsProvider = (options) => ({
    provide: TUI_BUTTON_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_BUTTON_DEFAULT_OPTIONS), options),
});

var TuiButtonComponent_1;
let TuiButtonComponent = TuiButtonComponent_1 = class TuiButtonComponent extends AbstractTuiInteractive {
    constructor(mode, elementRef, focusVisible$, hoveredService, destroy$, changeDetectorRef, takeOnlyTrustedEvents, options) {
        var _a;
        super();
        this.mode = mode;
        this.elementRef = elementRef;
        this.takeOnlyTrustedEvents = takeOnlyTrustedEvents;
        this.options = options;
        this.mode$ = ((_a = this.mode) === null || _a === void 0 ? void 0 : _a.change$) || EMPTY;
        this.appearance = null;
        this.disabled = false;
        this.icon = '';
        this.iconRight = '';
        this.shape = this.options.shape;
        this.showLoader = false;
        this.size = this.options.size;
        this.appearance$ = this.mode$.pipe(startWith(null), map(() => this.computedAppearance), distinctUntilChanged());
        hoveredService
            .createHovered$(elementRef.nativeElement)
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(hovered => {
            this.updateHovered(hovered);
        });
        pressedObservable(elementRef.nativeElement, {
            onlyTrusted: this.takeOnlyTrustedEvents,
        })
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(pressed => {
            this.updatePressed(pressed);
        });
        focusVisible$.subscribe(focusVisible => {
            this.updateFocusVisible(focusVisible);
        });
    }
    get nativeFocusableElement() {
        return this.nativeDisabled ? null : this.elementRef.nativeElement;
    }
    get focused() {
        return !this.showLoader && isNativeFocused(this.elementRef.nativeElement);
    }
    get loaderSize() {
        return this.size === 'l' || this.size === 'xl' ? 'm' : 's';
    }
    get computedAppearance() {
        var _a;
        return (_a = this.appearance) !== null && _a !== void 0 ? _a : (this.options.appearance || '');
    }
    get nativeDisabled() {
        return this.computedDisabled || this.showLoader ? '' : null;
    }
    get tabIndex() {
        return this.focusable ? 0 : -1;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
};
TuiButtonComponent.ctorParameters = () => [
    { type: TuiModeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiModeDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_TAKE_ONLY_TRUSTED_EVENTS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_BUTTON_OPTIONS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "appearance", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "iconRight", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-shape'),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "shape", void 0);
__decorate([
    Input(),
    HostBinding('class._loading'),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "showLoader", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiButtonComponent.prototype, "size", void 0);
__decorate([
    HostBinding('attr.data-appearance')
], TuiButtonComponent.prototype, "computedAppearance", null);
__decorate([
    HostBinding('attr.disabled')
], TuiButtonComponent.prototype, "nativeDisabled", null);
__decorate([
    HostBinding('tabIndex')
], TuiButtonComponent.prototype, "tabIndex", null);
__decorate([
    HostListener('focusin', ['true']),
    HostListener('focusout', ['false'])
], TuiButtonComponent.prototype, "onFocused", null);
TuiButtonComponent = TuiButtonComponent_1 = __decorate([
    Component({
        selector: 'button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]',
        template: "<ng-container *ngIf=\"appearance$ | async\"></ng-container>\n<tui-wrapper\n    class=\"t-wrapper\"\n    [appearance]=\"computedAppearance\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [disabled]=\"computedDisabled\"\n    [focused]=\"computedFocusVisible\"\n>\n    <span class=\"t-content\">\n        <span\n            *ngIf=\"icon\"\n            polymorpheus-outlet\n            class=\"t-left\"\n            [content]=\"icon\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n        <ng-content></ng-content>\n        <span\n            *ngIf=\"iconRight\"\n            polymorpheus-outlet\n            class=\"t-right\"\n            [content]=\"iconRight\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n    </span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-loader\"\n        [size]=\"loaderSize\"\n        [inheritColor]=\"true\"\n    ></tui-loader>\n</tui-wrapper>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiButtonComponent_1),
            },
            TuiDestroyService,
            TuiFocusVisibleService,
        ],
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:inline-block;flex-shrink:0;vertical-align:top;border-radius:var(--tui-radius-m);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;outline:0;color:inherit}:host[disabled]{pointer-events:none}:host[tuiIconButton] .t-left,:host[tuiIconButton] .t-right{margin:0}:host[data-shape=rounded]{border-radius:6.25rem}:host[data-size=xs]{height:var(--tui-height-xs);font-weight:400}:host[data-size=xs][data-shape=square],:host[data-size=xs][tuiIconButton]{height:var(--tui-height-xs);width:var(--tui-height-xs)}:host[data-size='s']{height:var(--tui-height-s);font-weight:400}:host[data-size='s'][data-shape=square],:host[data-size='s'][tuiIconButton]{height:var(--tui-height-s);width:var(--tui-height-s)}:host[data-size='m']{height:var(--tui-height-m);font:var(--tui-font-text-m);font-weight:700}:host[data-size='m'][data-shape=square],:host[data-size='m'][tuiIconButton]{height:var(--tui-height-m);width:var(--tui-height-m)}:host[data-size='l']{height:var(--tui-height-l);font:var(--tui-font-text-m);font-weight:700}:host[data-size='l'][data-shape=square],:host[data-size='l'][tuiIconButton]{height:var(--tui-height-l);width:var(--tui-height-l)}:host[data-size=xl]{height:3.75rem;font:var(--tui-font-text-m);font-weight:700}:host[data-size=xl][data-shape=square],:host[data-size=xl][tuiIconButton]{height:3.75rem;width:3.75rem}.t-loader{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default}.t-left{margin:0 .5rem 0 -.25rem}.t-right{margin:0 -.5rem 0 .25rem}.t-icon{display:block}:host[data-size='s'] .t-icon,:host[data-size=xs] .t-icon{width:1rem;height:1rem}:host[tuiIconButton] .t-icon,:host[tuiIconButton] .t-left,:host[tuiIconButton] .t-right{display:flex;width:100%;height:100%;align-items:center;justify-content:center}.t-wrapper{position:relative;z-index:0;box-sizing:border-box;cursor:pointer}:host[data-size=xs] .t-wrapper{padding:0 .5rem}:host[data-size='s'] .t-wrapper{padding:0 .75rem}:host[data-size='m'] .t-wrapper{padding:0 1.5rem}:host[data-size='l'] .t-wrapper{padding:0 2.25rem}:host[data-size=xl] .t-wrapper{padding:0 2.5rem}:host[data-shape=square] .t-wrapper,:host[tuiIconButton] .t-wrapper{padding:0}.t-content{display:flex;height:100%;align-items:center;justify-content:center;text-align:center}:host._loading .t-content{opacity:0}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(TuiModeDirective)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiFocusVisibleService)),
    __param(3, Inject(TuiHoveredService)),
    __param(4, Inject(TuiDestroyService)),
    __param(5, Inject(ChangeDetectorRef)),
    __param(6, Inject(TUI_TAKE_ONLY_TRUSTED_EVENTS)),
    __param(7, Inject(TUI_BUTTON_OPTIONS))
], TuiButtonComponent);

let TuiButtonModule = class TuiButtonModule {
};
TuiButtonModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiLoaderModule,
        ],
        declarations: [TuiButtonComponent],
        exports: [TuiButtonComponent],
    })
], TuiButtonModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_BUTTON_DEFAULT_OPTIONS, TUI_BUTTON_OPTIONS, TuiButtonComponent, TuiButtonModule, tuiButtonOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-button.js.map
