import { __decorate, __param } from 'tslib';
import { Inject, NgZone, ElementRef, Component, ChangeDetectionStrategy, Renderer2, Self, Input, Directive, NgModule } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiZoneOptimized, tuiTypedFromEvent, tuiPreventDefault, tuiStopPropagation, tuiZonefree, POLLING_TIME, tuiScrollFrom, TuiDestroyService, TuiLetModule } from '@taiga-ui/cdk';
import { tuiFadeIn } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_ANIMATION_OPTIONS, TUI_SCROLL_REF, TUI_MODE, TUI_ELEMENT_REF } from '@taiga-ui/core/tokens';
import { Observable, merge } from 'rxjs';
import { throttleTime, map, startWith, distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { DOCUMENT, CommonModule } from '@angular/common';

// @dynamic
let TuiScrollControlsComponent = class TuiScrollControlsComponent {
    constructor(options, ngZone, scrollRef, animationFrame$, mode$) {
        this.options = options;
        this.ngZone = ngZone;
        this.scrollRef = scrollRef;
        this.animationFrame$ = animationFrame$;
        this.mode$ = mode$;
        this.refresh$ = this.animationFrame$.pipe(throttleTime(300), map(() => this.scrollbars), startWith([false, false]), distinctUntilChanged((a, b) => a[0] === b[0] && a[1] === b[1]), tuiZoneOptimized(this.ngZone));
        this.animation = Object.assign({ value: '' }, this.options);
    }
    get scrollbars() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.scrollRef.nativeElement;
        return [
            Math.ceil((clientHeight / scrollHeight) * 100) < 100,
            Math.ceil((clientWidth / scrollWidth) * 100) < 100,
        ];
    }
};
TuiScrollControlsComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [TUI_SCROLL_REF,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
];
TuiScrollControlsComponent = __decorate([
    Component({
        selector: 'tui-scroll-controls',
        template: "<ng-container *tuiLet=\"refresh$ | async as bars\">\n    <div\n        *ngIf=\"bars[0]\"\n        tuiScrollbarWrapper\n        class=\"t-bar t-bar_vertical\"\n        [@tuiFadeIn]=\"animation\"\n        [class.t-bar_has-horizontal]=\"bars[1]\"\n    >\n        <div\n            tuiScrollbar=\"vertical\"\n            class=\"t-thumb\"\n        ></div>\n    </div>\n    <div\n        *ngIf=\"bars[1]\"\n        tuiScrollbarWrapper\n        class=\"t-bar t-bar_horizontal\"\n        [@tuiFadeIn]=\"animation\"\n        [class.t-bar_has-vertical]=\"bars[0]\"\n    >\n        <div\n            tuiScrollbar=\"horizontal\"\n            class=\"t-thumb\"\n        ></div>\n    </div>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [tuiFadeIn],
        providers: [MODE_PROVIDER],
        host: {
            '($.data-mode.attr)': 'mode$',
        },
        styles: [":host{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:1;min-width:calc(100% - 1px);min-height:calc(100% - 1px);max-width:calc(100% - 1px);max-height:calc(100% - 1px);float:left;margin-right:calc(-100% + 1px);-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:calc(-100% + 1px);margin-inline-end:calc(-100% + 1px);pointer-events:none}.t-bar{position:absolute;right:0;bottom:0;pointer-events:auto}.t-bar_vertical{top:0;width:.875rem}.t-bar_horizontal{left:0;height:.875rem}.t-bar_has-horizontal{bottom:.5rem}.t-bar_has-vertical{right:.5rem}.t-thumb{transition-duration:.15s;transition-timing-function:ease-in-out;position:absolute;border-radius:6.25rem;border:.25rem solid transparent;cursor:pointer;pointer-events:auto;background:var(--tui-text-01);background-clip:content-box;box-sizing:border-box;transition-property:width,height;opacity:.2}.t-thumb:hover{opacity:.24}.t-thumb:active{opacity:.48}:host[data-mode=onDark] .t-thumb{background-color:var(--tui-text-01-night)}.t-bar_vertical .t-thumb{right:0;width:.75rem;min-height:1.25rem}.t-bar_vertical .t-thumb:active,.t-bar_vertical:hover .t-thumb{width:.875rem}.t-bar_horizontal .t-thumb{bottom:0;height:.75rem;min-width:1.25rem}.t-bar_horizontal .t-thumb:active,.t-bar_horizontal:hover .t-thumb{height:.875rem}"]
    }),
    __param(0, Inject(TUI_ANIMATION_OPTIONS)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TUI_SCROLL_REF)),
    __param(3, Inject(ANIMATION_FRAME)),
    __param(4, Inject(TUI_MODE))
], TuiScrollControlsComponent);

const MIN_WIDTH = 24;
// @dynamic
let TuiScrollbarDirective = class TuiScrollbarDirective {
    constructor(ngZone, renderer, destroy$, animationFrame$, wrapper, container, doc, el) {
        this.wrapper = wrapper;
        this.container = container;
        this.doc = doc;
        this.el = el;
        this.tuiScrollbar = 'vertical';
        const { nativeElement } = this.el;
        const mousedown$ = tuiTypedFromEvent(nativeElement, 'mousedown');
        const mousemove$ = tuiTypedFromEvent(this.doc, 'mousemove');
        const mouseup$ = tuiTypedFromEvent(this.doc, 'mouseup');
        const mousedownWrapper$ = tuiTypedFromEvent(this.wrapper.nativeElement, 'mousedown');
        merge(mousedownWrapper$.pipe(tuiPreventDefault(), map(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe(tuiPreventDefault(), tuiStopPropagation(), switchMap(event => {
            const rect = nativeElement.getBoundingClientRect();
            const vertical = getOffsetVertical(event, rect);
            const horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(event => this.getScrolled(event, vertical, horizontal)), takeUntil(mouseup$));
        })))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(([scrollTop, scrollLeft]) => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setProperty(this.element, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(this.element, 'scrollLeft', scrollLeft);
            }
        });
        merge(animationFrame$.pipe(throttleTime(POLLING_TIME)), tuiScrollFrom(this.element))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(() => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setStyle(nativeElement, 'top', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'height', `${this.view * 100}%`);
            }
            else {
                renderer.setStyle(nativeElement, 'left', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'width', `${this.view * 100}%`);
            }
        });
    }
    get scrolled() {
        const { scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth, } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? scrollTop / (scrollHeight - clientHeight)
            : scrollLeft / (scrollWidth - clientWidth);
    }
    get compensation() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
            this.tuiScrollbar === 'vertical') ||
            ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                this.tuiScrollbar === 'horizontal')) {
            return 0;
        }
        return this.tuiScrollbar === 'vertical'
            ? MIN_WIDTH / clientHeight
            : MIN_WIDTH / clientWidth;
    }
    get thumb() {
        const compensation = this.compensation || this.view;
        return this.scrolled * (1 - compensation);
    }
    get view() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
            : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
    }
    get element() {
        return this.container.nativeElement;
    }
    getScrolled({ clientY, clientX }, offsetVertical, offsetHorizontal) {
        const { offsetHeight, offsetWidth } = this.el.nativeElement;
        const { top, left, width, height } = this.wrapper.nativeElement.getBoundingClientRect();
        const maxTop = this.element.scrollHeight - height;
        const maxLeft = this.element.scrollWidth - width;
        const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    }
};
TuiScrollbarDirective.ctorParameters = () => [
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [TUI_ELEMENT_REF,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [TUI_SCROLL_REF,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input()
], TuiScrollbarDirective.prototype, "tuiScrollbar", void 0);
TuiScrollbarDirective = __decorate([
    Directive({
        selector: '[tuiScrollbar]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(NgZone)),
    __param(1, Inject(Renderer2)),
    __param(2, Self()), __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(ANIMATION_FRAME)),
    __param(4, Inject(TUI_ELEMENT_REF)),
    __param(5, Inject(TUI_SCROLL_REF)),
    __param(6, Inject(DOCUMENT)),
    __param(7, Inject(ElementRef))
], TuiScrollbarDirective);
function getOffsetVertical({ clientY }, { top, height }) {
    return (clientY - top) / height;
}
function getOffsetHorizontal({ clientX }, { left, width }) {
    return (clientX - left) / width;
}

let TuiScrollbarWrapperDirective = class TuiScrollbarWrapperDirective {
};
TuiScrollbarWrapperDirective = __decorate([
    Directive({
        selector: '[tuiScrollbarWrapper]',
        providers: [
            {
                provide: TUI_ELEMENT_REF,
                useExisting: ElementRef,
            },
        ],
    })
], TuiScrollbarWrapperDirective);

let TuiScrollControlsModule = class TuiScrollControlsModule {
};
TuiScrollControlsModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiLetModule],
        declarations: [
            TuiScrollbarDirective,
            TuiScrollbarWrapperDirective,
            TuiScrollControlsComponent,
        ],
        exports: [TuiScrollControlsComponent],
    })
], TuiScrollControlsModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiScrollControlsComponent, TuiScrollControlsModule, TuiScrollbarDirective, TuiScrollbarWrapperDirective as ɵa };
//# sourceMappingURL=taiga-ui-core-components-scroll-controls.js.map
