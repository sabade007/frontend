import { CHAR_NO_BREAK_SPACE, CHAR_HYPHEN, CHAR_PLUS } from '@taiga-ui/cdk';

/**
 * @deprecated: use {@link tuiCapitalize} instead
 * Capitalizes a given string, replacing it with a lowercase string and making
 * the first letter of each word uppercase.
 *
 * @param value the input string
 * @return the capitalized string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function capitalize(value) {
    return value.toLowerCase().replace(/(?:^|\s)\S/g, char => char.toUpperCase());
}
const tuiCapitalize = capitalize;

/**
 * @deprecated: use {@link tuiCapitalizeFirstLetter} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function capitalizeFirstLetter(value) {
    return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}
const tuiCapitalizeFirstLetter = capitalizeFirstLetter;

/**
 * @deprecated: use {@link tuiNumberToStringWithoutExp} instead
 * Convert number to string with replacing exponent part on decimals
 *
 * @param value the number
 * @return string representation of a number
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function numberToStringWithoutExp(value) {
    const valueAsString = String(value);
    const [numberPart, expPart] = valueAsString.split(`e-`);
    let valueWithoutExp = valueAsString;
    if (expPart) {
        const [, fractionalPart] = numberPart.split(`.`);
        const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);
        valueWithoutExp = value.toFixed(decimalDigits);
    }
    return valueWithoutExp;
}
const tuiNumberToStringWithoutExp = numberToStringWithoutExp;

/**
 * @deprecated: use {@link tuiGetFractionPartPadded} instead
 * Return fractional part of number
 *
 * @param value the number
 * @param precision number of digits of decimal part, null to keep untouched
 * @return the fractional part of number
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getFractionPartPadded(value, precision) {
    const [, fractionPartPadded = ``] = numberToStringWithoutExp(value).split(`.`);
    return typeof precision === `number`
        ? fractionPartPadded.slice(0, Math.max(0, precision))
        : fractionPartPadded;
}
const tuiGetFractionPartPadded = getFractionPartPadded;

// TODO: refactor later to `formatNumber(value: number, options: Partial<AllTheStuff>)`
/**
 * @deprecated: use {@link tuiFormatNumber} instead
 * Formats number adding a thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @param zeroPadding enable zeros at the end of decimal part
 * @return the formatted string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function formatNumber(value, decimalLimit = null, decimalSeparator = `,`, thousandSeparator = CHAR_NO_BREAK_SPACE, zeroPadding = true) {
    const integerPartString = String(Math.floor(Math.abs(value)));
    let fractionPartPadded = getFractionPartPadded(value, decimalLimit);
    if (decimalLimit !== null) {
        if (zeroPadding) {
            const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);
            const zeroPartString = `0`.repeat(zeroPaddingSize);
            fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;
        }
        else {
            fractionPartPadded = fractionPartPadded.replace(/0*$/, ``);
        }
    }
    const remainder = integerPartString.length % 3;
    const sign = value < 0 ? CHAR_HYPHEN : ``;
    let result = sign + integerPartString.charAt(0);
    for (let i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;
}
const tuiFormatNumber = formatNumber;

/**
 * @deprecated: use {@link tuiFormatPhone} instead
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function formatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return ``;
    }
    let result = countryCode;
    countryCode = countryCode.replace(/[()]/g, ``);
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace(CHAR_PLUS, ``);
    }
    const splitPhoneMask = phoneMask.split(``);
    const splitValue = value.slice(countryCode.length).split(``);
    result += ` `;
    if (splitValue.length === 0) {
        return result;
    }
    for (let i = 0; i < splitPhoneMask.length; i++) {
        if (splitValue.length === 0) {
            break;
        }
        if (splitPhoneMask[i] === `#`) {
            result += splitValue[0] || ``;
            splitValue.splice(0, 1);
        }
        else {
            result += splitPhoneMask[i];
        }
    }
    return result;
}
const tuiFormatPhone = formatPhone;

/**
 * @deprecated: use {@link tuiOtherDecimalSymbol} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function otherDecimalSymbol(symbol) {
    return symbol === `.` ? `,` : `.`;
}
const tuiOtherDecimalSymbol = otherDecimalSymbol;

/**
 * Selects the correct plural form to display.
 *
 * @param value the input number
 * @param args an array of three plural forms, e.g. ['год', 'года', 'лет']
 * @deprecated This implementation targets Russian.
 * Use https://angular.io/api/common/NgPlural for your implementations.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function pluralize(value, [one, few, many]) {
    const ten = value % 10;
    const hundred = value % 100;
    // 1, 21, 101, 121, но не 11, 111, 211...
    if (ten === 1 && hundred !== 11) {
        return one;
    }
    // 2, 3, 4, 22, 33, 44, 152, 163, 174, но не 12, 13, 14, 112, 213, 314...
    if (ten >= 2 && ten <= 4 && (hundred < 10 || hundred >= 20)) {
        return few;
    }
    return many;
}

// TODO: 3.0 remove in 3.0
/**
 * Temporary util for mapping TuiPluralize array to ICU format
 */
function tuiPluralizeToICU(pluralize) {
    return {
        one: pluralize[0],
        few: pluralize[1],
        many: pluralize[2],
        other: pluralize[2],
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { capitalize, capitalizeFirstLetter, formatNumber, formatPhone, getFractionPartPadded, numberToStringWithoutExp, otherDecimalSymbol, pluralize, tuiCapitalize, tuiCapitalizeFirstLetter, tuiFormatNumber, tuiFormatPhone, tuiGetFractionPartPadded, tuiNumberToStringWithoutExp, tuiOtherDecimalSymbol, tuiPluralizeToICU };
//# sourceMappingURL=taiga-ui-core-utils-format.js.map
