import { __decorate } from 'tslib';
import { InjectionToken, Input, Directive, forwardRef, NgModule, ChangeDetectorRef } from '@angular/core';
import { TuiController, watch, TuiDestroyService } from '@taiga-ui/cdk';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

class TuiTextfieldController {
    constructor(change$, autocompleteDirective, cleanerDirective, customContentDirective, exampleTextDirective, inputModeDirective, labelOutsideDirective, maxLengthDirective, sizeDirective, typeDirective) {
        this.change$ = change$;
        this.autocompleteDirective = autocompleteDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.exampleTextDirective = exampleTextDirective;
        this.inputModeDirective = inputModeDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.maxLengthDirective = maxLengthDirective;
        this.sizeDirective = sizeDirective;
        this.typeDirective = typeDirective;
    }
    get autocomplete() {
        return this.autocompleteDirective.autocomplete;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || ``;
    }
    get exampleText() {
        return this.exampleTextDirective.exampleText;
    }
    get inputMode() {
        return this.inputModeDirective.inputMode;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get maxLength() {
        return this.maxLengthDirective.maxLength;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get type() {
        return this.typeDirective.type;
    }
}

var TuiTextfieldAutocompleteDirective_1;
const TUI_TEXTFIELD_AUTOCOMPLETE = new InjectionToken('tuiTextfieldAutocomplete', {
    factory: autocompleteDirectiveFactory,
});
let TuiTextfieldAutocompleteDirective = TuiTextfieldAutocompleteDirective_1 = class TuiTextfieldAutocompleteDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.autocomplete = '';
    }
};
__decorate([
    Input('tuiTextfieldAutocomplete')
], TuiTextfieldAutocompleteDirective.prototype, "autocomplete", void 0);
TuiTextfieldAutocompleteDirective = TuiTextfieldAutocompleteDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldAutocomplete]',
        providers: [
            {
                provide: TUI_TEXTFIELD_AUTOCOMPLETE,
                useExisting: forwardRef(() => TuiTextfieldAutocompleteDirective_1),
            },
        ],
    })
], TuiTextfieldAutocompleteDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function autocompleteDirectiveFactory() {
    return new TuiTextfieldAutocompleteDirective();
}

var TuiTextfieldCleanerDirective_1;
const TUI_TEXTFIELD_CLEANER = new InjectionToken('tuiTextfieldCleaner', {
    factory: cleanerDirectiveFactory,
});
let TuiTextfieldCleanerDirective = TuiTextfieldCleanerDirective_1 = class TuiTextfieldCleanerDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.cleaner = false;
    }
};
__decorate([
    Input('tuiTextfieldCleaner')
], TuiTextfieldCleanerDirective.prototype, "cleaner", void 0);
TuiTextfieldCleanerDirective = TuiTextfieldCleanerDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldCleaner]',
        providers: [
            {
                provide: TUI_TEXTFIELD_CLEANER,
                useExisting: forwardRef(() => TuiTextfieldCleanerDirective_1),
            },
        ],
    })
], TuiTextfieldCleanerDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function cleanerDirectiveFactory() {
    return new TuiTextfieldCleanerDirective();
}

var TuiTextfieldCustomContentDirective_1;
const TUI_TEXTFIELD_CUSTOM_CONTENT = new InjectionToken('tuiTextfieldCustomContent', {
    factory: customContentDirectiveFactory,
});
let TuiTextfieldCustomContentDirective = TuiTextfieldCustomContentDirective_1 = class TuiTextfieldCustomContentDirective extends TuiController {
    constructor() {
        super(...arguments);
        // TODO: 3.0 Remove null
        this.customContent = '';
    }
};
__decorate([
    Input('tuiTextfieldCustomContent')
], TuiTextfieldCustomContentDirective.prototype, "customContent", void 0);
TuiTextfieldCustomContentDirective = TuiTextfieldCustomContentDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldCustomContent]',
        providers: [
            {
                provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
                useExisting: forwardRef(() => TuiTextfieldCustomContentDirective_1),
            },
        ],
    })
], TuiTextfieldCustomContentDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function customContentDirectiveFactory() {
    return new TuiTextfieldCustomContentDirective();
}

var TuiTextfieldExampleTextDirective_1;
const TUI_TEXTFIELD_EXAMPLE_TEXT = new InjectionToken('tuiTextfieldExampleText', {
    factory: exampleTextDirectiveFactory,
});
let TuiTextfieldExampleTextDirective = TuiTextfieldExampleTextDirective_1 = class TuiTextfieldExampleTextDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.exampleText = '';
    }
};
__decorate([
    Input('tuiTextfieldExampleText')
], TuiTextfieldExampleTextDirective.prototype, "exampleText", void 0);
TuiTextfieldExampleTextDirective = TuiTextfieldExampleTextDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldExampleText]',
        providers: [
            {
                provide: TUI_TEXTFIELD_EXAMPLE_TEXT,
                useExisting: forwardRef(() => TuiTextfieldExampleTextDirective_1),
            },
        ],
    })
], TuiTextfieldExampleTextDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function exampleTextDirectiveFactory() {
    return new TuiTextfieldExampleTextDirective();
}

var TuiTextfieldInputModeDirective_1;
const TUI_TEXTFIELD_INPUT_MODE = new InjectionToken('tuiTextfieldInputMode', {
    factory: inputModeDirectiveFactory,
});
let TuiTextfieldInputModeDirective = TuiTextfieldInputModeDirective_1 = class TuiTextfieldInputModeDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.inputMode = 'text';
    }
};
__decorate([
    Input('tuiTextfieldInputMode')
], TuiTextfieldInputModeDirective.prototype, "inputMode", void 0);
TuiTextfieldInputModeDirective = TuiTextfieldInputModeDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldInputMode]',
        providers: [
            {
                provide: TUI_TEXTFIELD_INPUT_MODE,
                useExisting: forwardRef(() => TuiTextfieldInputModeDirective_1),
            },
        ],
    })
], TuiTextfieldInputModeDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function inputModeDirectiveFactory() {
    return new TuiTextfieldInputModeDirective();
}

var TuiTextfieldLabelOutsideDirective_1;
const TUI_TEXTFIELD_LABEL_OUTSIDE = new InjectionToken('tuiTextfieldLabelOutside', {
    factory: labelOutsideDirectiveFactory,
});
let TuiTextfieldLabelOutsideDirective = TuiTextfieldLabelOutsideDirective_1 = class TuiTextfieldLabelOutsideDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.labelOutside = false;
    }
};
__decorate([
    Input('tuiTextfieldLabelOutside')
], TuiTextfieldLabelOutsideDirective.prototype, "labelOutside", void 0);
TuiTextfieldLabelOutsideDirective = TuiTextfieldLabelOutsideDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldLabelOutside]',
        providers: [
            {
                provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
                useExisting: forwardRef(() => TuiTextfieldLabelOutsideDirective_1),
            },
        ],
    })
], TuiTextfieldLabelOutsideDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function labelOutsideDirectiveFactory() {
    return new TuiTextfieldLabelOutsideDirective();
}

var TuiTextfieldMaxLengthDirective_1;
const TUI_TEXTFIELD_MAX_LENGTH = new InjectionToken('tuiTextfieldMaxLength', {
    factory: maxLengthDirectiveFactory,
});
let TuiTextfieldMaxLengthDirective = TuiTextfieldMaxLengthDirective_1 = class TuiTextfieldMaxLengthDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.maxLength = null;
    }
};
__decorate([
    Input('tuiTextfieldMaxLength')
], TuiTextfieldMaxLengthDirective.prototype, "maxLength", void 0);
TuiTextfieldMaxLengthDirective = TuiTextfieldMaxLengthDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldMaxLength]',
        providers: [
            {
                provide: TUI_TEXTFIELD_MAX_LENGTH,
                useExisting: forwardRef(() => TuiTextfieldMaxLengthDirective_1),
            },
        ],
    })
], TuiTextfieldMaxLengthDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function maxLengthDirectiveFactory() {
    return new TuiTextfieldMaxLengthDirective();
}

var TuiTextfieldSizeDirective_1;
const TUI_TEXTFIELD_SIZE = new InjectionToken('tuiTextfieldSize', {
    factory: sizeDirectiveFactory,
});
let TuiTextfieldSizeDirective = TuiTextfieldSizeDirective_1 = class TuiTextfieldSizeDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.size = 'l';
    }
};
__decorate([
    Input('tuiTextfieldSize')
], TuiTextfieldSizeDirective.prototype, "size", void 0);
TuiTextfieldSizeDirective = TuiTextfieldSizeDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldSize]',
        providers: [
            {
                provide: TUI_TEXTFIELD_SIZE,
                useExisting: forwardRef(() => TuiTextfieldSizeDirective_1),
            },
        ],
    })
], TuiTextfieldSizeDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function sizeDirectiveFactory() {
    return new TuiTextfieldSizeDirective();
}

var TuiTextfieldTypeDirective_1;
const TUI_TEXTFIELD_TYPE = new InjectionToken('tuiTextfieldType', {
    factory: typeDirectiveFactory,
});
let TuiTextfieldTypeDirective = TuiTextfieldTypeDirective_1 = class TuiTextfieldTypeDirective extends TuiController {
    constructor() {
        super(...arguments);
        this.type = 'text';
    }
};
__decorate([
    Input('tuiTextfieldType')
], TuiTextfieldTypeDirective.prototype, "type", void 0);
TuiTextfieldTypeDirective = TuiTextfieldTypeDirective_1 = __decorate([
    Directive({
        selector: '[tuiTextfieldType]',
        providers: [
            {
                provide: TUI_TEXTFIELD_TYPE,
                useExisting: forwardRef(() => TuiTextfieldTypeDirective_1),
            },
        ],
    })
], TuiTextfieldTypeDirective);
// eslint-disable-next-line @typescript-eslint/naming-convention
function typeDirectiveFactory() {
    return new TuiTextfieldTypeDirective();
}

let TuiTextfieldControllerModule = class TuiTextfieldControllerModule {
};
TuiTextfieldControllerModule = __decorate([
    NgModule({
        declarations: [
            TuiTextfieldAutocompleteDirective,
            TuiTextfieldCleanerDirective,
            TuiTextfieldCustomContentDirective,
            TuiTextfieldExampleTextDirective,
            TuiTextfieldInputModeDirective,
            TuiTextfieldLabelOutsideDirective,
            TuiTextfieldMaxLengthDirective,
            TuiTextfieldSizeDirective,
            TuiTextfieldTypeDirective,
        ],
        exports: [
            TuiTextfieldAutocompleteDirective,
            TuiTextfieldCleanerDirective,
            TuiTextfieldCustomContentDirective,
            TuiTextfieldExampleTextDirective,
            TuiTextfieldInputModeDirective,
            TuiTextfieldLabelOutsideDirective,
            TuiTextfieldMaxLengthDirective,
            TuiTextfieldSizeDirective,
            TuiTextfieldTypeDirective,
        ],
    })
], TuiTextfieldControllerModule);

const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken(`watched textfield controller`);
/**
 * @deprecated: use {@link tuiTextfieldWatchedControllerFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function textfieldWatchedControllerFactory(changeDetectorRef, destroy$, ...controllers) {
    const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(watch(changeDetectorRef), takeUntil(destroy$));
    change$.subscribe();
    return new TuiTextfieldController(change$, ...controllers);
}
const TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_AUTOCOMPLETE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_EXAMPLE_TEXT,
            TUI_TEXTFIELD_INPUT_MODE,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_MAX_LENGTH,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_TYPE,
        ],
        useFactory: textfieldWatchedControllerFactory,
    },
];
const tuiTextfieldWatchedControllerFactory = textfieldWatchedControllerFactory;

/**
 * Generated bundle index. Do not edit.
 */

export { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_AUTOCOMPLETE, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_CUSTOM_CONTENT, TUI_TEXTFIELD_EXAMPLE_TEXT, TUI_TEXTFIELD_INPUT_MODE, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_MAX_LENGTH, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_TYPE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiTextfieldAutocompleteDirective, TuiTextfieldCleanerDirective, TuiTextfieldController, TuiTextfieldControllerModule, TuiTextfieldCustomContentDirective, TuiTextfieldExampleTextDirective, TuiTextfieldInputModeDirective, TuiTextfieldLabelOutsideDirective, TuiTextfieldMaxLengthDirective, TuiTextfieldSizeDirective, TuiTextfieldTypeDirective, autocompleteDirectiveFactory, cleanerDirectiveFactory, customContentDirectiveFactory, exampleTextDirectiveFactory, inputModeDirectiveFactory, labelOutsideDirectiveFactory, maxLengthDirectiveFactory, sizeDirectiveFactory, textfieldWatchedControllerFactory, tuiTextfieldWatchedControllerFactory, typeDirectiveFactory };
//# sourceMappingURL=taiga-ui-core-directives-textfield-controller.js.map
