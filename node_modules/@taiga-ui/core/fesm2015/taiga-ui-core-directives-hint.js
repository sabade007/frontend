import { __decorate, __param } from 'tslib';
import { InjectionToken, Renderer2, Inject, ElementRef, Self, Optional, Input, Directive, NgModule } from '@angular/core';
import { TuiDestroyService, TuiObscuredService, TuiHoveredService, TuiActiveZoneDirective, tuiDefaultProp, tuiRequiredSetter, TuiParentsScrollService } from '@taiga-ui/cdk';
import { TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, AbstractTuiHint } from '@taiga-ui/core/abstract';
import { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';
import { TuiHintService } from '@taiga-ui/core/services';
import { Subject, combineLatest, of } from 'rxjs';
import { startWith, map, switchMap, delay, take, distinctUntilChanged, takeUntil } from 'rxjs/operators';

// TODO: 3.0 remove in ivy compilation
const TUI_TOOLTIP_ICON = `tuiIconTooltipLarge`;
/** Default values for hint options */
const TUI_HINT_DEFAULT_OPTIONS = Object.assign(Object.assign({}, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS), { tuiHintShowDelay: 500, tuiHintHideDelay: 200, tooltipIcon: TUI_TOOLTIP_ICON });
const TUI_HINT_OPTIONS = new InjectionToken(`Default parameters for hint directive`, {
    factory: () => TUI_HINT_DEFAULT_OPTIONS,
});
const tuiHintOptionsProvider = (options) => ({
    provide: TUI_HINT_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_HINT_DEFAULT_OPTIONS), options),
});

const HINT_HOVERED_CLASS = '_hint_hovered';
let TuiHintDirective = class TuiHintDirective extends AbstractTuiHint {
    constructor(renderer, elementRef, hintService, destroy$, obscured$, hoveredService, activeZone, options) {
        super(elementRef, hintService, activeZone, options);
        this.renderer = renderer;
        this.options = options;
        this.tuiHintShowDelay = this.options.tuiHintShowDelay;
        this.tuiHintHideDelay = this.options.tuiHintHideDelay;
        this.tuiHintHost = null;
        this.componentHovered$ = new Subject();
        // @bad TODO: Use private provider
        combineLatest(hoveredService.createHovered$(elementRef.nativeElement), this.componentHovered$.pipe(startWith(false)))
            .pipe(map(([directiveHovered, componentHovered]) => directiveHovered || componentHovered), switchMap(visible => {
            this.toggleClass(visible);
            return of(visible).pipe(delay(visible ? this.tuiHintShowDelay : this.tuiHintHideDelay));
        }), switchMap(visible => visible && this.mode !== 'overflow'
            ? obscured$.pipe(map(obscured => !obscured), take(2))
            : of(visible)), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe(visible => {
            if (visible) {
                this.showTooltip();
            }
            else {
                this.hideTooltip();
            }
        });
        this.hintService.register(this);
    }
    // TODO: 3.0 Remove null
    set tuiHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    get id() {
        return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;
    }
    get host() {
        return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;
    }
    getElementClientRect() {
        return this.host.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.hintService.unregister(this);
    }
    showTooltip() {
        if (this.content === '') {
            return;
        }
        this.toggleClass(true);
        this.hintService.add(this);
    }
    hideTooltip() {
        this.toggleClass(false);
        this.hintService.remove(this);
    }
    toggleClass(add) {
        if (add) {
            this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
    }
};
TuiHintDirective.ctorParameters = () => [
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiObscuredService, decorators: [{ type: Inject, args: [TuiObscuredService,] }, { type: Self }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
    { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_HINT_OPTIONS,] }] }
];
__decorate([
    Input()
], TuiHintDirective.prototype, "tuiHintId", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintShowDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintHideDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintHost", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiHintDirective.prototype, "tuiHint", null);
TuiHintDirective = __decorate([
    Directive({
        selector: '[tuiHint]:not(ng-container)',
        providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
    }),
    __param(0, Inject(Renderer2)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiHintService)),
    __param(3, Inject(TuiDestroyService)),
    __param(4, Inject(TuiObscuredService)),
    __param(4, Self()),
    __param(5, Inject(TuiHoveredService)),
    __param(6, Optional()),
    __param(6, Inject(TuiActiveZoneDirective)),
    __param(7, Inject(TUI_HINT_OPTIONS))
], TuiHintDirective);

let TuiHintModule = class TuiHintModule {
};
TuiHintModule = __decorate([
    NgModule({
        declarations: [TuiHintDirective],
        exports: [TuiHintDirective],
    })
], TuiHintModule);

/**
 * Generated bundle index. Do not edit.
 */

export { HINT_HOVERED_CLASS, TUI_HINT_DEFAULT_OPTIONS, TUI_HINT_OPTIONS, TUI_TOOLTIP_ICON, TuiHintDirective, TuiHintModule, tuiHintOptionsProvider };
//# sourceMappingURL=taiga-ui-core-directives-hint.js.map
