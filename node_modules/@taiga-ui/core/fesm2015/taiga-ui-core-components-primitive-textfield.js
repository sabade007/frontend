import { __decorate, __param } from 'tslib';
import { forwardRef, InjectionToken, EventEmitter, Inject, ElementRef, ViewChild, Input, HostBinding, Output, ContentChildren, HostListener, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiInteractive, isNativeFocusedIn, setNativeFocused, tuiDefaultProp, tuiPure, TuiIdService, TuiFocusableModule, TuiHoveredModule, TuiInputModeModule, TuiAutofilledModule } from '@taiga-ui/cdk';
import { HINT_CONTROLLER_PROVIDER, TuiHintControllerDirective, TUI_HINT_WATCHED_CONTROLLER } from '@taiga-ui/core/directives/hint-controller';
import { TEXTFIELD_CONTROLLER_PROVIDER, TuiTextfieldController, TUI_TEXTFIELD_WATCHED_CONTROLLER } from '@taiga-ui/core/directives/textfield-controller';
import { TUI_MODE, TUI_TEXTFIELD_APPEARANCE, TUI_TEXTFIELD_HOST } from '@taiga-ui/core/tokens';
import { getBorder } from '@taiga-ui/core/utils/miscellaneous';
import { PolymorpheusOutletComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { fromEvent, Observable, BehaviorSubject } from 'rxjs';
import { map, delay, filter, distinctUntilChanged } from 'rxjs/operators';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TuiAbstractTextfieldHost } from '@taiga-ui/core/abstract';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { TuiTooltipModule } from '@taiga-ui/core/components/tooltip';
import { TuiDescribedByModule } from '@taiga-ui/core/directives/described-by';
import { TuiMaskAccessorModule } from '@taiga-ui/core/directives/mask-accessor';
import { TuiWrapperModule } from '@taiga-ui/core/directives/wrapper';
import { TuiTextfieldController as TuiTextfieldController$1, TUI_TEXTFIELD_WATCHED_CONTROLLER as TUI_TEXTFIELD_WATCHED_CONTROLLER$1, TuiDescribedByDirective, TUI_DESCRIBED_BY_PROVIDERS, TEXTFIELD_CONTROLLER_PROVIDER as TEXTFIELD_CONTROLLER_PROVIDER$1 } from '@taiga-ui/core/directives';

const TUI_PRIMITIVE_TEXTFIELD_PROVIDERS = [
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiPrimitiveTextfieldComponent),
    },
    TEXTFIELD_CONTROLLER_PROVIDER,
    HINT_CONTROLLER_PROVIDER,
    MODE_PROVIDER,
];

// TODO: 3.0 remove in ivy compilation
const TUI_PRIMITIVE_TEXTFIELD_ICON_CLEANER = `tuiIconCloseLarge`;
/** Default values for primitive textfield options */
const TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS = {
    iconAlign: `right`,
    iconCleaner: TUI_PRIMITIVE_TEXTFIELD_ICON_CLEANER,
};
const TUI_PRIMITIVE_TEXTFIELD_OPTIONS = new InjectionToken(`Default parameters for primitive textfield component`, {
    factory: () => TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS,
});
const tuiPrimitiveTextfieldOptionsProvider = (options) => ({
    provide: TUI_PRIMITIVE_TEXTFIELD_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS), options),
});

const ICON_PADDING = 1.75;
const ICON_PADDING_S = 1.5;
let TuiPrimitiveTextfieldComponent = class TuiPrimitiveTextfieldComponent extends AbstractTuiInteractive {
    constructor(mode$, appearance, controller, hintController, options, elementRef) {
        super();
        this.mode$ = mode$;
        this.appearance = appearance;
        this.controller = controller;
        this.hintController = hintController;
        this.options = options;
        this.elementRef = elementRef;
        this.editable = true;
        this.filler = '';
        this.iconAlign = this.options.iconAlign;
        // TODO: 3.0 Remove null
        this.iconContent = null;
        this.iconCleaner = this.options.iconCleaner;
        this.readOnly = false;
        this.invalid = false;
        this.disabled = false;
        this.prefix = '';
        this.postfix = '';
        this.value = '';
        this.valueChange = new EventEmitter();
        /**
         * @deprecated TODO: 3.0 remove
         */
        this.autofilledChange = new EventEmitter();
        this.autofilled = false;
    }
    get nativeFocusableElement() {
        if (this.computedDisabled || !this.focusableElement) {
            return null;
        }
        // TODO: 3.0 Refactor this after we drop built-in input element
        return (this.focusableElement.nativeElement
            .previousElementSibling ||
            this.focusableElement.nativeElement);
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
    get size() {
        return this.controller.size;
    }
    get computedInvalid() {
        return !this.readOnly && !this.disabled && this.invalid;
    }
    get inputHidden() {
        var _a;
        return !!((_a = this.content) === null || _a === void 0 ? void 0 : _a.length);
    }
    get hasValue() {
        return !!this.value;
    }
    get hasCleaner() {
        return (this.controller.cleaner && this.hasValue && !this.disabled && !this.readOnly);
    }
    get hasTooltip() {
        var _a;
        return !!((_a = this.hintController) === null || _a === void 0 ? void 0 : _a.content) && !this.disabled;
    }
    get hasCustomContent() {
        return !!this.controller.customContent;
    }
    get showOnlyPlaceholder() {
        return (this.focused &&
            this.placeholderVisible &&
            (this.size === 's' || (this.size === 'm' && !this.placeholderRaisable)));
    }
    get placeholderVisible() {
        var _a;
        const hasDecor = this.controller.exampleText ||
            this.prefix ||
            this.postfix || ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder);
        const showDecor = hasDecor && !this.readOnly && this.computedFocused;
        return !this.hasValue && !showDecor;
    }
    get hasPlaceholder() {
        return (!this.showOnlyPlaceholder &&
            (this.placeholderRaisable || this.placeholderVisible));
    }
    get placeholderRaised() {
        return (this.placeholderRaisable &&
            ((this.computedFocused && !this.readOnly) || this.hasValue || this.autofilled));
    }
    get borderStart() {
        return this.iconAlignLeft ? this.iconPaddingLeft : 0;
    }
    get borderEnd() {
        return getBorder(this.iconAlignRight, this.hasCleaner, this.hasTooltip, this.hasCustomContent);
    }
    get iconAlignLeft() {
        return this.hasIcon && this.iconAlign === 'left';
    }
    get iconAlignRight() {
        return this.hasIcon && this.iconAlign === 'right';
    }
    // Safari expiration date autofill workaround
    get name() {
        return this.controller.autocomplete === "cc-exp" /* CcExp */
            ? 'ccexpiryyear'
            : null;
    }
    get computedId() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    getIndent$(element) {
        return fromEvent(element, 'scroll').pipe(map(() => -1 * element.scrollLeft));
    }
    clear() {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = '';
        }
        this.updateValue('');
    }
    onMouseDown(event) {
        const { nativeFocusableElement } = this;
        if (!nativeFocusableElement || event.target === nativeFocusableElement) {
            return;
        }
        event.preventDefault();
        setNativeFocused(nativeFocusableElement);
    }
    onModelChange(value) {
        this.updateValue(value);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onAutofilled(autofilled) {
        this.updateAutofilled(autofilled);
    }
    get iconPaddingLeft() {
        return this.size === 's' ? ICON_PADDING_S : ICON_PADDING;
    }
    get placeholderRaisable() {
        return this.size !== 's' && !this.controller.labelOutside;
    }
    get hasIcon() {
        return !!this.iconContent;
    }
    updateAutofilled(autofilled) {
        if (this.autofilled === autofilled) {
            return;
        }
        this.autofilled = autofilled;
        this.autofilledChange.emit(autofilled);
    }
    updateValue(value) {
        this.value = value;
        this.valueChange.emit(value);
    }
};
TuiPrimitiveTextfieldComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_APPEARANCE,] }] },
    { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] },
    { type: TuiHintControllerDirective, decorators: [{ type: Inject, args: [TUI_HINT_WATCHED_CONTROLLER,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_PRIMITIVE_TEXTFIELD_OPTIONS,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    ViewChild('focusableElement')
], TuiPrimitiveTextfieldComponent.prototype, "focusableElement", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "editable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "filler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "iconAlign", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "iconContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "iconCleaner", void 0);
__decorate([
    Input(),
    HostBinding('class._readonly'),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "readOnly", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "invalid", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "prefix", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "postfix", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "value", void 0);
__decorate([
    Output()
], TuiPrimitiveTextfieldComponent.prototype, "valueChange", void 0);
__decorate([
    Output()
], TuiPrimitiveTextfieldComponent.prototype, "autofilledChange", void 0);
__decorate([
    ContentChildren(PolymorpheusOutletComponent)
], TuiPrimitiveTextfieldComponent.prototype, "content", void 0);
__decorate([
    HostBinding('attr.data-size')
], TuiPrimitiveTextfieldComponent.prototype, "size", null);
__decorate([
    HostBinding('class._invalid')
], TuiPrimitiveTextfieldComponent.prototype, "computedInvalid", null);
__decorate([
    HostBinding('class._hidden')
], TuiPrimitiveTextfieldComponent.prototype, "inputHidden", null);
__decorate([
    HostBinding('style.--border-start.rem')
], TuiPrimitiveTextfieldComponent.prototype, "borderStart", null);
__decorate([
    HostBinding('style.--border-end.rem')
], TuiPrimitiveTextfieldComponent.prototype, "borderEnd", null);
__decorate([
    HostListener('focusin', ['true']),
    HostListener('focusout', ['false'])
], TuiPrimitiveTextfieldComponent.prototype, "onFocused", null);
__decorate([
    tuiPure
], TuiPrimitiveTextfieldComponent.prototype, "getIndent$", null);
TuiPrimitiveTextfieldComponent = __decorate([
    Component({
        selector: 'tui-primitive-textfield',
        template: "<ng-container *ngIf=\"content?.changes | async\"></ng-container>\n<tui-wrapper\n    automation-id=\"tui-primitive-textfield__wrapper\"\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"disabled\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [invalid]=\"computedInvalid\"\n    [style.--text-indent.px]=\"decor.pre$ | async\"\n    (mousedown)=\"onMouseDown($event)\"\n    (click.prevent.silent)=\"(0)\"\n    (tuiHoveredChange)=\"onHovered($event)\"\n    (tuiAutofilledChange)=\"onAutofilled($event)\"\n>\n    <ng-content select=\"input\"></ng-content>\n    <input\n        #focusableElement\n        tuiMaskAccessor\n        automation-id=\"tui-primitive-textfield__native-input\"\n        class=\"t-input\"\n        [attr.disabled]=\"computedDisabled || null\"\n        [attr.maxLength]=\"controller.maxLength\"\n        [attr.name]=\"name\"\n        [attr.aria-placeholder]=\"controller.exampleText\"\n        [attr.aria-invalid]=\"computedInvalid\"\n        [autocomplete]=\"controller.autocomplete\"\n        [type]=\"controller.type\"\n        [id]=\"id\"\n        [readOnly]=\"readOnly || !editable\"\n        [tuiInputMode]=\"controller.inputMode\"\n        [tuiFocusable]=\"computedFocusable\"\n        [tuiDescribedBy]=\"id\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onModelChange($event)\"\n    />\n    <div\n        *ngIf=\"inputHidden\"\n        automation-id=\"tui-primitive-textfield__value\"\n        class=\"t-input t-input_template\"\n    >\n        <ng-content select=\"[polymorpheus-outlet]\"></ng-content>\n    </div>\n    <div class=\"t-content\">\n        <div\n            *ngIf=\"iconAlignLeft\"\n            polymorpheus-outlet\n            class=\"t-icon t-icon_left\"\n            [content]=\"iconContent\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-iconSrc>\n                <tui-svg [src]=\"iconSrc\"></tui-svg>\n            </ng-template>\n        </div>\n        <div class=\"t-wrapper\">\n            <label\n                *ngIf=\"hasPlaceholder\"\n                automation-id=\"tui-primitive-textfield__placeholder\"\n                class=\"t-placeholder\"\n                [class.t-placeholder_raised]=\"placeholderRaised\"\n                [for]=\"computedId\"\n            >\n                <ng-content></ng-content>\n            </label>\n            <div class=\"t-wrapper-value-decoration\">\n                <tui-value-decoration\n                    #decor\n                    automation-id=\"tui-primitive-textfield__value-decoration\"\n                    aria-hidden=\"true\"\n                    class=\"t-value-decoration\"\n                    [class.t-has-value]=\"value\"\n                    [style.textIndent.px]=\"getIndent$(focusableElement) | async\"\n                ></tui-value-decoration>\n            </div>\n        </div>\n        <div\n            *ngIf=\"hasCustomContent\"\n            polymorpheus-outlet\n            automation-id=\"tui-primitive-textfield__custom-content\"\n            class=\"t-custom-content\"\n            [content]=\"controller.customContent\"\n        >\n            <ng-template let-iconSrc>\n                <tui-svg\n                    class=\"t-custom-icon\"\n                    [src]=\"iconSrc\"\n                ></tui-svg>\n            </ng-template>\n        </div>\n        <span\n            *ngIf=\"hasCleaner\"\n            polymorpheus-outlet\n            automation-id=\"tui-primitive-textfield__cleaner\"\n            class=\"t-cleaner\"\n            [content]=\"iconCleaner\"\n            (click.stop)=\"clear()\"\n        >\n            <ng-template let-icon>\n                <tui-svg [src]=\"icon\"></tui-svg>\n            </ng-template>\n        </span>\n        <tui-tooltip\n            *ngIf=\"hasTooltip\"\n            automation-id=\"tui-primitive-textfield__tooltip\"\n            [describeId]=\"computedId\"\n            [content]=\"hintController.content || ''\"\n            [direction]=\"hintController.direction\"\n            [mode]=\"hintController.mode\"\n            [showDelay]=\"hintController.showDelay\"\n            [hideDelay]=\"hintController.hideDelay\"\n        ></tui-tooltip>\n        <div\n            *ngIf=\"iconAlignRight\"\n            polymorpheus-outlet\n            class=\"t-icon\"\n            [content]=\"iconContent\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-iconSrc>\n                <tui-svg [src]=\"iconSrc\"></tui-svg>\n            </ng-template>\n        </div>\n    </div>\n</tui-wrapper>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_PRIMITIVE_TEXTFIELD_PROVIDERS,
        host: {
            '($.data-mode.attr)': 'mode$',
            '[class._autofilled]': 'autofilled',
            '[class._label-outside]': 'controller.labelOutside',
        },
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;border-radius:var(--tui-radius-m);text-align:left}:host[data-size='s']{height:var(--tui-height-s);min-height:var(--tui-height-s);max-height:var(--tui-height-s)}:host[data-size='m']{height:var(--tui-height-m);min-height:var(--tui-height-m);max-height:var(--tui-height-m)}:host[data-size='l']{height:var(--tui-height-l);min-height:var(--tui-height-l);max-height:var(--tui-height-l);font:var(--tui-font-text-m);line-height:1.25rem}.t-input{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;padding:0 var(--tui-padding-m);border:solid transparent;border-width:0 var(--border-end,0) 0 var(--border-start,0);border-inline-start-width:var(--border-start,0);border-inline-end-width:var(--border-end,0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}.t-input:-webkit-autofill,.t-input:-webkit-autofill:focus,.t-input:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}.t-input :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill,.t-input :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill:focus,.t-input :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill:hover,.t-input :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill,.t-input :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill:focus,.t-input :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill:hover,:host[data-mode=onDark] .t-input:-webkit-autofill,:host[data-mode=onDark] .t-input:-webkit-autofill:focus,:host[data-mode=onDark] .t-input:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}.t-input :host-context(tui-primitive-textfield[data-size='s']):not(tui-primitive-textfield),.t-input :host-context(tui-text-area[data-size='s']):not(tui-text-area),:host[data-size='s'] .t-input{padding:0 var(--tui-padding-s)}.t-input :host-context(tui-primitive-textfield[data-size='l']):not(tui-primitive-textfield),.t-input :host-context(tui-text-area[data-size='l']):not(tui-text-area),:host[data-size='l'] .t-input{padding:0 var(--tui-padding-l)}.t-input :host-context(tui-primitive-textfield._disabled),.t-input :host-context(tui-text-area._disabled),:host._disabled .t-input{pointer-events:none}.t-input :host-context(tui-primitive-textfield[data-size='l']:not(._label-outside)):not(tui-primitive-textfield),:host[data-size='l']:not(._label-outside) .t-input{padding-top:1.25rem}.t-input :host-context(tui-primitive-textfield[data-size='l']:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder,:host[data-size='l']:not(._label-outside) .t-input:-webkit-autofill+.t-content .t-placeholder{font-size:.8156rem;transform:translateY(-.625rem)}.t-input :host-context(tui-primitive-textfield[data-size='m']:not(._label-outside)):not(tui-primitive-textfield),:host[data-size='m']:not(._label-outside) .t-input{padding-top:1.125rem}.t-input :host-context(tui-primitive-textfield[data-size='m']:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder,:host[data-size='m']:not(._label-outside) .t-input:-webkit-autofill+.t-content .t-placeholder{font-size:.69rem;transform:translateY(-.5rem)}.t-input :host-context(tui-primitive-textfield._hidden),:host._hidden input.t-input{opacity:0;text-indent:-10em;-webkit-user-select:none}.t-content{display:flex;height:100%;width:100%;padding:0 var(--tui-padding-m);box-sizing:border-box;align-items:center;overflow:hidden}:host[data-size='s'] .t-content{padding:0 var(--tui-padding-s)}:host[data-size='l'] .t-content{padding:0 var(--tui-padding-l)}.t-content:after{content:'';margin-right:-.25rem}:host[data-size='m'] .t-content:after{display:none}.t-wrapper{flex:1;min-width:0;padding-right:.25rem;-webkit-padding-end:.25rem;padding-inline-end:.25rem;-webkit-padding-start:0;padding-inline-start:0}.t-placeholder{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0)}.t-placeholder_raised{transform:translateY(-.625rem)}:host[data-size='m'] .t-placeholder_raised{font:var(--tui-font-text-xs);transform:translateY(-.5rem);letter-spacing:.025rem}:host._invalid:not(._focused) .t-placeholder_raised,:host._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill)}:host[data-mode=onDark]._invalid:not(._focused) .t-placeholder_raised,:host[data-mode=onDark]._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill-night)}:host._focused .t-placeholder,:host[data-size='l']._focused._label-outside .t-placeholder,:host[data-size='m']._focused._label-outside .t-placeholder{color:var(--tui-text-03)}:host[data-size='l'] .t-placeholder{font-size:.9375rem}:host[data-size='l'] .t-placeholder_raised{font-size:.8156rem}:host[data-size='l']._focused:not(._label-outside) .t-placeholder,:host[data-size='m']._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01)}:host[data-mode=onDark] .t-placeholder{color:var(--tui-text-02-night)}:host[data-size='l'][data-mode=onDark]._focused:not(._label-outside) .t-placeholder,:host[data-size='m'][data-mode=onDark]._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01-night)}:host[data-mode=onDark]._focused .t-placeholder,:host[data-size='l'][data-mode=onDark]._focused._label-outside .t-placeholder,:host[data-size='m'][data-mode=onDark]._focused._label-outside .t-placeholder{color:var(--tui-text-02-night)}@supports (-webkit-hyphens:none){.t-placeholder{will-change:unset;transition-property:transform,color,letter-spacing}}.t-cleaner{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;color:var(--tui-text-03);position:relative;box-sizing:border-box;cursor:pointer;transition-property:color,transform}.t-cleaner:hover{color:var(--tui-text-02)}:host._disabled .t-cleaner,:host._readonly .t-cleaner{pointer-events:none}:host[data-mode=onDark] .t-cleaner{color:var(--tui-text-03-night)}:host[data-mode=onDark] .t-cleaner:hover{color:var(--tui-text-01-night)}.t-icon{display:flex;align-items:center;justify-content:center;color:var(--tui-text-03)}.t-icon_left{margin:0 .5rem 0 -.25rem;-webkit-margin-start:-.25rem;margin-inline-start:-.25rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}:host[data-size='s'] .t-icon_left{margin-right:.25rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem}:host._autofilled .t-value-decoration:not(.t-has-value){visibility:hidden}:host._autofilled[data-size='m']:not(._focused) .t-placeholder,:host._autofilled[data-size='s']:not(._focused) .t-placeholder{visibility:hidden}.t-custom-content{position:relative;display:flex;align-items:center;justify-content:center;min-width:2rem;height:2rem;margin-right:.25rem;pointer-events:none}.t-custom-icon{width:2rem;height:100%}.t-icon{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;color:var(--tui-text-03);box-sizing:border-box;cursor:pointer;transition-property:color,transform;position:relative;pointer-events:none}.t-icon:hover{color:var(--tui-text-02)}:host._disabled .t-icon,:host._readonly .t-icon{pointer-events:none}:host[data-mode=onDark] .t-icon{color:var(--tui-text-03-night)}:host[data-mode=onDark] .t-icon:hover{color:var(--tui-text-01-night)}:host:hover:not(._readonly) .t-icon{color:var(--tui-text-02)}:host[data-mode=onDark]:hover:not(._readonly) .t-icon{color:var(--tui-text-01-night)}:host[data-mode=onLight]:hover:not(._readonly) .t-icon{color:var(--tui-text-01)}.t-input:not(:first-child){display:none}:host[data-size] .t-input_template{display:flex;width:calc(100% - 1rem);max-width:calc(100% - 1rem);align-items:center;pointer-events:none;-webkit-padding-end:0;padding-inline-end:0}.t-input:-webkit-autofill,.t-input:-webkit-autofill::first-line{font-size:inherit;line-height:inherit}.t-input::-webkit-caps-lock-indicator,.t-input::-webkit-contacts-auto-fill-button,.t-input::-webkit-credentials-auto-fill-button,.t-input::-webkit-credit-card-auto-fill-button,.t-input::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:0 0!important;pointer-events:none!important}.t-text-template{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-wrapper-value-decoration{position:relative;pointer-events:none}"]
    }),
    __param(0, Inject(TUI_MODE)),
    __param(1, Inject(TUI_TEXTFIELD_APPEARANCE)),
    __param(2, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER)),
    __param(3, Inject(TUI_HINT_WATCHED_CONTROLLER)),
    __param(4, Inject(TUI_PRIMITIVE_TEXTFIELD_OPTIONS)),
    __param(5, Inject(ElementRef))
], TuiPrimitiveTextfieldComponent);

var TuiPrimitiveTextfieldDirective_1;
let TuiPrimitiveTextfieldDirective = TuiPrimitiveTextfieldDirective_1 = class TuiPrimitiveTextfieldDirective extends TuiAbstractTextfieldHost {
    constructor(textfield) {
        /**
         * TuiPrimitiveTextfieldComponent satisfies all required parts of
         * AbstractTuiControl interface. A new interface is not introduced
         * so AbstractTuiControl is automatically injected for all other controls.
         */
        super(textfield);
        this.textfield = textfield;
    }
    get readOnly() {
        return this.textfield.readOnly || !this.textfield.editable;
    }
    onValueChange(value) {
        this.textfield.onModelChange(value);
    }
};
TuiPrimitiveTextfieldDirective.ctorParameters = () => [
    { type: TuiPrimitiveTextfieldComponent, decorators: [{ type: Inject, args: [TuiPrimitiveTextfieldComponent,] }] }
];
TuiPrimitiveTextfieldDirective = TuiPrimitiveTextfieldDirective_1 = __decorate([
    Directive({
        selector: 'tui-primitive-textfield',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiPrimitiveTextfieldDirective_1),
            },
        ],
    }),
    __param(0, Inject(TuiPrimitiveTextfieldComponent))
], TuiPrimitiveTextfieldDirective);

// @dynamic
let TuiTextfieldComponent = class TuiTextfieldComponent {
    constructor(host, controller, elementRef, describedBy, idService) {
        this.host = host;
        this.controller = controller;
        this.elementRef = elementRef;
        this.describedBy = describedBy;
        this.idService = idService;
        this.host.process(this.elementRef.nativeElement);
    }
    get computedDescribedBy() {
        return this.describedBy.computedDescribedBy;
    }
    get id() {
        return this.elementRef.nativeElement.id || this.idService.generate();
    }
    ngDoCheck() {
        this.describedBy.tuiDescribedBy = this.id;
    }
};
TuiTextfieldComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_HOST,] }] },
    { type: TuiTextfieldController$1, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER$1,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiDescribedByDirective, decorators: [{ type: Inject, args: [TuiDescribedByDirective,] }] },
    { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
];
__decorate([
    HostBinding('attr.aria-describedby')
], TuiTextfieldComponent.prototype, "computedDescribedBy", null);
__decorate([
    HostBinding('id')
], TuiTextfieldComponent.prototype, "id", null);
TuiTextfieldComponent = __decorate([
    Component({
        selector: 'input[tuiTextfield], textarea[tuiTextfield]',
        template: '',
        providers: [
            TuiDescribedByDirective,
            TUI_DESCRIBED_BY_PROVIDERS,
            TEXTFIELD_CONTROLLER_PROVIDER$1,
        ],
        host: {
            type: 'text',
            '[attr.aria-placeholder]': 'controller.exampleText',
            '[attr.aria-invalid]': 'host.invalid',
            '[attr.disabled]': 'host.disabled || null',
            '[tabIndex]': 'host.focusable ? 0 : -1',
            '[readOnly]': 'host.readOnly',
            '[value]': 'host.value',
            '(input)': 'host.onValueChange($event.target.value)',
        },
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;padding:0 var(--tui-padding-m);border:solid transparent;border-width:0 var(--border-end,0) 0 var(--border-start,0);border-inline-start-width:var(--border-start,0);border-inline-end-width:var(--border-end,0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}:host:-webkit-autofill,:host:-webkit-autofill:focus,:host:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill,:host :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill:focus,:host :host-context(tui-primitive-textfield[data-mode=onDark]):-webkit-autofill:hover,:host :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill,:host :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill:focus,:host :host-context(tui-text-area[data-mode=onDark]):-webkit-autofill:hover,:host[data-mode=onDark] :host:-webkit-autofill,:host[data-mode=onDark] :host:-webkit-autofill:focus,:host[data-mode=onDark] :host:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}:host :host-context(tui-primitive-textfield[data-size='s']):not(tui-primitive-textfield),:host :host-context(tui-text-area[data-size='s']):not(tui-text-area),:host[data-size='s'] :host{padding:0 var(--tui-padding-s)}:host :host-context(tui-primitive-textfield[data-size='l']):not(tui-primitive-textfield),:host :host-context(tui-text-area[data-size='l']):not(tui-text-area),:host[data-size='l'] :host{padding:0 var(--tui-padding-l)}:host :host-context(tui-primitive-textfield._disabled),:host :host-context(tui-text-area._disabled),:host._disabled :host{pointer-events:none}:host :host-context(tui-primitive-textfield[data-size='l']:not(._label-outside)):not(tui-primitive-textfield),:host[data-size='l']:not(._label-outside) :host{padding-top:1.25rem}:host :host-context(tui-primitive-textfield[data-size='l']:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder,:host[data-size='l']:not(._label-outside) :host:-webkit-autofill+.t-content .t-placeholder{font-size:.8156rem;transform:translateY(-.625rem)}:host :host-context(tui-primitive-textfield[data-size='m']:not(._label-outside)):not(tui-primitive-textfield),:host[data-size='m']:not(._label-outside) :host{padding-top:1.125rem}:host :host-context(tui-primitive-textfield[data-size='m']:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder,:host[data-size='m']:not(._label-outside) :host:-webkit-autofill+.t-content .t-placeholder{font-size:.69rem;transform:translateY(-.5rem)}:host :host-context(tui-primitive-textfield._hidden),:host._hidden input:host{opacity:0;text-indent:-10em;-webkit-user-select:none}:host::-ms-input-placeholder{color:var(--tui-text-03);opacity:0}:host::placeholder{color:var(--tui-text-03);opacity:0}:host :host-context(tui-primitive-textfield[data-mode=onDark])::-ms-input-placeholder,:host :host-context(tui-text-area[data-mode=onDark])::-ms-input-placeholder{color:var(--tui-text-03-night)}:host :host-context(tui-primitive-textfield[data-mode=onDark])::placeholder,:host :host-context(tui-text-area[data-mode=onDark])::placeholder{color:var(--tui-text-03-night)}:host :host-context(tui-primitive-textfield._focused:not(._readonly))::-ms-input-placeholder,:host :host-context(tui-text-area._focused:not(._readonly))::-ms-input-placeholder{opacity:1}:host :host-context(tui-primitive-textfield._focused:not(._readonly))::placeholder,:host :host-context(tui-text-area._focused:not(._readonly))::placeholder{opacity:1}:host::-webkit-caps-lock-indicator,:host::-webkit-contacts-auto-fill-button,:host::-webkit-credentials-auto-fill-button,:host::-webkit-credit-card-auto-fill-button,:host::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:0 0!important;pointer-events:none!important}textarea:host{white-space:normal}textarea:host :host-context(tui-text-area._ios){padding-left:.8125rem}"]
    }),
    __param(0, Inject(TUI_TEXTFIELD_HOST)),
    __param(1, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER$1)),
    __param(2, Inject(ElementRef)),
    __param(3, Inject(TuiDescribedByDirective)),
    __param(4, Inject(TuiIdService))
], TuiTextfieldComponent);

let TuiValueDecorationComponent = class TuiValueDecorationComponent {
    constructor(textfield, controller) {
        this.textfield = textfield;
        this.controller = controller;
        this.prefix$ = new BehaviorSubject('');
        this.pre$ = this.prefix$.pipe(delay(0), filter(() => { var _a; return !!((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.isConnected); }), distinctUntilChanged(), map(() => { var _a; return ((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) || 0; }));
    }
    get isContextTable() {
        return this.textfield.appearance === "table" /* Table */;
    }
    get value() {
        return this.textfield.value;
    }
    get filler() {
        const { focused, placeholder, exampleText, value, textfield } = this;
        if (placeholder && exampleText) {
            return '';
        }
        return focused ? exampleText || textfield.filler.slice(value.length) : '';
    }
    get prefix() {
        return this.decorationsVisible ? this.textfield.prefix : '';
    }
    get postfix() {
        return this.decorationsVisible ? this.computedPostfix : '';
    }
    ngDoCheck() {
        this.prefix$.next(this.prefix);
    }
    get placeholder() {
        var _a;
        return ((_a = this.textfield.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) || '';
    }
    get exampleText() {
        const exampleText = this.controller.exampleText || this.placeholder;
        return !this.value && this.focused ? exampleText : '';
    }
    get decorationsVisible() {
        return !!this.value || this.focused;
    }
    get focused() {
        return this.textfield.computedFocused && !this.textfield.readOnly;
    }
    get computedPostfix() {
        return this.textfield.postfix && (this.filler || this.value)
            ? ` ${this.textfield.postfix}`
            : this.textfield.postfix;
    }
};
TuiValueDecorationComponent.ctorParameters = () => [
    { type: TuiPrimitiveTextfieldComponent, decorators: [{ type: Inject, args: [TuiPrimitiveTextfieldComponent,] }] },
    { type: TuiTextfieldController$1, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER$1,] }] }
];
__decorate([
    ViewChild('pre', { read: ElementRef, static: true })
], TuiValueDecorationComponent.prototype, "pre", void 0);
__decorate([
    HostBinding('class._table')
], TuiValueDecorationComponent.prototype, "isContextTable", null);
__decorate([
    HostListener('animationstart')
], TuiValueDecorationComponent.prototype, "ngDoCheck", null);
TuiValueDecorationComponent = __decorate([
    Component({
        selector: 'tui-value-decoration',
        template: "<span\n    #pre\n    class=\"t-prefix t-inline\"\n    [textContent]=\"prefix\"\n></span>\n<span\n    class=\"t-ghost t-inline\"\n    [textContent]=\"value\"\n></span>\n<span\n    class=\"t-filler t-inline\"\n    [textContent]=\"filler\"\n></span>\n<span\n    class=\"t-postfix t-inline\"\n    [textContent]=\"postfix\"\n></span>\n",
        // It follows Change Detection of PrimitiveTextfield
        changeDetection: ChangeDetectionStrategy.Default,
        styles: [":host{position:absolute;display:block;height:1.25rem;line-height:1;width:100%;margin:-1.25rem 0;padding:.625rem 0;box-sizing:content-box;color:var(--tui-text-01);animation:1s tuiPresent}:host._table{position:static}:host-context(tui-textfield[data-mode=onDark]) :host{color:var(--tui-text-01-night)}:host:after{content:'';display:inline-block;vertical-align:middle;height:100%}.t-ghost{visibility:hidden;white-space:pre;text-overflow:clip}.t-postfix,.t-prefix{white-space:pre}.t-filler{overflow:hidden;color:var(--tui-text-03);text-overflow:ellipsis;max-width:100%;white-space:nowrap}:host-context(tui-textfield[data-mode=onDark]) .t-filler{color:var(--tui-text-03-night)}.t-inline{display:inline-block;vertical-align:middle}"]
    }),
    __param(0, Inject(TuiPrimitiveTextfieldComponent)),
    __param(1, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER$1))
], TuiValueDecorationComponent);

let TuiPrimitiveTextfieldModule = class TuiPrimitiveTextfieldModule {
};
TuiPrimitiveTextfieldModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiMaskAccessorModule,
            TuiFocusableModule,
            TuiHoveredModule,
            TuiInputModeModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiTooltipModule,
            TuiAutofilledModule,
            TuiDescribedByModule,
        ],
        declarations: [
            TuiPrimitiveTextfieldComponent,
            TuiPrimitiveTextfieldDirective,
            TuiTextfieldComponent,
            TuiValueDecorationComponent,
        ],
        exports: [
            TuiPrimitiveTextfieldComponent,
            TuiPrimitiveTextfieldDirective,
            TuiTextfieldComponent,
        ],
    })
], TuiPrimitiveTextfieldModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS, TUI_PRIMITIVE_TEXTFIELD_ICON_CLEANER, TUI_PRIMITIVE_TEXTFIELD_OPTIONS, TUI_PRIMITIVE_TEXTFIELD_PROVIDERS, TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldDirective, TuiPrimitiveTextfieldModule, TuiTextfieldComponent, TuiValueDecorationComponent, tuiPrimitiveTextfieldOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-primitive-textfield.js.map
