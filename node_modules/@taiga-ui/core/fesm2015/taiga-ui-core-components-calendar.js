import { __decorate } from 'tslib';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { TuiMonth, ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, nullableSame, tuiDefaultProp, TuiMapperPipeModule } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER } from '@taiga-ui/core/constants';
import { CommonModule } from '@angular/common';
import { TuiPrimitiveCalendarModule } from '@taiga-ui/core/components/primitive-calendar';
import { TuiPrimitiveYearPickerModule } from '@taiga-ui/core/components/primitive-year-picker';
import { TuiScrollbarModule } from '@taiga-ui/core/components/scrollbar';
import { TuiPrimitiveYearMonthPaginationModule } from '@taiga-ui/core/internal/primitive-year-month-pagination';

// @dynamic
let TuiCalendarComponent = class TuiCalendarComponent {
    constructor() {
        this.month = TuiMonth.currentLocal();
        this.value = null;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.minViewedMonth = TUI_FIRST_DAY;
        this.maxViewedMonth = TUI_LAST_DAY;
        this.hoveredItem = null;
        this.showAdjacent = true;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.dayClick = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.hoveredItemChange = new EventEmitter();
        this.year = null;
        this.disabledItemHandlerMapper = (disabledItemHandler, min, max) => item => item.dayBefore(min) || item.dayAfter(max) || disabledItemHandler(item);
    }
    get computedMinViewedMonth() {
        return this.minViewedMonth.monthSameOrAfter(this.min)
            ? this.minViewedMonth
            : this.min;
    }
    get computedMaxViewedMonth() {
        return this.maxViewedMonth.monthSameOrBefore(this.max)
            ? this.maxViewedMonth
            : this.max;
    }
    onPaginationYearClick(year) {
        this.year = year;
    }
    onPickerYearClick({ year }) {
        this.year = null;
        this.updateViewedMonth(new TuiMonth(year, this.month.month));
    }
    onPaginationValueChange(month) {
        this.updateViewedMonth(month);
    }
    onDayClick(day) {
        this.dayClick.emit(day);
    }
    onHoveredItemChange(day) {
        this.updateHoveredDay(day);
    }
    updateViewedMonth(month) {
        if (this.month.monthSame(month)) {
            return;
        }
        this.month = month;
        this.monthChange.emit(month);
    }
    updateHoveredDay(day) {
        if (nullableSame(this.hoveredItem, day, (a, b) => a.daySame(b))) {
            return;
        }
        this.hoveredItem = day;
        this.hoveredItemChange.emit(day);
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "month", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "minViewedMonth", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "maxViewedMonth", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "hoveredItem", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "showAdjacent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarComponent.prototype, "markerHandler", void 0);
__decorate([
    Output()
], TuiCalendarComponent.prototype, "dayClick", void 0);
__decorate([
    Output()
], TuiCalendarComponent.prototype, "monthChange", void 0);
__decorate([
    Output()
], TuiCalendarComponent.prototype, "hoveredItemChange", void 0);
TuiCalendarComponent = __decorate([
    Component({
        selector: 'tui-calendar',
        template: "<tui-scrollbar\n    *ngIf=\"year; else calendar\"\n    automation-id=\"tui-calendar__scrollbar\"\n    class=\"t-scrollbar\"\n>\n    <tui-primitive-year-picker\n        automation-id=\"tui-calendar__year\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [initialItem]=\"year\"\n        [value]=\"value\"\n        (yearClick)=\"onPickerYearClick($event)\"\n    ></tui-primitive-year-picker>\n</tui-scrollbar>\n<ng-template #calendar>\n    <tui-primitive-year-month-pagination\n        automation-id=\"tui-calendar__pagination\"\n        class=\"t-pagination\"\n        [min]=\"computedMinViewedMonth\"\n        [max]=\"computedMaxViewedMonth\"\n        [value]=\"month\"\n        (valueChange)=\"onPaginationValueChange($event)\"\n        (yearClick)=\"onPaginationYearClick($event)\"\n    ></tui-primitive-year-month-pagination>\n    <tui-primitive-calendar\n        automation-id=\"tui-calendar__calendar\"\n        [showAdjacent]=\"showAdjacent\"\n        [value]=\"value\"\n        [month]=\"month\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerMapper:min:max\"\n        [markerHandler]=\"markerHandler\"\n        [hoveredItem]=\"hoveredItem\"\n        (hoveredItemChange)=\"onHoveredItemChange($event)\"\n        (dayClick)=\"onDayClick($event)\"\n    ></tui-primitive-calendar>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;height:18.25rem;width:15.75rem;padding:1rem 1.125rem;box-sizing:content-box}.t-scrollbar{height:18.25rem;width:16.875rem}.t-pagination{margin-bottom:1rem}"]
    })
], TuiCalendarComponent);

let TuiCalendarModule = class TuiCalendarModule {
};
TuiCalendarModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TuiPrimitiveYearMonthPaginationModule,
            TuiPrimitiveCalendarModule,
            TuiPrimitiveYearPickerModule,
            TuiScrollbarModule,
            TuiMapperPipeModule,
        ],
        declarations: [TuiCalendarComponent],
        exports: [TuiCalendarComponent],
    })
], TuiCalendarModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCalendarComponent, TuiCalendarModule };
//# sourceMappingURL=taiga-ui-core-components-calendar.js.map
