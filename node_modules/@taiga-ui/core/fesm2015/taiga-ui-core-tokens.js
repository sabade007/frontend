import { InjectionToken, inject, isDevMode, NgZone, ElementRef } from '@angular/core';
import { extractI18n } from '@taiga-ui/i18n';
import { iconsPathFactory, tuiIsMobile } from '@taiga-ui/core/utils';
import { WINDOW } from '@ng-web-apis/common';
import { typedFromEvent, tuiZoneOptimized, CHAR_NO_BREAK_SPACE, TUI_SANITIZER as TUI_SANITIZER$1 } from '@taiga-ui/cdk';
import { share, startWith, map, distinctUntilChanged } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import { svgLinearGradientProcessor } from '@taiga-ui/cdk/utils/svg';
import { identity } from 'rxjs';

const TUI_ANIMATIONS_DURATION = new InjectionToken(`Duration of all Taiga UI animations in ms`, {
    factory: () => 300,
});

const TUI_ANIMATION_OPTIONS = new InjectionToken(`Options for Taiga UI animations`, {
    factory: () => ({
        params: {
            duration: inject(TUI_ANIMATIONS_DURATION),
        },
    }),
});

const TUI_ASSERT_ENABLED = new InjectionToken(`Flag to enable assertions across Taiga UI`, {
    factory: () => isDevMode(),
});

const TUI_DATA_LIST_ACCESSOR = new InjectionToken(`Accessor for options`);

const TUI_DATA_LIST_HOST = new InjectionToken(`DataList controller`);

const TUI_DOCUMENT_OR_SHADOW_ROOT = new InjectionToken(`Document or ShadowRoot`);

const TUI_DROPDOWN_DIRECTIVE = new InjectionToken(`Directive controlling TuiDropdownBoxComponent`);

const TUI_ELEMENT_REF = new InjectionToken(`ElementRef when you cannot use @Input for single time injection`);

const TUI_FIRST_DAY_OF_WEEK = new InjectionToken(`The first day of the week index`, {
    factory: () => 1 /* Monday */,
});

const TUI_MONTHS = new InjectionToken(`Localized months names`, {
    factory: extractI18n(`months`),
});
const TUI_CLOSE_WORD = new InjectionToken(`i18n 'close' word`, {
    factory: extractI18n(`close`),
});
const TUI_NOTHING_FOUND_MESSAGE = new InjectionToken(`i18n 'Nothing found' message`, {
    factory: extractI18n(`nothingFoundMessage`),
});
const TUI_DEFAULT_ERROR_MESSAGE = new InjectionToken(`i18n of error message`, {
    factory: extractI18n(`defaultErrorMessage`),
});
const TUI_SPIN_TEXTS = new InjectionToken(`spin i18n texts`, {
    factory: extractI18n(`spinTexts`),
});
const TUI_SHORT_WEEK_DAYS = new InjectionToken(`calendars i18n texts`, {
    factory: extractI18n(`shortWeekDays`),
});

const TUI_ICONS_PLACE = new InjectionToken(`Recommended paths to icons from documentation guide`, {
    factory: () => `assets/taiga-ui/icons`,
});

const TUI_ICONS = new InjectionToken(`A key/value dictionary of icon names and src to be defined with TuiSvgService`, {
    factory: () => ({}),
});

const TUI_ICONS_PATH = new InjectionToken(`A handler to retrieve USE id for icon by name`, { factory: () => iconsPathFactory(inject(TUI_ICONS_PLACE)) });

const TUI_MEDIA = new InjectionToken(`Token for media constant`, {
    factory: () => ({
        mobile: 768,
        desktopSmall: 1024,
        desktopLarge: 1280,
    }),
});

const TUI_IS_MOBILE_RES = new InjectionToken(`Mobile resolution stream for private providers`, {
    factory: () => {
        const windowRef = inject(WINDOW);
        const media = inject(TUI_MEDIA);
        return typedFromEvent(windowRef, `resize`).pipe(share(), startWith(null), map(() => tuiIsMobile(windowRef, media)), distinctUntilChanged(), tuiZoneOptimized(inject(NgZone)));
    },
});

const TUI_MODE = new InjectionToken(`Mode stream for private providers`);

/** Default values for the notification options. */
const TUI_NOTIFICATION_DEFAULT_OPTIONS = {
    autoClose: true,
    label: ``,
    status: "info" /* Info */,
    hasIcon: true,
    hasCloseButton: true,
    defaultAutoCloseTime: 3000,
};
const TUI_NOTIFICATION_OPTIONS = new InjectionToken(`Default parameters for notification alert component`, {
    factory: () => TUI_NOTIFICATION_DEFAULT_OPTIONS,
});
function tuiNotificationOptionsProvider(options) {
    return {
        provide: TUI_NOTIFICATION_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_NOTIFICATION_DEFAULT_OPTIONS), options),
    };
}

const TUI_NUMBER_FORMAT = new InjectionToken(`Formatting configuration for displayed numbers`, {
    factory: () => ({
        decimalSeparator: `,`,
        thousandSeparator: CHAR_NO_BREAK_SPACE,
        zeroPadding: true,
    }),
});

const TUI_OPTION_CONTENT = new InjectionToken(`Content for tuiOption component`);

// TODO: 3.0 Remove export in ivy compilation
const convertToSundayFirstWeekFormat = (weekDaysNames) => {
    const sundayIndex = weekDaysNames.length - 1;
    return [
        weekDaysNames[sundayIndex],
        ...weekDaysNames.slice(0, sundayIndex),
    ];
};
const TUI_ORDERED_SHORT_WEEK_DAYS = new InjectionToken(`Ordered calendars i18n texts`, {
    factory: () => {
        const firstDayOfWeekIndex = inject(TUI_FIRST_DAY_OF_WEEK);
        return inject(TUI_SHORT_WEEK_DAYS).pipe(map(convertToSundayFirstWeekFormat), map(weekDays => [
            ...weekDays.slice(firstDayOfWeekIndex),
            ...weekDays.slice(0, firstDayOfWeekIndex),
        ]));
    },
});

const TUI_SANITIZER = TUI_SANITIZER$1;

/**
 * Scrollable container
 */
const TUI_SCROLL_REF = new InjectionToken(`[TUI_SCROLL_REF]`, {
    factory: () => new ElementRef(inject(DOCUMENT).documentElement),
});

const TUI_SVG_CONTENT_PROCESSOR = new InjectionToken(`Transform function the contents of the loaded svg file`, { factory: () => svgLinearGradientProcessor });

const TUI_SVG_SRC_PROCESSOR = new InjectionToken(`Source path processor for svg`, {
    factory: () => identity,
});

const TUI_TEXTFIELD_APPEARANCE = new InjectionToken(`Appearance for inputs`, {
    factory: () => "textfield" /* Textfield */,
});

const TUI_TEXTFIELD_HOST = new InjectionToken(`An interface to communicate with textfield based controls`);

const TUI_THEME = new InjectionToken(`Theme name`, {
    factory: () => `Taiga`,
});

const TUI_VALUE_ACCESSOR = new InjectionToken(`Buffer token to pass NG_VALUE_ACCESSOR to a different Injector`);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_ANIMATIONS_DURATION, TUI_ANIMATION_OPTIONS, TUI_ASSERT_ENABLED, TUI_CLOSE_WORD, TUI_DATA_LIST_ACCESSOR, TUI_DATA_LIST_HOST, TUI_DEFAULT_ERROR_MESSAGE, TUI_DOCUMENT_OR_SHADOW_ROOT, TUI_DROPDOWN_DIRECTIVE, TUI_ELEMENT_REF, TUI_FIRST_DAY_OF_WEEK, TUI_ICONS, TUI_ICONS_PATH, TUI_ICONS_PLACE, TUI_IS_MOBILE_RES, TUI_MEDIA, TUI_MODE, TUI_MONTHS, TUI_NOTHING_FOUND_MESSAGE, TUI_NOTIFICATION_DEFAULT_OPTIONS, TUI_NOTIFICATION_OPTIONS, TUI_NUMBER_FORMAT, TUI_OPTION_CONTENT, TUI_ORDERED_SHORT_WEEK_DAYS, TUI_SANITIZER, TUI_SCROLL_REF, TUI_SHORT_WEEK_DAYS, TUI_SPIN_TEXTS, TUI_SVG_CONTENT_PROCESSOR, TUI_SVG_SRC_PROCESSOR, TUI_TEXTFIELD_APPEARANCE, TUI_TEXTFIELD_HOST, TUI_THEME, TUI_VALUE_ACCESSOR, convertToSundayFirstWeekFormat, tuiNotificationOptionsProvider };
//# sourceMappingURL=taiga-ui-core-tokens.js.map
