import { DEFAULT_ICONS_PATH, tuiEditingKeys } from '@taiga-ui/core/constants';

/**
 * @deprecated has been deleted in 3.0, please use CSS variables
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function colorFallback(color) {
    switch (color) {
        case `secondary`:
            return `var(--tui-info-fill)`;
        case `error`:
            return `var(--tui-error-fill)`;
        case `success`:
            return `var(--tui-success-fill)`;
        default:
            return `var(--tui-${color || `base-05`})`;
    }
}

const ITEM_SIZE = 1.5;
const CONTENT_SIZE = 2.5;
/**
 * @deprecated: use {@link tuiGetBorder} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getBorder(hasIcon, hasCleaner = false, hasTooltip = false, hasContent = false) {
    let border = 0;
    if (hasIcon) {
        border += ITEM_SIZE;
    }
    if (hasCleaner) {
        border += ITEM_SIZE;
    }
    if (hasTooltip) {
        border += ITEM_SIZE;
    }
    if (hasContent) {
        border += CONTENT_SIZE;
    }
    return border;
}
const tuiGetBorder = getBorder;

/**
 * @deprecated: use {@link tuiIconsPathFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function iconsPathFactory(staticPath) {
    const base = staticPath[staticPath.length - 1] === `/` ? staticPath : `${staticPath}/`;
    return name => {
        if (name.startsWith(`tuiIcon`)) {
            return `${base}${name}.svg#${name}`;
        }
        return DEFAULT_ICONS_PATH(name);
    };
}
const tuiIconsPathFactory = iconsPathFactory;

/**
 * @deprecated: use {@link tuiIsEditingKey} instead
 * Check if pressed key is interactive in terms of input field
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isEditingKey(key) {
    return key.length === 1 || tuiEditingKeys.includes(key);
}
const tuiIsEditingKey = isEditingKey;

/**
 * @deprecated: use {@link tuiIsPresumedHTMLString} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isPresumedHTMLString(candidate) {
    const trimmed = candidate.trim();
    return trimmed.startsWith(`<`) && trimmed.endsWith(`>`);
}
const tuiIsPresumedHTMLString = isPresumedHTMLString;

const SIZES = [`xs`, `s`, `m`, `l`, `xl`, `xxl`];
/**
 * @deprecated: use {@link tuiSizeBigger} instead
 * Compares size constants to determine if first size is bigger than the second
 *
 * @param size size that we need to compare
 * @param biggerThanSize size to compare with, 's' by default
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function sizeBigger(size, biggerThanSize = `s`) {
    return SIZES.indexOf(size) > SIZES.indexOf(biggerThanSize);
}
const tuiSizeBigger = sizeBigger;

/**
 * Generated bundle index. Do not edit.
 */

export { colorFallback, getBorder, iconsPathFactory, isEditingKey, isPresumedHTMLString, sizeBigger, tuiGetBorder, tuiIconsPathFactory, tuiIsEditingKey, tuiIsPresumedHTMLString, tuiSizeBigger };
//# sourceMappingURL=taiga-ui-core-utils-miscellaneous.js.map
