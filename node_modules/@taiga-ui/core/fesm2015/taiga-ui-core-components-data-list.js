import { __decorate, __param } from 'tslib';
import { Optional, Inject, forwardRef, ElementRef, Self, Input, HostBinding, HostListener, Component, ChangeDetectionStrategy, ContentChildren, ViewEncapsulation, Directive, NgModule } from '@angular/core';
import { isNativeFocused, setNativeFocused, tuiDefaultProp, EMPTY_QUERY, itemsQueryListObservable, moveFocus, isNativeFocusedIn, setNativeMouseFocused, isPresent, tuiAssertIsHTMLElement, tuiPure, typedFromEvent, preventDefault, getClosestKeyboardFocusable } from '@taiga-ui/cdk';
import { TUI_OPTION_CONTENT, TUI_DATA_LIST_HOST, TUI_NOTHING_FOUND_MESSAGE, TUI_DATA_LIST_ACCESSOR } from '@taiga-ui/core/tokens';
import { Observable, merge, EMPTY } from 'rxjs';
import { map, switchMap, take, filter, tap, shareReplay, mapTo, debounceTime } from 'rxjs/operators';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { CommonModule } from '@angular/common';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// eslint-disable-next-line @typescript-eslint/naming-convention
function shouldFocus({ currentTarget, }) {
    return !isNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
let TuiOptionComponent = class TuiOptionComponent {
    // TODO: 3.0 Fix dataList type when updated to Ivy and compilation drops metadata
    constructor(content, dataList, elementRef, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.elementRef = elementRef;
        this.host = host;
        this.dropdown = dropdown;
        this.size = 'm';
        this.role = 'option';
        this.disabled = false;
    }
    get active() {
        return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
    }
    onClick() {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    }
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    onMouseMove({ currentTarget }) {
        setNativeFocused(currentTarget, true, true);
    }
    // Preventing focus loss upon focused option removal
    ngOnDestroy() {
        this.dataList.handleFocusLossIfNecessary(this.elementRef.nativeElement);
    }
};
TuiOptionComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_OPTION_CONTENT,] }] },
    { type: TuiDataListComponent, decorators: [{ type: Inject, args: [forwardRef(() => TuiDataListComponent),] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: TuiDropdownDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TuiDropdownDirective,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "size", void 0);
__decorate([
    Input(),
    HostBinding('attr.role'),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "role", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], TuiOptionComponent.prototype, "value", void 0);
__decorate([
    HostBinding('class._with-dropdown')
], TuiOptionComponent.prototype, "active", null);
__decorate([
    HostListener('click')
], TuiOptionComponent.prototype, "onClick", null);
__decorate([
    shouldCall(shouldFocus),
    HostListener('mousemove.init', ['$event']),
    HostListener('mousemove.silent', ['$event'])
], TuiOptionComponent.prototype, "onMouseMove", null);
TuiOptionComponent = __decorate([
    Component({
        selector: 'button[tuiOption], a[tuiOption]',
        template: "<span\n    *ngIf=\"content; else base\"\n    polymorpheus-outlet\n    class=\"t-content\"\n    [content]=\"content\"\n    [context]=\"{$implicit: base}\"\n></span>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg\n        *ngIf=\"dropdown\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-arrow\"\n    ></tui-svg>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            tabIndex: '-1',
            type: 'button',
            '[attr.disabled]': 'disabled || null',
        },
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:padding-box;font-size:inherit;line-height:inherit;transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;font:var(--tui-font-text-m);width:100%;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);outline:0;text-decoration:none;cursor:pointer}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host._with-dropdown,:host:focus{background-color:var(--tui-base-02)}:host[data-size=xs]{font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .75rem}:host[data-size='s']{min-height:2rem;padding:.3125rem .75rem}:host[data-size='m']{min-height:2.75rem;padding:.375rem 1rem}:host[data-size='l']{min-height:3.5rem;padding:.75rem 1rem}.t-content{display:flex;flex:1;max-width:100%}.t-arrow{margin:0 -.5rem 0 .75rem}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(TUI_OPTION_CONTENT)),
    __param(1, Inject(forwardRef(() => TuiDataListComponent))),
    __param(2, Inject(ElementRef)),
    __param(3, Optional()),
    __param(3, Inject(TUI_DATA_LIST_HOST)),
    __param(4, Optional()),
    __param(4, Self()),
    __param(4, Inject(TuiDropdownDirective))
], TuiOptionComponent);

var TuiDataListComponent_1;
// TODO: Consider aria-activedescendant for proper accessibility implementation
// @dynamic
let TuiDataListComponent = TuiDataListComponent_1 = class TuiDataListComponent {
    constructor(elementRef, defaultEmptyContent$) {
        this.elementRef = elementRef;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.options = EMPTY_QUERY;
        this.role = 'listbox';
        this.emptyContent = '';
    }
    get empty$() {
        return itemsQueryListObservable(this.options).pipe(map(({ length }) => !length));
    }
    onFocusIn(relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    }
    noop() { }
    onKeyDownArrow(current, step) {
        const { elements } = this;
        moveFocus(elements.indexOf(current), elements, step);
    }
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    handleFocusLossIfNecessary(element = this.elementRef.nativeElement) {
        if (this.origin && isNativeFocusedIn(element)) {
            setNativeMouseFocused(this.origin, true, true);
        }
    }
    getOptions(includeDisabled = false) {
        return this.options
            .toArray()
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(isPresent);
    }
    onFocus({ target }, top) {
        tuiAssertIsHTMLElement(target);
        const { elements } = this;
        moveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(target);
    }
    get elements() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiOption]'));
    }
};
TuiDataListComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_NOTHING_FOUND_MESSAGE,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => TuiOptionComponent), { descendants: true })
], TuiDataListComponent.prototype, "options", void 0);
__decorate([
    Input(),
    HostBinding('attr.role'),
    tuiDefaultProp()
], TuiDataListComponent.prototype, "role", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiDataListComponent.prototype, "emptyContent", void 0);
__decorate([
    tuiPure
], TuiDataListComponent.prototype, "empty$", null);
__decorate([
    HostListener('focusin', ['$event.relatedTarget', '$event.currentTarget'])
], TuiDataListComponent.prototype, "onFocusIn", null);
__decorate([
    HostListener('mousedown.prevent')
], TuiDataListComponent.prototype, "noop", null);
__decorate([
    HostListener('keydown.arrowDown.prevent', ['$event.target', '1']),
    HostListener('keydown.arrowUp.prevent', ['$event.target', '-1'])
], TuiDataListComponent.prototype, "onKeyDownArrow", null);
__decorate([
    HostListener('wheel.silent.passive'),
    HostListener('mouseleave', ['$event.target'])
], TuiDataListComponent.prototype, "handleFocusLossIfNecessary", null);
TuiDataListComponent = TuiDataListComponent_1 = __decorate([
    Component({
        selector: 'tui-data-list',
        template: "<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, true)\"\n></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    polymorpheus-outlet\n    class=\"t-empty\"\n    [content]=\"emptyContent || (defaultEmptyContent$ | async)\"\n></div>\n<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, false)\"\n></div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        providers: [
            {
                provide: TUI_DATA_LIST_ACCESSOR,
                useExisting: forwardRef(() => TuiDataListComponent_1),
            },
        ],
        styles: ["tui-data-list{display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:.5rem 0;color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list>.t-empty{margin:.75rem 1rem}tui-opt-group{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;font:var(--tui-font-text-xs);flex-direction:column;line-height:2rem}tui-opt-group:empty:after,tui-opt-group:empty:before{display:none}tui-opt-group:before{content:attr(data-label);padding:.5rem 1rem;color:var(--tui-text-02);line-height:1rem;white-space:normal}tui-opt-group:not(:empty)~tui-opt-group:before{padding:1.5rem 1rem .5rem}tui-opt-group:not(:empty)~tui-opt-group[data-label='']:before{padding:1rem 0 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:'';position:absolute;left:0;right:0;top:.5rem;height:1px;background:var(--tui-base-03)}tui-opt-group[data-label='']:before{padding:0 1rem}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TUI_NOTHING_FOUND_MESSAGE))
], TuiDataListComponent);

let TuiDataListDirective = class TuiDataListDirective {
};
TuiDataListDirective = __decorate([
    Directive({
        selector: 'ng-template[tuiDataList]',
    })
], TuiDataListDirective);

// TODO: 3.0 Move into separate module
let TuiDataListDropdownManagerDirective = class TuiDataListDropdownManagerDirective {
    constructor() {
        this.dropdowns = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    ngAfterViewInit() {
        this.right$.subscribe(index => {
            this.tryToFocus(index);
        });
        merge(this.immediate$, this.debounce$)
            .pipe(switchMap(active => {
            this.dropdowns.forEach((dropdown, index) => {
                dropdown.open = index === active;
            });
            const element = this.elements.toArray()[active];
            const dropdown = this.dropdowns.toArray()[active];
            if (!element || !dropdown || !dropdown.dropdownBoxRef) {
                return EMPTY;
            }
            const { nativeElement } = dropdown.dropdownBoxRef.location;
            const mouseEnter$ = typedFromEvent(nativeElement, 'mouseenter').pipe(take(1));
            const esc$ = merge(typedFromEvent(element.nativeElement, 'keydown'), typedFromEvent(nativeElement, 'keydown')).pipe(filter(({ keyCode }) => keyCode === 27));
            return merge(mouseEnter$, esc$).pipe(tap(event => {
                if (dropdown.dropdownBoxRef) {
                    event.stopPropagation();
                }
                setNativeFocused(element.nativeElement);
                // TODO: iframe warning
                dropdown.open = event instanceof MouseEvent;
            }));
        }))
            .subscribe();
    }
    get elements$() {
        return itemsQueryListObservable(this.elements).pipe(map(array => array.map(({ nativeElement }) => nativeElement)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    get right$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => typedFromEvent(element, 'keydown').pipe(filter(({ keyCode }) => keyCode === 39), preventDefault(), mapTo(index))))));
    }
    get immediate$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => typedFromEvent(element, 'click').pipe(mapTo(index))))));
    }
    get debounce$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => merge(typedFromEvent(element, 'focus'), typedFromEvent(element, 'blur')).pipe(filter(({ relatedTarget }) => this.notInDropdown(relatedTarget, index)), map(({ type }) => (type === 'focus' ? index : NaN)))))), debounceTime(300));
    }
    notInDropdown(element, index) {
        var _a;
        const dropdown = this.dropdowns.toArray()[index];
        return !((_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(element));
    }
    tryToFocus(index) {
        var _a;
        const dropdown = this.dropdowns.toArray()[index];
        const content = (_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef;
        if (!content) {
            return;
        }
        const item = getClosestKeyboardFocusable(content.nativeElement, false, content.nativeElement);
        if (item) {
            setNativeFocused(item);
        }
    }
};
__decorate([
    ContentChildren(TuiDropdownDirective, { descendants: true })
], TuiDataListDropdownManagerDirective.prototype, "dropdowns", void 0);
__decorate([
    ContentChildren(TuiDropdownDirective, { read: ElementRef, descendants: true })
], TuiDataListDropdownManagerDirective.prototype, "elements", void 0);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "right$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
TuiDataListDropdownManagerDirective = __decorate([
    Directive({
        selector: 'tui-data-list[tuiDataListDropdownManager]',
    })
], TuiDataListDropdownManagerDirective);

let TuiOptGroupDirective = class TuiOptGroupDirective {
    constructor() {
        this.label = '';
    }
};
__decorate([
    Input(),
    HostBinding('attr.data-label'),
    tuiDefaultProp()
], TuiOptGroupDirective.prototype, "label", void 0);
TuiOptGroupDirective = __decorate([
    Directive({
        selector: 'tui-opt-group',
        host: {
            role: 'group',
        },
    })
], TuiOptGroupDirective);

let TuiDataListModule = class TuiDataListModule {
};
TuiDataListModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiSvgModule, PolymorpheusModule],
        declarations: [
            TuiDataListComponent,
            TuiOptionComponent,
            TuiOptGroupDirective,
            TuiDataListDirective,
            TuiDataListDropdownManagerDirective,
        ],
        exports: [
            TuiDataListComponent,
            TuiOptionComponent,
            TuiOptGroupDirective,
            TuiDataListDirective,
            TuiDataListDropdownManagerDirective,
        ],
    })
], TuiDataListModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDataListComponent, TuiDataListDirective, TuiDataListDropdownManagerDirective, TuiDataListModule, TuiOptGroupDirective, TuiOptionComponent, shouldFocus };
//# sourceMappingURL=taiga-ui-core-components-data-list.js.map
