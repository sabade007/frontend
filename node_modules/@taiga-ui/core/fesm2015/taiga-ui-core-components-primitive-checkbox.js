import { InjectionToken, Inject, Input, HostBinding, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { __decorate, __param } from 'tslib';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { TuiWrapperModule } from '@taiga-ui/core/directives/wrapper';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the checkbox options. */
const TUI_CHECKBOX_DEFAULT_OPTIONS = {
    size: `m`,
    appearances: {
        unchecked: "outline" /* Outline */,
        checked: "primary" /* Primary */,
        indeterminate: "primary" /* Primary */,
    },
    icons: {
        checked({ $implicit }) {
            return $implicit === `m` ? `tuiIconCheck` : `tuiIconCheckLarge`;
        },
        indeterminate({ $implicit }) {
            return $implicit === `m` ? `tuiIconMinus` : `tuiIconMinusLarge`;
        },
    },
};
const TUI_CHECKBOX_OPTIONS = new InjectionToken(`Default parameters for checkbox component`, {
    factory: () => TUI_CHECKBOX_DEFAULT_OPTIONS,
});
const tuiCheckboxOptionsProvider = (options) => ({
    provide: TUI_CHECKBOX_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_CHECKBOX_DEFAULT_OPTIONS), options),
});

// @dynamic
let TuiPrimitiveCheckboxComponent = class TuiPrimitiveCheckboxComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    set valueSetter(value) {
        if (value !== false) {
            this.setCurrentIcon(value);
        }
        this.value = value;
    }
    get appearance() {
        switch (this.value) {
            case false:
                return this.options.appearances.unchecked;
            case true:
                return this.options.appearances.checked;
            default:
                return this.options.appearances.indeterminate;
        }
    }
    get empty() {
        return this.value === false;
    }
    setCurrentIcon(value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    }
};
TuiPrimitiveCheckboxComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_CHECKBOX_OPTIONS,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
__decorate([
    Input('value'),
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "valueSetter", null);
TuiPrimitiveCheckboxComponent = __decorate([
    Component({
        selector: 'tui-primitive-checkbox',
        template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focused]=\"focused\"\n    [hovered]=\"hovered\"\n    [pressed]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <span\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"{$implicit: size}\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                class=\"t-mark\"\n                [class.t-mark_on]=\"!empty\"\n                [src]=\"icon\"\n            ></tui-svg>\n        </ng-template>\n    </span>\n    <ng-content></ng-content>\n</tui-wrapper>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size='m']{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size='l']{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}"]
    }),
    __param(0, Inject(TUI_CHECKBOX_OPTIONS))
], TuiPrimitiveCheckboxComponent);

let TuiPrimitiveCheckboxModule = class TuiPrimitiveCheckboxModule {
};
TuiPrimitiveCheckboxModule = __decorate([
    NgModule({
        imports: [TuiSvgModule, TuiWrapperModule, PolymorpheusModule],
        declarations: [TuiPrimitiveCheckboxComponent],
        exports: [TuiPrimitiveCheckboxComponent],
    })
], TuiPrimitiveCheckboxModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_CHECKBOX_DEFAULT_OPTIONS, TUI_CHECKBOX_OPTIONS, TuiPrimitiveCheckboxComponent, TuiPrimitiveCheckboxModule, tuiCheckboxOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-primitive-checkbox.js.map
