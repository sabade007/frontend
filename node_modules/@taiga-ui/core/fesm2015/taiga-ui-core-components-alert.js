import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, HostBinding, Component, ChangeDetectionStrategy, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import { isNumber, TuiDestroyService, tuiPure, AbstractTuiDialogService, TuiIdService, TUI_ALERTS } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiSlideInRight, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { TUI_NOTIFICATION_OPTIONS, TUI_ANIMATION_OPTIONS } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { timer, fromEvent } from 'rxjs';
import { takeUntil, repeatWhen } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiNotificationModule } from '@taiga-ui/core/components/notification';
import { TuiIdService as TuiIdService$1 } from '@taiga-ui/cdk/services';

// TODO: 3.0 Refactor according to new context by 3.0 and get rid of $any in template
let TuiAlertComponent = class TuiAlertComponent {
    constructor(elementRef, destroy$, options, animationOptions, item) {
        this.elementRef = elementRef;
        this.destroy$ = destroy$;
        this.options = options;
        this.animationOptions = animationOptions;
        this.item = item;
        this.autoClose = typeof this.item.autoClose === 'function'
            ? this.item.autoClose(this.item.status)
            : this.item.autoClose;
        this.animation = Object.assign({ value: '' }, this.animationOptions);
    }
    ngOnInit() {
        this.initAutoClose();
    }
    get context() {
        return this.calculateContext(this.item);
    }
    closeNotification() {
        this.item.$implicit.complete();
    }
    calculateContext({ $implicit, status, data, label, }) {
        return {
            $implicit: status,
            data,
            label,
            closeHook: () => {
                $implicit.complete();
            },
            emitHook: (data) => {
                $implicit.next(data);
            },
            emitAndCloseHook: (data) => {
                $implicit.next(data);
                $implicit.complete();
            },
        };
    }
    initAutoClose() {
        if (!this.autoClose) {
            return;
        }
        timer(isNumber(this.autoClose) ? this.autoClose : this.options.defaultAutoCloseTime)
            .pipe(takeUntil(fromEvent(this.elementRef.nativeElement, 'mouseenter')), 
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(() => fromEvent(this.elementRef.nativeElement, 'mouseleave')), takeUntil(this.destroy$))
            .subscribe(() => this.closeNotification());
    }
};
TuiAlertComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_NOTIFICATION_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] }
];
__decorate([
    HostBinding('@tuiFadeIn'),
    HostBinding('@tuiSlideInRight'),
    HostBinding('@tuiHeightCollapse')
], TuiAlertComponent.prototype, "animation", void 0);
__decorate([
    tuiPure
], TuiAlertComponent.prototype, "calculateContext", null);
TuiAlertComponent = __decorate([
    Component({
        selector: 'tui-alert',
        template: "<tui-notification\n    *ngIf=\"item.hasCloseButton; else noClose\"\n    [status]=\"item.status\"\n    [hasIcon]=\"item.hasIcon\"\n    (close)=\"closeNotification()\"\n>\n    <label\n        *ngIf=\"item.label\"\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"t-heading\"\n        [content]=\"$any(item.label)\"\n        [context]=\"context\"\n    ></label>\n    <div\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__content\"\n        class=\"t-content\"\n        [content]=\"item.content\"\n        [context]=\"$any(context)\"\n    ></div>\n</tui-notification>\n<ng-template #noClose>\n    <tui-notification\n        [status]=\"item.status\"\n        [hasIcon]=\"item.hasIcon\"\n    >\n        <label\n            *ngIf=\"item.label\"\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__heading\"\n            class=\"t-heading\"\n            [content]=\"$any(item.label)\"\n            [context]=\"context\"\n        ></label>\n        <div\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__content\"\n            class=\"t-content\"\n            [content]=\"item.content\"\n            [context]=\"$any(context)\"\n        ></div>\n    </tui-notification>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiDestroyService],
        animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
        host: { role: 'alert' },
        styles: [":host{box-shadow:0 .5rem 1rem rgba(0,0,0,.16);display:block;border-radius:var(--tui-radius-m);width:18rem;margin:2rem 3rem 0 auto}:host-context(tui-root._mobile) :host{margin:1rem 1rem 0 auto}:host:not(:first-child){margin-top:.75rem}.t-heading{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:700;margin:0}.t-content{color:var(--tui-text-01);word-wrap:break-word}.t-content:empty{display:none}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiDestroyService)),
    __param(2, Inject(TUI_NOTIFICATION_OPTIONS)),
    __param(3, Inject(TUI_ANIMATION_OPTIONS)),
    __param(4, Inject(POLYMORPHEUS_CONTEXT))
], TuiAlertComponent);

let TuiAlertService = class TuiAlertService extends AbstractTuiDialogService {
    constructor(defaultOptions, idService) {
        super(idService);
        this.defaultOptions = defaultOptions;
        this.component = new PolymorpheusComponent(TuiAlertComponent);
    }
};
TuiAlertService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_NOTIFICATION_OPTIONS,] }] },
    { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
];
TuiAlertService.ɵprov = ɵɵdefineInjectable({ factory: function TuiAlertService_Factory() { return new TuiAlertService(ɵɵinject(TUI_NOTIFICATION_OPTIONS), ɵɵinject(TuiIdService$1)); }, token: TuiAlertService, providedIn: "root" });
TuiAlertService = __decorate([
    Injectable({ providedIn: `root` }),
    __param(0, Inject(TUI_NOTIFICATION_OPTIONS)),
    __param(1, Inject(TuiIdService))
], TuiAlertService);
/** @deprecated use {@link TuiAlertService} */
let TuiNotificationsService = class TuiNotificationsService {
    constructor(alert) {
        this.alert = alert;
    }
    show(content, options = {}) {
        return this.alert.open(content, options);
    }
};
TuiNotificationsService.ctorParameters = () => [
    { type: TuiAlertService, decorators: [{ type: Inject, args: [TuiAlertService,] }] }
];
TuiNotificationsService.ɵprov = ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(ɵɵinject(TuiAlertService)); }, token: TuiNotificationsService, providedIn: "root" });
TuiNotificationsService = __decorate([
    Injectable({ providedIn: `root` }),
    __param(0, Inject(TuiAlertService))
], TuiNotificationsService);

let TuiAlertModule = class TuiAlertModule {
};
TuiAlertModule = __decorate([
    NgModule({
        imports: [CommonModule, PolymorpheusModule, TuiNotificationModule],
        declarations: [TuiAlertComponent],
        exports: [TuiAlertComponent],
        entryComponents: [TuiAlertComponent],
        providers: [
            {
                provide: TUI_ALERTS,
                useExisting: TuiAlertService,
                multi: true,
            },
        ],
    })
], TuiAlertModule);
/** @deprecated use {@link TuiAlertModule} */
let TuiNotificationsModule = class TuiNotificationsModule {
};
TuiNotificationsModule = __decorate([
    NgModule({ imports: [TuiAlertModule] })
], TuiNotificationsModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiAlertComponent, TuiAlertModule, TuiAlertService, TuiNotificationsModule, TuiNotificationsService };
//# sourceMappingURL=taiga-ui-core-components-alert.js.map
