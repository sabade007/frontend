import { __decorate, __param } from 'tslib';
import { Inject, Input, HostBinding, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { TuiDestroyService, TUI_IS_MOBILE, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_HINT_OPTIONS } from '@taiga-ui/core/directives';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { TuiHintModule } from '@taiga-ui/core/directives/hint';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

let TuiTooltipComponent = class TuiTooltipComponent {
    constructor(destroy$, mode$, isMobile, options) {
        this.isMobile = isMobile;
        this.options = options;
        this.globalMode = null;
        this.content = '';
        this.mode = this.options.mode;
        this.direction = this.options.direction;
        this.showDelay = this.options.tuiHintShowDelay;
        this.hideDelay = this.options.tuiHintHideDelay;
        this.describeId = '';
        mode$.pipe(takeUntil(destroy$)).subscribe(mode => {
            this.globalMode = mode;
        });
    }
    // TODO: Simplify
    get computedMode() {
        return this.mode || (this.globalMode === 'onDark' ? 'onDark' : null);
    }
    stopOnMobile(event) {
        if (this.isMobile) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    get icon() {
        return this.options.tooltipIcon;
    }
};
TuiTooltipComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_HINT_OPTIONS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "content", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "mode", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "direction", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "showDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "hideDelay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTooltipComponent.prototype, "describeId", void 0);
__decorate([
    HostBinding('attr.data-mode')
], TuiTooltipComponent.prototype, "computedMode", null);
__decorate([
    HostListener('mousedown', ['$event']),
    HostListener('click', ['$event'])
], TuiTooltipComponent.prototype, "stopOnMobile", null);
TuiTooltipComponent = __decorate([
    Component({
        selector: 'tui-tooltip',
        template: "<span\n    polymorpheus-outlet\n    automation-id=\"tui-tooltip__icon\"\n    class=\"t-tooltip-icon\"\n    [content]=\"icon\"\n    [tuiHintId]=\"describeId\"\n    [tuiHint]=\"content\"\n    [tuiHintDirection]=\"direction\"\n    [tuiHintShowDelay]=\"showDelay\"\n    [tuiHintHideDelay]=\"hideDelay\"\n    [tuiHintMode]=\"computedMode\"\n>\n    <ng-template let-icon>\n        <tui-svg [src]=\"icon\"></tui-svg>\n    </ng-template>\n</span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiDestroyService, MODE_PROVIDER],
        styles: [":host{transition-property:color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:relative;display:inline-block;width:1.5rem;height:1.5rem;vertical-align:middle;font-size:0;line-height:0;cursor:pointer;color:var(--tui-text-03)}:host:hover{color:var(--tui-text-02)}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-01)}:host[data-mode=error]{color:var(--tui-error-fill)}.t-tooltip-icon{transition-property:opacity,color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:inline-block;width:100%;height:100%}:host:not([data-mode]) .t-tooltip-icon._hint_hovered{color:var(--tui-text-02)}:host[data-mode=onDark] .t-tooltip-icon,:host[data-mode=onLight] .t-tooltip-icon{opacity:var(--tui-disabled-opacity)}:host[data-mode=onDark] .t-tooltip-icon._hint_hovered,:host[data-mode=onDark] .t-tooltip-icon:hover,:host[data-mode=onLight] .t-tooltip-icon._hint_hovered,:host[data-mode=onLight] .t-tooltip-icon:hover{opacity:1}"]
    }),
    __param(0, Inject(TuiDestroyService)),
    __param(1, Inject(TUI_MODE)),
    __param(2, Inject(TUI_IS_MOBILE)),
    __param(3, Inject(TUI_HINT_OPTIONS))
], TuiTooltipComponent);

let TuiTooltipModule = class TuiTooltipModule {
};
TuiTooltipModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiSvgModule, TuiHintModule, PolymorpheusModule],
        declarations: [TuiTooltipComponent],
        exports: [TuiTooltipComponent],
    })
], TuiTooltipModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiTooltipComponent, TuiTooltipModule };
//# sourceMappingURL=taiga-ui-core-components-tooltip.js.map
