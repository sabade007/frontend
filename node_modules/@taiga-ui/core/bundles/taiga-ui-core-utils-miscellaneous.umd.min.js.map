{"version":3,"sources":["ng://@taiga-ui/core/utils/miscellaneous/get-border.ts","ng://@taiga-ui/core/utils/miscellaneous/icons-path-factory.ts","ng://@taiga-ui/core/utils/miscellaneous/is-editing-key.ts","ng://@taiga-ui/core/utils/miscellaneous/is-presumed-html-string.ts","ng://@taiga-ui/core/utils/miscellaneous/size-bigger.ts","ng://@taiga-ui/core/utils/miscellaneous/color-fallback.ts"],"names":["getBorder","hasIcon","hasCleaner","hasTooltip","hasContent","border","tuiGetBorder","iconsPathFactory","staticPath","base","length","name","startsWith","DEFAULT_ICONS_PATH","tuiIconsPathFactory","isEditingKey","key","tuiEditingKeys","includes","tuiIsEditingKey","isPresumedHTMLString","candidate","trimmed","trim","endsWith","tuiIsPresumedHTMLString","SIZES","sizeBigger","size","biggerThanSize","indexOf","tuiSizeBigger","color"],"mappings":"gfAOgBA,EACZC,EACAC,EACAC,EACAC,QAFA,IAAAF,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAIC,EAAS,EAkBb,OAhBIJ,IACAI,GAhBU,KAmBVH,IACAG,GApBU,KAuBVF,IACAE,GAxBU,KA2BVD,IACAC,GA3Ba,KA8BVA,MAGEC,EAAeN,WC3BZO,EAAiBC,GAC7B,IAAMC,EACoC,MAAtCD,EAAWA,EAAWE,OAAS,GAAaF,EAAgBA,EAAU,IAE1E,OAAO,SAAAG,GACH,OAAIA,EAAKC,WAAW,WACT,GAAGH,EAAOE,EAAI,QAAQA,EAG1BE,EAAAA,mBAAmBF,QAIrBG,EAAsBP,WCbnBQ,EAAaC,GACzB,OAAsB,IAAfA,EAAIN,QAAgBO,EAAAA,eAAeC,SAASF,OAG1CG,EAAkBJ,WCPfK,EAAqBC,GACjC,IAAMC,EAAUD,EAAUE,OAE1B,OAAOD,EAAQV,WAAW,MAAQU,EAAQE,SAAS,SAG1CC,EAA0BL,ECRjCM,EAA+C,CAAC,KAAM,IAAK,IAAK,IAAK,KAAM,gBAUjEC,EACZC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,KAEOH,EAAMI,QAAQF,GAAQF,EAAMI,QAAQD,OAGlCE,EAAgBJ,2BCfCK,GAC1B,OAAQA,GACJ,IAAK,YACD,MAAO,uBACX,IAAK,QACD,MAAO,wBACX,IAAK,UACD,MAAO,0BACX,QACI,MAAO,cAAaA,GAAS,WAAS","sourcesContent":["const ITEM_SIZE = 1.5;\nconst CONTENT_SIZE = 2.5;\n\n/**\n * @deprecated: use {@link tuiGetBorder} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getBorder(\n    hasIcon: boolean,\n    hasCleaner: boolean = false,\n    hasTooltip: boolean = false,\n    hasContent: boolean = false,\n): number {\n    let border = 0;\n\n    if (hasIcon) {\n        border += ITEM_SIZE;\n    }\n\n    if (hasCleaner) {\n        border += ITEM_SIZE;\n    }\n\n    if (hasTooltip) {\n        border += ITEM_SIZE;\n    }\n\n    if (hasContent) {\n        border += CONTENT_SIZE;\n    }\n\n    return border;\n}\n\nexport const tuiGetBorder = getBorder;\n","import {TuiStringHandler} from '@taiga-ui/cdk';\nimport {DEFAULT_ICONS_PATH} from '@taiga-ui/core/constants';\n\n/**\n * @deprecated: use {@link tuiIconsPathFactory} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function iconsPathFactory(staticPath: string): TuiStringHandler<string> {\n    const base =\n        staticPath[staticPath.length - 1] === `/` ? staticPath : `${staticPath}/`;\n\n    return name => {\n        if (name.startsWith(`tuiIcon`)) {\n            return `${base}${name}.svg#${name}`;\n        }\n\n        return DEFAULT_ICONS_PATH(name);\n    };\n}\n\nexport const tuiIconsPathFactory = iconsPathFactory;\n","import {tuiEditingKeys} from '@taiga-ui/core/constants';\n\n/**\n * @deprecated: use {@link tuiIsEditingKey} instead\n * Check if pressed key is interactive in terms of input field\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isEditingKey(key: string): boolean {\n    return key.length === 1 || tuiEditingKeys.includes(key);\n}\n\nexport const tuiIsEditingKey = isEditingKey;\n","/**\n * @deprecated: use {@link tuiIsPresumedHTMLString} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isPresumedHTMLString(candidate: string): boolean {\n    const trimmed = candidate.trim();\n\n    return trimmed.startsWith(`<`) && trimmed.endsWith(`>`);\n}\n\nexport const tuiIsPresumedHTMLString = isPresumedHTMLString;\n","import {TuiSizeXS, TuiSizeXXL} from '@taiga-ui/core/types';\n\nconst SIZES: ReadonlyArray<TuiSizeXS | TuiSizeXXL> = [`xs`, `s`, `m`, `l`, `xl`, `xxl`];\n\n/**\n * @deprecated: use {@link tuiSizeBigger} instead\n * Compares size constants to determine if first size is bigger than the second\n *\n * @param size size that we need to compare\n * @param biggerThanSize size to compare with, 's' by default\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function sizeBigger(\n    size: TuiSizeXS | TuiSizeXXL,\n    biggerThanSize: TuiSizeXS | TuiSizeXXL = `s`,\n): boolean {\n    return SIZES.indexOf(size) > SIZES.indexOf(biggerThanSize);\n}\n\nexport const tuiSizeBigger = sizeBigger;\n","/**\n * @deprecated has been deleted in 3.0, please use CSS variables\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function colorFallback(color: string | null): string {\n    switch (color) {\n        case `secondary`:\n            return `var(--tui-info-fill)`;\n        case `error`:\n            return `var(--tui-error-fill)`;\n        case `success`:\n            return `var(--tui-success-fill)`;\n        default:\n            return `var(--tui-${color || `base-05`})`;\n    }\n}\n"]}