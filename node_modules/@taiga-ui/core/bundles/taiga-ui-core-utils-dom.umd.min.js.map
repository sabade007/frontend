{"version":3,"sources":["ng://@taiga-ui/core/utils/dom/are-css-vars-supported.ts","ng://@taiga-ui/core/utils/dom/check-fixed-position.ts","ng://@taiga-ui/core/utils/dom/get-safe-area-size.ts","ng://@taiga-ui/core/utils/dom/get-screen-width.ts","ng://@taiga-ui/core/utils/dom/process-icon.ts","ng://@taiga-ui/core/utils/dom/get-viewport-height.ts","ng://@taiga-ui/core/utils/dom/get-viewport-width.ts"],"names":["areCssVarsSupported","cssRef","userAgent","supports","isEdgeOlderThan","tuiAreCssVarsSupported","checkFixedPosition","element","getComputedStyle","getPropertyValue","parentElement","tuiCheckFixedPosition","getSafeAreaSize","CSS","div","document","createElement","style","paddingTop","body","appendChild","safeAreaSize","parseInt","window","removeChild","tuiGetSafeAreaSize","getScreenWidth","documentRef","Math","max","documentElement","clientWidth","defaultView","innerWidth","tuiGetScreenWidth","processIcon","source","name","includes","src","slice","indexOf","attributes","replace","indexOfWidth","indexOfHeight","widthOffset","length","heightOffset","widthString","heightString","width","height","tuiProcessIcon","_a","innerHeight","clientHeight"],"mappings":"+aAOgBA,EAAoBC,EAAoBC,GACpD,OAAOD,EAAOE,SAAS,cAAgBC,EAAAA,gBAAgB,GAAIF,OAGlDG,EAAyBL,WCPtBM,EAAmBC,GAC/B,SAAKA,GAAuC,oBAArBC,oBAOoB,UAH7BA,iBAAiBD,GAGrBE,iBAAiB,aACvBH,EAAmBC,EAAQG,oBAItBC,EAAwBL,WCVrBM,IACZ,IAAKC,IAAIV,SAAS,yCACd,OAAO,EAGX,IAAMW,EAAMC,SAASC,cAAc,OAEnCF,EAAIG,MAAMC,WAAa,2BACvBH,SAASI,KAAKC,YAAYN,GAE1B,IAAMO,EAAeC,SAASC,OAAOf,iBAAiBM,GAAKI,WAAY,KAAO,EAI9E,OAFAH,SAASI,KAAKK,YAAYV,GAEnBO,MAGEI,EAAqBb,WCpBlBc,EAAeC,GAC3B,OAAOC,KAAKC,IACRF,EAAYG,gBAAgBC,YAC5BJ,EAAYK,YAAcL,EAAYK,YAAYC,WAAa,OAI1DC,EAAoBR,WCHjBS,EAAYC,EAAgBC,GACxC,GAAID,EAAOE,SAAS,OAAOD,EAAI,KAC3B,OAAOD,EAGX,IAAMG,EAAMH,EAAOI,MAAMZ,KAAKC,IAAI,EAAGO,EAAOK,QAXlC,UAYJC,EAAaH,EAAIC,MAAM,EAAGZ,KAAKC,IAAI,EAAGU,EAAIE,QAAQ,OAExD,KAAKC,MAAAA,OAAU,EAAVA,EAAYJ,SAhBA,cAgB2BI,EAAWJ,SAfrC,YAgBd,OAAUC,EAAII,QAfR,OAiBF,kDAAkDN,EAAI,6CACzD,aAGL,IAAMO,EAAeF,EAAWD,QAvBf,WAwBXI,EAAgBH,EAAWD,QAvBf,YAwBZK,EAAcF,EAzBH,UAyB+BG,OAC1CC,EAAeH,EAzBH,WAyBiCE,OAC7CE,EAAcP,EAAWF,MAC3BM,EACAJ,EAAWD,QAAQ,IAAKK,IAEtBI,EAAeR,EAAWF,MAC5BQ,EACAN,EAAWD,QAAQ,IAAKO,IAG5B,IACKE,IACAD,GACDA,EAAYX,SAAS,MACrBY,EAAaZ,SAAS,MACtBW,EAAYX,SAAS,OACrBY,EAAaZ,SAAS,MAEtB,OAAOC,EAAII,QA1CL,OA0CoB,YAAYN,EAAI,KAG9C,IAAMc,EAAQ7B,SAAS2B,EAAa,IAC9BG,EAAS9B,SAAS4B,EAAc,IAEtC,MAAO,UAAUb,EAAI,qEACjBc,EAAQ,GAAE,eAEVC,EAAS,GAAE,uCACwBD,EAAK,IAAIC,EAAM,cAAcD,EAAQ,EAAC,SACxEC,EAAS,EAAC,KACVb,EAAG,uBAGCc,EAAiBlB,0OC1COmB,OAACvC,EAAAuC,EAAAvC,SAAUwC,EAAAD,EAAAC,YAC5C,OAAO3B,KAAKC,IAAId,EAASe,gBAAgB0B,cAAgB,EAAGD,GAAe,mCCD3CD,OAACvC,EAAAuC,EAAAvC,SAAUkB,EAAAqB,EAAArB,WAC3C,OAAOL,KAAKC,IAAId,EAASe,gBAAgBC,aAAe,EAAGE,GAAc","sourcesContent":["import {isEdgeOlderThan} from '@taiga-ui/cdk';\n\n/**\n * @deprecated: use {@link tuiAreCssVarsSupported} instead\n * TODO: 3.0 remove this function\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function areCssVarsSupported(cssRef: typeof CSS, userAgent: string): boolean {\n    return cssRef.supports(`(--a: 0)`) && !isEdgeOlderThan(17, userAgent);\n}\n\nexport const tuiAreCssVarsSupported = areCssVarsSupported;\n","/**\n * @deprecated: use {@link tuiCheckFixedPosition} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function checkFixedPosition(element: HTMLElement | null): boolean {\n    if (!element || typeof getComputedStyle === `undefined`) {\n        return false;\n    }\n\n    const style = getComputedStyle(element);\n\n    return (\n        style.getPropertyValue(`position`) === `fixed` ||\n        checkFixedPosition(element.parentElement)\n    );\n}\n\nexport const tuiCheckFixedPosition = checkFixedPosition;\n","/**\n * @deprecated: use {@link tuiGetSafeAreaSize} instead\n * Calculates size of safe area on mobile devices (status bars)\n *\n * ATTENTION: Only use in browser environment\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getSafeAreaSize(): number {\n    if (!CSS.supports(`padding-top: env(safe-area-inset-top)`)) {\n        return 0;\n    }\n\n    const div = document.createElement(`div`);\n\n    div.style.paddingTop = `env(safe-area-inset-top)`;\n    document.body.appendChild(div);\n\n    const safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;\n\n    document.body.removeChild(div);\n\n    return safeAreaSize;\n}\n\nexport const tuiGetSafeAreaSize = getSafeAreaSize;\n","/**\n * @deprecated: use {@link tuiGetScreenWidth} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getScreenWidth(documentRef: Document): number {\n    return Math.max(\n        documentRef.documentElement.clientWidth,\n        documentRef.defaultView ? documentRef.defaultView.innerWidth : 0,\n    );\n}\n\nexport const tuiGetScreenWidth = getScreenWidth;\n","const WIDTH_SEARCH = `width=\"`;\nconst HEIGHT_SEARCH = `height=\"`;\nconst START = `<svg`;\n\n/**\n * @deprecated: use {@link tuiProcessIcon} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function processIcon(source: string, name: string): string {\n    if (source.includes(`id=\"${name}\"`)) {\n        return source;\n    }\n\n    const src = source.slice(Math.max(0, source.indexOf(START)));\n    const attributes = src.slice(0, Math.max(0, src.indexOf(`>`)));\n\n    if (!attributes?.includes(WIDTH_SEARCH) || !attributes.includes(HEIGHT_SEARCH)) {\n        return `${src.replace(\n            START,\n            `<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\"><svg`,\n        )}</g></svg>`;\n    }\n\n    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);\n    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);\n    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;\n    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;\n    const widthString = attributes.slice(\n        widthOffset,\n        attributes.indexOf(`\"`, widthOffset),\n    );\n    const heightString = attributes.slice(\n        heightOffset,\n        attributes.indexOf(`\"`, heightOffset),\n    );\n\n    if (\n        !heightString ||\n        !widthString ||\n        widthString.includes(`%`) ||\n        heightString.includes(`%`) ||\n        widthString.includes(`em`) ||\n        heightString.includes(`em`)\n    ) {\n        return src.replace(START, `<svg id=\"${name}\"`);\n    }\n\n    const width = parseInt(widthString, 10);\n    const height = parseInt(heightString, 10);\n\n    return `<g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\"><svg  x=\"50%\" y=\"50%\" width=\"${\n        width / 16\n    }em\" height=\"${\n        height / 16\n    }em\" overflow=\"visible\" viewBox=\"0 0 ${width} ${height}\"><svg x=\"${-width / 2}\" y=\"${\n        -height / 2\n    }\">${src}</svg></svg></g>`;\n}\n\nexport const tuiProcessIcon = processIcon;\n","/**\n * @description:\n * Cross-browser @media (height)\n *\n * 1. window.innerWidth\n * 1.1. gets CSS viewport @media (height) which include scrollbars\n * 1.2. initial-scale and zoom variations may cause mobile values to\n *      wrongly scale down to what PPK calls the visual\n *      viewport and be smaller than the @media values\n *  1.3. zoom may cause values to be 1px off due to native rounding\n *\n *  2. document.documentElement.clientHeight\n *  2.1. equals CSS viewport width minus scrollbar width\n *  2.2. matches @media (height) when there is no scrollbar\n *  2.3. available cross-browser\n *  2.4. inaccurate if doctype is missing\n */\nexport function tuiGetViewportHeight({document, innerHeight}: Window): number {\n    return Math.max(document.documentElement.clientHeight || 0, innerHeight || 0);\n}\n","/**\n * @description:\n * Cross-browser @media (width)\n *\n * 1. window.innerWidth\n * 1.1. gets CSS viewport @media (width) which include scrollbars\n * 1.2. initial-scale and zoom variations may cause mobile values to\n *      wrongly scale down to what PPK calls the visual\n *      viewport and be smaller than the @media values\n *  1.3. zoom may cause values to be 1px off due to native rounding\n *\n *  2. document.documentElement.clientWidth\n *  2.1. equals CSS viewport width minus scrollbar width\n *  2.2. matches @media (width) when there is no scrollbar\n *  2.3. available cross-browser\n *  2.4. inaccurate if doctype is missing\n */\nexport function tuiGetViewportWidth({document, innerWidth}: Window): number {\n    return Math.max(document.documentElement.clientWidth || 0, innerWidth || 0);\n}\n"]}