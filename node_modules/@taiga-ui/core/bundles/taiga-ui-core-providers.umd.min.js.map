{"version":3,"sources":["ng://@taiga-ui/core/providers/is-mobile-resolution.provider.ts","ng://@taiga-ui/core/providers/mode.provider.ts","ng://@taiga-ui/core/providers/watched-controller-provider-factory.ts"],"names":["isMobileResFactory","mobile$","_a","nativeElement","TUI_IS_MOBILE_RES_PROVIDER","provide","TUI_IS_MOBILE_RES","deps","SkipSelf","ElementRef","useFactory","tuiIsMobileResFactory","modeFactory","mode","mode$","change$","pipe","startWith","map","of","MODE_PROVIDER","TUI_MODE","Optional","TuiModeDirective","tuiModeFactory","watchedControllerFactory","controller","changeDetectorRef","destroy$","watch","takeUntil","subscribe","tuiWatchedControllerFactory"],"mappings":"itBAQgBA,EACZC,EACAC,GAIA,OAJCA,EAAAC,cAEa,mBAAqBF,EAE5BA,MAGEG,EAAuC,CAChDC,QAASC,EAAAA,kBACTC,KAAM,CAAC,CAAC,IAAIC,EAAAA,SAAYF,EAAAA,mBAAoBG,EAAAA,YAC5CC,WAAYV,GAGHW,EAAwBX,WCZrBY,EACZC,EACAX,OAACC,EAAAD,EAAAC,cAEKW,EAAQD,EACRA,EAAKE,QAAQC,KACTC,EAAAA,UAAU,MACVC,EAAAA,KAAI,WAAM,OAAAL,EAAKA,SAEnBM,EAAAA,GAAG,MAIT,OAFAhB,EAAc,oBAAsBW,EAE7BA,MAGEM,EAA0B,CACnCf,QAASgB,EAAAA,SACTd,KAAM,CAAC,CAAC,IAAIe,EAAAA,SAAYC,EAAAA,kBAAmBd,EAAAA,YAC3CC,WAAYE,GAGHY,EAAiBZ,WCxBda,EACZC,EACAC,EACAC,GAIA,OAFAF,EAAWX,QAAQC,KAAKa,EAAAA,MAAMF,GAAoBG,EAAAA,UAAUF,IAAWG,YAEhEL,MAGEM,EAA8BP","sourcesContent":["import {ElementRef, Provider, SkipSelf} from '@angular/core';\nimport {TUI_IS_MOBILE_RES} from '@taiga-ui/core/tokens';\nimport {Observable} from 'rxjs';\n\n/**\n * @deprecated: use {@link tuiIsMobileResFactory} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isMobileResFactory(\n    mobile$: Observable<boolean>,\n    {nativeElement}: ElementRef,\n): Observable<boolean> {\n    nativeElement[`$.class._mobile`] = mobile$;\n\n    return mobile$;\n}\n\nexport const TUI_IS_MOBILE_RES_PROVIDER: Provider = {\n    provide: TUI_IS_MOBILE_RES,\n    deps: [[new SkipSelf(), TUI_IS_MOBILE_RES], ElementRef],\n    useFactory: isMobileResFactory,\n};\n\nexport const tuiIsMobileResFactory = isMobileResFactory;\n","import {ElementRef, Optional, Provider} from '@angular/core';\nimport {TuiModeDirective} from '@taiga-ui/core/directives/mode';\nimport {TUI_MODE} from '@taiga-ui/core/tokens';\nimport {TuiBrightness} from '@taiga-ui/core/types';\nimport {Observable, of} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiModeFactory} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function modeFactory(\n    mode: TuiModeDirective | null,\n    {nativeElement}: ElementRef,\n): Observable<TuiBrightness | null> {\n    const mode$ = mode\n        ? mode.change$.pipe(\n              startWith(null),\n              map(() => mode.mode),\n          )\n        : of(null);\n\n    nativeElement[`$.data-mode.attr`] = mode$;\n\n    return mode$;\n}\n\nexport const MODE_PROVIDER: Provider = {\n    provide: TUI_MODE,\n    deps: [[new Optional(), TuiModeDirective], ElementRef],\n    useFactory: modeFactory,\n};\n\nexport const tuiModeFactory = modeFactory;\n","import {ChangeDetectorRef} from '@angular/core';\nimport {TuiController, watch} from '@taiga-ui/cdk';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiWatchedControllerFactory} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function watchedControllerFactory(\n    controller: TuiController,\n    changeDetectorRef: ChangeDetectorRef,\n    destroy$: Observable<void>,\n): TuiController {\n    controller.change$.pipe(watch(changeDetectorRef), takeUntil(destroy$)).subscribe();\n\n    return controller;\n}\n\nexport const tuiWatchedControllerFactory = watchedControllerFactory;\n"]}