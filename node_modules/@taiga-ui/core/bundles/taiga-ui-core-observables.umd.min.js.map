{"version":3,"sources":["ng://@taiga-ui/core/observables/smart-search.ts","ng://@taiga-ui/core/observables/zoneful-map.ts"],"names":["smartSearch","getSearchFunction","searchDebounceTimeMs","source","pipe","debounceTime","scan","previousSearched","current","startsWith","distinctUntilChanged","switchMap","value","startWith","EMPTY_ARRAY","tuiSmartSearch","project","ngZone","map","tuiZonefull"],"mappings":"2dAcgBA,EACZC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,KAEO,SAAAC,GACH,OAAAA,EAAOC,KACHC,EAAAA,aAAaH,GACbI,EAAAA,MAAK,SAACC,EAAkBC,GACpB,MAA4B,KAArBD,GAA2BC,EAAQC,WAAWF,GAC/CA,EACAC,IACP,IACHE,EAAAA,uBACAC,EAAAA,WAAU,SAAAC,GAAS,OAAAX,EAAkBW,GAAOR,KAAKS,EAAAA,UAAU,UAC3DA,EAAAA,UAAUC,EAAAA,mBAITC,EAAiBf,8DCnB1BgB,EACAC,GAEA,OAAOb,EAAAA,KAAKc,EAAAA,IAAIF,GAAUN,EAAAA,uBAAwBS,EAAAA,YAAYF","sourcesContent":["import {EMPTY_ARRAY} from '@taiga-ui/cdk';\nimport {Observable, OperatorFunction} from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    scan,\n    startWith,\n    switchMap,\n} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiSmartSearch} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function smartSearch<T>(\n    getSearchFunction: (search: string) => Observable<readonly T[] | readonly T[][]>,\n    searchDebounceTimeMs: number = 400,\n): OperatorFunction<string, readonly T[] | readonly T[][] | null> {\n    return source =>\n        source.pipe(\n            debounceTime(searchDebounceTimeMs),\n            scan((previousSearched, current) => {\n                return previousSearched !== `` && current.startsWith(previousSearched)\n                    ? previousSearched\n                    : current;\n            }, ``),\n            distinctUntilChanged(),\n            switchMap(value => getSearchFunction(value).pipe(startWith(null))),\n            startWith(EMPTY_ARRAY),\n        );\n}\n\nexport const tuiSmartSearch = smartSearch;\n","import {NgZone} from '@angular/core';\nimport {tuiZonefull} from '@taiga-ui/cdk';\nimport {OperatorFunction, pipe} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\n/**\n * Works like regular map + distinctUntilChanged\n * and only returns to NgZone if value has changed\n *\n * @param project mapping function\n * @param ngZone NgZone instance\n */\nexport function tuiZonefulMap<T, R>(\n    project: (value: T, index: number) => R,\n    ngZone: NgZone,\n): OperatorFunction<T, R> {\n    return pipe(map(project), distinctUntilChanged(), tuiZonefull(ngZone));\n}\n"]}