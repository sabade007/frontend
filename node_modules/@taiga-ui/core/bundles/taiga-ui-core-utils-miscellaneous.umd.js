(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/core/constants')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/utils/miscellaneous', ['exports', '@taiga-ui/core/constants'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].core = global['taiga-ui'].core || {}, global['taiga-ui'].core.utils = global['taiga-ui'].core.utils || {}, global['taiga-ui'].core.utils.miscellaneous = {}), global['taiga-ui'].core.constants));
}(this, (function (exports, constants) { 'use strict';

    /**
     * @deprecated has been deleted in 3.0, please use CSS variables
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function colorFallback(color) {
        switch (color) {
            case "secondary":
                return "var(--tui-info-fill)";
            case "error":
                return "var(--tui-error-fill)";
            case "success":
                return "var(--tui-success-fill)";
            default:
                return "var(--tui-" + (color || "base-05") + ")";
        }
    }

    var ITEM_SIZE = 1.5;
    var CONTENT_SIZE = 2.5;
    /**
     * @deprecated: use {@link tuiGetBorder} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function getBorder(hasIcon, hasCleaner, hasTooltip, hasContent) {
        if (hasCleaner === void 0) { hasCleaner = false; }
        if (hasTooltip === void 0) { hasTooltip = false; }
        if (hasContent === void 0) { hasContent = false; }
        var border = 0;
        if (hasIcon) {
            border += ITEM_SIZE;
        }
        if (hasCleaner) {
            border += ITEM_SIZE;
        }
        if (hasTooltip) {
            border += ITEM_SIZE;
        }
        if (hasContent) {
            border += CONTENT_SIZE;
        }
        return border;
    }
    var tuiGetBorder = getBorder;

    /**
     * @deprecated: use {@link tuiIconsPathFactory} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function iconsPathFactory(staticPath) {
        var base = staticPath[staticPath.length - 1] === "/" ? staticPath : staticPath + "/";
        return function (name) {
            if (name.startsWith("tuiIcon")) {
                return "" + base + name + ".svg#" + name;
            }
            return constants.DEFAULT_ICONS_PATH(name);
        };
    }
    var tuiIconsPathFactory = iconsPathFactory;

    /**
     * @deprecated: use {@link tuiIsEditingKey} instead
     * Check if pressed key is interactive in terms of input field
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function isEditingKey(key) {
        return key.length === 1 || constants.tuiEditingKeys.includes(key);
    }
    var tuiIsEditingKey = isEditingKey;

    /**
     * @deprecated: use {@link tuiIsPresumedHTMLString} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function isPresumedHTMLString(candidate) {
        var trimmed = candidate.trim();
        return trimmed.startsWith("<") && trimmed.endsWith(">");
    }
    var tuiIsPresumedHTMLString = isPresumedHTMLString;

    var SIZES = ["xs", "s", "m", "l", "xl", "xxl"];
    /**
     * @deprecated: use {@link tuiSizeBigger} instead
     * Compares size constants to determine if first size is bigger than the second
     *
     * @param size size that we need to compare
     * @param biggerThanSize size to compare with, 's' by default
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function sizeBigger(size, biggerThanSize) {
        if (biggerThanSize === void 0) { biggerThanSize = "s"; }
        return SIZES.indexOf(size) > SIZES.indexOf(biggerThanSize);
    }
    var tuiSizeBigger = sizeBigger;

    exports.colorFallback = colorFallback;
    exports.getBorder = getBorder;
    exports.iconsPathFactory = iconsPathFactory;
    exports.isEditingKey = isEditingKey;
    exports.isPresumedHTMLString = isPresumedHTMLString;
    exports.sizeBigger = sizeBigger;
    exports.tuiGetBorder = tuiGetBorder;
    exports.tuiIconsPathFactory = tuiIconsPathFactory;
    exports.tuiIsEditingKey = tuiIsEditingKey;
    exports.tuiIsPresumedHTMLString = tuiIsPresumedHTMLString;
    exports.tuiSizeBigger = tuiSizeBigger;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-core-utils-miscellaneous.umd.js.map
