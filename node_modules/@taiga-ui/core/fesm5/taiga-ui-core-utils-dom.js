import { isEdgeOlderThan } from '@taiga-ui/cdk';

/**
 * @deprecated: use {@link tuiAreCssVarsSupported} instead
 * TODO: 3.0 remove this function
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function areCssVarsSupported(cssRef, userAgent) {
    return cssRef.supports("(--a: 0)") && !isEdgeOlderThan(17, userAgent);
}
var tuiAreCssVarsSupported = areCssVarsSupported;

/**
 * @deprecated: use {@link tuiCheckFixedPosition} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function checkFixedPosition(element) {
    if (!element || typeof getComputedStyle === "undefined") {
        return false;
    }
    var style = getComputedStyle(element);
    return (style.getPropertyValue("position") === "fixed" ||
        checkFixedPosition(element.parentElement));
}
var tuiCheckFixedPosition = checkFixedPosition;

/**
 * @deprecated: use {@link tuiGetSafeAreaSize} instead
 * Calculates size of safe area on mobile devices (status bars)
 *
 * ATTENTION: Only use in browser environment
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getSafeAreaSize() {
    if (!CSS.supports("padding-top: env(safe-area-inset-top)")) {
        return 0;
    }
    var div = document.createElement("div");
    div.style.paddingTop = "env(safe-area-inset-top)";
    document.body.appendChild(div);
    var safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;
    document.body.removeChild(div);
    return safeAreaSize;
}
var tuiGetSafeAreaSize = getSafeAreaSize;

/**
 * @deprecated: use {@link tuiGetScreenWidth} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getScreenWidth(documentRef) {
    return Math.max(documentRef.documentElement.clientWidth, documentRef.defaultView ? documentRef.defaultView.innerWidth : 0);
}
var tuiGetScreenWidth = getScreenWidth;

/**
 * @description:
 * Cross-browser @media (height)
 *
 * 1. window.innerWidth
 * 1.1. gets CSS viewport @media (height) which include scrollbars
 * 1.2. initial-scale and zoom variations may cause mobile values to
 *      wrongly scale down to what PPK calls the visual
 *      viewport and be smaller than the @media values
 *  1.3. zoom may cause values to be 1px off due to native rounding
 *
 *  2. document.documentElement.clientHeight
 *  2.1. equals CSS viewport width minus scrollbar width
 *  2.2. matches @media (height) when there is no scrollbar
 *  2.3. available cross-browser
 *  2.4. inaccurate if doctype is missing
 */
function tuiGetViewportHeight(_a) {
    var document = _a.document, innerHeight = _a.innerHeight;
    return Math.max(document.documentElement.clientHeight || 0, innerHeight || 0);
}

/**
 * @description:
 * Cross-browser @media (width)
 *
 * 1. window.innerWidth
 * 1.1. gets CSS viewport @media (width) which include scrollbars
 * 1.2. initial-scale and zoom variations may cause mobile values to
 *      wrongly scale down to what PPK calls the visual
 *      viewport and be smaller than the @media values
 *  1.3. zoom may cause values to be 1px off due to native rounding
 *
 *  2. document.documentElement.clientWidth
 *  2.1. equals CSS viewport width minus scrollbar width
 *  2.2. matches @media (width) when there is no scrollbar
 *  2.3. available cross-browser
 *  2.4. inaccurate if doctype is missing
 */
function tuiGetViewportWidth(_a) {
    var document = _a.document, innerWidth = _a.innerWidth;
    return Math.max(document.documentElement.clientWidth || 0, innerWidth || 0);
}

var WIDTH_SEARCH = "width=\"";
var HEIGHT_SEARCH = "height=\"";
var START = "<svg";
/**
 * @deprecated: use {@link tuiProcessIcon} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function processIcon(source, name) {
    if (source.includes("id=\"" + name + "\"")) {
        return source;
    }
    var src = source.slice(Math.max(0, source.indexOf(START)));
    var attributes = src.slice(0, Math.max(0, src.indexOf(">")));
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
        return src.replace(START, "<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg") + "</g></svg>";
    }
    var indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    var indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    var widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    var heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    var widthString = attributes.slice(widthOffset, attributes.indexOf("\"", widthOffset));
    var heightString = attributes.slice(heightOffset, attributes.indexOf("\"", heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes("%") ||
        heightString.includes("%") ||
        widthString.includes("em") ||
        heightString.includes("em")) {
        return src.replace(START, "<svg id=\"" + name + "\"");
    }
    var width = parseInt(widthString, 10);
    var height = parseInt(heightString, 10);
    return "<g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg  x=\"50%\" y=\"50%\" width=\"" + width / 16 + "em\" height=\"" + height / 16 + "em\" overflow=\"visible\" viewBox=\"0 0 " + width + " " + height + "\"><svg x=\"" + -width / 2 + "\" y=\"" + -height / 2 + "\">" + src + "</svg></svg></g>";
}
var tuiProcessIcon = processIcon;

/**
 * Generated bundle index. Do not edit.
 */

export { areCssVarsSupported, checkFixedPosition, getSafeAreaSize, getScreenWidth, processIcon, tuiAreCssVarsSupported, tuiCheckFixedPosition, tuiGetSafeAreaSize, tuiGetScreenWidth, tuiGetViewportHeight, tuiGetViewportWidth, tuiProcessIcon };
//# sourceMappingURL=taiga-ui-core-utils-dom.js.map
