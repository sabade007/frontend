import { __decorate, __param, __extends, __spread, __assign } from 'tslib';
import { Inject, LOCALE_ID, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, NgZone, SecurityContext, Sanitizer } from '@angular/core';
import { of, BehaviorSubject, fromEvent, Observable, EMPTY } from 'rxjs';
import { WINDOW, ANIMATION_FRAME } from '@ng-web-apis/common';
import { startWith, map, share, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { RouterLinkActive } from '@angular/router';
import { tuiZoneOptimized, TuiDestroyService, tuiAssert } from '@taiga-ui/cdk';
import { DomSanitizer } from '@angular/platform-browser';
import { TUI_SANITIZER, TUI_ICONS } from '@taiga-ui/core/tokens';
import { processIcon } from '@taiga-ui/core/utils/dom';

var TuiFormatDateService = /** @class */ (function () {
    function TuiFormatDateService(locale) {
        this.locale = locale;
    }
    TuiFormatDateService.prototype.format = function (timestamp) {
        return of(new Date(timestamp).toLocaleTimeString(this.locale, {
            hour: "numeric",
            minute: "2-digit",
        }));
    };
    TuiFormatDateService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    TuiFormatDateService.ɵprov = ɵɵdefineInjectable({ factory: function TuiFormatDateService_Factory() { return new TuiFormatDateService(ɵɵinject(LOCALE_ID)); }, token: TuiFormatDateService, providedIn: "root" });
    TuiFormatDateService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Inject(LOCALE_ID))
    ], TuiFormatDateService);
    return TuiFormatDateService;
}());

/**
 * Service for displaying hints/tooltips
 */
var TuiHintService = /** @class */ (function (_super) {
    __extends(TuiHintService, _super);
    function TuiHintService() {
        var _this = _super.call(this, []) || this;
        /**
         * TODO:
         * We need the following logic for desribedBy
         * move it into another service that can register hints and
         * manage it using TuiHintService inside
         */
        _this.directives = [];
        return _this;
    }
    TuiHintService.prototype.add = function (directive) {
        this.next(this.value.concat(directive));
    };
    TuiHintService.prototype.remove = function (directive) {
        if (this.value.includes(directive)) {
            this.next(this.value.filter(function (hint) { return hint !== directive; }));
        }
    };
    TuiHintService.prototype.register = function (directive) {
        this.directives = __spread(this.directives, [directive]);
    };
    TuiHintService.prototype.unregister = function (directive) {
        this.remove(directive);
        this.directives = this.directives.filter(function (dir) { return dir !== directive; });
    };
    TuiHintService.prototype.showHintForId = function (id) {
        var directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.add(directive);
        }
    };
    TuiHintService.prototype.hideHintForId = function (id) {
        var directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.remove(directive);
        }
    };
    TuiHintService.prototype.findDirectiveWithHintId = function (id) {
        return this.directives.find(function (directive) { return directive.tuiHintId === id; });
    };
    TuiHintService.ɵprov = ɵɵdefineInjectable({ factory: function TuiHintService_Factory() { return new TuiHintService(); }, token: TuiHintService, providedIn: "root" });
    TuiHintService = __decorate([
        Injectable({
            providedIn: "root",
        })
    ], TuiHintService);
    return TuiHintService;
}(BehaviorSubject));

// @dynamic
var TuiNightThemeService = /** @class */ (function (_super) {
    __extends(TuiNightThemeService, _super);
    function TuiNightThemeService(windowRef) {
        var _this = this;
        var media = windowRef.matchMedia("(prefers-color-scheme: dark)");
        var media$ = fromEvent(media, "change").pipe(startWith(null), map(function () { return media.matches; }), share());
        _this = _super.call(this, function (subscriber) { return media$.subscribe(subscriber); }) || this;
        return _this;
    }
    TuiNightThemeService.ctorParameters = function () { return [
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
    ]; };
    TuiNightThemeService.ɵprov = ɵɵdefineInjectable({ factory: function TuiNightThemeService_Factory() { return new TuiNightThemeService(ɵɵinject(WINDOW)); }, token: TuiNightThemeService, providedIn: "root" });
    TuiNightThemeService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Inject(WINDOW))
    ], TuiNightThemeService);
    return TuiNightThemeService;
}(Observable));

var TuiRouterLinkActiveService = /** @class */ (function (_super) {
    __extends(TuiRouterLinkActiveService, _super);
    function TuiRouterLinkActiveService(routerLinkActive, ngZone, animationFrame$, destroy$) {
        var _this = this;
        var stream$ = routerLinkActive
            ? animationFrame$.pipe(map(function () { return routerLinkActive.isActive; }), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$))
            : EMPTY;
        _this = _super.call(this, function (subscriber) { return stream$.subscribe(subscriber); }) || this;
        return _this;
    }
    TuiRouterLinkActiveService.ctorParameters = function () { return [
        { type: RouterLinkActive, decorators: [{ type: Optional }, { type: Inject, args: [RouterLinkActive,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiRouterLinkActiveService = __decorate([
        Injectable(),
        __param(0, Optional()),
        __param(0, Inject(RouterLinkActive)),
        __param(1, Inject(NgZone)),
        __param(2, Inject(ANIMATION_FRAME)),
        __param(3, Inject(TuiDestroyService))
    ], TuiRouterLinkActiveService);
    return TuiRouterLinkActiveService;
}(Observable));

/**
 * Service for reusing SVGs without inlining each instance
 */
// @dynamic
var TuiSvgService = /** @class */ (function () {
    function TuiSvgService(tuiSanitizer, sanitizer, icons) {
        this.tuiSanitizer = tuiSanitizer;
        this.sanitizer = sanitizer;
        this.originals = {};
        this.items$ = new BehaviorSubject(new Map());
        this.define(icons);
    }
    TuiSvgService.prototype.define = function (icons) {
        var _this = this;
        var value = this.items$.value;
        Object.keys(icons).forEach(function (key) {
            _this.defineIcon(key, icons[key], value);
        });
        this.items$.next(value);
    };
    TuiSvgService.prototype.getOriginal = function (name) {
        return this.originals[name] || null;
    };
    TuiSvgService.prototype.defineIcon = function (name, src, map) {
        var _a;
        if (map.has(name)) {
            return;
        }
        var parsed = this.parseSrc(name, src);
        if (!parsed) {
            tuiAssert.assert(false, "Unable to parse given SVG src");
            return;
        }
        map.set(name, parsed);
        this.originals = __assign(__assign({}, this.originals), (_a = {}, _a[name] = src, _a));
    };
    TuiSvgService.prototype.parseSrc = function (name, src) {
        return this.sanitize(processIcon(src, name));
    };
    TuiSvgService.prototype.sanitize = function (src) {
        return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer
            ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src)
            : this.sanitizer.sanitize(SecurityContext.HTML, src)) || "");
    };
    TuiSvgService.ctorParameters = function () { return [
        { type: Sanitizer, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SANITIZER,] }] },
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS,] }] }
    ]; };
    TuiSvgService.ɵprov = ɵɵdefineInjectable({ factory: function TuiSvgService_Factory() { return new TuiSvgService(ɵɵinject(TUI_SANITIZER, 8), ɵɵinject(DomSanitizer), ɵɵinject(TUI_ICONS)); }, token: TuiSvgService, providedIn: "root" });
    TuiSvgService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Optional()),
        __param(0, Inject(TUI_SANITIZER)),
        __param(1, Inject(DomSanitizer)),
        __param(2, Inject(TUI_ICONS))
    ], TuiSvgService);
    return TuiSvgService;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiFormatDateService, TuiHintService, TuiNightThemeService, TuiRouterLinkActiveService, TuiSvgService };
//# sourceMappingURL=taiga-ui-core-services.js.map
