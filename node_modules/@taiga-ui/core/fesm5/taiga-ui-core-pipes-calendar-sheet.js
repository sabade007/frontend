import { __decorate, __param } from 'tslib';
import { Inject, Pipe, NgModule } from '@angular/core';
import { DAYS_IN_WEEK, tuiAssert, inRange, TuiDay } from '@taiga-ui/cdk';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';

// TODO: 3.0 Remove export in ivy compilation
/**
 * Computes day of week offset of the beginning of the month
 */
var getMonthStartDaysOffset = function (month, firstDayOfWeek) {
    var startMonthOffsetFromSunday = new Date(month.year, month.month, 1).getDay();
    return startMonthOffsetFromSunday >= firstDayOfWeek
        ? startMonthOffsetFromSunday - firstDayOfWeek
        : DAYS_IN_WEEK - (firstDayOfWeek - startMonthOffsetFromSunday);
};
/*
TODO: 3.0 delete:
 * TuiDay.getDayFromMonthRowCol
 * TuiMonth.monthStartDaysOffset
 * TuiMonth.weeksRowsCount
 * TuiYear.yearStartDaysOffset
 * TuiYear.getYearStartDaysOffset
 */
/**
 * Calculated day on a calendar grid
 * @return resulting day on these coordinates (could exceed passed month)
 */
var getDayFromMonthRowCol = function (_a) {
    var month = _a.month, rowIndex = _a.rowIndex, colIndex = _a.colIndex, firstDayOfWeek = _a.firstDayOfWeek;
    tuiAssert.assert(Number.isInteger(rowIndex));
    tuiAssert.assert(inRange(rowIndex, 0, 6));
    tuiAssert.assert(Number.isInteger(colIndex));
    tuiAssert.assert(inRange(colIndex, 0, DAYS_IN_WEEK));
    var day = rowIndex * DAYS_IN_WEEK +
        colIndex -
        getMonthStartDaysOffset(month, firstDayOfWeek) +
        1;
    if (day > month.daysCount) {
        day -= month.daysCount;
        month = month.append({ month: 1 });
    }
    if (day <= 0) {
        month = month.append({ month: -1 });
        day = month.daysCount + day;
    }
    return new TuiDay(month.year, month.month, day);
};

var CALENDAR_ROWS_COUNT = 6;
var TuiCalendarSheetPipe = /** @class */ (function () {
    function TuiCalendarSheetPipe(firstDayOfWeek) {
        this.firstDayOfWeek = firstDayOfWeek;
        this.currentMonth = null;
        this.currentSheet = [];
    }
    TuiCalendarSheetPipe.prototype.transform = function (month, showAdjacentDays) {
        if (showAdjacentDays === void 0) { showAdjacentDays = false; }
        var _a;
        if ((_a = this.currentMonth) === null || _a === void 0 ? void 0 : _a.monthSame(month)) {
            return this.currentSheet;
        }
        var sheet = [];
        for (var rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
            var row = [];
            for (var colIndex = 0; colIndex < DAYS_IN_WEEK; colIndex++) {
                var day = getDayFromMonthRowCol({
                    month: month,
                    rowIndex: rowIndex,
                    colIndex: colIndex,
                    firstDayOfWeek: this.firstDayOfWeek,
                });
                var isPrevMonthDay = function (day, relativeToMonth) {
                    if (relativeToMonth === void 0) { relativeToMonth = month; }
                    return day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                };
                var isNextMonthDay = function (day, relativeToMonth) {
                    if (relativeToMonth === void 0) { relativeToMonth = month; }
                    return day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                };
                if (isPrevMonthDay(day) && !showAdjacentDays) {
                    continue;
                }
                if (isNextMonthDay(day) && !showAdjacentDays) {
                    break;
                }
                row.push(day);
            }
            sheet.push(row);
        }
        this.currentSheet = sheet.filter(function (row) { return row.length; });
        this.currentMonth = month;
        return this.currentSheet;
    };
    TuiCalendarSheetPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_FIRST_DAY_OF_WEEK,] }] }
    ]; };
    TuiCalendarSheetPipe = __decorate([
        Pipe({
            name: "tuiCalendarSheet",
        }),
        __param(0, Inject(TUI_FIRST_DAY_OF_WEEK))
    ], TuiCalendarSheetPipe);
    return TuiCalendarSheetPipe;
}());

var TuiCalendarSheetPipeModule = /** @class */ (function () {
    function TuiCalendarSheetPipeModule() {
    }
    TuiCalendarSheetPipeModule = __decorate([
        NgModule({
            declarations: [TuiCalendarSheetPipe],
            exports: [TuiCalendarSheetPipe],
        })
    ], TuiCalendarSheetPipeModule);
    return TuiCalendarSheetPipeModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCalendarSheetPipe, TuiCalendarSheetPipeModule };
//# sourceMappingURL=taiga-ui-core-pipes-calendar-sheet.js.map
