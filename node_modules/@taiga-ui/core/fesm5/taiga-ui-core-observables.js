import { EMPTY_ARRAY, tuiZonefull } from '@taiga-ui/cdk';
import { debounceTime, scan, distinctUntilChanged, switchMap, startWith, map } from 'rxjs/operators';
import { pipe } from 'rxjs';

/**
 * @deprecated: use {@link tuiSmartSearch} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function smartSearch(getSearchFunction, searchDebounceTimeMs) {
    if (searchDebounceTimeMs === void 0) { searchDebounceTimeMs = 400; }
    return function (source) {
        return source.pipe(debounceTime(searchDebounceTimeMs), scan(function (previousSearched, current) {
            return previousSearched !== "" && current.startsWith(previousSearched)
                ? previousSearched
                : current;
        }, ""), distinctUntilChanged(), switchMap(function (value) { return getSearchFunction(value).pipe(startWith(null)); }), startWith(EMPTY_ARRAY));
    };
}
var tuiSmartSearch = smartSearch;

/**
 * Works like regular map + distinctUntilChanged
 * and only returns to NgZone if value has changed
 *
 * @param project mapping function
 * @param ngZone NgZone instance
 */
function tuiZonefulMap(project, ngZone) {
    return pipe(map(project), distinctUntilChanged(), tuiZonefull(ngZone));
}

/**
 * Generated bundle index. Do not edit.
 */

export { smartSearch, tuiSmartSearch, tuiZonefulMap };
//# sourceMappingURL=taiga-ui-core-observables.js.map
