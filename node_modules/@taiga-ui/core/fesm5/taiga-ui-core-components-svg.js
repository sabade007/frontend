import { __decorate, __param } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { SecurityContext, Inject, Sanitizer, Optional, ElementRef, Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { WINDOW, USER_AGENT } from '@ng-web-apis/common';
import { isIE, getDocumentOrShadowRoot, tuiCustomEvent, tuiAssert, TuiStaticRequestService, tuiRequiredSetter, tuiPure, TuiLetModule } from '@taiga-ui/cdk';
import { TUI_ICON_ERROR } from '@taiga-ui/core/constants';
import { TuiSvgService } from '@taiga-ui/core/services';
import { TUI_ICONS_PATH, TUI_SANITIZER, TUI_SVG_SRC_PROCESSOR, TUI_SVG_CONTENT_PROCESSOR } from '@taiga-ui/core/tokens';
import { isPresumedHTMLString } from '@taiga-ui/core/utils/miscellaneous';
import { ReplaySubject, of } from 'rxjs';
import { switchMap, startWith, catchError, map } from 'rxjs/operators';

var UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';
var MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';
var FAILED_EXTERNAL_ICON = 'Failed to load external SVG';
// TODO: Consider moving to CDK along with SvgService and SvgDefsHostComponent
// @dynamic
var TuiSvgComponent = /** @class */ (function () {
    function TuiSvgComponent(documentRef, windowRef, iconsPath, tuiSanitizer, svgService, staticRequestService, sanitizer, elementRef, userAgent, srcProcessor, contentProcessor) {
        var _this = this;
        this.documentRef = documentRef;
        this.windowRef = windowRef;
        this.iconsPath = iconsPath;
        this.tuiSanitizer = tuiSanitizer;
        this.svgService = svgService;
        this.staticRequestService = staticRequestService;
        this.sanitizer = sanitizer;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.srcProcessor = srcProcessor;
        this.contentProcessor = contentProcessor;
        this.src$ = new ReplaySubject(1);
        this.isIE = isIE(this.userAgent);
        this.icon = '';
        this.innerHTML$ = this.src$.pipe(switchMap(function () {
            return _this.isExternal
                ? _this.getExternalIcon(_this.icon)
                : of(_this.getSafeHtml(_this.icon));
        }), startWith(''));
    }
    Object.defineProperty(TuiSvgComponent.prototype, "src", {
        get: function () {
            return this.icon;
        },
        set: function (src) {
            this.icon = this.srcProcessor(src);
            this.src$.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "use", {
        get: function () {
            return this.icon.includes('.svg#')
                ? this.icon
                : this.resolveName(this.icon, this.iconsPath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isInnerHTML", {
        get: function () {
            return this.isSrc || this.isExternal || (this.isName && this.isShadowDOM);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isShadowDOM", {
        get: function () {
            return (getDocumentOrShadowRoot(this.elementRef.nativeElement) !== this.documentRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isUse", {
        get: function () {
            return this.use.includes('.svg#');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isExternal", {
        get: function () {
            return this.isUrl || (this.isIE && this.isUse) || this.isCrossDomain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isUrl", {
        get: function () {
            return this.icon.endsWith('.svg');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isSrc", {
        get: function () {
            return isPresumedHTMLString(this.icon);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isName", {
        get: function () {
            return !this.isUrl && !this.isUse && !this.isSrc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSvgComponent.prototype, "isCrossDomain", {
        get: function () {
            var _a = this, use = _a.use, isUse = _a.isUse, windowRef = _a.windowRef;
            return (isUse &&
                use.startsWith('http') &&
                !!windowRef.origin &&
                !use.startsWith(windowRef.origin));
        },
        enumerable: true,
        configurable: true
    });
    TuiSvgComponent.prototype.onError = function (message) {
        if (message === void 0) { message = MISSING_EXTERNAL_ICON; }
        var icon = this.icon;
        var event = tuiCustomEvent(TUI_ICON_ERROR, {
            bubbles: true,
            detail: {
                message: message,
                icon: icon,
            },
        }, this.documentRef);
        tuiAssert.assert(false, message, icon);
        this.elementRef.nativeElement.dispatchEvent(event);
    };
    TuiSvgComponent.prototype.resolveName = function (name, iconsPath) {
        return iconsPath(name);
    };
    TuiSvgComponent.prototype.getSafeHtml = function (src) {
        return this.isSrc ? this.sanitize(src) : this.process(src);
    };
    TuiSvgComponent.prototype.process = function (src) {
        var icon = this.svgService.getOriginal(src);
        if (this.isName && !icon && !!src) {
            this.onError(UNDEFINED_NAMED_ICON);
        }
        // Empty line for innerHTML when icon is shown through USE tag
        return !this.isShadowDOM || !this.isName ? '' : this.sanitize(icon || '');
    };
    TuiSvgComponent.prototype.sanitize = function (src) {
        src = this.contentProcessor(src);
        return this.tuiSanitizer
            ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(SecurityContext.HTML, src) || '')
            : src;
    };
    TuiSvgComponent.prototype.getExternalIcon = function (src) {
        var _this = this;
        var url = src.includes('.svg') ? src : this.use;
        return this.staticRequestService.request(url).pipe(catchError(function () {
            _this.onError(FAILED_EXTERNAL_ICON);
            return of('');
        }), map(function (response) {
            return _this.sanitize(response.replace('<svg', '<svg focusable="false"'));
        }));
    };
    TuiSvgComponent.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS_PATH,] }] },
        { type: Sanitizer, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SANITIZER,] }] },
        { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
        { type: TuiStaticRequestService, decorators: [{ type: Inject, args: [TuiStaticRequestService,] }] },
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_SVG_SRC_PROCESSOR,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_SVG_CONTENT_PROCESSOR,] }] }
    ]; };
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiSvgComponent.prototype, "src", null);
    __decorate([
        tuiPure
    ], TuiSvgComponent.prototype, "resolveName", null);
    TuiSvgComponent = __decorate([
        Component({
            selector: 'tui-svg',
            template: "<ng-container *tuiLet=\"innerHTML$ | async as innerHTML\">\n    <div\n        *ngIf=\"isInnerHTML; else useTemplate\"\n        class=\"t-src\"\n        [innerHTML]=\"innerHTML\"\n    ></div>\n    <ng-template #useTemplate>\n        <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            focusable=\"false\"\n            width=\"100%\"\n            height=\"100%\"\n            (error)=\"onError()\"\n        >\n            <use [attr.xlink:href]=\"use\"></use>\n        </svg>\n    </ng-template>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:inline-block;vertical-align:middle;flex-shrink:0;line-height:0;height:1.5rem;width:1.5rem;fill:currentColor;font-size:1rem}.t-src{display:flex;height:100%;align-items:center;justify-content:center}"]
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(WINDOW)),
        __param(2, Inject(TUI_ICONS_PATH)),
        __param(3, Optional()),
        __param(3, Inject(TUI_SANITIZER)),
        __param(4, Inject(TuiSvgService)),
        __param(5, Inject(TuiStaticRequestService)),
        __param(6, Inject(DomSanitizer)),
        __param(7, Inject(ElementRef)),
        __param(8, Inject(USER_AGENT)),
        __param(9, Inject(TUI_SVG_SRC_PROCESSOR)),
        __param(10, Inject(TUI_SVG_CONTENT_PROCESSOR))
    ], TuiSvgComponent);
    return TuiSvgComponent;
}());

var TuiSvgModule = /** @class */ (function () {
    function TuiSvgModule() {
    }
    TuiSvgModule = __decorate([
        NgModule({
            imports: [CommonModule, TuiLetModule],
            declarations: [TuiSvgComponent],
            exports: [TuiSvgComponent],
        })
    ], TuiSvgModule);
    return TuiSvgModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiSvgComponent, TuiSvgModule };
//# sourceMappingURL=taiga-ui-core-components-svg.js.map
