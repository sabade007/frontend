import { __decorate, __param } from 'tslib';
import { Inject, Input, HostBinding, Directive, NgModule } from '@angular/core';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';

// TODO: 3.0 remove `tui-wrapper` mode
var TuiWrapperDirective = /** @class */ (function () {
    function TuiWrapperDirective(mode$) {
        this.mode$ = mode$;
        this.disabled = false;
        this.readOnly = false;
        // TODO: 3.0 Rename to `hover`
        this.hovered = null;
        // TODO: 3.0 Rename to `active`
        this.pressed = null;
        this.focused = false;
        this.invalid = false;
        this.appearance = '';
    }
    Object.defineProperty(TuiWrapperDirective.prototype, "computedInvalid", {
        get: function () {
            return !this.disabled && !this.readOnly && this.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "computedFocused", {
        get: function () {
            return this.focused && !this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "interactiveState", {
        get: function () {
            if (this.disabled) {
                return "disabled" /* Disabled */;
            }
            if (this.readOnly) {
                return "readonly" /* Readonly */;
            }
            if (this.pressed) {
                return "pressed" /* Pressed */;
            }
            if (this.hovered) {
                return "hovered" /* Hovered */;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "noHover", {
        get: function () {
            return this.readOnly || this.hovered === false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "noActive", {
        get: function () {
            return this.readOnly || this.pressed === false;
        },
        enumerable: true,
        configurable: true
    });
    TuiWrapperDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "readOnly", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "hovered", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "pressed", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "focused", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "invalid", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-appearance')
    ], TuiWrapperDirective.prototype, "appearance", void 0);
    __decorate([
        HostBinding('class._invalid')
    ], TuiWrapperDirective.prototype, "computedInvalid", null);
    __decorate([
        HostBinding('class._focused')
    ], TuiWrapperDirective.prototype, "computedFocused", null);
    __decorate([
        HostBinding('attr.data-state')
    ], TuiWrapperDirective.prototype, "interactiveState", null);
    __decorate([
        HostBinding('class._no-hover')
    ], TuiWrapperDirective.prototype, "noHover", null);
    __decorate([
        HostBinding('class._no-active')
    ], TuiWrapperDirective.prototype, "noActive", null);
    TuiWrapperDirective = __decorate([
        Directive({
            selector: 'tui-wrapper, [tuiWrapper]',
            providers: [MODE_PROVIDER],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
        }),
        __param(0, Inject(TUI_MODE))
    ], TuiWrapperDirective);
    return TuiWrapperDirective;
}());

var TuiWrapperModule = /** @class */ (function () {
    function TuiWrapperModule() {
    }
    TuiWrapperModule = __decorate([
        NgModule({
            declarations: [TuiWrapperDirective],
            exports: [TuiWrapperDirective],
        })
    ], TuiWrapperModule);
    return TuiWrapperModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiWrapperDirective, TuiWrapperModule };
//# sourceMappingURL=taiga-ui-core-directives-wrapper.js.map
