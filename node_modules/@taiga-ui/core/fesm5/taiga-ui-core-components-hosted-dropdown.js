import { __decorate, __param } from 'tslib';
import { Directive, EventEmitter, ElementRef, Inject, ContentChild, ViewChild, Input, Output, HostBinding, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { isNativeKeyboardFocusable, getClosestFocusable, isNativeFocusedIn, isElementEditable, setNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiObscuredModule, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TuiDropdownDirective, TuiDropdownModule } from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownControllerDirective, TUI_DROPDOWN_WATCHED_CONTROLLER, DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/core/directives/dropdown-controller';
import { isEditingKey } from '@taiga-ui/core/utils/miscellaneous';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

var TuiHostedDropdownConnectorDirective = /** @class */ (function () {
    function TuiHostedDropdownConnectorDirective() {
    }
    TuiHostedDropdownConnectorDirective = __decorate([
        Directive({
            selector: '[tuiHostedDropdownHost]',
        })
    ], TuiHostedDropdownConnectorDirective);
    return TuiHostedDropdownConnectorDirective;
}());

var TuiHostedDropdownComponent = /** @class */ (function () {
    function TuiHostedDropdownComponent(elementRef, controller) {
        this.elementRef = elementRef;
        this.controller = controller;
        this.content = '';
        this.canOpen = true;
        this.open = false;
        this.openChange = new EventEmitter();
        this.focusedChange = new EventEmitter();
    }
    TuiHostedDropdownComponent_1 = TuiHostedDropdownComponent;
    Object.defineProperty(TuiHostedDropdownComponent.prototype, "host", {
        get: function () {
            return this.dropdownHost
                ? this.dropdownHost.nativeElement
                : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHostedDropdownComponent.prototype, "dropdown", {
        get: function () {
            return !this.dropdownDirective || this.dropdownDirective.dropdownBoxRef === null
                ? null
                : this.dropdownDirective.dropdownBoxRef.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHostedDropdownComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return isNativeKeyboardFocusable(this.host)
                ? this.host
                : getClosestFocusable(this.host, false, this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHostedDropdownComponent.prototype, "focused", {
        get: function () {
            return (isNativeFocusedIn(this.host) ||
                (this.open && !!this.wrapper && isNativeFocusedIn(this.wrapper.nativeElement)));
        },
        enumerable: true,
        configurable: true
    });
    TuiHostedDropdownComponent.prototype.onFocusIn = function (target) {
        var host = this.dropdownHost
            ? this.dropdownHost.nativeElement
            : this.nativeFocusableElement || this.elementRef.nativeElement;
        if (!host.contains(target)) {
            this.updateOpen(false);
        }
    };
    TuiHostedDropdownComponent.prototype.onClick = function (target) {
        var host = this.nativeFocusableElement || this.host;
        var dropdownHost = this.dropdownHost ? this.dropdownHost.nativeElement : host;
        if (!this.hostEditable && dropdownHost.contains(target)) {
            this.updateOpen(!this.open);
        }
    };
    TuiHostedDropdownComponent.prototype.onKeyDownEsc = function (event) {
        if (!this.canOpen || !this.open) {
            return;
        }
        event.stopPropagation();
        this.closeDropdown();
    };
    TuiHostedDropdownComponent.prototype.onArrow = function (event, down) {
        this.focusDropdown(event, down);
    };
    TuiHostedDropdownComponent.prototype.onKeydown = function (_a) {
        var key = _a.key, target = _a.target, defaultPrevented = _a.defaultPrevented;
        if (!defaultPrevented &&
            isEditingKey(key) &&
            this.hostEditable &&
            // TODO: iframe warning
            target instanceof HTMLElement &&
            !isElementEditable(target)) {
            this.focusHost();
        }
    };
    TuiHostedDropdownComponent.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
        if (!active) {
            this.updateOpen(false);
        }
    };
    TuiHostedDropdownComponent.prototype.onHostObscured = function (obscured) {
        if (obscured) {
            this.closeDropdown();
        }
    };
    TuiHostedDropdownComponent.prototype.updateOpen = function (open) {
        if (open && !this.canOpen) {
            return;
        }
        this.open = open;
        this.openChange.emit(open);
    };
    Object.defineProperty(TuiHostedDropdownComponent.prototype, "hostEditable", {
        get: function () {
            var host = this.nativeFocusableElement || this.host;
            // TODO: iframe warning
            return host instanceof HTMLElement && isElementEditable(host);
        },
        enumerable: true,
        configurable: true
    });
    TuiHostedDropdownComponent.prototype.focusDropdown = function (event, first) {
        var host = this.nativeFocusableElement;
        // TODO: iframe warning
        if (!host ||
            !(host instanceof HTMLElement) ||
            !(event.target instanceof Node) ||
            !host.contains(event.target)) {
            return;
        }
        if (!this.wrapper ||
            !this.open ||
            this.dropdown === null ||
            // TODO: iframe warning
            !(this.wrapper.nativeElement.nextElementSibling instanceof HTMLElement)) {
            this.updateOpen(true);
            if (!isElementEditable(host)) {
                event.preventDefault();
            }
            return;
        }
        var initial = first
            ? this.wrapper.nativeElement
            : this.wrapper.nativeElement.nextElementSibling;
        var focusable = getClosestFocusable(initial, !first, this.wrapper.nativeElement);
        if (focusable === null) {
            return;
        }
        setNativeFocused(focusable);
        event.preventDefault();
    };
    TuiHostedDropdownComponent.prototype.closeDropdown = function () {
        if (this.focused) {
            this.focusHost();
        }
        this.updateOpen(false);
    };
    TuiHostedDropdownComponent.prototype.focusHost = function () {
        var host = this.nativeFocusableElement;
        if (host !== null) {
            setNativeFocused(host, true, true);
        }
    };
    TuiHostedDropdownComponent.prototype.updateFocused = function (focused) {
        this.focusedChange.emit(focused);
    };
    var TuiHostedDropdownComponent_1;
    TuiHostedDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiDropdownControllerDirective, decorators: [{ type: Inject, args: [TUI_DROPDOWN_WATCHED_CONTROLLER,] }] }
    ]; };
    __decorate([
        ContentChild(TuiHostedDropdownConnectorDirective, { read: ElementRef })
    ], TuiHostedDropdownComponent.prototype, "dropdownHost", void 0);
    __decorate([
        ViewChild('wrapper', { read: ElementRef })
    ], TuiHostedDropdownComponent.prototype, "wrapper", void 0);
    __decorate([
        ViewChild(TuiDropdownDirective)
    ], TuiHostedDropdownComponent.prototype, "dropdownDirective", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHostedDropdownComponent.prototype, "content", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHostedDropdownComponent.prototype, "canOpen", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHostedDropdownComponent.prototype, "open", void 0);
    __decorate([
        Output()
    ], TuiHostedDropdownComponent.prototype, "openChange", void 0);
    __decorate([
        Output()
    ], TuiHostedDropdownComponent.prototype, "focusedChange", void 0);
    __decorate([
        HostBinding('class._hosted_dropdown_focused')
    ], TuiHostedDropdownComponent.prototype, "focused", null);
    __decorate([
        HostListener('focusin', ['$event.target'])
    ], TuiHostedDropdownComponent.prototype, "onFocusIn", null);
    __decorate([
        HostListener('click', ['$event.target'])
    ], TuiHostedDropdownComponent.prototype, "onClick", null);
    __decorate([
        HostListener('keydown.esc', ['$event'])
    ], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
    __decorate([
        HostListener('keydown.arrowDown', ['$event', 'true']),
        HostListener('keydown.arrowUp', ['$event', 'false'])
    ], TuiHostedDropdownComponent.prototype, "onArrow", null);
    TuiHostedDropdownComponent = TuiHostedDropdownComponent_1 = __decorate([
        Component({
            selector: 'tui-hosted-dropdown',
            template: "<div\n    #activeZone=\"tuiActiveZone\"\n    class=\"t-wrapper\"\n    [tuiDropdownAlign]=\"controller.align\"\n    [tuiDropdownDirection]=\"controller.direction\"\n    [tuiDropdownHost]=\"nativeFocusableElement\"\n    [tuiDropdownLimitWidth]=\"controller.limitWidth\"\n    [tuiDropdownMinHeight]=\"controller.minHeight\"\n    [tuiDropdownMaxHeight]=\"controller.maxHeight\"\n    [tuiDropdownSided]=\"controller.sided\"\n    [tuiDropdownContent]=\"dropdown\"\n    [tuiDropdown]=\"open && canOpen\"\n    [tuiObscuredEnabled]=\"open\"\n    (tuiObscured)=\"onHostObscured($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <ng-content></ng-content>\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        polymorpheus\n    >\n        <div\n            #wrapper\n            polymorpheus-outlet\n            [content]=\"content\"\n            [context]=\"{$implicit: activeZone}\"\n            (keydown.esc)=\"onKeyDownEsc($event)\"\n            (keydown)=\"onKeydown($event)\"\n        ></div>\n        <!--This DIV is here to start backwards TreeWalker for focusing last focusable item on ArrowUp-->\n        <div></div>\n    </ng-template>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiHostedDropdownComponent_1; }),
                },
                DROPDOWN_CONTROLLER_PROVIDER,
            ],
            styles: [":host{display:inline-flex}.t-wrapper{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TUI_DROPDOWN_WATCHED_CONTROLLER))
    ], TuiHostedDropdownComponent);
    return TuiHostedDropdownComponent;
}());

var TuiHostedDropdownModule = /** @class */ (function () {
    function TuiHostedDropdownModule() {
    }
    TuiHostedDropdownModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TuiObscuredModule,
                PolymorpheusModule,
                TuiActiveZoneModule,
                TuiDropdownModule,
            ],
            declarations: [TuiHostedDropdownComponent, TuiHostedDropdownConnectorDirective],
            exports: [TuiHostedDropdownComponent, TuiHostedDropdownConnectorDirective],
        })
    ], TuiHostedDropdownModule);
    return TuiHostedDropdownModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiHostedDropdownComponent, TuiHostedDropdownConnectorDirective, TuiHostedDropdownModule };
//# sourceMappingURL=taiga-ui-core-components-hosted-dropdown.js.map
