import { __decorate, __param, __spread } from 'tslib';
import { Optional, Inject, forwardRef, ElementRef, Self, Input, HostBinding, HostListener, Component, ChangeDetectionStrategy, ContentChildren, ViewEncapsulation, Directive, NgModule } from '@angular/core';
import { isNativeFocused, setNativeFocused, tuiDefaultProp, EMPTY_QUERY, itemsQueryListObservable, moveFocus, isNativeFocusedIn, setNativeMouseFocused, isPresent, tuiAssertIsHTMLElement, tuiPure, typedFromEvent, preventDefault, getClosestKeyboardFocusable } from '@taiga-ui/cdk';
import { TUI_OPTION_CONTENT, TUI_DATA_LIST_HOST, TUI_NOTHING_FOUND_MESSAGE, TUI_DATA_LIST_ACCESSOR } from '@taiga-ui/core/tokens';
import { Observable, merge, EMPTY } from 'rxjs';
import { map, switchMap, take, filter, tap, shareReplay, mapTo, debounceTime } from 'rxjs/operators';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { CommonModule } from '@angular/common';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// eslint-disable-next-line @typescript-eslint/naming-convention
function shouldFocus(_a) {
    var currentTarget = _a.currentTarget;
    return !isNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
var TuiOptionComponent = /** @class */ (function () {
    // TODO: 3.0 Fix dataList type when updated to Ivy and compilation drops metadata
    function TuiOptionComponent(content, dataList, elementRef, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.elementRef = elementRef;
        this.host = host;
        this.dropdown = dropdown;
        this.size = 'm';
        this.role = 'option';
        this.disabled = false;
    }
    Object.defineProperty(TuiOptionComponent.prototype, "active", {
        get: function () {
            return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
        },
        enumerable: true,
        configurable: true
    });
    TuiOptionComponent.prototype.onClick = function () {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    };
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiOptionComponent.prototype.onMouseMove = function (_a) {
        var currentTarget = _a.currentTarget;
        setNativeFocused(currentTarget, true, true);
    };
    // Preventing focus loss upon focused option removal
    TuiOptionComponent.prototype.ngOnDestroy = function () {
        this.dataList.handleFocusLossIfNecessary(this.elementRef.nativeElement);
    };
    TuiOptionComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_OPTION_CONTENT,] }] },
        { type: TuiDataListComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiDataListComponent; }),] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
        { type: TuiDropdownDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TuiDropdownDirective,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TuiOptionComponent.prototype, "value", void 0);
    __decorate([
        HostBinding('class._with-dropdown')
    ], TuiOptionComponent.prototype, "active", null);
    __decorate([
        HostListener('click')
    ], TuiOptionComponent.prototype, "onClick", null);
    __decorate([
        shouldCall(shouldFocus),
        HostListener('mousemove.init', ['$event']),
        HostListener('mousemove.silent', ['$event'])
    ], TuiOptionComponent.prototype, "onMouseMove", null);
    TuiOptionComponent = __decorate([
        Component({
            selector: 'button[tuiOption], a[tuiOption]',
            template: "<span\n    *ngIf=\"content; else base\"\n    polymorpheus-outlet\n    class=\"t-content\"\n    [content]=\"content\"\n    [context]=\"{$implicit: base}\"\n></span>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg\n        *ngIf=\"dropdown\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-arrow\"\n    ></tui-svg>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                tabIndex: '-1',
                type: 'button',
                '[attr.disabled]': 'disabled || null',
            },
            styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:padding-box;font-size:inherit;line-height:inherit;transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;font:var(--tui-font-text-m);width:100%;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);outline:0;text-decoration:none;cursor:pointer}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host._with-dropdown,:host:focus{background-color:var(--tui-base-02)}:host[data-size=xs]{font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .75rem}:host[data-size='s']{min-height:2rem;padding:.3125rem .75rem}:host[data-size='m']{min-height:2.75rem;padding:.375rem 1rem}:host[data-size='l']{min-height:3.5rem;padding:.75rem 1rem}.t-content{display:flex;flex:1;max-width:100%}.t-arrow{margin:0 -.5rem 0 .75rem}"]
        }),
        __param(0, Optional()),
        __param(0, Inject(TUI_OPTION_CONTENT)),
        __param(1, Inject(forwardRef(function () { return TuiDataListComponent; }))),
        __param(2, Inject(ElementRef)),
        __param(3, Optional()),
        __param(3, Inject(TUI_DATA_LIST_HOST)),
        __param(4, Optional()),
        __param(4, Self()),
        __param(4, Inject(TuiDropdownDirective))
    ], TuiOptionComponent);
    return TuiOptionComponent;
}());

// TODO: Consider aria-activedescendant for proper accessibility implementation
// @dynamic
var TuiDataListComponent = /** @class */ (function () {
    function TuiDataListComponent(elementRef, defaultEmptyContent$) {
        this.elementRef = elementRef;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.options = EMPTY_QUERY;
        this.role = 'listbox';
        this.emptyContent = '';
    }
    TuiDataListComponent_1 = TuiDataListComponent;
    Object.defineProperty(TuiDataListComponent.prototype, "empty$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (_a) {
                var length = _a.length;
                return !length;
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiDataListComponent.prototype.onFocusIn = function (relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    };
    TuiDataListComponent.prototype.noop = function () { };
    TuiDataListComponent.prototype.onKeyDownArrow = function (current, step) {
        var elements = this.elements;
        moveFocus(elements.indexOf(current), elements, step);
    };
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiDataListComponent.prototype.handleFocusLossIfNecessary = function (element) {
        if (element === void 0) { element = this.elementRef.nativeElement; }
        if (this.origin && isNativeFocusedIn(element)) {
            setNativeMouseFocused(this.origin, true, true);
        }
    };
    TuiDataListComponent.prototype.getOptions = function (includeDisabled) {
        if (includeDisabled === void 0) { includeDisabled = false; }
        return this.options
            .toArray()
            .filter(function (_a) {
            var disabled = _a.disabled;
            return includeDisabled || !disabled;
        })
            .map(function (_a) {
            var value = _a.value;
            return value;
        })
            .filter(isPresent);
    };
    TuiDataListComponent.prototype.onFocus = function (_a, top) {
        var target = _a.target;
        tuiAssertIsHTMLElement(target);
        var elements = this.elements;
        moveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(target);
    };
    Object.defineProperty(TuiDataListComponent.prototype, "elements", {
        get: function () {
            return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiOption]'));
        },
        enumerable: true,
        configurable: true
    });
    var TuiDataListComponent_1;
    TuiDataListComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_NOTHING_FOUND_MESSAGE,] }] }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return TuiOptionComponent; }), { descendants: true })
    ], TuiDataListComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "emptyContent", void 0);
    __decorate([
        tuiPure
    ], TuiDataListComponent.prototype, "empty$", null);
    __decorate([
        HostListener('focusin', ['$event.relatedTarget', '$event.currentTarget'])
    ], TuiDataListComponent.prototype, "onFocusIn", null);
    __decorate([
        HostListener('mousedown.prevent')
    ], TuiDataListComponent.prototype, "noop", null);
    __decorate([
        HostListener('keydown.arrowDown.prevent', ['$event.target', '1']),
        HostListener('keydown.arrowUp.prevent', ['$event.target', '-1'])
    ], TuiDataListComponent.prototype, "onKeyDownArrow", null);
    __decorate([
        HostListener('wheel.silent.passive'),
        HostListener('mouseleave', ['$event.target'])
    ], TuiDataListComponent.prototype, "handleFocusLossIfNecessary", null);
    TuiDataListComponent = TuiDataListComponent_1 = __decorate([
        Component({
            selector: 'tui-data-list',
            template: "<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, true)\"\n></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    polymorpheus-outlet\n    class=\"t-empty\"\n    [content]=\"emptyContent || (defaultEmptyContent$ | async)\"\n></div>\n<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, false)\"\n></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    provide: TUI_DATA_LIST_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiDataListComponent_1; }),
                },
            ],
            styles: ["tui-data-list{display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:.5rem 0;color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list>.t-empty{margin:.75rem 1rem}tui-opt-group{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;font:var(--tui-font-text-xs);flex-direction:column;line-height:2rem}tui-opt-group:empty:after,tui-opt-group:empty:before{display:none}tui-opt-group:before{content:attr(data-label);padding:.5rem 1rem;color:var(--tui-text-02);line-height:1rem;white-space:normal}tui-opt-group:not(:empty)~tui-opt-group:before{padding:1.5rem 1rem .5rem}tui-opt-group:not(:empty)~tui-opt-group[data-label='']:before{padding:1rem 0 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:'';position:absolute;left:0;right:0;top:.5rem;height:1px;background:var(--tui-base-03)}tui-opt-group[data-label='']:before{padding:0 1rem}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TUI_NOTHING_FOUND_MESSAGE))
    ], TuiDataListComponent);
    return TuiDataListComponent;
}());

var TuiDataListDirective = /** @class */ (function () {
    function TuiDataListDirective() {
    }
    TuiDataListDirective = __decorate([
        Directive({
            selector: 'ng-template[tuiDataList]',
        })
    ], TuiDataListDirective);
    return TuiDataListDirective;
}());

// TODO: 3.0 Move into separate module
var TuiDataListDropdownManagerDirective = /** @class */ (function () {
    function TuiDataListDropdownManagerDirective() {
        this.dropdowns = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    TuiDataListDropdownManagerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.right$.subscribe(function (index) {
            _this.tryToFocus(index);
        });
        merge(this.immediate$, this.debounce$)
            .pipe(switchMap(function (active) {
            _this.dropdowns.forEach(function (dropdown, index) {
                dropdown.open = index === active;
            });
            var element = _this.elements.toArray()[active];
            var dropdown = _this.dropdowns.toArray()[active];
            if (!element || !dropdown || !dropdown.dropdownBoxRef) {
                return EMPTY;
            }
            var nativeElement = dropdown.dropdownBoxRef.location.nativeElement;
            var mouseEnter$ = typedFromEvent(nativeElement, 'mouseenter').pipe(take(1));
            var esc$ = merge(typedFromEvent(element.nativeElement, 'keydown'), typedFromEvent(nativeElement, 'keydown')).pipe(filter(function (_a) {
                var keyCode = _a.keyCode;
                return keyCode === 27;
            }));
            return merge(mouseEnter$, esc$).pipe(tap(function (event) {
                if (dropdown.dropdownBoxRef) {
                    event.stopPropagation();
                }
                setNativeFocused(element.nativeElement);
                // TODO: iframe warning
                dropdown.open = event instanceof MouseEvent;
            }));
        }))
            .subscribe();
    };
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "elements$", {
        get: function () {
            return itemsQueryListObservable(this.elements).pipe(map(function (array) { return array.map(function (_a) {
                var nativeElement = _a.nativeElement;
                return nativeElement;
            }); }), shareReplay({ bufferSize: 1, refCount: true }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "right$", {
        get: function () {
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return typedFromEvent(element, 'keydown').pipe(filter(function (_a) {
                        var keyCode = _a.keyCode;
                        return keyCode === 39;
                    }), preventDefault(), mapTo(index));
                })));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "immediate$", {
        get: function () {
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return typedFromEvent(element, 'click').pipe(mapTo(index));
                })));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "debounce$", {
        get: function () {
            var _this = this;
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return merge(typedFromEvent(element, 'focus'), typedFromEvent(element, 'blur')).pipe(filter(function (_a) {
                        var relatedTarget = _a.relatedTarget;
                        return _this.notInDropdown(relatedTarget, index);
                    }), map(function (_a) {
                        var type = _a.type;
                        return (type === 'focus' ? index : NaN);
                    }));
                })));
            }), debounceTime(300));
        },
        enumerable: true,
        configurable: true
    });
    TuiDataListDropdownManagerDirective.prototype.notInDropdown = function (element, index) {
        var _a;
        var dropdown = this.dropdowns.toArray()[index];
        return !((_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(element));
    };
    TuiDataListDropdownManagerDirective.prototype.tryToFocus = function (index) {
        var _a;
        var dropdown = this.dropdowns.toArray()[index];
        var content = (_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef;
        if (!content) {
            return;
        }
        var item = getClosestKeyboardFocusable(content.nativeElement, false, content.nativeElement);
        if (item) {
            setNativeFocused(item);
        }
    };
    __decorate([
        ContentChildren(TuiDropdownDirective, { descendants: true })
    ], TuiDataListDropdownManagerDirective.prototype, "dropdowns", void 0);
    __decorate([
        ContentChildren(TuiDropdownDirective, { read: ElementRef, descendants: true })
    ], TuiDataListDropdownManagerDirective.prototype, "elements", void 0);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "right$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
    TuiDataListDropdownManagerDirective = __decorate([
        Directive({
            selector: 'tui-data-list[tuiDataListDropdownManager]',
        })
    ], TuiDataListDropdownManagerDirective);
    return TuiDataListDropdownManagerDirective;
}());

var TuiOptGroupDirective = /** @class */ (function () {
    function TuiOptGroupDirective() {
        this.label = '';
    }
    __decorate([
        Input(),
        HostBinding('attr.data-label'),
        tuiDefaultProp()
    ], TuiOptGroupDirective.prototype, "label", void 0);
    TuiOptGroupDirective = __decorate([
        Directive({
            selector: 'tui-opt-group',
            host: {
                role: 'group',
            },
        })
    ], TuiOptGroupDirective);
    return TuiOptGroupDirective;
}());

var TuiDataListModule = /** @class */ (function () {
    function TuiDataListModule() {
    }
    TuiDataListModule = __decorate([
        NgModule({
            imports: [CommonModule, TuiSvgModule, PolymorpheusModule],
            declarations: [
                TuiDataListComponent,
                TuiOptionComponent,
                TuiOptGroupDirective,
                TuiDataListDirective,
                TuiDataListDropdownManagerDirective,
            ],
            exports: [
                TuiDataListComponent,
                TuiOptionComponent,
                TuiOptGroupDirective,
                TuiDataListDirective,
                TuiDataListDropdownManagerDirective,
            ],
        })
    ], TuiDataListModule);
    return TuiDataListModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDataListComponent, TuiDataListDirective, TuiDataListDropdownManagerDirective, TuiDataListModule, TuiOptGroupDirective, TuiOptionComponent, shouldFocus };
//# sourceMappingURL=taiga-ui-core-components-data-list.js.map
