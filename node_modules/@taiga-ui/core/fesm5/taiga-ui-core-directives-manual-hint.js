import { __assign, __extends, __decorate, __param } from 'tslib';
import { InjectionToken, ElementRef, Inject, Optional, Input, Directive, NgModule } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';

/** Default values for manual hint options */
var TUI_MANUAL_HINT_DEFAULT_OPTIONS = __assign({}, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS);
var TUI_MANUAL_HINT_OPTIONS = new InjectionToken("Default parameters for manual hint directive", {
    factory: function () { return TUI_MANUAL_HINT_DEFAULT_OPTIONS; },
});
var tuiManualHintOptionsProvider = function (options) { return ({
    provide: TUI_MANUAL_HINT_OPTIONS,
    useValue: __assign(__assign({}, TUI_MANUAL_HINT_DEFAULT_OPTIONS), options),
}); };

var TuiManualHintDirective = /** @class */ (function (_super) {
    __extends(TuiManualHintDirective, _super);
    function TuiManualHintDirective(elementRef, hintService, activeZone, options) {
        var _this = _super.call(this, elementRef, hintService, activeZone, options) || this;
        _this.options = options;
        _this.content = '';
        return _this;
    }
    Object.defineProperty(TuiManualHintDirective.prototype, "tuiManualHintShow", {
        set: function (show) {
            if (show) {
                this.showTooltip();
            }
            else {
                this.hideTooltip();
            }
        },
        enumerable: true,
        configurable: true
    });
    TuiManualHintDirective.prototype.getElementClientRect = function () {
        return this.elementRef.nativeElement.getBoundingClientRect();
    };
    TuiManualHintDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MANUAL_HINT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input('tuiManualHint'),
        tuiDefaultProp()
    ], TuiManualHintDirective.prototype, "content", void 0);
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiManualHintDirective.prototype, "tuiManualHintShow", null);
    TuiManualHintDirective = __decorate([
        Directive({
            selector: '[tuiManualHint]:not(ng-container)',
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiHintService)),
        __param(2, Optional()),
        __param(2, Inject(TuiActiveZoneDirective)),
        __param(3, Inject(TUI_MANUAL_HINT_OPTIONS))
    ], TuiManualHintDirective);
    return TuiManualHintDirective;
}(AbstractTuiHint));

var TuiManualHintModule = /** @class */ (function () {
    function TuiManualHintModule() {
    }
    TuiManualHintModule = __decorate([
        NgModule({
            declarations: [TuiManualHintDirective],
            exports: [TuiManualHintDirective],
        })
    ], TuiManualHintModule);
    return TuiManualHintModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_MANUAL_HINT_DEFAULT_OPTIONS, TUI_MANUAL_HINT_OPTIONS, TuiManualHintDirective, TuiManualHintModule, tuiManualHintOptionsProvider };
//# sourceMappingURL=taiga-ui-core-directives-manual-hint.js.map
