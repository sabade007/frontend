import { SkipSelf, ElementRef, Optional } from '@angular/core';
import { TUI_IS_MOBILE_RES, TUI_MODE } from '@taiga-ui/core/tokens';
import { TuiModeDirective } from '@taiga-ui/core/directives/mode';
import { of } from 'rxjs';
import { startWith, map, takeUntil } from 'rxjs/operators';
import { watch } from '@taiga-ui/cdk';

/**
 * @deprecated: use {@link tuiIsMobileResFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isMobileResFactory(mobile$, _a) {
    var nativeElement = _a.nativeElement;
    nativeElement["$.class._mobile"] = mobile$;
    return mobile$;
}
var TUI_IS_MOBILE_RES_PROVIDER = {
    provide: TUI_IS_MOBILE_RES,
    deps: [[new SkipSelf(), TUI_IS_MOBILE_RES], ElementRef],
    useFactory: isMobileResFactory,
};
var tuiIsMobileResFactory = isMobileResFactory;

/**
 * @deprecated: use {@link tuiModeFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function modeFactory(mode, _a) {
    var nativeElement = _a.nativeElement;
    var mode$ = mode
        ? mode.change$.pipe(startWith(null), map(function () { return mode.mode; }))
        : of(null);
    nativeElement["$.data-mode.attr"] = mode$;
    return mode$;
}
var MODE_PROVIDER = {
    provide: TUI_MODE,
    deps: [[new Optional(), TuiModeDirective], ElementRef],
    useFactory: modeFactory,
};
var tuiModeFactory = modeFactory;

/**
 * @deprecated: use {@link tuiWatchedControllerFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function watchedControllerFactory(controller, changeDetectorRef, destroy$) {
    controller.change$.pipe(watch(changeDetectorRef), takeUntil(destroy$)).subscribe();
    return controller;
}
var tuiWatchedControllerFactory = watchedControllerFactory;

/**
 * Generated bundle index. Do not edit.
 */

export { MODE_PROVIDER, TUI_IS_MOBILE_RES_PROVIDER, isMobileResFactory, modeFactory, tuiIsMobileResFactory, tuiModeFactory, tuiWatchedControllerFactory, watchedControllerFactory };
//# sourceMappingURL=taiga-ui-core-providers.js.map
