import { __extends, __decorate, __spread } from 'tslib';
import { InjectionToken, Input, Directive, forwardRef, NgModule, ChangeDetectorRef } from '@angular/core';
import { TuiController, watch, TuiDestroyService } from '@taiga-ui/cdk';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

var TuiTextfieldController = /** @class */ (function () {
    function TuiTextfieldController(change$, autocompleteDirective, cleanerDirective, customContentDirective, exampleTextDirective, inputModeDirective, labelOutsideDirective, maxLengthDirective, sizeDirective, typeDirective) {
        this.change$ = change$;
        this.autocompleteDirective = autocompleteDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.exampleTextDirective = exampleTextDirective;
        this.inputModeDirective = inputModeDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.maxLengthDirective = maxLengthDirective;
        this.sizeDirective = sizeDirective;
        this.typeDirective = typeDirective;
    }
    Object.defineProperty(TuiTextfieldController.prototype, "autocomplete", {
        get: function () {
            return this.autocompleteDirective.autocomplete;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "cleaner", {
        get: function () {
            return this.cleanerDirective.cleaner;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "customContent", {
        get: function () {
            return this.customContentDirective.customContent || "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "exampleText", {
        get: function () {
            return this.exampleTextDirective.exampleText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "inputMode", {
        get: function () {
            return this.inputModeDirective.inputMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "labelOutside", {
        get: function () {
            return this.labelOutsideDirective.labelOutside;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "maxLength", {
        get: function () {
            return this.maxLengthDirective.maxLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "size", {
        get: function () {
            return this.sizeDirective.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTextfieldController.prototype, "type", {
        get: function () {
            return this.typeDirective.type;
        },
        enumerable: true,
        configurable: true
    });
    return TuiTextfieldController;
}());

var TUI_TEXTFIELD_AUTOCOMPLETE = new InjectionToken('tuiTextfieldAutocomplete', {
    factory: autocompleteDirectiveFactory,
});
var TuiTextfieldAutocompleteDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldAutocompleteDirective, _super);
    function TuiTextfieldAutocompleteDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autocomplete = '';
        return _this;
    }
    TuiTextfieldAutocompleteDirective_1 = TuiTextfieldAutocompleteDirective;
    var TuiTextfieldAutocompleteDirective_1;
    __decorate([
        Input('tuiTextfieldAutocomplete')
    ], TuiTextfieldAutocompleteDirective.prototype, "autocomplete", void 0);
    TuiTextfieldAutocompleteDirective = TuiTextfieldAutocompleteDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldAutocomplete]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_AUTOCOMPLETE,
                    useExisting: forwardRef(function () { return TuiTextfieldAutocompleteDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldAutocompleteDirective);
    return TuiTextfieldAutocompleteDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function autocompleteDirectiveFactory() {
    return new TuiTextfieldAutocompleteDirective();
}

var TUI_TEXTFIELD_CLEANER = new InjectionToken('tuiTextfieldCleaner', {
    factory: cleanerDirectiveFactory,
});
var TuiTextfieldCleanerDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldCleanerDirective, _super);
    function TuiTextfieldCleanerDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cleaner = false;
        return _this;
    }
    TuiTextfieldCleanerDirective_1 = TuiTextfieldCleanerDirective;
    var TuiTextfieldCleanerDirective_1;
    __decorate([
        Input('tuiTextfieldCleaner')
    ], TuiTextfieldCleanerDirective.prototype, "cleaner", void 0);
    TuiTextfieldCleanerDirective = TuiTextfieldCleanerDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldCleaner]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_CLEANER,
                    useExisting: forwardRef(function () { return TuiTextfieldCleanerDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldCleanerDirective);
    return TuiTextfieldCleanerDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function cleanerDirectiveFactory() {
    return new TuiTextfieldCleanerDirective();
}

var TUI_TEXTFIELD_CUSTOM_CONTENT = new InjectionToken('tuiTextfieldCustomContent', {
    factory: customContentDirectiveFactory,
});
var TuiTextfieldCustomContentDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldCustomContentDirective, _super);
    function TuiTextfieldCustomContentDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // TODO: 3.0 Remove null
        _this.customContent = '';
        return _this;
    }
    TuiTextfieldCustomContentDirective_1 = TuiTextfieldCustomContentDirective;
    var TuiTextfieldCustomContentDirective_1;
    __decorate([
        Input('tuiTextfieldCustomContent')
    ], TuiTextfieldCustomContentDirective.prototype, "customContent", void 0);
    TuiTextfieldCustomContentDirective = TuiTextfieldCustomContentDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldCustomContent]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
                    useExisting: forwardRef(function () { return TuiTextfieldCustomContentDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldCustomContentDirective);
    return TuiTextfieldCustomContentDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function customContentDirectiveFactory() {
    return new TuiTextfieldCustomContentDirective();
}

var TUI_TEXTFIELD_EXAMPLE_TEXT = new InjectionToken('tuiTextfieldExampleText', {
    factory: exampleTextDirectiveFactory,
});
var TuiTextfieldExampleTextDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldExampleTextDirective, _super);
    function TuiTextfieldExampleTextDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.exampleText = '';
        return _this;
    }
    TuiTextfieldExampleTextDirective_1 = TuiTextfieldExampleTextDirective;
    var TuiTextfieldExampleTextDirective_1;
    __decorate([
        Input('tuiTextfieldExampleText')
    ], TuiTextfieldExampleTextDirective.prototype, "exampleText", void 0);
    TuiTextfieldExampleTextDirective = TuiTextfieldExampleTextDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldExampleText]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_EXAMPLE_TEXT,
                    useExisting: forwardRef(function () { return TuiTextfieldExampleTextDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldExampleTextDirective);
    return TuiTextfieldExampleTextDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function exampleTextDirectiveFactory() {
    return new TuiTextfieldExampleTextDirective();
}

var TUI_TEXTFIELD_INPUT_MODE = new InjectionToken('tuiTextfieldInputMode', {
    factory: inputModeDirectiveFactory,
});
var TuiTextfieldInputModeDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldInputModeDirective, _super);
    function TuiTextfieldInputModeDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.inputMode = 'text';
        return _this;
    }
    TuiTextfieldInputModeDirective_1 = TuiTextfieldInputModeDirective;
    var TuiTextfieldInputModeDirective_1;
    __decorate([
        Input('tuiTextfieldInputMode')
    ], TuiTextfieldInputModeDirective.prototype, "inputMode", void 0);
    TuiTextfieldInputModeDirective = TuiTextfieldInputModeDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldInputMode]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_INPUT_MODE,
                    useExisting: forwardRef(function () { return TuiTextfieldInputModeDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldInputModeDirective);
    return TuiTextfieldInputModeDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function inputModeDirectiveFactory() {
    return new TuiTextfieldInputModeDirective();
}

var TUI_TEXTFIELD_LABEL_OUTSIDE = new InjectionToken('tuiTextfieldLabelOutside', {
    factory: labelOutsideDirectiveFactory,
});
var TuiTextfieldLabelOutsideDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldLabelOutsideDirective, _super);
    function TuiTextfieldLabelOutsideDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.labelOutside = false;
        return _this;
    }
    TuiTextfieldLabelOutsideDirective_1 = TuiTextfieldLabelOutsideDirective;
    var TuiTextfieldLabelOutsideDirective_1;
    __decorate([
        Input('tuiTextfieldLabelOutside')
    ], TuiTextfieldLabelOutsideDirective.prototype, "labelOutside", void 0);
    TuiTextfieldLabelOutsideDirective = TuiTextfieldLabelOutsideDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldLabelOutside]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
                    useExisting: forwardRef(function () { return TuiTextfieldLabelOutsideDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldLabelOutsideDirective);
    return TuiTextfieldLabelOutsideDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function labelOutsideDirectiveFactory() {
    return new TuiTextfieldLabelOutsideDirective();
}

var TUI_TEXTFIELD_MAX_LENGTH = new InjectionToken('tuiTextfieldMaxLength', {
    factory: maxLengthDirectiveFactory,
});
var TuiTextfieldMaxLengthDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldMaxLengthDirective, _super);
    function TuiTextfieldMaxLengthDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxLength = null;
        return _this;
    }
    TuiTextfieldMaxLengthDirective_1 = TuiTextfieldMaxLengthDirective;
    var TuiTextfieldMaxLengthDirective_1;
    __decorate([
        Input('tuiTextfieldMaxLength')
    ], TuiTextfieldMaxLengthDirective.prototype, "maxLength", void 0);
    TuiTextfieldMaxLengthDirective = TuiTextfieldMaxLengthDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldMaxLength]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_MAX_LENGTH,
                    useExisting: forwardRef(function () { return TuiTextfieldMaxLengthDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldMaxLengthDirective);
    return TuiTextfieldMaxLengthDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function maxLengthDirectiveFactory() {
    return new TuiTextfieldMaxLengthDirective();
}

var TUI_TEXTFIELD_SIZE = new InjectionToken('tuiTextfieldSize', {
    factory: sizeDirectiveFactory,
});
var TuiTextfieldSizeDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldSizeDirective, _super);
    function TuiTextfieldSizeDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.size = 'l';
        return _this;
    }
    TuiTextfieldSizeDirective_1 = TuiTextfieldSizeDirective;
    var TuiTextfieldSizeDirective_1;
    __decorate([
        Input('tuiTextfieldSize')
    ], TuiTextfieldSizeDirective.prototype, "size", void 0);
    TuiTextfieldSizeDirective = TuiTextfieldSizeDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldSize]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_SIZE,
                    useExisting: forwardRef(function () { return TuiTextfieldSizeDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldSizeDirective);
    return TuiTextfieldSizeDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function sizeDirectiveFactory() {
    return new TuiTextfieldSizeDirective();
}

var TUI_TEXTFIELD_TYPE = new InjectionToken('tuiTextfieldType', {
    factory: typeDirectiveFactory,
});
var TuiTextfieldTypeDirective = /** @class */ (function (_super) {
    __extends(TuiTextfieldTypeDirective, _super);
    function TuiTextfieldTypeDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'text';
        return _this;
    }
    TuiTextfieldTypeDirective_1 = TuiTextfieldTypeDirective;
    var TuiTextfieldTypeDirective_1;
    __decorate([
        Input('tuiTextfieldType')
    ], TuiTextfieldTypeDirective.prototype, "type", void 0);
    TuiTextfieldTypeDirective = TuiTextfieldTypeDirective_1 = __decorate([
        Directive({
            selector: '[tuiTextfieldType]',
            providers: [
                {
                    provide: TUI_TEXTFIELD_TYPE,
                    useExisting: forwardRef(function () { return TuiTextfieldTypeDirective_1; }),
                },
            ],
        })
    ], TuiTextfieldTypeDirective);
    return TuiTextfieldTypeDirective;
}(TuiController));
// eslint-disable-next-line @typescript-eslint/naming-convention
function typeDirectiveFactory() {
    return new TuiTextfieldTypeDirective();
}

var TuiTextfieldControllerModule = /** @class */ (function () {
    function TuiTextfieldControllerModule() {
    }
    TuiTextfieldControllerModule = __decorate([
        NgModule({
            declarations: [
                TuiTextfieldAutocompleteDirective,
                TuiTextfieldCleanerDirective,
                TuiTextfieldCustomContentDirective,
                TuiTextfieldExampleTextDirective,
                TuiTextfieldInputModeDirective,
                TuiTextfieldLabelOutsideDirective,
                TuiTextfieldMaxLengthDirective,
                TuiTextfieldSizeDirective,
                TuiTextfieldTypeDirective,
            ],
            exports: [
                TuiTextfieldAutocompleteDirective,
                TuiTextfieldCleanerDirective,
                TuiTextfieldCustomContentDirective,
                TuiTextfieldExampleTextDirective,
                TuiTextfieldInputModeDirective,
                TuiTextfieldLabelOutsideDirective,
                TuiTextfieldMaxLengthDirective,
                TuiTextfieldSizeDirective,
                TuiTextfieldTypeDirective,
            ],
        })
    ], TuiTextfieldControllerModule);
    return TuiTextfieldControllerModule;
}());

var TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken("watched textfield controller");
/**
 * @deprecated: use {@link tuiTextfieldWatchedControllerFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function textfieldWatchedControllerFactory(changeDetectorRef, destroy$) {
    var controllers = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        controllers[_i - 2] = arguments[_i];
    }
    var change$ = merge.apply(void 0, __spread(controllers.map(function (_a) {
        var change$ = _a.change$;
        return change$ || NEVER;
    }))).pipe(watch(changeDetectorRef), takeUntil(destroy$));
    change$.subscribe();
    return new (TuiTextfieldController.bind.apply(TuiTextfieldController, __spread([void 0, change$], controllers)))();
}
var TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_AUTOCOMPLETE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_EXAMPLE_TEXT,
            TUI_TEXTFIELD_INPUT_MODE,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_MAX_LENGTH,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_TYPE,
        ],
        useFactory: textfieldWatchedControllerFactory,
    },
];
var tuiTextfieldWatchedControllerFactory = textfieldWatchedControllerFactory;

/**
 * Generated bundle index. Do not edit.
 */

export { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_AUTOCOMPLETE, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_CUSTOM_CONTENT, TUI_TEXTFIELD_EXAMPLE_TEXT, TUI_TEXTFIELD_INPUT_MODE, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_MAX_LENGTH, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_TYPE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiTextfieldAutocompleteDirective, TuiTextfieldCleanerDirective, TuiTextfieldController, TuiTextfieldControllerModule, TuiTextfieldCustomContentDirective, TuiTextfieldExampleTextDirective, TuiTextfieldInputModeDirective, TuiTextfieldLabelOutsideDirective, TuiTextfieldMaxLengthDirective, TuiTextfieldSizeDirective, TuiTextfieldTypeDirective, autocompleteDirectiveFactory, cleanerDirectiveFactory, customContentDirectiveFactory, exampleTextDirectiveFactory, inputModeDirectiveFactory, labelOutsideDirectiveFactory, maxLengthDirectiveFactory, sizeDirectiveFactory, textfieldWatchedControllerFactory, tuiTextfieldWatchedControllerFactory, typeDirectiveFactory };
//# sourceMappingURL=taiga-ui-core-directives-textfield-controller.js.map
