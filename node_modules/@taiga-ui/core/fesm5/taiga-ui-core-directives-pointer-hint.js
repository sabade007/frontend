import { __assign, __extends, __decorate, __param } from 'tslib';
import { InjectionToken, ElementRef, Inject, Input, Directive, NgModule } from '@angular/core';
import { typedFromEvent, TuiDestroyService, TuiHoveredService, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { of } from 'rxjs';
import { filter, startWith, distinctUntilChanged, switchMap, delay, takeUntil } from 'rxjs/operators';

/** Default values for pointer hint options */
var TUI_POINTER_HINT_DEFAULT_OPTIONS = __assign(__assign({}, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS), { tuiHintShowDelay: 0, tuiHintHideDelay: 0 });
var TUI_POINTER_HINT_OPTIONS = new InjectionToken("Default parameters for pointer hint directive", {
    factory: function () { return TUI_POINTER_HINT_DEFAULT_OPTIONS; },
});
var tuiPointerHintOptionsProvider = function (options) { return ({
    provide: TUI_POINTER_HINT_OPTIONS,
    useValue: __assign(__assign({}, TUI_POINTER_HINT_DEFAULT_OPTIONS), options),
}); };

var TuiPointerHintDirective = /** @class */ (function (_super) {
    __extends(TuiPointerHintDirective, _super);
    function TuiPointerHintDirective(elementRef, hintService, destroy$, hoveredService, options) {
        var _this = _super.call(this, elementRef, hintService, null, options) || this;
        _this.destroy$ = destroy$;
        _this.options = options;
        _this.currentMouseRect = _this.mousePositionToClientRect();
        _this.tuiHintShowDelay = _this.options.tuiHintShowDelay;
        _this.tuiHintHideDelay = _this.options.tuiHintHideDelay;
        _this.content = '';
        var hint$ = hoveredService.createHovered$(_this.elementRef.nativeElement).pipe(filter(function () { return !!_this.content; }), startWith(false), distinctUntilChanged());
        hint$
            .pipe(switchMap(function (visible) {
            return of(visible).pipe(delay(visible ? _this.tuiHintShowDelay : _this.tuiHintHideDelay));
        }), takeUntil(destroy$))
            .subscribe({
            next: function (visible) {
                if (visible) {
                    _this.showTooltip();
                }
                else {
                    _this.hideTooltip();
                }
            },
            complete: function () {
                _this.hideTooltip();
            },
        });
        _this.initMouseMoveSubscription();
        return _this;
    }
    Object.defineProperty(TuiPointerHintDirective.prototype, "tuiPointerHint", {
        // TODO: 3.0 Remove null
        set: function (value) {
            if (!value) {
                this.hideTooltip();
                this.content = '';
                return;
            }
            this.content = value;
        },
        enumerable: true,
        configurable: true
    });
    TuiPointerHintDirective.prototype.getElementClientRect = function () {
        return this.currentMouseRect;
    };
    TuiPointerHintDirective.prototype.initMouseMoveSubscription = function () {
        var _this = this;
        var mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');
        mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(function (_a) {
            var clientX = _a.clientX, clientY = _a.clientY;
            _this.currentMouseRect = _this.mousePositionToClientRect(clientX, clientY);
        });
    };
    TuiPointerHintDirective.prototype.mousePositionToClientRect = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        return {
            left: x,
            right: x,
            top: y,
            bottom: y,
            width: 0,
            height: 0,
        };
    };
    TuiPointerHintDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_POINTER_HINT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPointerHintDirective.prototype, "tuiHintShowDelay", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPointerHintDirective.prototype, "tuiHintHideDelay", void 0);
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiPointerHintDirective.prototype, "tuiPointerHint", null);
    TuiPointerHintDirective = __decorate([
        Directive({
            selector: '[tuiPointerHint]:not(ng-container)',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiHintService)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(TuiHoveredService)),
        __param(4, Inject(TUI_POINTER_HINT_OPTIONS))
    ], TuiPointerHintDirective);
    return TuiPointerHintDirective;
}(AbstractTuiHint));

var TuiPointerHintModule = /** @class */ (function () {
    function TuiPointerHintModule() {
    }
    TuiPointerHintModule = __decorate([
        NgModule({
            declarations: [TuiPointerHintDirective],
            exports: [TuiPointerHintDirective],
        })
    ], TuiPointerHintModule);
    return TuiPointerHintModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_POINTER_HINT_DEFAULT_OPTIONS, TUI_POINTER_HINT_OPTIONS, TuiPointerHintDirective, TuiPointerHintModule, tuiPointerHintOptionsProvider };
//# sourceMappingURL=taiga-ui-core-directives-pointer-hint.js.map
