import { __decorate, __param } from 'tslib';
import { Directive, ChangeDetectorRef, Inject, ViewChild, Input, ContentChild, TemplateRef, HostBinding, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isCurrentTarget, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_EXPAND_LOADED } from '@taiga-ui/core/constants';
import { CommonModule } from '@angular/common';
import { TuiLoaderModule } from '@taiga-ui/core/components/loader';

// @bad TODO: 3.0 Replace with PolymorpheusContent
var TuiExpandContentDirective = /** @class */ (function () {
    function TuiExpandContentDirective() {
    }
    TuiExpandContentDirective = __decorate([
        Directive({
            selector: '[tuiExpandContent]',
        })
    ], TuiExpandContentDirective);
    return TuiExpandContentDirective;
}());

var State;
(function (State) {
    State[State["Idle"] = 0] = "Idle";
    State[State["Loading"] = 1] = "Loading";
    State[State["Prepared"] = 2] = "Prepared";
    State[State["Animated"] = 3] = "Animated";
})(State || (State = {}));
var LOADER_HEIGHT = 48;
var TuiExpandComponent = /** @class */ (function () {
    function TuiExpandComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.state = State.Idle;
        this.async = false;
        this.content = null;
        this.expanded = null;
    }
    Object.defineProperty(TuiExpandComponent.prototype, "expandedSetter", {
        set: function (expanded) {
            if (this.expanded === null) {
                this.expanded = expanded;
                return;
            }
            if (this.state !== State.Idle) {
                this.expanded = expanded;
                this.state = State.Animated;
                return;
            }
            this.expanded = expanded;
            this.retrigger(this.async && expanded ? State.Loading : State.Animated);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiExpandComponent.prototype, "overflow", {
        get: function () {
            return this.state !== State.Idle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiExpandComponent.prototype, "loading", {
        get: function () {
            return !!this.expanded && this.async && this.state === State.Loading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiExpandComponent.prototype, "height", {
        get: function () {
            var _a = this, expanded = _a.expanded, state = _a.state, contentWrapper = _a.contentWrapper;
            if ((expanded && state === State.Prepared) ||
                (!expanded && state === State.Animated)) {
                return 0;
            }
            if (contentWrapper &&
                ((!expanded && state === State.Prepared) ||
                    (expanded && state === State.Animated))) {
                return contentWrapper.nativeElement.offsetHeight;
            }
            if (contentWrapper && expanded && state === State.Loading) {
                return Math.max(contentWrapper.nativeElement.offsetHeight, LOADER_HEIGHT);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiExpandComponent.prototype, "contentVisible", {
        get: function () {
            return this.expanded || this.state !== State.Idle;
        },
        enumerable: true,
        configurable: true
    });
    TuiExpandComponent.prototype.onTransitionEnd = function (event) {
        if (isCurrentTarget(event) &&
            event.propertyName === 'opacity' &&
            this.state === State.Animated) {
            this.state = State.Idle;
        }
    };
    TuiExpandComponent.prototype.onExpandLoaded = function (event) {
        event.stopPropagation();
        if (this.state === State.Loading) {
            this.retrigger(State.Animated);
        }
    };
    TuiExpandComponent.prototype.retrigger = function (state) {
        var _this = this;
        this.state = State.Prepared;
        // We need delay to re-trigger CSS height transition from the correct number
        setTimeout(function () {
            if (_this.state !== State.Prepared) {
                return;
            }
            _this.state = state;
            _this.changeDetectorRef.markForCheck();
        });
    };
    TuiExpandComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    __decorate([
        ViewChild('wrapper')
    ], TuiExpandComponent.prototype, "contentWrapper", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiExpandComponent.prototype, "async", void 0);
    __decorate([
        Input('expanded'),
        tuiRequiredSetter()
    ], TuiExpandComponent.prototype, "expandedSetter", null);
    __decorate([
        ContentChild(TuiExpandContentDirective, { read: TemplateRef })
    ], TuiExpandComponent.prototype, "content", void 0);
    __decorate([
        HostBinding('class._expanded'),
        HostBinding('attr.aria-expanded')
    ], TuiExpandComponent.prototype, "expanded", void 0);
    __decorate([
        HostBinding('class._overflow')
    ], TuiExpandComponent.prototype, "overflow", null);
    __decorate([
        HostBinding('class._loading')
    ], TuiExpandComponent.prototype, "loading", null);
    __decorate([
        HostBinding('style.height.px')
    ], TuiExpandComponent.prototype, "height", null);
    __decorate([
        HostListener('transitionend', ['$event'])
    ], TuiExpandComponent.prototype, "onTransitionEnd", null);
    __decorate([
        HostListener(TUI_EXPAND_LOADED, ['$event'])
    ], TuiExpandComponent.prototype, "onExpandLoaded", null);
    TuiExpandComponent = __decorate([
        Component({
            selector: 'tui-expand',
            template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n>\n    <ng-container *ngIf=\"contentVisible\">\n        <ng-content></ng-content>\n        <!-- TODO: 3.0 collision with async pipe, fix after upgrade to ng11 -->\n        <tui-loader\n            *ngIf=\"this.async; else content\"\n            size=\"l\"\n            [overlay]=\"true\"\n            [showLoader]=\"loading\"\n        >\n            <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n        </tui-loader>\n    </ng-container>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;transition-property:opacity,height,visibility;transition-duration:var(--tui-duration,300ms);opacity:0}:host._overflow{overflow:hidden}:host._expanded{opacity:1;transform:translate3d(0,0,0)}:host._loading{opacity:.99}.t-wrapper:after,.t-wrapper:before{content:'';display:table}"]
        }),
        __param(0, Inject(ChangeDetectorRef))
    ], TuiExpandComponent);
    return TuiExpandComponent;
}());

var TuiExpandModule = /** @class */ (function () {
    function TuiExpandModule() {
    }
    TuiExpandModule = __decorate([
        NgModule({
            imports: [CommonModule, TuiLoaderModule],
            declarations: [TuiExpandComponent, TuiExpandContentDirective],
            exports: [TuiExpandComponent, TuiExpandContentDirective],
        })
    ], TuiExpandModule);
    return TuiExpandModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiExpandComponent, TuiExpandContentDirective, TuiExpandModule };
//# sourceMappingURL=taiga-ui-core-components-expand.js.map
