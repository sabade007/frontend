import { __decorate, __param } from 'tslib';
import { ComponentFactoryResolver, Injector, ElementRef, Input, Directive, Inject } from '@angular/core';
import { TuiPortalService, TuiActiveZoneDirective, tuiDefaultProp, tuiPure, AbstractTuiControl } from '@taiga-ui/cdk';
import { TuiDropdownBoxComponent } from '@taiga-ui/core/components/dropdown-box';
import { DEFAULT_MIN_HEIGHT, DEFAULT_MAX_HEIGHT } from '@taiga-ui/core/constants';
import { checkFixedPosition } from '@taiga-ui/core/utils/dom';
import { TuiHintService } from '@taiga-ui/core/services';

// @bad TODO: Possibly refactor to make more abstract
var AbstractTuiDropdown = /** @class */ (function () {
    function AbstractTuiDropdown(componentFactoryResolver, injector, portalService, elementRef, activeZone) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.portalService = portalService;
        this.elementRef = elementRef;
        this.activeZone = activeZone;
        this.content = "";
        this.tuiDropdownHost = null;
        this.minHeight = DEFAULT_MIN_HEIGHT;
        this.maxHeight = DEFAULT_MAX_HEIGHT;
        this.align = "left";
        this.direction = null;
        this.sided = false;
        this.limitMinWidth = "min";
        this.dropdownBoxRef = null;
    }
    AbstractTuiDropdown.prototype.ngOnDestroy = function () {
        this.closeDropdownBox();
    };
    AbstractTuiDropdown.prototype.ngAfterViewChecked = function () {
        // @awful TODO: This is probably wrong to call both but in TuiHostedDropdown some changes do not propagate otherwise
        if (this.dropdownBoxRef !== null) {
            this.dropdownBoxRef.changeDetectorRef.detectChanges();
            this.dropdownBoxRef.changeDetectorRef.markForCheck();
        }
    };
    Object.defineProperty(AbstractTuiDropdown.prototype, "clientRect", {
        get: function () {
            return this.elementRef.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiDropdown.prototype, "host", {
        get: function () {
            return this.tuiDropdownHost || this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiDropdown.prototype, "fixed", {
        get: function () {
            return checkFixedPosition(this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiDropdown.prototype.toggleDropdown = function (value) {
        if (value) {
            this.openDropdownBox();
        }
        else {
            this.closeDropdownBox();
        }
    };
    AbstractTuiDropdown.prototype.openDropdownBox = function () {
        if (this.dropdownBoxRef !== null) {
            return;
        }
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(TuiDropdownBoxComponent);
        this.dropdownBoxRef = this.portalService.add(componentFactory, this.injector);
        this.dropdownBoxRef.changeDetectorRef.detectChanges();
    };
    AbstractTuiDropdown.prototype.closeDropdownBox = function () {
        if (this.dropdownBoxRef === null) {
            return;
        }
        this.portalService.remove(this.dropdownBoxRef);
        this.dropdownBoxRef = null;
    };
    AbstractTuiDropdown.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: TuiPortalService },
        { type: ElementRef },
        { type: TuiActiveZoneDirective }
    ]; };
    __decorate([
        Input("tuiDropdownContent"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "content", void 0);
    __decorate([
        Input("tuiDropdownHost"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "tuiDropdownHost", void 0);
    __decorate([
        Input("tuiDropdownMinHeight"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "minHeight", void 0);
    __decorate([
        Input("tuiDropdownMaxHeight"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "maxHeight", void 0);
    __decorate([
        Input("tuiDropdownAlign"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "align", void 0);
    __decorate([
        Input("tuiDropdownDirection"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "direction", void 0);
    __decorate([
        Input("tuiDropdownSided"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "sided", void 0);
    __decorate([
        Input("tuiDropdownLimitWidth"),
        tuiDefaultProp()
    ], AbstractTuiDropdown.prototype, "limitMinWidth", void 0);
    __decorate([
        tuiPure
    ], AbstractTuiDropdown.prototype, "fixed", null);
    __decorate([
        tuiPure
    ], AbstractTuiDropdown.prototype, "toggleDropdown", null);
    AbstractTuiDropdown = __decorate([
        Directive()
    ], AbstractTuiDropdown);
    return AbstractTuiDropdown;
}());

var AbstractTuiHint = /** @class */ (function () {
    function AbstractTuiHint(elementRef, hintService, activeZone, options) {
        this.elementRef = elementRef;
        this.hintService = hintService;
        this.activeZone = activeZone;
        this.options = options;
        this.mode = this.options.mode;
        this.direction = this.options.direction;
        this.content = "";
    }
    AbstractTuiHint.prototype.ngOnDestroy = function () {
        this.hideTooltip();
    };
    AbstractTuiHint.prototype.showTooltip = function () {
        this.hintService.add(this);
    };
    AbstractTuiHint.prototype.hideTooltip = function () {
        this.hintService.remove(this);
    };
    AbstractTuiHint.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TuiHintService },
        { type: TuiActiveZoneDirective },
        { type: undefined }
    ]; };
    __decorate([
        Input("tuiHintMode"),
        tuiDefaultProp()
    ], AbstractTuiHint.prototype, "mode", void 0);
    __decorate([
        Input("tuiHintDirection"),
        tuiDefaultProp()
    ], AbstractTuiHint.prototype, "direction", void 0);
    AbstractTuiHint = __decorate([
        Directive()
    ], AbstractTuiHint);
    return AbstractTuiHint;
}());

/** Default values for abstract hint options */
var TUI_ABSTRACT_HINT_DEFAULT_OPTIONS = {
    mode: null,
    direction: "bottom-left",
};

// @dynamic
var TuiAbstractTextfieldHost = /** @class */ (function () {
    function TuiAbstractTextfieldHost(host) {
        this.host = host;
    }
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "readOnly", {
        get: function () {
            return this.host.readOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "disabled", {
        get: function () {
            return this.host.computedDisabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "invalid", {
        get: function () {
            return this.host.computedInvalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "focusable", {
        get: function () {
            return this.host.computedFocusable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "value", {
        get: function () {
            return String(this.host.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiAbstractTextfieldHost.prototype.process = function (_input) { };
    TuiAbstractTextfieldHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] }
    ]; };
    TuiAbstractTextfieldHost = __decorate([
        Directive()
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ,
        __param(0, Inject(AbstractTuiControl))
    ], TuiAbstractTextfieldHost);
    return TuiAbstractTextfieldHost;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiDropdown, AbstractTuiHint, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, TuiAbstractTextfieldHost };
//# sourceMappingURL=taiga-ui-core-abstract.js.map
