import { CHAR_NO_BREAK_SPACE, CHAR_HYPHEN, CHAR_PLUS } from '@taiga-ui/cdk';
import { __read } from 'tslib';

/**
 * @deprecated: use {@link tuiCapitalize} instead
 * Capitalizes a given string, replacing it with a lowercase string and making
 * the first letter of each word uppercase.
 *
 * @param value the input string
 * @return the capitalized string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function capitalize(value) {
    return value.toLowerCase().replace(/(?:^|\s)\S/g, function (char) { return char.toUpperCase(); });
}
var tuiCapitalize = capitalize;

/**
 * @deprecated: use {@link tuiCapitalizeFirstLetter} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function capitalizeFirstLetter(value) {
    return "" + value.charAt(0).toUpperCase() + value.slice(1);
}
var tuiCapitalizeFirstLetter = capitalizeFirstLetter;

/**
 * @deprecated: use {@link tuiNumberToStringWithoutExp} instead
 * Convert number to string with replacing exponent part on decimals
 *
 * @param value the number
 * @return string representation of a number
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function numberToStringWithoutExp(value) {
    var valueAsString = String(value);
    var _a = __read(valueAsString.split("e-"), 2), numberPart = _a[0], expPart = _a[1];
    var valueWithoutExp = valueAsString;
    if (expPart) {
        var _b = __read(numberPart.split("."), 2), fractionalPart = _b[1];
        var decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);
        valueWithoutExp = value.toFixed(decimalDigits);
    }
    return valueWithoutExp;
}
var tuiNumberToStringWithoutExp = numberToStringWithoutExp;

/**
 * @deprecated: use {@link tuiGetFractionPartPadded} instead
 * Return fractional part of number
 *
 * @param value the number
 * @param precision number of digits of decimal part, null to keep untouched
 * @return the fractional part of number
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getFractionPartPadded(value, precision) {
    var _a = __read(numberToStringWithoutExp(value).split("."), 2), _b = _a[1], fractionPartPadded = _b === void 0 ? "" : _b;
    return typeof precision === "number"
        ? fractionPartPadded.slice(0, Math.max(0, precision))
        : fractionPartPadded;
}
var tuiGetFractionPartPadded = getFractionPartPadded;

// TODO: refactor later to `formatNumber(value: number, options: Partial<AllTheStuff>)`
/**
 * @deprecated: use {@link tuiFormatNumber} instead
 * Formats number adding a thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @param zeroPadding enable zeros at the end of decimal part
 * @return the formatted string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function formatNumber(value, decimalLimit, decimalSeparator, thousandSeparator, zeroPadding) {
    if (decimalLimit === void 0) { decimalLimit = null; }
    if (decimalSeparator === void 0) { decimalSeparator = ","; }
    if (thousandSeparator === void 0) { thousandSeparator = CHAR_NO_BREAK_SPACE; }
    if (zeroPadding === void 0) { zeroPadding = true; }
    var integerPartString = String(Math.floor(Math.abs(value)));
    var fractionPartPadded = getFractionPartPadded(value, decimalLimit);
    if (decimalLimit !== null) {
        if (zeroPadding) {
            var zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);
            var zeroPartString = "0".repeat(zeroPaddingSize);
            fractionPartPadded = "" + fractionPartPadded + zeroPartString;
        }
        else {
            fractionPartPadded = fractionPartPadded.replace(/0*$/, "");
        }
    }
    var remainder = integerPartString.length % 3;
    var sign = value < 0 ? CHAR_HYPHEN : "";
    var result = sign + integerPartString.charAt(0);
    for (var i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;
}
var tuiFormatNumber = formatNumber;

/**
 * @deprecated: use {@link tuiFormatPhone} instead
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function formatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return "";
    }
    var result = countryCode;
    countryCode = countryCode.replace(/[()]/g, "");
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace(CHAR_PLUS, "");
    }
    var splitPhoneMask = phoneMask.split("");
    var splitValue = value.slice(countryCode.length).split("");
    result += " ";
    if (splitValue.length === 0) {
        return result;
    }
    for (var i = 0; i < splitPhoneMask.length; i++) {
        if (splitValue.length === 0) {
            break;
        }
        if (splitPhoneMask[i] === "#") {
            result += splitValue[0] || "";
            splitValue.splice(0, 1);
        }
        else {
            result += splitPhoneMask[i];
        }
    }
    return result;
}
var tuiFormatPhone = formatPhone;

/**
 * @deprecated: use {@link tuiOtherDecimalSymbol} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function otherDecimalSymbol(symbol) {
    return symbol === "." ? "," : ".";
}
var tuiOtherDecimalSymbol = otherDecimalSymbol;

/**
 * Selects the correct plural form to display.
 *
 * @param value the input number
 * @param args an array of three plural forms, e.g. ['год', 'года', 'лет']
 * @deprecated This implementation targets Russian.
 * Use https://angular.io/api/common/NgPlural for your implementations.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function pluralize(value, _a) {
    var _b = __read(_a, 3), one = _b[0], few = _b[1], many = _b[2];
    var ten = value % 10;
    var hundred = value % 100;
    // 1, 21, 101, 121, но не 11, 111, 211...
    if (ten === 1 && hundred !== 11) {
        return one;
    }
    // 2, 3, 4, 22, 33, 44, 152, 163, 174, но не 12, 13, 14, 112, 213, 314...
    if (ten >= 2 && ten <= 4 && (hundred < 10 || hundred >= 20)) {
        return few;
    }
    return many;
}

// TODO: 3.0 remove in 3.0
/**
 * Temporary util for mapping TuiPluralize array to ICU format
 */
function tuiPluralizeToICU(pluralize) {
    return {
        one: pluralize[0],
        few: pluralize[1],
        many: pluralize[2],
        other: pluralize[2],
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { capitalize, capitalizeFirstLetter, formatNumber, formatPhone, getFractionPartPadded, numberToStringWithoutExp, otherDecimalSymbol, pluralize, tuiCapitalize, tuiCapitalizeFirstLetter, tuiFormatNumber, tuiFormatPhone, tuiGetFractionPartPadded, tuiNumberToStringWithoutExp, tuiOtherDecimalSymbol, tuiPluralizeToICU };
//# sourceMappingURL=taiga-ui-core-utils-format.js.map
