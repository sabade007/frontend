import { ElementRef, EventEmitter, QueryList } from '@angular/core';
import { AbstractTuiInteractive, TuiContextWithImplicit, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiHintControllerDirective } from '@taiga-ui/core/directives/hint-controller';
import { TuiTextfieldController } from '@taiga-ui/core/directives/textfield-controller';
import { TuiBrightness, TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiPrimitiveTextfieldOptions } from './primitive-textfield-options';
export declare class TuiPrimitiveTextfieldComponent extends AbstractTuiInteractive implements TuiFocusableElementAccessor {
    readonly mode$: Observable<TuiBrightness | null>;
    readonly appearance: string;
    readonly controller: TuiTextfieldController;
    readonly hintController: TuiHintControllerDirective;
    readonly options: TuiPrimitiveTextfieldOptions;
    private readonly elementRef;
    private readonly focusableElement?;
    editable: boolean;
    filler: string;
    iconAlign: TuiPrimitiveTextfieldOptions['iconAlign'];
    iconContent: PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>> | null;
    iconCleaner: TuiPrimitiveTextfieldOptions['iconCleaner'];
    readOnly: boolean;
    invalid: boolean;
    disabled: boolean;
    prefix: string;
    postfix: string;
    value: string;
    readonly valueChange: EventEmitter<string>;
    /**
     * @deprecated TODO: 3.0 remove
     */
    readonly autofilledChange: EventEmitter<boolean>;
    readonly content?: QueryList<unknown>;
    autofilled: boolean;
    constructor(mode$: Observable<TuiBrightness | null>, appearance: string, controller: TuiTextfieldController, hintController: TuiHintControllerDirective, options: TuiPrimitiveTextfieldOptions, elementRef: ElementRef<HTMLElement>);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get size(): TuiSizeL | TuiSizeS;
    get computedInvalid(): boolean;
    get inputHidden(): boolean;
    get hasValue(): boolean;
    get hasCleaner(): boolean;
    get hasTooltip(): boolean;
    get hasCustomContent(): boolean;
    get showOnlyPlaceholder(): boolean;
    get placeholderVisible(): boolean;
    get hasPlaceholder(): boolean;
    get placeholderRaised(): boolean;
    get borderStart(): number;
    get borderEnd(): number;
    get iconAlignLeft(): boolean;
    get iconAlignRight(): boolean;
    get name(): 'ccexpiryyear' | null;
    get computedId(): string;
    onFocused(focused: boolean): void;
    getIndent$(element: HTMLElement): Observable<number>;
    clear(): void;
    onMouseDown(event: MouseEvent): void;
    onModelChange(value: string): void;
    onHovered(hovered: boolean): void;
    onAutofilled(autofilled: boolean): void;
    private get iconPaddingLeft();
    private get placeholderRaisable();
    private get hasIcon();
    private updateAutofilled;
    private updateValue;
}
