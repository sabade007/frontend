import { ChangeDetectorRef, ElementRef } from '@angular/core';
import { AbstractTuiInteractive, TuiFocusableElementAccessor, TuiFocusVisibleService, TuiHoveredService } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core/directives';
import { TuiSizeS } from '@taiga-ui/core/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiButtonOptions } from './button-options';
export declare class TuiButtonComponent extends AbstractTuiInteractive implements TuiFocusableElementAccessor, TuiButtonOptions {
    private readonly mode;
    private readonly elementRef;
    private readonly takeOnlyTrustedEvents;
    private readonly options;
    private readonly mode$;
    appearance: TuiButtonOptions['appearance'];
    disabled: boolean;
    icon: PolymorpheusContent;
    iconRight: PolymorpheusContent;
    shape: "rounded" | "square" | null;
    showLoader: boolean;
    size: "m" | "l" | "xl" | "s" | "xs";
    readonly appearance$: Observable<string>;
    constructor(mode: TuiModeDirective | null, elementRef: ElementRef<HTMLElement>, focusVisible$: TuiFocusVisibleService, hoveredService: TuiHoveredService, destroy$: Observable<void>, changeDetectorRef: ChangeDetectorRef, takeOnlyTrustedEvents: boolean, options: TuiButtonOptions);
    get nativeFocusableElement(): HTMLElement | null;
    get focused(): boolean;
    get loaderSize(): TuiSizeS;
    get computedAppearance(): string;
    get nativeDisabled(): '' | null;
    get tabIndex(): number;
    onFocused(focused: boolean): void;
}
