import { AnimationOptions } from '@angular/animations';
import { ElementRef, NgZone } from '@angular/core';
import { TuiContextWithImplicit } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiMedia } from '@taiga-ui/core/interfaces';
import { TuiHintModeT } from '@taiga-ui/core/types';
import { Observable } from 'rxjs';
import { TuiHintsHostComponent } from '../hints-host.component';
export declare class TuiHintBoxComponent {
    private readonly options;
    private readonly elementRef;
    private readonly windowRef;
    private readonly media;
    private readonly hintsHost;
    private readonly context;
    private readonly arrow?;
    readonly animation: {
        readonly delay?: string | number | undefined;
        readonly params?: {
            [name: string]: any;
        } | undefined;
        readonly value: "";
    };
    constructor(animationFrame$: Observable<number>, destroy$: Observable<void>, ngZone: NgZone, options: AnimationOptions, elementRef: ElementRef<HTMLElement>, windowRef: Window, media: TuiMedia, hintsHost: TuiHintsHostComponent, context: TuiContextWithImplicit<AbstractTuiHint>);
    get hint(): AbstractTuiHint;
    get isUntouchable(): boolean;
    get mode(): TuiHintModeT | null;
    get isMobile(): boolean;
    onHovered(hovered: boolean): void;
    /**
     * Calculates wrapper position.
     * Styles are set directly to avoid visual shake of element
     */
    private calculatePosition;
    private calculateCoordinates;
    private calculateMobileCoordinates;
    private setOverflowStyles;
}
