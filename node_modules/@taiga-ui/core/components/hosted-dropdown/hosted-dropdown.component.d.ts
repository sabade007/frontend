import { ElementRef, EventEmitter } from '@angular/core';
import { TuiActiveZoneDirective, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiDropdownControllerDirective } from '@taiga-ui/core/directives/dropdown-controller';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
export declare class TuiHostedDropdownComponent implements TuiFocusableElementAccessor {
    private readonly elementRef;
    readonly controller: TuiDropdownControllerDirective;
    private readonly dropdownHost?;
    private readonly wrapper?;
    private readonly dropdownDirective?;
    content: PolymorpheusContent<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    canOpen: boolean;
    open: boolean;
    readonly openChange: EventEmitter<boolean>;
    readonly focusedChange: EventEmitter<boolean>;
    constructor(elementRef: ElementRef, controller: TuiDropdownControllerDirective);
    get host(): HTMLElement;
    get dropdown(): HTMLElement | null;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    onFocusIn(target: HTMLElement): void;
    onClick(target: HTMLElement): void;
    onKeyDownEsc(event: Event): void;
    onArrow(event: KeyboardEvent, down: boolean): void;
    onKeydown({ key, target, defaultPrevented }: KeyboardEvent): void;
    onActiveZone(active: boolean): void;
    onHostObscured(obscured: boolean): void;
    updateOpen(open: boolean): void;
    private get hostEditable();
    private focusDropdown;
    private closeDropdown;
    private focusHost;
    private updateFocused;
}
