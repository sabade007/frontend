import { AnimationOptions } from '@angular/animations';
import { AfterViewChecked, ElementRef, NgZone } from '@angular/core';
import { TuiActiveZoneDirective, TuiDestroyService, TuiDropdownHostComponent, TuiOverscrollModeT } from '@taiga-ui/cdk';
import { TuiAnimationOptions, TuiDropdown } from '@taiga-ui/core/interfaces';
import { Observable } from 'rxjs';
/**
 *  This component is used to show template in a portal using default style of white rounded box with a shadow
 */
export declare class TuiDropdownBoxComponent implements AfterViewChecked {
    readonly directive: TuiDropdown;
    private readonly windowRef;
    private readonly elementRef;
    private readonly portalHost;
    private readonly options;
    private readonly animationTop;
    private readonly animationBottom;
    /**
     * Is previous position on top (to prevent jumping up and down on scroll)
     */
    private prevDirectionIsTop;
    dropdownAnimation: TuiAnimationOptions;
    readonly contentElementRef?: ElementRef<HTMLElement>;
    constructor(destroy$: TuiDestroyService, ngZone: NgZone, directive: TuiDropdown, windowRef: Window, elementRef: ElementRef<HTMLElement>, portalHost: TuiDropdownHostComponent, options: AnimationOptions, animationFrame$: Observable<number>);
    get overscroll(): TuiOverscrollModeT;
    getContext<T extends Record<string, any>>(context?: T, activeZone?: TuiActiveZoneDirective): {
        activeZone?: TuiActiveZoneDirective;
    } | (T & {
        activeZone?: TuiActiveZoneDirective;
    });
    ngAfterViewChecked(): void;
    onTopFocus(): void;
    onBottomFocus(): void;
    private get inModal();
    private get inOption();
    private calculatePositionAndSize;
    private getFinalAlign;
    /**
     * Calculates horizontal position
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     * @param hostRect ClientRect of  portal host
     */
    private calculateHorizontalPosition;
    /**
     * Calculates vertical position and height
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     * @param hostRect ClientRect of  portal host
     */
    private calculateVerticalPosition;
    private getFinalDirection;
    /**
     * Calculates width
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     */
    private calculateWidth;
    private moveFocusOutside;
}
