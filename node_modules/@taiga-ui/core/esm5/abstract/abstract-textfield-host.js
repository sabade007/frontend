import { __decorate, __param } from "tslib";
import { Directive, Inject } from '@angular/core';
import { AbstractTuiControl } from '@taiga-ui/cdk';
// @dynamic
var TuiAbstractTextfieldHost = /** @class */ (function () {
    function TuiAbstractTextfieldHost(host) {
        this.host = host;
    }
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "readOnly", {
        get: function () {
            return this.host.readOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "disabled", {
        get: function () {
            return this.host.computedDisabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "invalid", {
        get: function () {
            return this.host.computedInvalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "focusable", {
        get: function () {
            return this.host.computedFocusable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAbstractTextfieldHost.prototype, "value", {
        get: function () {
            return String(this.host.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiAbstractTextfieldHost.prototype.process = function (_input) { };
    TuiAbstractTextfieldHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] }
    ]; };
    TuiAbstractTextfieldHost = __decorate([
        Directive()
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ,
        __param(0, Inject(AbstractTuiControl))
    ], TuiAbstractTextfieldHost);
    return TuiAbstractTextfieldHost;
}());
export { TuiAbstractTextfieldHost };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtdGV4dGZpZWxkLWhvc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9hYnN0cmFjdC8iLCJzb3VyY2VzIjpbImFic3RyYWN0LXRleHRmaWVsZC1ob3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHakQsV0FBVztBQUdYO0lBR0ksa0NBQTJELElBQU87UUFBUCxTQUFJLEdBQUosSUFBSSxDQUFHO0lBQUcsQ0FBQztJQUV0RSxzQkFBSSw4Q0FBUTthQUFaO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDhDQUFRO2FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDdEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2Q0FBTzthQUFYO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLCtDQUFTO2FBQWI7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDdkMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwyQ0FBSzthQUFUO1lBQ0ksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQUlELDBDQUFPLEdBQVAsVUFBUSxNQUF3QixJQUFTLENBQUM7O2dEQXhCN0IsTUFBTSxTQUFDLGtCQUFrQjs7SUFIcEIsd0JBQXdCO1FBRjdDLFNBQVMsRUFBRTtRQUNaLGdFQUFnRTs7UUFJL0MsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtPQUhyQix3QkFBd0IsQ0E0QjdDO0lBQUQsK0JBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTVCcUIsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpQ29udHJvbH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVRleHRmaWVsZEhvc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuXG4vLyBAZHluYW1pY1xuQERpcmVjdGl2ZSgpXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0PFQgZXh0ZW5kcyBBYnN0cmFjdFR1aUNvbnRyb2w8YW55Pj5cbiAgICBpbXBsZW1lbnRzIFR1aVRleHRmaWVsZEhvc3RcbntcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEFic3RyYWN0VHVpQ29udHJvbCkgcHJvdGVjdGVkIHJlYWRvbmx5IGhvc3Q6IFQpIHt9XG5cbiAgICBnZXQgcmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QucmVhZE9ubHk7XG4gICAgfVxuXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmNvbXB1dGVkRGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgZ2V0IGludmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuY29tcHV0ZWRJbnZhbGlkO1xuICAgIH1cblxuICAgIGdldCBmb2N1c2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuY29tcHV0ZWRGb2N1c2FibGU7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy5ob3N0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBvblZhbHVlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuXG4gICAgcHJvY2VzcyhfaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkIHt9XG59XG4iXX0=