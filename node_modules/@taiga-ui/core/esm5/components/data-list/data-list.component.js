import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, QueryList, ViewEncapsulation, } from '@angular/core';
import { EMPTY_QUERY, isNativeFocusedIn, isPresent, itemsQueryListObservable, moveFocus, setNativeMouseFocused, tuiAssertIsHTMLElement, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_ACCESSOR, TUI_NOTHING_FOUND_MESSAGE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { TuiOptionComponent } from './option/option.component';
// TODO: Consider aria-activedescendant for proper accessibility implementation
// @dynamic
var TuiDataListComponent = /** @class */ (function () {
    function TuiDataListComponent(elementRef, defaultEmptyContent$) {
        this.elementRef = elementRef;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.options = EMPTY_QUERY;
        this.role = 'listbox';
        this.emptyContent = '';
    }
    TuiDataListComponent_1 = TuiDataListComponent;
    Object.defineProperty(TuiDataListComponent.prototype, "empty$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (_a) {
                var length = _a.length;
                return !length;
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiDataListComponent.prototype.onFocusIn = function (relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    };
    TuiDataListComponent.prototype.noop = function () { };
    TuiDataListComponent.prototype.onKeyDownArrow = function (current, step) {
        var elements = this.elements;
        moveFocus(elements.indexOf(current), elements, step);
    };
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiDataListComponent.prototype.handleFocusLossIfNecessary = function (element) {
        if (element === void 0) { element = this.elementRef.nativeElement; }
        if (this.origin && isNativeFocusedIn(element)) {
            setNativeMouseFocused(this.origin, true, true);
        }
    };
    TuiDataListComponent.prototype.getOptions = function (includeDisabled) {
        if (includeDisabled === void 0) { includeDisabled = false; }
        return this.options
            .toArray()
            .filter(function (_a) {
            var disabled = _a.disabled;
            return includeDisabled || !disabled;
        })
            .map(function (_a) {
            var value = _a.value;
            return value;
        })
            .filter(isPresent);
    };
    TuiDataListComponent.prototype.onFocus = function (_a, top) {
        var target = _a.target;
        tuiAssertIsHTMLElement(target);
        var elements = this.elements;
        moveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(target);
    };
    Object.defineProperty(TuiDataListComponent.prototype, "elements", {
        get: function () {
            return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiOption]'));
        },
        enumerable: true,
        configurable: true
    });
    var TuiDataListComponent_1;
    TuiDataListComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_NOTHING_FOUND_MESSAGE,] }] }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return TuiOptionComponent; }), { descendants: true })
    ], TuiDataListComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "emptyContent", void 0);
    __decorate([
        tuiPure
    ], TuiDataListComponent.prototype, "empty$", null);
    __decorate([
        HostListener('focusin', ['$event.relatedTarget', '$event.currentTarget'])
    ], TuiDataListComponent.prototype, "onFocusIn", null);
    __decorate([
        HostListener('mousedown.prevent')
    ], TuiDataListComponent.prototype, "noop", null);
    __decorate([
        HostListener('keydown.arrowDown.prevent', ['$event.target', '1']),
        HostListener('keydown.arrowUp.prevent', ['$event.target', '-1'])
    ], TuiDataListComponent.prototype, "onKeyDownArrow", null);
    __decorate([
        HostListener('wheel.silent.passive'),
        HostListener('mouseleave', ['$event.target'])
    ], TuiDataListComponent.prototype, "handleFocusLossIfNecessary", null);
    TuiDataListComponent = TuiDataListComponent_1 = __decorate([
        Component({
            selector: 'tui-data-list',
            template: "<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, true)\"\n></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    polymorpheus-outlet\n    class=\"t-empty\"\n    [content]=\"emptyContent || (defaultEmptyContent$ | async)\"\n></div>\n<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, false)\"\n></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    provide: TUI_DATA_LIST_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiDataListComponent_1; }),
                },
            ],
            styles: ["tui-data-list{display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:.5rem 0;color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list>.t-empty{margin:.75rem 1rem}tui-opt-group{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;font:var(--tui-font-text-xs);flex-direction:column;line-height:2rem}tui-opt-group:empty:after,tui-opt-group:empty:before{display:none}tui-opt-group:before{content:attr(data-label);padding:.5rem 1rem;color:var(--tui-text-02);line-height:1rem;white-space:normal}tui-opt-group:not(:empty)~tui-opt-group:before{padding:1.5rem 1rem .5rem}tui-opt-group:not(:empty)~tui-opt-group[data-label='']:before{padding:1rem 0 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:'';position:absolute;left:0;right:0;top:.5rem;height:1px;background:var(--tui-base-03)}tui-opt-group[data-label='']:before{padding:0 1rem}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TUI_NOTHING_FOUND_MESSAGE))
    ], TuiDataListComponent);
    return TuiDataListComponent;
}());
export { TuiDataListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0LyIsInNvdXJjZXMiOlsiZGF0YS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULHdCQUF3QixFQUN4QixTQUFTLEVBQ1QscUJBQXFCLEVBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsT0FBTyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBRSx5QkFBeUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBR3hGLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRTdELCtFQUErRTtBQUMvRSxXQUFXO0FBY1g7SUFlSSw4QkFDeUMsVUFBbUMsRUFFL0Qsb0JBQXdDO1FBRlosZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFFL0QseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFvQjtRQWhCcEMsWUFBTyxHQUFxQyxXQUFXLENBQUM7UUFPekUsU0FBSSxHQUFvQixTQUFTLENBQUM7UUFJbEMsaUJBQVksR0FBd0IsRUFBRSxDQUFDO0lBTXBDLENBQUM7NkJBbkJLLG9CQUFvQjtJQXNCN0Isc0JBQUksd0NBQU07YUFBVjtZQUNJLE9BQU8sd0JBQXdCLENBQUMs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REFLekU7SUFHRDtRQURDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQztvREFDbkI7SUFJZjtRQUZDLFlBQVksQ0FBQywyQkFBMkIsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRSxZQUFZLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7OERBS2hFO0lBS0Q7UUFGQyxZQUFZLENBQUMsc0JBQXNCLENBQUM7UUFDcEMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzBFQU83QztJQXJEUSxvQkFBb0I7UUFiaEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7WUFDekIsMllBQXdDO1lBRXhDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsc0JBQXNCO29CQUMvQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxzQkFBb0IsRUFBcEIsQ0FBb0IsQ0FBQztpQkFDdEQ7YUFDSjs7U0FDSixDQUFDO1FBaUJPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7T0FqQjdCLG9CQUFvQixDQTJFaEM7SUFBRCwyQkFBQztDQUFBLEFBM0VELElBMkVDO1NBM0VZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBFbGVtZW50UmVmLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBpc05hdGl2ZUZvY3VzZWRJbixcbiAgICBpc1ByZXNlbnQsXG4gICAgaXRlbXNRdWVyeUxpc3RPYnNlcnZhYmxlLFxuICAgIG1vdmVGb2N1cyxcbiAgICBzZXROYXRpdmVNb3VzZUZvY3VzZWQsXG4gICAgdHVpQXNzZXJ0SXNIVE1MRWxlbWVudCxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICB0dWlQdXJlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpRGF0YUxpc3RBY2Nlc3Nvcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9EQVRBX0xJU1RfQUNDRVNTT1IsIFRVSV9OT1RISU5HX0ZPVU5EX01FU1NBR0V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aURhdGFMaXN0Um9sZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpT3B0aW9uQ29tcG9uZW50fSBmcm9tICcuL29wdGlvbi9vcHRpb24uY29tcG9uZW50JztcblxuLy8gVE9ETzogQ29uc2lkZXIgYXJpYS1hY3RpdmVkZXNjZW5kYW50IGZvciBwcm9wZXIgYWNjZXNzaWJpbGl0eSBpbXBsZW1lbnRhdGlvblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWRhdGEtbGlzdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RhdGEtbGlzdC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kYXRhLWxpc3Quc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9EQVRBX0xJU1RfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlEYXRhTGlzdENvbXBvbmVudCksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRGF0YUxpc3RDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBUdWlEYXRhTGlzdEFjY2Vzc29yPFQ+IHtcbiAgICBAQ29udGVudENoaWxkcmVuKGZvcndhcmRSZWYoKCkgPT4gVHVpT3B0aW9uQ29tcG9uZW50KSwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFF1ZXJ5TGlzdDxUdWlPcHRpb25Db21wb25lbnQ8VD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBwcml2YXRlIG9yaWdpbj86IEhUTUxFbGVtZW50O1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICByb2xlOiBUdWlEYXRhTGlzdFJvbGUgPSAnbGlzdGJveCc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZW1wdHlDb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFRVSV9OT1RISU5HX0ZPVU5EX01FU1NBR0UpXG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHRFbXB0eUNvbnRlbnQkOiBPYnNlcnZhYmxlPHN0cmluZz4sXG4gICAgKSB7fVxuXG4gICAgQHR1aVB1cmVcbiAgICBnZXQgZW1wdHkkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gaXRlbXNRdWVyeUxpc3RPYnNlcnZhYmxlKHRoaXMub3B0aW9ucykucGlwZShtYXAoKHtsZW5ndGh9KSA9PiAhbGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZm9jdXNpbicsIFsnJGV2ZW50LnJlbGF0ZWRUYXJnZXQnLCAnJGV2ZW50LmN1cnJlbnRUYXJnZXQnXSlcbiAgICBvbkZvY3VzSW4ocmVsYXRlZFRhcmdldDogSFRNTEVsZW1lbnQsIGN1cnJlbnRUYXJnZXQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghY3VycmVudFRhcmdldC5jb250YWlucyhyZWxhdGVkVGFyZ2V0KSAmJiAhdGhpcy5vcmlnaW4pIHtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luID0gcmVsYXRlZFRhcmdldDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bi5wcmV2ZW50JylcbiAgICBub29wKCk6IHZvaWQge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dEb3duLnByZXZlbnQnLCBbJyRldmVudC50YXJnZXQnLCAnMSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dVcC5wcmV2ZW50JywgWyckZXZlbnQudGFyZ2V0JywgJy0xJ10pXG4gICAgb25LZXlEb3duQXJyb3coY3VycmVudDogSFRNTEVsZW1lbnQsIHN0ZXA6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCB7ZWxlbWVudHN9ID0gdGhpcztcblxuICAgICAgICBtb3ZlRm9jdXMoZWxlbWVudHMuaW5kZXhPZihjdXJyZW50KSwgZWxlbWVudHMsIHN0ZXApO1xuICAgIH1cblxuICAgIC8vIFRPRE86IENvbnNpZGVyIGFyaWEtYWN0aXZlZGVzY2VuZGFudCBmb3IgcHJvcGVyIGFjY2Vzc2liaWxpdHkgaW1wbGVtZW50YXRpb25cbiAgICBASG9zdExpc3RlbmVyKCd3aGVlbC5zaWxlbnQucGFzc2l2ZScpXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScsIFsnJGV2ZW50LnRhcmdldCddKVxuICAgIGhhbmRsZUZvY3VzTG9zc0lmTmVjZXNzYXJ5KFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5vcmlnaW4gJiYgaXNOYXRpdmVGb2N1c2VkSW4oZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHNldE5hdGl2ZU1vdXNlRm9jdXNlZCh0aGlzLm9yaWdpbiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPcHRpb25zKGluY2x1ZGVEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1xuICAgICAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAgICAgLmZpbHRlcigoe2Rpc2FibGVkfSkgPT4gaW5jbHVkZURpc2FibGVkIHx8ICFkaXNhYmxlZClcbiAgICAgICAgICAgIC5tYXAoKHt2YWx1ZX0pID0+IHZhbHVlKVxuICAgICAgICAgICAgLmZpbHRlcihpc1ByZXNlbnQpO1xuICAgIH1cblxuICAgIG9uRm9jdXMoe3RhcmdldH06IEV2ZW50LCB0b3A6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdHVpQXNzZXJ0SXNIVE1MRWxlbWVudCh0YXJnZXQpO1xuXG4gICAgICAgIGNvbnN0IHtlbGVtZW50c30gPSB0aGlzO1xuXG4gICAgICAgIG1vdmVGb2N1cyh0b3AgPyAtMSA6IGVsZW1lbnRzLmxlbmd0aCwgZWxlbWVudHMsIHRvcCA/IDEgOiAtMSk7XG4gICAgICAgIHRoaXMuaGFuZGxlRm9jdXNMb3NzSWZOZWNlc3NhcnkodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBlbGVtZW50cygpOiByZWFkb25seSBIVE1MRWxlbWVudFtdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3R1aU9wdGlvbl0nKSk7XG4gICAgfVxufVxuIl19