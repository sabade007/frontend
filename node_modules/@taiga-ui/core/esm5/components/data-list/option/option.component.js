import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, OnDestroy, Optional, Self, TemplateRef, } from '@angular/core';
import { isNativeFocused, setNativeFocused, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core/tokens';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { TuiDataListComponent } from '../data-list.component';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function shouldFocus(_a) {
    var currentTarget = _a.currentTarget;
    return !isNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
var TuiOptionComponent = /** @class */ (function () {
    // TODO: 3.0 Fix dataList type when updated to Ivy and compilation drops metadata
    function TuiOptionComponent(content, dataList, elementRef, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.elementRef = elementRef;
        this.host = host;
        this.dropdown = dropdown;
        this.size = 'm';
        this.role = 'option';
        this.disabled = false;
    }
    Object.defineProperty(TuiOptionComponent.prototype, "active", {
        get: function () {
            return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
        },
        enumerable: true,
        configurable: true
    });
    TuiOptionComponent.prototype.onClick = function () {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    };
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiOptionComponent.prototype.onMouseMove = function (_a) {
        var currentTarget = _a.currentTarget;
        setNativeFocused(currentTarget, true, true);
    };
    // Preventing focus loss upon focused option removal
    TuiOptionComponent.prototype.ngOnDestroy = function () {
        this.dataList.handleFocusLossIfNecessary(this.elementRef.nativeElement);
    };
    TuiOptionComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_OPTION_CONTENT,] }] },
        { type: TuiDataListComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiDataListComponent; }),] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
        { type: TuiDropdownDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TuiDropdownDirective,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TuiOptionComponent.prototype, "value", void 0);
    __decorate([
        HostBinding('class._with-dropdown')
    ], TuiOptionComponent.prototype, "active", null);
    __decorate([
        HostListener('click')
    ], TuiOptionComponent.prototype, "onClick", null);
    __decorate([
        shouldCall(shouldFocus),
        HostListener('mousemove.init', ['$event']),
        HostListener('mousemove.silent', ['$event'])
    ], TuiOptionComponent.prototype, "onMouseMove", null);
    TuiOptionComponent = __decorate([
        Component({
            selector: 'button[tuiOption], a[tuiOption]',
            template: "<span\n    *ngIf=\"content; else base\"\n    polymorpheus-outlet\n    class=\"t-content\"\n    [content]=\"content\"\n    [context]=\"{$implicit: base}\"\n></span>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg\n        *ngIf=\"dropdown\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-arrow\"\n    ></tui-svg>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                tabIndex: '-1',
                type: 'button',
                '[attr.disabled]': 'disabled || null',
            },
            styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:padding-box;font-size:inherit;line-height:inherit;transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;font:var(--tui-font-text-m);width:100%;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);outline:0;text-decoration:none;cursor:pointer}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host._with-dropdown,:host:focus{background-color:var(--tui-base-02)}:host[data-size=xs]{font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .75rem}:host[data-size='s']{min-height:2rem;padding:.3125rem .75rem}:host[data-size='m']{min-height:2.75rem;padding:.375rem 1rem}:host[data-size='l']{min-height:3.5rem;padding:.75rem 1rem}.t-content{display:flex;flex:1;max-width:100%}.t-arrow{margin:0 -.5rem 0 .75rem}"]
        }),
        __param(0, Optional()),
        __param(0, Inject(TUI_OPTION_CONTENT)),
        __param(1, Inject(forwardRef(function () { return TuiDataListComponent; }))),
        __param(2, Inject(ElementRef)),
        __param(3, Optional()),
        __param(3, Inject(TUI_DATA_LIST_HOST)),
        __param(4, Optional()),
        __param(4, Self()),
        __param(4, Inject(TuiDropdownDirective))
    ], TuiOptionComponent);
    return TuiOptionComponent;
}());
export { TuiOptionComponent };
//# sourceMappingURL=data:application/json;base64,