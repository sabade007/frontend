import { DOCUMENT } from '@angular/common';
import { ElementRef, InjectionToken } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { getActualTarget, isCurrentTarget, tuiContainsOrAfter, TuiDestroyService, tuiIsElement, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiGetViewportWidth } from '@taiga-ui/core/utils/dom';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge } from 'rxjs';
import { filter, switchMap, take, takeUntil } from 'rxjs/operators';
export var TUI_DIALOGS_CLOSE = new InjectionToken("A stream to close dialogs", {
    factory: function () { return EMPTY; },
});
var SCROLLBAR_PLACEHOLDER = 17;
// eslint-disable-next-line @typescript-eslint/naming-convention
export function dialogCloseStreamFactory(documentRef, windowRef, _a, close$, destroy$, _b) {
    var nativeElement = _a.nativeElement;
    var dismissible = _b.dismissible;
    return dismissible
        ? merge(typedFromEvent(nativeElement, "click").pipe(filter(isCurrentTarget)), typedFromEvent(documentRef, "keydown").pipe(filter(function (event) {
            var key = event.key;
            var target = getActualTarget(event);
            return (key === "Escape" &&
                tuiIsElement(target) &&
                (!tuiContainsOrAfter(nativeElement, target) ||
                    nativeElement.contains(target)));
        })), typedFromEvent(documentRef, "mousedown").pipe(filter(function (event) {
            var target = getActualTarget(event);
            var clientX = event.clientX;
            return (tuiIsElement(target) &&
                tuiGetViewportWidth(windowRef) - clientX >
                    SCROLLBAR_PLACEHOLDER &&
                !tuiContainsOrAfter(nativeElement, target));
        }), switchMap(function () {
            return typedFromEvent(documentRef, "mouseup").pipe(take(1), filter(function (event) {
                var target = getActualTarget(event);
                return (tuiIsElement(target) &&
                    !tuiContainsOrAfter(nativeElement, target));
            }));
        })), close$).pipe(takeUntil(destroy$))
        : close$;
}
export var TUI_DIALOG_CLOSE_STREAM = new InjectionToken("Dialogs closing stream");
export var TUI_DIALOG_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_DIALOG_CLOSE_STREAM,
        deps: [
            DOCUMENT,
            WINDOW,
            ElementRef,
            TUI_DIALOGS_CLOSE,
            TuiDestroyService,
            POLYMORPHEUS_CONTEXT,
        ],
        useFactory: dialogCloseStreamFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGlhbG9nLyIsInNvdXJjZXMiOlsiZGlhbG9nLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBRSxjQUFjLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxlQUFlLEVBQ2YsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixpQkFBaUIsRUFFakIsWUFBWSxFQUNaLGNBQWMsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUMvQywyQkFBMkIsRUFDM0I7SUFDSSxPQUFPLEVBQUUsY0FBTSxPQUFBLEtBQUssRUFBTCxDQUFLO0NBQ3ZCLENBQ0osQ0FBQztBQUVGLElBQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRWpDLGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFdBQXFCLEVBQ3JCLFNBQWlCLEVBQ2pCLEVBQXdDLEVBQ3hDLE1BQXdCLEVBQ3hCLFFBQTBCLEVBQzFCLEVBQTREO1FBSDNELGdDQUFhO1FBR2IsNEJBQVc7SUFFWixPQUFPLFdBQVc7UUFDZCxDQUFDLENBQUMsS0FBSyxDQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUNwRSxjQUFjLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsTUFBTSxDQUFDLFVBQUEsS0FBSztZQUNSLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEIsSUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXRDLE9BQU8sQ0FDSCxHQUFHLEtBQUssUUFBUTtnQkFDaEIsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDcEIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7b0JBQ3ZDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDdEMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNMLEVBQ0QsY0FBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3pDLE1BQU0sQ0FBQyxVQUFBLEtBQUs7WUFDUixJQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUU5QixPQUFPLENBQ0gsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDcEIsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTztvQkFDcEMscUJBQXFCO2dCQUN6QixDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FDN0MsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUNGLFNBQVMsQ0FBQztZQUNOLE9BQUEsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxNQUFNLENBQUMsVUFBQSxLQUFLO2dCQUNSLElBQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFdEMsT0FBTyxDQUNILFlBQVksQ0FBQyxNQUFNLENBQUM7b0JBQ3BCLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUM3QyxDQUFDO1lBQ04sQ0FBQyxDQUFDLENBQ0w7UUFWRCxDQVVDLENBQ0osQ0FDSixFQUNELE1BQU0sQ0FDVCxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3JELHdCQUF3QixDQUMzQixDQUFDO0FBQ0YsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQWU7SUFDNUMsaUJBQWlCO0lBQ2pCO1FBQ0ksT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUU7WUFDRixRQUFRO1lBQ1IsTUFBTTtZQUNOLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsaUJBQWlCO1lBQ2pCLG9CQUFvQjtTQUN2QjtRQUNELFVBQVUsRUFBRSx3QkFBd0I7S0FDdkM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgZ2V0QWN0dWFsVGFyZ2V0LFxuICAgIGlzQ3VycmVudFRhcmdldCxcbiAgICB0dWlDb250YWluc09yQWZ0ZXIsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRGlhbG9nLFxuICAgIHR1aUlzRWxlbWVudCxcbiAgICB0eXBlZEZyb21FdmVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aURpYWxvZ09wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuaW1wb3J0IHt0dWlHZXRWaWV3cG9ydFdpZHRofSBmcm9tICdAdGFpZ2EtdWkvY29yZS91dGlscy9kb20nO1xuaW1wb3J0IHtQT0xZTU9SUEhFVVNfQ09OVEVYVH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7RU1QVFksIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBzd2l0Y2hNYXAsIHRha2UsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY29uc3QgVFVJX0RJQUxPR1NfQ0xPU0UgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oXG4gICAgYEEgc3RyZWFtIHRvIGNsb3NlIGRpYWxvZ3NgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogKCkgPT4gRU1QVFksXG4gICAgfSxcbik7XG5cbmNvbnN0IFNDUk9MTEJBUl9QTEFDRUhPTERFUiA9IDE3O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZGlhbG9nQ2xvc2VTdHJlYW1GYWN0b3J5KFxuICAgIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICB3aW5kb3dSZWY6IFdpbmRvdyxcbiAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIGNsb3NlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICB7ZGlzbWlzc2libGV9OiBUdWlEaWFsb2c8VHVpRGlhbG9nT3B0aW9uczx1bmtub3duPiwgdW5rbm93bj4sXG4pOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gZGlzbWlzc2libGVcbiAgICAgICAgPyBtZXJnZShcbiAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYGNsaWNrYCkucGlwZShmaWx0ZXIoaXNDdXJyZW50VGFyZ2V0KSksXG4gICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCBga2V5ZG93bmApLnBpcGUoXG4gICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRBY3R1YWxUYXJnZXQoZXZlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID09PSBgRXNjYXBlYCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlJc0VsZW1lbnQodGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoIXR1aUNvbnRhaW5zT3JBZnRlcihuYXRpdmVFbGVtZW50LCB0YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNlZG93bmApLnBpcGUoXG4gICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGdldEFjdHVhbFRhcmdldChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50WCA9IGV2ZW50LmNsaWVudFg7XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlJc0VsZW1lbnQodGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlHZXRWaWV3cG9ydFdpZHRoKHdpbmRvd1JlZikgLSBjbGllbnRYID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNDUk9MTEJBUl9QTEFDRUhPTERFUiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAhdHVpQ29udGFpbnNPckFmdGVyKG5hdGl2ZUVsZW1lbnQsIHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNldXBgKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0QWN0dWFsVGFyZ2V0KGV2ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlJc0VsZW1lbnQodGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0dWlDb250YWluc09yQWZ0ZXIobmF0aXZlRWxlbWVudCwgdGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGNsb3NlJCxcbiAgICAgICAgICApLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSlcbiAgICAgICAgOiBjbG9zZSQ7XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfRElBTE9HX0NMT1NFX1NUUkVBTSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPHVua25vd24+PihcbiAgICBgRGlhbG9ncyBjbG9zaW5nIHN0cmVhbWAsXG4pO1xuZXhwb3J0IGNvbnN0IFRVSV9ESUFMT0dfUFJPVklERVJTOiBQcm92aWRlcltdID0gW1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0RJQUxPR19DTE9TRV9TVFJFQU0sXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIERPQ1VNRU5ULFxuICAgICAgICAgICAgV0lORE9XLFxuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIFRVSV9ESUFMT0dTX0NMT1NFLFxuICAgICAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgICAgICBQT0xZTU9SUEhFVVNfQ09OVEVYVCxcbiAgICAgICAgXSxcbiAgICAgICAgdXNlRmFjdG9yeTogZGlhbG9nQ2xvc2VTdHJlYW1GYWN0b3J5LFxuICAgIH0sXG5dO1xuIl19