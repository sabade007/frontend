import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { TUI_IS_MOBILE, tuiDefaultProp, TuiDestroyService } from '@taiga-ui/cdk';
import { TUI_HINT_OPTIONS } from '@taiga-ui/core/directives';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var TuiTooltipComponent = /** @class */ (function () {
    function TuiTooltipComponent(destroy$, mode$, isMobile, options) {
        var _this = this;
        this.isMobile = isMobile;
        this.options = options;
        this.globalMode = null;
        this.content = '';
        this.mode = this.options.mode;
        this.direction = this.options.direction;
        this.showDelay = this.options.tuiHintShowDelay;
        this.hideDelay = this.options.tuiHintHideDelay;
        this.describeId = '';
        mode$.pipe(takeUntil(destroy$)).subscribe(function (mode) {
            _this.globalMode = mode;
        });
    }
    Object.defineProperty(TuiTooltipComponent.prototype, "computedMode", {
        // TODO: Simplify
        get: function () {
            return this.mode || (this.globalMode === 'onDark' ? 'onDark' : null);
        },
        enumerable: true,
        configurable: true
    });
    TuiTooltipComponent.prototype.stopOnMobile = function (event) {
        if (this.isMobile) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    Object.defineProperty(TuiTooltipComponent.prototype, "icon", {
        get: function () {
            return this.options.tooltipIcon;
        },
        enumerable: true,
        configurable: true
    });
    TuiTooltipComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_HINT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "content", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "mode", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "direction", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "showDelay", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "hideDelay", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTooltipComponent.prototype, "describeId", void 0);
    __decorate([
        HostBinding('attr.data-mode')
    ], TuiTooltipComponent.prototype, "computedMode", null);
    __decorate([
        HostListener('mousedown', ['$event']),
        HostListener('click', ['$event'])
    ], TuiTooltipComponent.prototype, "stopOnMobile", null);
    TuiTooltipComponent = __decorate([
        Component({
            selector: 'tui-tooltip',
            template: "<span\n    polymorpheus-outlet\n    automation-id=\"tui-tooltip__icon\"\n    class=\"t-tooltip-icon\"\n    [content]=\"icon\"\n    [tuiHintId]=\"describeId\"\n    [tuiHint]=\"content\"\n    [tuiHintDirection]=\"direction\"\n    [tuiHintShowDelay]=\"showDelay\"\n    [tuiHintHideDelay]=\"hideDelay\"\n    [tuiHintMode]=\"computedMode\"\n>\n    <ng-template let-icon>\n        <tui-svg [src]=\"icon\"></tui-svg>\n    </ng-template>\n</span>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [TuiDestroyService, MODE_PROVIDER],
            styles: [":host{transition-property:color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:relative;display:inline-block;width:1.5rem;height:1.5rem;vertical-align:middle;font-size:0;line-height:0;cursor:pointer;color:var(--tui-text-03)}:host:hover{color:var(--tui-text-02)}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-01)}:host[data-mode=error]{color:var(--tui-error-fill)}.t-tooltip-icon{transition-property:opacity,color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:inline-block;width:100%;height:100%}:host:not([data-mode]) .t-tooltip-icon._hint_hovered{color:var(--tui-text-02)}:host[data-mode=onDark] .t-tooltip-icon,:host[data-mode=onLight] .t-tooltip-icon{opacity:var(--tui-disabled-opacity)}:host[data-mode=onDark] .t-tooltip-icon._hint_hovered,:host[data-mode=onDark] .t-tooltip-icon:hover,:host[data-mode=onLight] .t-tooltip-icon._hint_hovered,:host[data-mode=onLight] .t-tooltip-icon:hover{opacity:1}"]
        }),
        __param(0, Inject(TuiDestroyService)),
        __param(1, Inject(TUI_MODE)),
        __param(2, Inject(TUI_IS_MOBILE)),
        __param(3, Inject(TUI_HINT_OPTIONS))
    ], TuiTooltipComponent);
    return TuiTooltipComponent;
}());
export { TuiTooltipComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3Rvb2x0aXAvIiwic291cmNlcyI6WyJ0b29sdGlwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBQyxnQkFBZ0IsRUFBaUIsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRy9DLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBU3pDO0lBMkJJLDZCQUMrQixRQUE2QixFQUN0QyxLQUF1QyxFQUNqQixRQUFpQixFQUNkLE9BQXVCO1FBSnRFLGlCQVNDO1FBTjJDLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTlCOUQsZUFBVSxHQUF5QixJQUFJLENBQUM7UUFJaEQsWUFBTyxHQUF3QixFQUFFLENBQUM7UUFJbEMsU0FBSSxHQUEyQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUlqRCxjQUFTLEdBQWdDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBSWhFLGNBQVMsR0FBdUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztRQUk5RSxjQUFTLEdBQXVDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFJOUUsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQVFaLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUMxQyxLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJRCxzQkFBSSw2Q0FBWTtRQUZoQixpQkFBaUI7YUFFakI7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RSxDQUFDOzs7T0FBQTtJQUlELDBDQUFZLEdBQVosVUFBYSxLQUFpQjtRQUMxQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVELHNCQUFJLHFDQUFJO2FBQVI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBOztnQkEzQndDLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxpQkFBaUI7Z0JBQ0EsVUFBVSx1QkFBbEMsTUFBTSxTQUFDLFFBQVE7OENBQ2YsTUFBTSxTQUFDLGFBQWE7Z0RBQ3BCLE1BQU0sU0FBQyxnQkFBZ0I7O0lBMUI1QjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTt3REFDaUI7SUFJbEM7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7cURBQ2dDO0lBSWpEO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFOzBEQUMrQztJQUloRTtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTswREFDNkQ7SUFJOUU7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7MERBQzZEO0lBSTlFO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFOzJEQUNEO0lBZWhCO1FBREMsV0FBVyxDQUFDLGdCQUFnQixDQUFDOzJEQUc3QjtJQUlEO1FBRkMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzsyREFNakM7SUFuRFEsbUJBQW1CO1FBUC9CLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLG9jQUFzQztZQUV0QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUM7O1NBQ2hELENBQUM7UUE2Qk8sV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNoQixXQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNyQixXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO09BL0JwQixtQkFBbUIsQ0F3RC9CO0lBQUQsMEJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX0lTX01PQklMRSwgdHVpRGVmYXVsdFByb3AsIFR1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0hJTlRfT1BUSU9OUywgVHVpSGludE9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9wcm92aWRlcnMnO1xuaW1wb3J0IHtUVUlfTU9ERX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VHVpQnJpZ2h0bmVzcywgVHVpSGludE1vZGVUfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdG9vbHRpcCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Rvb2x0aXAudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdG9vbHRpcC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2UsIE1PREVfUFJPVklERVJdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUb29sdGlwQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGdsb2JhbE1vZGU6IFR1aUJyaWdodG5lc3MgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbW9kZTogVHVpSGludE9wdGlvbnNbJ21vZGUnXSA9IHRoaXMub3B0aW9ucy5tb2RlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRpcmVjdGlvbjogVHVpSGludE9wdGlvbnNbJ2RpcmVjdGlvbiddID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaG93RGVsYXk6IFR1aUhpbnRPcHRpb25zWyd0dWlIaW50U2hvd0RlbGF5J10gPSB0aGlzLm9wdGlvbnMudHVpSGludFNob3dEZWxheTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBoaWRlRGVsYXk6IFR1aUhpbnRPcHRpb25zWyd0dWlIaW50SGlkZURlbGF5J10gPSB0aGlzLm9wdGlvbnMudHVpSGludEhpZGVEZWxheTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkZXNjcmliZUlkID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICAgICAgQEluamVjdChUVUlfSVNfTU9CSUxFKSBwcml2YXRlIHJlYWRvbmx5IGlzTW9iaWxlOiBib29sZWFuLFxuICAgICAgICBASW5qZWN0KFRVSV9ISU5UX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpSGludE9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIG1vZGUkLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKG1vZGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxNb2RlID0gbW9kZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogU2ltcGxpZnlcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1tb2RlJylcbiAgICBnZXQgY29tcHV0ZWRNb2RlKCk6IFR1aUhpbnRNb2RlVCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlIHx8ICh0aGlzLmdsb2JhbE1vZGUgPT09ICdvbkRhcmsnID8gJ29uRGFyaycgOiBudWxsKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBzdG9wT25Nb2JpbGUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBpY29uKCk6IFBvbHltb3JwaGV1c0NvbnRlbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnRvb2x0aXBJY29uO1xuICAgIH1cbn1cbiJdfQ==