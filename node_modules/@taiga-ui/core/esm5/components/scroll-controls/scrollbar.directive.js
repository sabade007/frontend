import { __decorate, __param, __read } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { POLLING_TIME, TuiDestroyService, tuiPreventDefault, tuiScrollFrom, tuiStopPropagation, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { TUI_ELEMENT_REF, TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, throttleTime } from 'rxjs/operators';
var MIN_WIDTH = 24;
// @dynamic
var TuiScrollbarDirective = /** @class */ (function () {
    function TuiScrollbarDirective(ngZone, renderer, destroy$, animationFrame$, wrapper, container, doc, el) {
        var _this = this;
        this.wrapper = wrapper;
        this.container = container;
        this.doc = doc;
        this.el = el;
        this.tuiScrollbar = 'vertical';
        var nativeElement = this.el.nativeElement;
        var mousedown$ = tuiTypedFromEvent(nativeElement, 'mousedown');
        var mousemove$ = tuiTypedFromEvent(this.doc, 'mousemove');
        var mouseup$ = tuiTypedFromEvent(this.doc, 'mouseup');
        var mousedownWrapper$ = tuiTypedFromEvent(this.wrapper.nativeElement, 'mousedown');
        merge(mousedownWrapper$.pipe(tuiPreventDefault(), map(function (event) { return _this.getScrolled(event, 0.5, 0.5); })), mousedown$.pipe(tuiPreventDefault(), tuiStopPropagation(), switchMap(function (event) {
            var rect = nativeElement.getBoundingClientRect();
            var vertical = getOffsetVertical(event, rect);
            var horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(function (event) { return _this.getScrolled(event, vertical, horizontal); }), takeUntil(mouseup$));
        })))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), scrollTop = _b[0], scrollLeft = _b[1];
            if (_this.tuiScrollbar === 'vertical') {
                renderer.setProperty(_this.element, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(_this.element, 'scrollLeft', scrollLeft);
            }
        });
        merge(animationFrame$.pipe(throttleTime(POLLING_TIME)), tuiScrollFrom(this.element))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(function () {
            if (_this.tuiScrollbar === 'vertical') {
                renderer.setStyle(nativeElement, 'top', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'height', _this.view * 100 + "%");
            }
            else {
                renderer.setStyle(nativeElement, 'left', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'width', _this.view * 100 + "%");
            }
        });
    }
    Object.defineProperty(TuiScrollbarDirective.prototype, "scrolled", {
        get: function () {
            var _a = this.element, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight, scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
            return this.tuiScrollbar === 'vertical'
                ? scrollTop / (scrollHeight - clientHeight)
                : scrollLeft / (scrollWidth - clientWidth);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "compensation", {
        get: function () {
            var _a = this.element, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
                this.tuiScrollbar === 'vertical') ||
                ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                    this.tuiScrollbar === 'horizontal')) {
                return 0;
            }
            return this.tuiScrollbar === 'vertical'
                ? MIN_WIDTH / clientHeight
                : MIN_WIDTH / clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "thumb", {
        get: function () {
            var compensation = this.compensation || this.view;
            return this.scrolled * (1 - compensation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "view", {
        get: function () {
            var _a = this.element, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            return this.tuiScrollbar === 'vertical'
                ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
                : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "element", {
        get: function () {
            return this.container.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollbarDirective.prototype.getScrolled = function (_a, offsetVertical, offsetHorizontal) {
        var clientY = _a.clientY, clientX = _a.clientX;
        var _b = this.el.nativeElement, offsetHeight = _b.offsetHeight, offsetWidth = _b.offsetWidth;
        var _c = this.wrapper.nativeElement.getBoundingClientRect(), top = _c.top, left = _c.left, width = _c.width, height = _c.height;
        var maxTop = this.element.scrollHeight - height;
        var maxLeft = this.element.scrollWidth - width;
        var scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        var scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    };
    TuiScrollbarDirective.ctorParameters = function () { return [
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [TUI_ELEMENT_REF,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [TUI_SCROLL_REF,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiScrollbarDirective.prototype, "tuiScrollbar", void 0);
    TuiScrollbarDirective = __decorate([
        Directive({
            selector: '[tuiScrollbar]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(NgZone)),
        __param(1, Inject(Renderer2)),
        __param(2, Self()), __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(ANIMATION_FRAME)),
        __param(4, Inject(TUI_ELEMENT_REF)),
        __param(5, Inject(TUI_SCROLL_REF)),
        __param(6, Inject(DOCUMENT)),
        __param(7, Inject(ElementRef))
    ], TuiScrollbarDirective);
    return TuiScrollbarDirective;
}());
export { TuiScrollbarDirective };
function getOffsetVertical(_a, _b) {
    var clientY = _a.clientY;
    var top = _b.top, height = _b.height;
    return (clientY - top) / height;
}
function getOffsetHorizontal(_a, _b) {
    var clientX = _a.clientX;
    var left = _b.left, width = _b.width;
    return (clientX - left) / width;
}
//# sourceMappingURL=data:application/json;base64,