import { __assign, __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, NgZone, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiZoneOptimized } from '@taiga-ui/cdk';
import { tuiFadeIn } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_ANIMATION_OPTIONS, TUI_MODE, TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { distinctUntilChanged, map, startWith, throttleTime } from 'rxjs/operators';
// @dynamic
var TuiScrollControlsComponent = /** @class */ (function () {
    function TuiScrollControlsComponent(options, ngZone, scrollRef, animationFrame$, mode$) {
        var _this = this;
        this.options = options;
        this.ngZone = ngZone;
        this.scrollRef = scrollRef;
        this.animationFrame$ = animationFrame$;
        this.mode$ = mode$;
        this.refresh$ = this.animationFrame$.pipe(throttleTime(300), map(function () { return _this.scrollbars; }), startWith([false, false]), distinctUntilChanged(function (a, b) { return a[0] === b[0] && a[1] === b[1]; }), tuiZoneOptimized(this.ngZone));
        this.animation = __assign({ value: '' }, this.options);
    }
    Object.defineProperty(TuiScrollControlsComponent.prototype, "scrollbars", {
        get: function () {
            var _a = this.scrollRef.nativeElement, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            return [
                Math.ceil((clientHeight / scrollHeight) * 100) < 100,
                Math.ceil((clientWidth / scrollWidth) * 100) < 100,
            ];
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollControlsComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [TUI_SCROLL_REF,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    TuiScrollControlsComponent = __decorate([
        Component({
            selector: 'tui-scroll-controls',
            template: "<ng-container *tuiLet=\"refresh$ | async as bars\">\n    <div\n        *ngIf=\"bars[0]\"\n        tuiScrollbarWrapper\n        class=\"t-bar t-bar_vertical\"\n        [@tuiFadeIn]=\"animation\"\n        [class.t-bar_has-horizontal]=\"bars[1]\"\n    >\n        <div\n            tuiScrollbar=\"vertical\"\n            class=\"t-thumb\"\n        ></div>\n    </div>\n    <div\n        *ngIf=\"bars[1]\"\n        tuiScrollbarWrapper\n        class=\"t-bar t-bar_horizontal\"\n        [@tuiFadeIn]=\"animation\"\n        [class.t-bar_has-vertical]=\"bars[0]\"\n    >\n        <div\n            tuiScrollbar=\"horizontal\"\n            class=\"t-thumb\"\n        ></div>\n    </div>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [tuiFadeIn],
            providers: [MODE_PROVIDER],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
            styles: [":host{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:1;min-width:calc(100% - 1px);min-height:calc(100% - 1px);max-width:calc(100% - 1px);max-height:calc(100% - 1px);float:left;margin-right:calc(-100% + 1px);-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:calc(-100% + 1px);margin-inline-end:calc(-100% + 1px);pointer-events:none}.t-bar{position:absolute;right:0;bottom:0;pointer-events:auto}.t-bar_vertical{top:0;width:.875rem}.t-bar_horizontal{left:0;height:.875rem}.t-bar_has-horizontal{bottom:.5rem}.t-bar_has-vertical{right:.5rem}.t-thumb{transition-duration:.15s;transition-timing-function:ease-in-out;position:absolute;border-radius:6.25rem;border:.25rem solid transparent;cursor:pointer;pointer-events:auto;background:var(--tui-text-01);background-clip:content-box;box-sizing:border-box;transition-property:width,height;opacity:.2}.t-thumb:hover{opacity:.24}.t-thumb:active{opacity:.48}:host[data-mode=onDark] .t-thumb{background-color:var(--tui-text-01-night)}.t-bar_vertical .t-thumb{right:0;width:.75rem;min-height:1.25rem}.t-bar_vertical .t-thumb:active,.t-bar_vertical:hover .t-thumb{width:.875rem}.t-bar_horizontal .t-thumb{bottom:0;height:.75rem;min-width:1.25rem}.t-bar_horizontal .t-thumb:active,.t-bar_horizontal:hover .t-thumb{height:.875rem}"]
        }),
        __param(0, Inject(TUI_ANIMATION_OPTIONS)),
        __param(1, Inject(NgZone)),
        __param(2, Inject(TUI_SCROLL_REF)),
        __param(3, Inject(ANIMATION_FRAME)),
        __param(4, Inject(TUI_MODE))
    ], TuiScrollControlsComponent);
    return TuiScrollControlsComponent;
}());
export { TuiScrollControlsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWNvbnRyb2xzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvc2Nyb2xsLWNvbnRyb2xzLyIsInNvdXJjZXMiOlsic2Nyb2xsLWNvbnRyb2xzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFDTixNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFdEYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRixXQUFXO0FBWVg7SUFjSSxvQ0FDb0QsT0FBeUIsRUFDeEMsTUFBYyxFQUNOLFNBQWtDLEVBQ2pDLGVBQW1DLEVBQ2xELEtBQXVDO1FBTHRFLGlCQU1JO1FBTGdELFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3hDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDTixjQUFTLEdBQVQsU0FBUyxDQUF5QjtRQUNqQyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7UUFDbEQsVUFBSyxHQUFMLEtBQUssQ0FBa0M7UUFsQjdELGFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDekMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxVQUFVLEVBQWYsQ0FBZSxDQUFDLEVBQzFCLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUN6QixvQkFBb0IsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQTlCLENBQThCLENBQUMsRUFDOUQsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUNoQyxDQUFDO1FBRU8sY0FBUyxHQUFHLFdBQ2pCLEtBQUssRUFBRSxFQUFFLElBQ04sSUFBSSxDQUFDLE9BQU8sQ0FDVCxDQUFDO0lBUVIsQ0FBQztJQUVKLHNCQUFZLGtEQUFVO2FBQXRCO1lBQ1UsSUFBQSxpQ0FDMEIsRUFEekIsOEJBQVksRUFBRSw4QkFBWSxFQUFFLDRCQUFXLEVBQUUsNEJBQ2hCLENBQUM7WUFFakMsT0FBTztnQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7Z0JBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRzthQUNyRCxDQUFDO1FBQ04sQ0FBQzs7O09BQUE7O2dEQWZJLE1BQU0sU0FBQyxxQkFBcUI7Z0JBQ1ksTUFBTSx1QkFBOUMsTUFBTSxTQUFDLE1BQU07Z0JBQ3NDLFVBQVUsdUJBQTdELE1BQU0sU0FBQyxjQUFjO2dCQUNxQyxVQUFVLHVCQUFwRSxNQUFNLFNBQUMsZUFBZTtnQkFDVyxVQUFVLHVCQUEzQyxNQUFNLFNBQUMsUUFBUTs7SUFuQlgsMEJBQTBCO1FBWHRDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0Isb3NCQUE4QztZQUU5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDdkIsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQzFCLElBQUksRUFBRTtnQkFDRixvQkFBb0IsRUFBRSxPQUFPO2FBQ2hDOztTQUNKLENBQUM7UUFnQk8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtRQUM3QixXQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNkLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3RCLFdBQUEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQ3ZCLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO09BbkJaLDBCQUEwQixDQStCdEM7SUFBRCxpQ0FBQztDQUFBLEFBL0JELElBK0JDO1NBL0JZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QW5pbWF0aW9uT3B0aW9uc30gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEluamVjdCxcbiAgICBOZ1pvbmUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUV9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0dWlab25lT3B0aW1pemVkfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpRmFkZUlufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hbmltYXRpb25zJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvcHJvdmlkZXJzJztcbmltcG9ydCB7VFVJX0FOSU1BVElPTl9PUFRJT05TLCBUVUlfTU9ERSwgVFVJX1NDUk9MTF9SRUZ9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aUJyaWdodG5lc3N9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aCwgdGhyb3R0bGVUaW1lfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zY3JvbGwtY29udHJvbHMnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zY3JvbGwtY29udHJvbHMudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2Nyb2xsLWNvbnRyb2xzLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBhbmltYXRpb25zOiBbdHVpRmFkZUluXSxcbiAgICBwcm92aWRlcnM6IFtNT0RFX1BST1ZJREVSXSxcbiAgICBob3N0OiB7XG4gICAgICAgICcoJC5kYXRhLW1vZGUuYXR0ciknOiAnbW9kZSQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNjcm9sbENvbnRyb2xzQ29tcG9uZW50IHtcbiAgICByZWFkb25seSByZWZyZXNoJCA9IHRoaXMuYW5pbWF0aW9uRnJhbWUkLnBpcGUoXG4gICAgICAgIHRocm90dGxlVGltZSgzMDApLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5zY3JvbGxiYXJzKSxcbiAgICAgICAgc3RhcnRXaXRoKFtmYWxzZSwgZmFsc2VdKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKGEsIGIpID0+IGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSksXG4gICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQodGhpcy5uZ1pvbmUpLFxuICAgICk7XG5cbiAgICByZWFkb25seSBhbmltYXRpb24gPSB7XG4gICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgIH0gYXMgY29uc3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQU5JTUFUSU9OX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyxcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIHByaXZhdGUgcmVhZG9ubHkgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoVFVJX1NDUk9MTF9SRUYpIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsUmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uRnJhbWUkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBzY3JvbGxiYXJzKCk6IFtib29sZWFuLCBib29sZWFuXSB7XG4gICAgICAgIGNvbnN0IHtjbGllbnRIZWlnaHQsIHNjcm9sbEhlaWdodCwgY2xpZW50V2lkdGgsIHNjcm9sbFdpZHRofSA9XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBNYXRoLmNlaWwoKGNsaWVudEhlaWdodCAvIHNjcm9sbEhlaWdodCkgKiAxMDApIDwgMTAwLFxuICAgICAgICAgICAgTWF0aC5jZWlsKChjbGllbnRXaWR0aCAvIHNjcm9sbFdpZHRoKSAqIDEwMCkgPCAxMDAsXG4gICAgICAgIF07XG4gICAgfVxufVxuIl19