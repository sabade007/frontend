import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, Optional, } from '@angular/core';
import { AbstractTuiInteractive, isNativeFocused, pressedObservable, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_TAKE_ONLY_TRUSTED_EVENTS, tuiDefaultProp, TuiDestroyService, TuiFocusableElementAccessor, TuiFocusVisibleService, TuiHoveredService, watch, } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core/directives';
import { EMPTY, Observable } from 'rxjs';
import { distinctUntilChanged, map, startWith, takeUntil } from 'rxjs/operators';
import { TUI_BUTTON_OPTIONS } from './button-options';
var TuiButtonComponent = /** @class */ (function (_super) {
    __extends(TuiButtonComponent, _super);
    function TuiButtonComponent(mode, elementRef, focusVisible$, hoveredService, destroy$, changeDetectorRef, takeOnlyTrustedEvents, options) {
        var _a;
        var _this = _super.call(this) || this;
        _this.mode = mode;
        _this.elementRef = elementRef;
        _this.takeOnlyTrustedEvents = takeOnlyTrustedEvents;
        _this.options = options;
        _this.mode$ = ((_a = _this.mode) === null || _a === void 0 ? void 0 : _a.change$) || EMPTY;
        _this.appearance = null;
        _this.disabled = false;
        _this.icon = '';
        _this.iconRight = '';
        _this.shape = _this.options.shape;
        _this.showLoader = false;
        _this.size = _this.options.size;
        _this.appearance$ = _this.mode$.pipe(startWith(null), map(function () { return _this.computedAppearance; }), distinctUntilChanged());
        hoveredService
            .createHovered$(elementRef.nativeElement)
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(function (hovered) {
            _this.updateHovered(hovered);
        });
        pressedObservable(elementRef.nativeElement, {
            onlyTrusted: _this.takeOnlyTrustedEvents,
        })
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(function (pressed) {
            _this.updatePressed(pressed);
        });
        focusVisible$.subscribe(function (focusVisible) {
            _this.updateFocusVisible(focusVisible);
        });
        return _this;
    }
    TuiButtonComponent_1 = TuiButtonComponent;
    Object.defineProperty(TuiButtonComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.nativeDisabled ? null : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "focused", {
        get: function () {
            return !this.showLoader && isNativeFocused(this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "loaderSize", {
        get: function () {
            return this.size === 'l' || this.size === 'xl' ? 'm' : 's';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "computedAppearance", {
        get: function () {
            var _a;
            return (_a = this.appearance) !== null && _a !== void 0 ? _a : (this.options.appearance || '');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "nativeDisabled", {
        get: function () {
            return this.computedDisabled || this.showLoader ? '' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "tabIndex", {
        get: function () {
            return this.focusable ? 0 : -1;
        },
        enumerable: true,
        configurable: true
    });
    TuiButtonComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    var TuiButtonComponent_1;
    TuiButtonComponent.ctorParameters = function () { return [
        { type: TuiModeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiModeDirective,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_TAKE_ONLY_TRUSTED_EVENTS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_BUTTON_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "appearance", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "iconRight", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-shape'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "shape", void 0);
    __decorate([
        Input(),
        HostBinding('class._loading'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "showLoader", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "size", void 0);
    __decorate([
        HostBinding('attr.data-appearance')
    ], TuiButtonComponent.prototype, "computedAppearance", null);
    __decorate([
        HostBinding('attr.disabled')
    ], TuiButtonComponent.prototype, "nativeDisabled", null);
    __decorate([
        HostBinding('tabIndex')
    ], TuiButtonComponent.prototype, "tabIndex", null);
    __decorate([
        HostListener('focusin', ['true']),
        HostListener('focusout', ['false'])
    ], TuiButtonComponent.prototype, "onFocused", null);
    TuiButtonComponent = TuiButtonComponent_1 = __decorate([
        Component({
            selector: 'button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]',
            template: "<ng-container *ngIf=\"appearance$ | async\"></ng-container>\n<tui-wrapper\n    class=\"t-wrapper\"\n    [appearance]=\"computedAppearance\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [disabled]=\"computedDisabled\"\n    [focused]=\"computedFocusVisible\"\n>\n    <span class=\"t-content\">\n        <span\n            *ngIf=\"icon\"\n            polymorpheus-outlet\n            class=\"t-left\"\n            [content]=\"icon\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n        <ng-content></ng-content>\n        <span\n            *ngIf=\"iconRight\"\n            polymorpheus-outlet\n            class=\"t-right\"\n            [content]=\"iconRight\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n    </span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-loader\"\n        [size]=\"loaderSize\"\n        [inheritColor]=\"true\"\n    ></tui-loader>\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiButtonComponent_1; }),
                },
                TuiDestroyService,
                TuiFocusVisibleService,
            ],
            styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:inline-block;flex-shrink:0;vertical-align:top;border-radius:var(--tui-radius-m);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;outline:0;color:inherit}:host[disabled]{pointer-events:none}:host[tuiIconButton] .t-left,:host[tuiIconButton] .t-right{margin:0}:host[data-shape=rounded]{border-radius:6.25rem}:host[data-size=xs]{height:var(--tui-height-xs);font-weight:400}:host[data-size=xs][data-shape=square],:host[data-size=xs][tuiIconButton]{height:var(--tui-height-xs);width:var(--tui-height-xs)}:host[data-size='s']{height:var(--tui-height-s);font-weight:400}:host[data-size='s'][data-shape=square],:host[data-size='s'][tuiIconButton]{height:var(--tui-height-s);width:var(--tui-height-s)}:host[data-size='m']{height:var(--tui-height-m);font:var(--tui-font-text-m);font-weight:700}:host[data-size='m'][data-shape=square],:host[data-size='m'][tuiIconButton]{height:var(--tui-height-m);width:var(--tui-height-m)}:host[data-size='l']{height:var(--tui-height-l);font:var(--tui-font-text-m);font-weight:700}:host[data-size='l'][data-shape=square],:host[data-size='l'][tuiIconButton]{height:var(--tui-height-l);width:var(--tui-height-l)}:host[data-size=xl]{height:3.75rem;font:var(--tui-font-text-m);font-weight:700}:host[data-size=xl][data-shape=square],:host[data-size=xl][tuiIconButton]{height:3.75rem;width:3.75rem}.t-loader{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default}.t-left{margin:0 .5rem 0 -.25rem}.t-right{margin:0 -.5rem 0 .25rem}.t-icon{display:block}:host[data-size='s'] .t-icon,:host[data-size=xs] .t-icon{width:1rem;height:1rem}:host[tuiIconButton] .t-icon,:host[tuiIconButton] .t-left,:host[tuiIconButton] .t-right{display:flex;width:100%;height:100%;align-items:center;justify-content:center}.t-wrapper{position:relative;z-index:0;box-sizing:border-box;cursor:pointer}:host[data-size=xs] .t-wrapper{padding:0 .5rem}:host[data-size='s'] .t-wrapper{padding:0 .75rem}:host[data-size='m'] .t-wrapper{padding:0 1.5rem}:host[data-size='l'] .t-wrapper{padding:0 2.25rem}:host[data-size=xl] .t-wrapper{padding:0 2.5rem}:host[data-shape=square] .t-wrapper,:host[tuiIconButton] .t-wrapper{padding:0}.t-content{display:flex;height:100%;align-items:center;justify-content:center;text-align:center}:host._loading .t-content{opacity:0}"]
        }),
        __param(0, Optional()),
        __param(0, Inject(TuiModeDirective)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiFocusVisibleService)),
        __param(3, Inject(TuiHoveredService)),
        __param(4, Inject(TuiDestroyService)),
        __param(5, Inject(ChangeDetectorRef)),
        __param(6, Inject(TUI_TAKE_ONLY_TRUSTED_EVENTS)),
        __param(7, Inject(TUI_BUTTON_OPTIONS))
    ], TuiButtonComponent);
    return TuiButtonComponent;
}(AbstractTuiInteractive));
export { TuiButtonComponent };
//# sourceMappingURL=data:application/json;base64,