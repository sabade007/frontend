import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, inRange, TUI_FIRST_DAY, TUI_LAST_DAY, tuiDefaultProp, TuiMonth, TuiMonthRange, TuiYear, } from '@taiga-ui/cdk';
var LIMIT = 100;
var ITEMS_IN_ROW = 4;
var TuiPrimitiveYearPickerComponent = /** @class */ (function () {
    function TuiPrimitiveYearPickerComponent() {
        this.hoveredItem = null;
        this.pressedItem = null;
        this.currentYear = TuiMonth.currentLocal().year;
        this.value = null;
        this.initialItem = TuiMonth.currentLocal();
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.yearClick = new EventEmitter();
    }
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "isSingle", {
        get: function () {
            var value = this.value;
            return !!value && this.isRange(value) && value.from.yearSame(value.to);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "rows", {
        get: function () {
            return Math.ceil((this.calculatedMax - this.calculatedMin) / ITEMS_IN_ROW);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "calculatedMin", {
        get: function () {
            var initial = this.initialItem.year - LIMIT;
            return this.min.year > initial ? this.min.year : initial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "calculatedMax", {
        get: function () {
            var initial = this.initialItem.year + LIMIT;
            return this.max.year < initial ? this.max.year + 1 : initial;
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveYearPickerComponent.prototype.isRange = function (item) {
        return item instanceof TuiMonthRange;
    };
    TuiPrimitiveYearPickerComponent.prototype.scrollItemIntoView = function (item) {
        return this.initialItem.year === item;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItem = function (rowIndex, colIndex) {
        return rowIndex * ITEMS_IN_ROW + colIndex + this.calculatedMin;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItemState = function (item) {
        var _a = this, disabledItemHandler = _a.disabledItemHandler, max = _a.max, pressedItem = _a.pressedItem, hoveredItem = _a.hoveredItem;
        if (max.year < item ||
            (disabledItemHandler !== ALWAYS_FALSE_HANDLER && disabledItemHandler(item))) {
            return "disabled" /* Disabled */;
        }
        if (pressedItem === item) {
            return "pressed" /* Pressed */;
        }
        if (hoveredItem === item) {
            return "hovered" /* Hovered */;
        }
        return null;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItemRange = function (item) {
        var _a = this, value = _a.value, hoveredItem = _a.hoveredItem;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiYear) {
            return value.year === item ? "single" /* Single */ : null;
        }
        if ((value.from.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem > value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem < value.from.year &&
                value.from.yearSame(value.to))) {
            return "start" /* Start */;
        }
        if ((value.to.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem < value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem > value.from.year &&
                value.from.yearSame(value.to))) {
            return "end" /* End */;
        }
        return value.from.yearSame(value.to) && value.from.year === item
            ? "single" /* Single */
            : null;
    };
    TuiPrimitiveYearPickerComponent.prototype.itemIsToday = function (item) {
        return this.currentYear === item;
    };
    TuiPrimitiveYearPickerComponent.prototype.itemIsInterval = function (item) {
        var _a = this, value = _a.value, hoveredItem = _a.hoveredItem;
        if (value === null || !this.isRange(value)) {
            return false;
        }
        if (!value.from.yearSame(value.to)) {
            return value.from.year <= item && value.to.year > item;
        }
        if (hoveredItem === null || value.from.year === hoveredItem) {
            return false;
        }
        return inRange(item, Math.min(value.from.year, hoveredItem), Math.max(value.from.year, hoveredItem));
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemHovered = function (hovered, item) {
        this.updateHoveredItem(hovered, item);
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemPressed = function (pressed, item) {
        this.updatePressedItem(pressed, item);
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemClick = function (item) {
        this.yearClick.emit(new TuiYear(item));
    };
    TuiPrimitiveYearPickerComponent.prototype.updateHoveredItem = function (hovered, item) {
        this.hoveredItem = hovered ? item : null;
    };
    TuiPrimitiveYearPickerComponent.prototype.updatePressedItem = function (pressed, item) {
        this.pressedItem = pressed ? item : null;
    };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "initialItem", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Output()
    ], TuiPrimitiveYearPickerComponent.prototype, "yearClick", void 0);
    __decorate([
        HostBinding('class._single')
    ], TuiPrimitiveYearPickerComponent.prototype, "isSingle", null);
    TuiPrimitiveYearPickerComponent = __decorate([
        Component({
            selector: 'tui-primitive-year-picker',
            template: "<div\n    *tuiRepeatTimes=\"let rowIndex of rows\"\n    automation-id=\"tui-primitive-year-picker__row\"\n    class=\"t-row\"\n>\n    <ng-container *tuiRepeatTimes=\"let colIndex of 4\">\n        <div\n            *tuiLet=\"getItem(rowIndex, colIndex) as item\"\n            automation-id=\"tui-primitive-year-picker__cell\"\n            class=\"t-cell\"\n            [class.t-cell_today]=\"itemIsToday(item)\"\n            [class.t-cell_interval]=\"itemIsInterval(item)\"\n            [attr.data-range]=\"getItemRange(item)\"\n            [attr.data-state]=\"getItemState(item)\"\n            [tuiScrollIntoView]=\"scrollItemIntoView(item)\"\n            (tuiHoveredChange)=\"onItemHovered($event, item)\"\n            (tuiPressedChange)=\"onItemPressed($event, item)\"\n            (click)=\"onItemClick(item)\"\n        >\n            <div class=\"t-item\">{{ item }}</div>\n        </div>\n    </ng-container>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;font:var(--tui-font-text-m)}.t-row{position:relative;z-index:0;display:flex;justify-content:space-between;height:2.25rem;margin:.875rem 0}.t-item{position:relative;flex:1;line-height:2rem;border-radius:var(--tui-radius-m)}.t-item:after,.t-item:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.9375rem;text-align:center;outline:0;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.t-cell:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell_today:after{position:absolute;left:50%;transform:translate(-50%,0);content:'';bottom:.3125rem;height:.125rem;width:.75rem;border-radius:.375rem;background-color:var(--tui-text-02)}.t-cell_interval:before{background:var(--tui-base-02)}:host._single .t-cell_interval:before{background:var(--tui-secondary-hover)}.t-cell_interval:not(:last-child):before{right:-3.9375rem}.t-cell_interval:last-child:first-child:before{right:0}.t-cell_interval:first-child>.t-item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.t-cell_interval:last-child>.t-item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.t-cell_interval>.t-item{border-radius:0}.t-cell[data-range]:after{background-color:var(--tui-primary-text)}.t-cell[data-range]>.t-item{color:var(--tui-primary-text)}.t-cell[data-range]>.t-item:after,.t-cell[data-range]>.t-item:before{background-color:var(--tui-primary)}.t-cell[data-range][data-state=hovered]>.t-item:after,.t-cell[data-range][data-state=hovered]>.t-item:before{background-color:var(--tui-primary-hover)}.t-cell[data-range][data-state=pressed]>.t-item:after,.t-cell[data-range][data-state=pressed]>.t-item:before{background-color:var(--tui-primary-active)}.t-cell[data-range=end]>.t-item:before{left:.25rem}.t-cell[data-range=end]>.t-item:after{left:-2rem;right:100%;transform:translateX(1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-range=start]>.t-item:before{right:.25rem}.t-cell[data-range=start]>.t-item:after{left:100%;right:-2rem;transform:translateX(-1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-state=disabled]{pointer-events:none}.t-cell[data-state=disabled]>.t-item{opacity:.36}.t-cell[data-state=hovered]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-hover)}.t-cell[data-state=pressed]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-active)}:host{width:15.75rem}.t-row:first-child{margin-top:0}.t-row:last-child{margin-bottom:0}"]
        })
    ], TuiPrimitiveYearPickerComponent);
    return TuiPrimitiveYearPickerComponent;
}());
export { TuiPrimitiveYearPickerComponent };
//# sourceMappingURL=data:application/json;base64,