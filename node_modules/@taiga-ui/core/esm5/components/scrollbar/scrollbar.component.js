import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { CSS as CSS_TOKEN, USER_AGENT } from '@ng-web-apis/common';
import { getElementOffset, isFirefox, TUI_IS_IOS, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TUI_SCROLL_INTO_VIEW, TUI_SCROLLABLE } from '@taiga-ui/core/constants';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function scrollRefFactory(_a) {
    var browserScrollRef = _a.browserScrollRef;
    return browserScrollRef;
}
// @dynamic
var TuiScrollbarComponent = /** @class */ (function () {
    function TuiScrollbarComponent(cssRef, elementRef, userAgent, isIos) {
        this.cssRef = cssRef;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.isIos = isIos;
        this.delegated = false;
        this.isLegacy = !this.cssRef.supports('position', 'sticky') ||
            (isFirefox(this.userAgent) && !this.cssRef.supports('scrollbar-width', 'none'));
        this.hidden = false;
        this.browserScrollRef = new ElementRef(this.elementRef.nativeElement);
    }
    TuiScrollbarComponent_1 = TuiScrollbarComponent;
    Object.defineProperty(TuiScrollbarComponent.prototype, "showScrollbars", {
        get: function () {
            return !this.hidden && !this.isIos && (!this.isLegacy || this.delegated);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarComponent.prototype, "showNative", {
        get: function () {
            return this.isLegacy && !this.hidden && !this.delegated;
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollbarComponent.prototype.onScrollable = function (element) {
        this.delegated = true;
        this.browserScrollRef.nativeElement = element;
    };
    TuiScrollbarComponent.prototype.scrollIntoView = function (detail) {
        if (this.delegated) {
            return;
        }
        var nativeElement = this.browserScrollRef.nativeElement;
        var _a = getElementOffset(nativeElement, detail), offsetTop = _a.offsetTop, offsetLeft = _a.offsetLeft;
        nativeElement.scrollTop =
            offsetTop + detail.offsetHeight / 2 - nativeElement.clientHeight / 2;
        nativeElement.scrollLeft =
            offsetLeft + detail.offsetWidth / 2 - nativeElement.clientWidth / 2;
    };
    var TuiScrollbarComponent_1;
    TuiScrollbarComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CSS_TOKEN,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiScrollbarComponent.prototype, "hidden", void 0);
    __decorate([
        HostBinding('class._legacy')
    ], TuiScrollbarComponent.prototype, "showNative", null);
    __decorate([
        HostListener(TUI_SCROLLABLE + ".stop", ['$event.detail'])
    ], TuiScrollbarComponent.prototype, "onScrollable", null);
    __decorate([
        HostListener(TUI_SCROLL_INTO_VIEW + ".stop", ['$event.detail'])
    ], TuiScrollbarComponent.prototype, "scrollIntoView", null);
    TuiScrollbarComponent = TuiScrollbarComponent_1 = __decorate([
        Component({
            selector: 'tui-scrollbar',
            template: "<tui-scroll-controls *ngIf=\"showScrollbars\"></tui-scroll-controls>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_SCROLL_REF,
                    deps: [TuiScrollbarComponent_1],
                    useFactory: scrollRefFactory,
                },
            ],
            styles: [":host{z-index:0;position:relative;display:flex;overflow:auto}:host:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}:host:not(._legacy)::-webkit-scrollbar,:host:not(._legacy)::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host._legacy{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution:0.001dpcm){:host._legacy::-webkit-scrollbar,:host._legacy::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:2.667rem solid transparent}:host._legacy::-webkit-scrollbar{background-color:transparent}:host._legacy::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}:host._legacy::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}:host._legacy::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}.t-content{position:relative;z-index:0;flex:1;flex-basis:auto;width:100%;height:-webkit-max-content;height:-moz-max-content;height:max-content}"]
        }),
        __param(0, Inject(CSS_TOKEN)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(USER_AGENT)),
        __param(3, Inject(TUI_IS_IOS))
    ], TuiScrollbarComponent);
    return TuiScrollbarComponent;
}());
export { TuiScrollbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsic2Nyb2xsYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssR0FDUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsR0FBRyxJQUFJLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsY0FBYyxHQUVqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXJELGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsRUFFVDtRQURwQixzQ0FBZ0I7SUFFaEIsT0FBTyxnQkFBZ0IsQ0FBQztBQUM1QixDQUFDO0FBRUQsV0FBVztBQWNYO0lBYUksK0JBRXFCLE1BQStDLEVBQzNCLFVBQW1DLEVBQ25DLFNBQWlCLEVBQ2pCLEtBQWM7UUFIbEMsV0FBTSxHQUFOLE1BQU0sQ0FBeUM7UUFDM0IsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBakIvQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBRVQsYUFBUSxHQUNyQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDM0MsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUlwRixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBRU4scUJBQWdCLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQVF2RSxDQUFDOzhCQW5CSyxxQkFBcUI7SUFxQjlCLHNCQUFJLGlEQUFjO2FBQWxCO1lBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3RSxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLDZDQUFVO2FBQWQ7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUM1RCxDQUFDOzs7T0FBQTtJQUdELDRDQUFZLEdBQVosVUFBYSxPQUFvQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztJQUNsRCxDQUFDO0lBR0QsOENBQWMsR0FBZCxVQUFlLE1BQW1CO1FBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixPQUFPO1NBQ1Y7UUFFTSxJQUFBLG1EQUFhLENBQTBCO1FBQ3hDLElBQUEsNENBQWlFLEVBQWhFLHdCQUFTLEVBQUUsMEJBQXFELENBQUM7UUFFeEUsYUFBYSxDQUFDLFNBQVM7WUFDbkIsU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3pFLGFBQWEsQ0FBQyxVQUFVO1lBQ3BCLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7Z0RBbkNJLE1BQU0sU0FBQyxTQUFTO2dCQUVnQyxVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTs2Q0FDakIsTUFBTSxTQUFDLFVBQVU7OENBQ2pCLE1BQU0sU0FBQyxVQUFVOztJQVR0QjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTt5REFDRjtJQWlCZjtRQURDLFdBQVcsQ0FBQyxlQUFlLENBQUM7MkRBRzVCO0lBR0Q7UUFEQyxZQUFZLENBQUksY0FBYyxVQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQzs2REFJekQ7SUFHRDtRQURDLFlBQVksQ0FBSSxvQkFBb0IsVUFBTyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUM7K0RBYS9EO0lBakRRLHFCQUFxQjtRQWJqQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZUFBZTtZQUN6QixvSkFBd0M7WUFFeEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxjQUFjO29CQUN2QixJQUFJLEVBQUUsQ0FBQyx1QkFBcUIsQ0FBQztvQkFDN0IsVUFBVSxFQUFFLGdCQUFnQjtpQkFDL0I7YUFDSjs7U0FDSixDQUFDO1FBZU8sV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFakIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7T0FsQmQscUJBQXFCLENBa0RqQztJQUFELDRCQUFDO0NBQUEsQUFsREQsSUFrREM7U0FsRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q1NTIGFzIENTU19UT0tFTiwgVVNFUl9BR0VOVH0gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIGdldEVsZW1lbnRPZmZzZXQsXG4gICAgaXNGaXJlZm94LFxuICAgIFRVSV9JU19JT1MsXG4gICAgdHVpRGVmYXVsdFByb3AsXG4gICAgVHVpSW5qZWN0aW9uVG9rZW5UeXBlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX1NDUk9MTF9JTlRPX1ZJRVcsIFRVSV9TQ1JPTExBQkxFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHtUVUlfU0NST0xMX1JFRn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFJlZkZhY3Rvcnkoe1xuICAgIGJyb3dzZXJTY3JvbGxSZWYsXG59OiBUdWlTY3JvbGxiYXJDb21wb25lbnQpOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiB7XG4gICAgcmV0dXJuIGJyb3dzZXJTY3JvbGxSZWY7XG59XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zY3JvbGxiYXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zY3JvbGxiYXIudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2Nyb2xsYmFyLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1NDUk9MTF9SRUYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpU2Nyb2xsYmFyQ29tcG9uZW50XSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IHNjcm9sbFJlZkZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2Nyb2xsYmFyQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGRlbGVnYXRlZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0xlZ2FjeTogYm9vbGVhbiA9XG4gICAgICAgICF0aGlzLmNzc1JlZi5zdXBwb3J0cygncG9zaXRpb24nLCAnc3RpY2t5JykgfHxcbiAgICAgICAgKGlzRmlyZWZveCh0aGlzLnVzZXJBZ2VudCkgJiYgIXRoaXMuY3NzUmVmLnN1cHBvcnRzKCdzY3JvbGxiYXItd2lkdGgnLCAnbm9uZScpKTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBoaWRkZW4gPSBmYWxzZTtcblxuICAgIHJlYWRvbmx5IGJyb3dzZXJTY3JvbGxSZWYgPSBuZXcgRWxlbWVudFJlZih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChDU1NfVE9LRU4pXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY3NzUmVmOiBUdWlJbmplY3Rpb25Ub2tlblR5cGU8dHlwZW9mIENTU19UT0tFTj4sXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSBwcml2YXRlIHJlYWRvbmx5IHVzZXJBZ2VudDogc3RyaW5nLFxuICAgICAgICBASW5qZWN0KFRVSV9JU19JT1MpIHByaXZhdGUgcmVhZG9ubHkgaXNJb3M6IGJvb2xlYW4sXG4gICAgKSB7fVxuXG4gICAgZ2V0IHNob3dTY3JvbGxiYXJzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGlkZGVuICYmICF0aGlzLmlzSW9zICYmICghdGhpcy5pc0xlZ2FjeSB8fCB0aGlzLmRlbGVnYXRlZCk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fbGVnYWN5JylcbiAgICBnZXQgc2hvd05hdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMZWdhY3kgJiYgIXRoaXMuaGlkZGVuICYmICF0aGlzLmRlbGVnYXRlZDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKGAke1RVSV9TQ1JPTExBQkxFfS5zdG9wYCwgWyckZXZlbnQuZGV0YWlsJ10pXG4gICAgb25TY3JvbGxhYmxlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5icm93c2VyU2Nyb2xsUmVmLm5hdGl2ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoYCR7VFVJX1NDUk9MTF9JTlRPX1ZJRVd9LnN0b3BgLCBbJyRldmVudC5kZXRhaWwnXSlcbiAgICBzY3JvbGxJbnRvVmlldyhkZXRhaWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge25hdGl2ZUVsZW1lbnR9ID0gdGhpcy5icm93c2VyU2Nyb2xsUmVmO1xuICAgICAgICBjb25zdCB7b2Zmc2V0VG9wLCBvZmZzZXRMZWZ0fSA9IGdldEVsZW1lbnRPZmZzZXQobmF0aXZlRWxlbWVudCwgZGV0YWlsKTtcblxuICAgICAgICBuYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9XG4gICAgICAgICAgICBvZmZzZXRUb3AgKyBkZXRhaWwub2Zmc2V0SGVpZ2h0IC8gMiAtIG5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgbmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID1cbiAgICAgICAgICAgIG9mZnNldExlZnQgKyBkZXRhaWwub2Zmc2V0V2lkdGggLyAyIC0gbmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCAvIDI7XG4gICAgfVxufVxuIl19