import { __decorate, __param } from "tslib";
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { tuiDefaultProp, TuiDirectiveStylesService } from '@taiga-ui/cdk';
import { TuiGroupStylesComponent } from './group-styles.component';
var TuiGroupDirective = /** @class */ (function () {
    function TuiGroupDirective(directiveStyles) {
        this.orientation = 'horizontal';
        this.adaptive = false;
        this.collapsed = false;
        this.rounded = true;
        this.size = 'm';
        directiveStyles.addComponent(TuiGroupStylesComponent);
    }
    Object.defineProperty(TuiGroupDirective.prototype, "orientationHorizontal", {
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiGroupDirective.prototype, "orientationVertical", {
        get: function () {
            return this.orientation === 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiGroupDirective.prototype, "sizeLarge", {
        get: function () {
            return this.size === 'l';
        },
        enumerable: true,
        configurable: true
    });
    TuiGroupDirective.ctorParameters = function () { return [
        { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiGroupDirective.prototype, "orientation", void 0);
    __decorate([
        Input(),
        HostBinding('class.tui-group_adaptive'),
        tuiDefaultProp()
    ], TuiGroupDirective.prototype, "adaptive", void 0);
    __decorate([
        Input(),
        HostBinding('class.tui-group_collapsed'),
        tuiDefaultProp()
    ], TuiGroupDirective.prototype, "collapsed", void 0);
    __decorate([
        Input(),
        HostBinding('class.tui-group_rounded'),
        tuiDefaultProp()
    ], TuiGroupDirective.prototype, "rounded", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiGroupDirective.prototype, "size", void 0);
    __decorate([
        HostBinding('class.tui-group_orientation_horizontal')
    ], TuiGroupDirective.prototype, "orientationHorizontal", null);
    __decorate([
        HostBinding('class.tui-group_orientation_vertical')
    ], TuiGroupDirective.prototype, "orientationVertical", null);
    __decorate([
        HostBinding('class.tui-group_radius_large')
    ], TuiGroupDirective.prototype, "sizeLarge", null);
    TuiGroupDirective = __decorate([
        Directive({
            selector: '[tuiGroup]:not(ng-container)',
            host: {
                class: 'tui-group',
                role: 'group',
            },
        }),
        __param(0, Inject(TuiDirectiveStylesService))
    ], TuiGroupDirective);
    return TuiGroupDirective;
}());
export { TuiGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9ncm91cC8iLCJzb3VyY2VzIjpbImdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUMsY0FBYyxFQUFFLHlCQUF5QixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR3hFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBU2pFO0lBd0JJLDJCQUN1QyxlQUEwQztRQXRCakYsZ0JBQVcsR0FBb0IsWUFBWSxDQUFDO1FBSzVDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFLakIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUtsQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBSWYsU0FBSSxHQUFhLEdBQUcsQ0FBQztRQUtqQixlQUFlLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUdELHNCQUFJLG9EQUFxQjthQUF6QjtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxZQUFZLENBQUM7UUFDN0MsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxrREFBbUI7YUFBdkI7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDO1FBQzNDLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksd0NBQVM7YUFBYjtZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUM7UUFDN0IsQ0FBQzs7O09BQUE7O2dCQWxCdUQseUJBQXlCLHVCQUE1RSxNQUFNLFNBQUMseUJBQXlCOztJQXRCckM7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7MERBQzJCO0lBSzVDO1FBSEMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLDBCQUEwQixDQUFDO1FBQ3ZDLGNBQWMsRUFBRTt1REFDQTtJQUtqQjtRQUhDLEtBQUssRUFBRTtRQUNQLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQztRQUN4QyxjQUFjLEVBQUU7d0RBQ0M7SUFLbEI7UUFIQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMseUJBQXlCLENBQUM7UUFDdEMsY0FBYyxFQUFFO3NEQUNGO0lBSWY7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7bURBQ0k7SUFTckI7UUFEQyxXQUFXLENBQUMsd0NBQXdDLENBQUM7a0VBR3JEO0lBR0Q7UUFEQyxXQUFXLENBQUMsc0NBQXNDLENBQUM7Z0VBR25EO0lBR0Q7UUFEQyxXQUFXLENBQUMsOEJBQThCLENBQUM7c0RBRzNDO0lBM0NRLGlCQUFpQjtRQVA3QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsOEJBQThCO1lBQ3hDLElBQUksRUFBRTtnQkFDRixLQUFLLEVBQUUsV0FBVztnQkFDbEIsSUFBSSxFQUFFLE9BQU87YUFDaEI7U0FDSixDQUFDO1FBMEJPLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7T0F6QjdCLGlCQUFpQixDQTRDN0I7SUFBRCx3QkFBQztDQUFBLEFBNUNELElBNENDO1NBNUNZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCBUdWlEaXJlY3RpdmVTdHlsZXNTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpT3JpZW50YXRpb25ULCBUdWlTaXplTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuXG5pbXBvcnQge1R1aUdyb3VwU3R5bGVzQ29tcG9uZW50fSBmcm9tICcuL2dyb3VwLXN0eWxlcy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlHcm91cF06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICd0dWktZ3JvdXAnLFxuICAgICAgICByb2xlOiAnZ3JvdXAnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUdyb3VwRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgb3JpZW50YXRpb246IFR1aU9yaWVudGF0aW9uVCA9ICdob3Jpem9udGFsJztcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfYWRhcHRpdmUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgYWRhcHRpdmUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfY29sbGFwc2VkJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGNvbGxhcHNlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnR1aS1ncm91cF9yb3VuZGVkJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHJvdW5kZWQgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gJ20nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZSkgZGlyZWN0aXZlU3R5bGVzOiBUdWlEaXJlY3RpdmVTdHlsZXNTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBkaXJlY3RpdmVTdHlsZXMuYWRkQ29tcG9uZW50KFR1aUdyb3VwU3R5bGVzQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnR1aS1ncm91cF9vcmllbnRhdGlvbl9ob3Jpem9udGFsJylcbiAgICBnZXQgb3JpZW50YXRpb25Ib3Jpem9udGFsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudHVpLWdyb3VwX29yaWVudGF0aW9uX3ZlcnRpY2FsJylcbiAgICBnZXQgb3JpZW50YXRpb25WZXJ0aWNhbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfcmFkaXVzX2xhcmdlJylcbiAgICBnZXQgc2l6ZUxhcmdlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplID09PSAnbCc7XG4gICAgfVxufVxuIl19