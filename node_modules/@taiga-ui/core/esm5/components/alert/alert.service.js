import { __decorate, __extends, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { AbstractTuiDialogService, TuiIdService } from '@taiga-ui/cdk';
import { TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/tokens';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TuiAlertComponent } from './alert.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/tokens";
import * as i2 from "@taiga-ui/cdk/services";
var TuiAlertService = /** @class */ (function (_super) {
    __extends(TuiAlertService, _super);
    function TuiAlertService(defaultOptions, idService) {
        var _this = _super.call(this, idService) || this;
        _this.defaultOptions = defaultOptions;
        _this.component = new PolymorpheusComponent(TuiAlertComponent);
        return _this;
    }
    TuiAlertService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_NOTIFICATION_OPTIONS,] }] },
        { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
    ]; };
    TuiAlertService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiAlertService_Factory() { return new TuiAlertService(i0.ɵɵinject(i1.TUI_NOTIFICATION_OPTIONS), i0.ɵɵinject(i2.TuiIdService)); }, token: TuiAlertService, providedIn: "root" });
    TuiAlertService = __decorate([
        Injectable({ providedIn: "root" }),
        __param(0, Inject(TUI_NOTIFICATION_OPTIONS)),
        __param(1, Inject(TuiIdService))
    ], TuiAlertService);
    return TuiAlertService;
}(AbstractTuiDialogService));
export { TuiAlertService };
/** @deprecated use {@link TuiAlertService} */
var TuiNotificationsService = /** @class */ (function () {
    function TuiNotificationsService(alert) {
        this.alert = alert;
    }
    TuiNotificationsService.prototype.show = function (content, options) {
        if (options === void 0) { options = {}; }
        return this.alert.open(content, options);
    };
    TuiNotificationsService.ctorParameters = function () { return [
        { type: TuiAlertService, decorators: [{ type: Inject, args: [TuiAlertService,] }] }
    ]; };
    TuiNotificationsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(i0.ɵɵinject(TuiAlertService)); }, token: TuiNotificationsService, providedIn: "root" });
    TuiNotificationsService = __decorate([
        Injectable({ providedIn: "root" }),
        __param(0, Inject(TuiAlertService))
    ], TuiNotificationsService);
    return TuiNotificationsService;
}());
export { TuiNotificationsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvYWxlcnQvIiwic291cmNlcyI6WyJhbGVydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBTXJFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxxQkFBcUIsRUFBc0IsTUFBTSwwQkFBMEIsQ0FBQztBQUdwRixPQUFPLEVBQUMsaUJBQWlCLEVBQWdDLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFHbkY7SUFBcUMsbUNBQThDO0lBRy9FLHlCQUV1QixjQUFvQyxFQUNqQyxTQUF1QjtRQUhqRCxZQUtJLGtCQUFNLFNBQVMsQ0FBQyxTQUNuQjtRQUpzQixvQkFBYyxHQUFkLGNBQWMsQ0FBc0I7UUFKeEMsZUFBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7SUFRNUUsQ0FBQzs7Z0RBTEksTUFBTSxTQUFDLHdCQUF3QjtnQkFFQyxZQUFZLHVCQUE1QyxNQUFNLFNBQUMsWUFBWTs7O0lBTmYsZUFBZTtRQUQzQixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUM7UUFLeEIsV0FBQSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtRQUVoQyxXQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtPQU5oQixlQUFlLENBVTNCOzBCQXhCRDtDQXdCQyxBQVZELENBQXFDLHdCQUF3QixHQVU1RDtTQVZZLGVBQWU7QUFZNUIsOENBQThDO0FBRTlDO0lBQ0ksaUNBQXNELEtBQXNCO1FBQXRCLFVBQUssR0FBTCxLQUFLLENBQWlCO0lBQUcsQ0FBQztJQWFoRixzQ0FBSSxHQUFKLFVBQ0ksT0FBaUUsRUFDakUsT0FBd0U7UUFBeEUsd0JBQUEsRUFBQSxZQUF3RTtRQUV4RSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWMsRUFBRSxPQUFPLENBQTZCLENBQUM7SUFDaEYsQ0FBQzs7Z0JBbEI0RCxlQUFlLHVCQUEvRCxNQUFNLFNBQUMsZUFBZTs7O0lBRDFCLHVCQUF1QjtRQURuQyxVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUM7UUFFaEIsV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7T0FEM0IsdUJBQXVCLENBb0JuQztrQ0FoREQ7Q0FnREMsQUFwQkQsSUFvQkM7U0FwQlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aURpYWxvZ1NlcnZpY2UsIFR1aUlkU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1xuICAgIFR1aUFsZXJ0T3B0aW9ucyxcbiAgICBUdWlOb3RpZmljYXRpb25PcHRpb25zLFxuICAgIFR1aU5vdGlmaWNhdGlvbk9wdGlvbnNXaXRoRGF0YSxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9OT1RJRklDQVRJT05fT1BUSU9OU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50LCBQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlBbGVydENvbXBvbmVudCwgVHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHR9IGZyb20gJy4vYWxlcnQuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46IGByb290YH0pXG5leHBvcnQgY2xhc3MgVHVpQWxlcnRTZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RUdWlEaWFsb2dTZXJ2aWNlPFR1aUFsZXJ0T3B0aW9uczxhbnk+PiB7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbXBvbmVudCA9IG5ldyBQb2x5bW9ycGhldXNDb21wb25lbnQoVHVpQWxlcnRDb21wb25lbnQpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX05PVElGSUNBVElPTl9PUFRJT05TKVxuICAgICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVmYXVsdE9wdGlvbnM6IFR1aUFsZXJ0T3B0aW9uczxhbnk+LFxuICAgICAgICBASW5qZWN0KFR1aUlkU2VydmljZSkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGlkU2VydmljZSk7XG4gICAgfVxufVxuXG4vKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdWlBbGVydFNlcnZpY2V9ICovXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogYHJvb3RgfSlcbmV4cG9ydCBjbGFzcyBUdWlOb3RpZmljYXRpb25zU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChUdWlBbGVydFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgYWxlcnQ6IFR1aUFsZXJ0U2VydmljZSkge31cblxuICAgIHNob3c8TyA9IHZvaWQ+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8+PixcbiAgICApOiBPYnNlcnZhYmxlPE8+O1xuICAgIHNob3c8TyA9IHZvaWQ+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8+PixcbiAgICAgICAgb3B0aW9uczogVHVpTm90aWZpY2F0aW9uT3B0aW9ucyxcbiAgICApOiBPYnNlcnZhYmxlPE8+O1xuICAgIHNob3c8TywgST4oXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHQ8TywgST4+LFxuICAgICAgICBvcHRpb25zOiBUdWlOb3RpZmljYXRpb25PcHRpb25zV2l0aERhdGE8ST4sXG4gICAgKTogT2JzZXJ2YWJsZTxPPjtcbiAgICBzaG93PE8sIEk+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8sIEk+PixcbiAgICAgICAgb3B0aW9uczogVHVpTm90aWZpY2F0aW9uT3B0aW9ucyB8IFR1aU5vdGlmaWNhdGlvbk9wdGlvbnNXaXRoRGF0YTxJPiA9IHt9LFxuICAgICk6IE9ic2VydmFibGU8Tz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGVydC5vcGVuKGNvbnRlbnQgYXMgYW55LCBvcHRpb25zKSBhcyB1bmtub3duIGFzIE9ic2VydmFibGU8Tz47XG4gICAgfVxufVxuIl19