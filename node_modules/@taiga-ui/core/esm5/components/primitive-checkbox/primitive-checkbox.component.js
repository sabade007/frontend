import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_CHECKBOX_OPTIONS } from './checkbox-options';
// @dynamic
var TuiPrimitiveCheckboxComponent = /** @class */ (function () {
    function TuiPrimitiveCheckboxComponent(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "valueSetter", {
        set: function (value) {
            if (value !== false) {
                this.setCurrentIcon(value);
            }
            this.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "appearance", {
        get: function () {
            switch (this.value) {
                case false:
                    return this.options.appearances.unchecked;
                case true:
                    return this.options.appearances.checked;
                default:
                    return this.options.appearances.indeterminate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "empty", {
        get: function () {
            return this.value === false;
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveCheckboxComponent.prototype.setCurrentIcon = function (value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    };
    TuiPrimitiveCheckboxComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_CHECKBOX_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
    __decorate([
        Input('value'),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "valueSetter", null);
    TuiPrimitiveCheckboxComponent = __decorate([
        Component({
            selector: 'tui-primitive-checkbox',
            template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focused]=\"focused\"\n    [hovered]=\"hovered\"\n    [pressed]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <span\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"{$implicit: size}\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                class=\"t-mark\"\n                [class.t-mark_on]=\"!empty\"\n                [src]=\"icon\"\n            ></tui-svg>\n        </ng-template>\n    </span>\n    <ng-content></ng-content>\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size='m']{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size='l']{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}"]
        }),
        __param(0, Inject(TUI_CHECKBOX_OPTIONS))
    ], TuiPrimitiveCheckboxComponent);
    return TuiPrimitiveCheckboxComponent;
}());
export { TuiPrimitiveCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvcHJpbWl0aXZlLWNoZWNrYm94LyIsInNvdXJjZXMiOlsicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF5QixjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJckUsT0FBTyxFQUFDLG9CQUFvQixFQUFxQixNQUFNLG9CQUFvQixDQUFDO0FBRTVFLFdBQVc7QUFPWDtJQXlDSSx1Q0FDbUQsT0FBMkI7UUFBM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUF0QzlFLFNBQUksR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUluQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFJaEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUloQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFZaEIsU0FBSSxHQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUUvQixVQUFLLEdBQW1CLEtBQUssQ0FBQztJQUkzQixDQUFDO0lBZkosc0JBQUksc0RBQVc7YUFBZixVQUFnQixLQUFxQjtZQUNqQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDOUI7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQVdELHNCQUFJLHFEQUFVO2FBQWQ7WUFDSSxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLEtBQUssS0FBSztvQkFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztnQkFDOUMsS0FBSyxJQUFJO29CQUNMLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO2dCQUM1QztvQkFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQzthQUNyRDtRQUNMLENBQUM7OztPQUFBO0lBRUQsc0JBQUksZ0RBQUs7YUFBVDtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFFTyxzREFBYyxHQUF0QixVQUF1QixLQUFxQjtRQUN4QyxJQUFJLENBQUMsSUFBSTtZQUNMLEtBQUssS0FBSyxJQUFJO2dCQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhO2dCQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7O2dEQXZCSSxNQUFNLFNBQUMsb0JBQW9COztJQXRDaEM7UUFIQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7UUFDN0IsY0FBYyxFQUFFOytEQUNrQjtJQUluQztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTttRUFDQTtJQUlqQjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTtrRUFDRDtJQUloQjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTtrRUFDRDtJQUloQjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTtrRUFDRDtJQUloQjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTtrRUFDRDtJQUloQjtRQUZDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDZCxjQUFjLEVBQUU7b0VBT2hCO0lBbENRLDZCQUE2QjtRQU56QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLDhrQkFBaUQ7WUFFakQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2xELENBQUM7UUEyQ08sV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtPQTFDeEIsNkJBQTZCLENBa0V6QztJQUFELG9DQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0FsRVksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQ29udGV4dFdpdGhJbXBsaWNpdCwgdHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1RVSV9DSEVDS0JPWF9PUFRJT05TLCBUdWlDaGVja2JveE9wdGlvbnN9IGZyb20gJy4vY2hlY2tib3gtb3B0aW9ucyc7XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmltaXRpdmUtY2hlY2tib3gnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcmltaXRpdmUtY2hlY2tib3gudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJpbWl0aXZlLWNoZWNrYm94LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJpbWl0aXZlQ2hlY2tib3hDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplTCA9IHRoaXMub3B0aW9ucy5zaXplO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZm9jdXNlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGhvdmVyZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBwcmVzc2VkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCd2YWx1ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgdmFsdWVTZXR0ZXIodmFsdWU6IGJvb2xlYW4gfCBudWxsKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudEljb24odmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGljb246IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTD4+ID1cbiAgICAgICAgdGhpcy5vcHRpb25zLmljb25zLmNoZWNrZWQ7XG5cbiAgICB2YWx1ZTogYm9vbGVhbiB8IG51bGwgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9DSEVDS0JPWF9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFR1aUNoZWNrYm94T3B0aW9ucyxcbiAgICApIHt9XG5cbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlcy51bmNoZWNrZWQ7XG4gICAgICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlcy5jaGVja2VkO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEN1cnJlbnRJY29uKHZhbHVlOiBib29sZWFuIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzLmljb24gPVxuICAgICAgICAgICAgdmFsdWUgPT09IG51bGxcbiAgICAgICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5pY29ucy5pbmRldGVybWluYXRlXG4gICAgICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuaWNvbnMuY2hlY2tlZDtcbiAgICB9XG59XG4iXX0=