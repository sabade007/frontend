import { __decorate, __extends, __param } from "tslib";
import { Directive, forwardRef, Inject } from '@angular/core';
import { TuiAbstractTextfieldHost } from '@taiga-ui/core/abstract';
import { TUI_TEXTFIELD_HOST } from '@taiga-ui/core/tokens';
import { TuiPrimitiveTextfieldComponent } from './primitive-textfield.component';
var TuiPrimitiveTextfieldDirective = /** @class */ (function (_super) {
    __extends(TuiPrimitiveTextfieldDirective, _super);
    function TuiPrimitiveTextfieldDirective(textfield) {
        var _this = 
        /**
         * TuiPrimitiveTextfieldComponent satisfies all required parts of
         * AbstractTuiControl interface. A new interface is not introduced
         * so AbstractTuiControl is automatically injected for all other controls.
         */
        _super.call(this, textfield) || this;
        _this.textfield = textfield;
        return _this;
    }
    TuiPrimitiveTextfieldDirective_1 = TuiPrimitiveTextfieldDirective;
    Object.defineProperty(TuiPrimitiveTextfieldDirective.prototype, "readOnly", {
        get: function () {
            return this.textfield.readOnly || !this.textfield.editable;
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveTextfieldDirective.prototype.onValueChange = function (value) {
        this.textfield.onModelChange(value);
    };
    var TuiPrimitiveTextfieldDirective_1;
    TuiPrimitiveTextfieldDirective.ctorParameters = function () { return [
        { type: TuiPrimitiveTextfieldComponent, decorators: [{ type: Inject, args: [TuiPrimitiveTextfieldComponent,] }] }
    ]; };
    TuiPrimitiveTextfieldDirective = TuiPrimitiveTextfieldDirective_1 = __decorate([
        Directive({
            selector: 'tui-primitive-textfield',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiPrimitiveTextfieldDirective_1; }),
                },
            ],
        }),
        __param(0, Inject(TuiPrimitiveTextfieldComponent))
    ], TuiPrimitiveTextfieldDirective);
    return TuiPrimitiveTextfieldDirective;
}(TuiAbstractTextfieldHost));
export { TuiPrimitiveTextfieldDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXRleHRmaWVsZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3ByaW1pdGl2ZS10ZXh0ZmllbGQvIiwic291cmNlcyI6WyJwcmltaXRpdmUtdGV4dGZpZWxkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sRUFBQyw4QkFBOEIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBVy9FO0lBQW9ELGtEQUE2QjtJQUM3RSx3Q0FFcUIsU0FBeUM7UUFGOUQ7UUFJSTs7OztXQUlHO1FBQ0gsa0JBQU0sU0FBbUQsQ0FBQyxTQUM3RDtRQVJvQixlQUFTLEdBQVQsU0FBUyxDQUFnQzs7SUFROUQsQ0FBQzt1Q0FYUSw4QkFBOEI7SUFhdkMsc0JBQUksb0RBQVE7YUFBWjtZQUNJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUMvRCxDQUFDOzs7T0FBQTtJQUVELHNEQUFhLEdBQWIsVUFBYyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OztnQkFoQitCLDhCQUE4Qix1QkFEekQsTUFBTSxTQUFDLDhCQUE4Qjs7SUFGakMsOEJBQThCO1FBVDFDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLGdDQUE4QixFQUE5QixDQUE4QixDQUFDO2lCQUNoRTthQUNKO1NBQ0osQ0FBQztRQUdPLFdBQUEsTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUE7T0FGbEMsOEJBQThCLENBb0IxQztJQUFELHFDQUFDO0NBQUEsQUFwQkQsQ0FBb0Qsd0JBQXdCLEdBb0IzRTtTQXBCWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RUdWlDb250cm9sfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1RVSV9URVhURklFTERfSE9TVH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcblxuaW1wb3J0IHtUdWlQcmltaXRpdmVUZXh0ZmllbGRDb21wb25lbnR9IGZyb20gJy4vcHJpbWl0aXZlLXRleHRmaWVsZC5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmltaXRpdmUtdGV4dGZpZWxkJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9IT1NULFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVHVpUHJpbWl0aXZlVGV4dGZpZWxkRGlyZWN0aXZlKSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmltaXRpdmVUZXh0ZmllbGREaXJlY3RpdmUgZXh0ZW5kcyBUdWlBYnN0cmFjdFRleHRmaWVsZEhvc3Q8YW55PiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpUHJpbWl0aXZlVGV4dGZpZWxkQ29tcG9uZW50KVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRleHRmaWVsZDogVHVpUHJpbWl0aXZlVGV4dGZpZWxkQ29tcG9uZW50LFxuICAgICkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVHVpUHJpbWl0aXZlVGV4dGZpZWxkQ29tcG9uZW50IHNhdGlzZmllcyBhbGwgcmVxdWlyZWQgcGFydHMgb2ZcbiAgICAgICAgICogQWJzdHJhY3RUdWlDb250cm9sIGludGVyZmFjZS4gQSBuZXcgaW50ZXJmYWNlIGlzIG5vdCBpbnRyb2R1Y2VkXG4gICAgICAgICAqIHNvIEFic3RyYWN0VHVpQ29udHJvbCBpcyBhdXRvbWF0aWNhbGx5IGluamVjdGVkIGZvciBhbGwgb3RoZXIgY29udHJvbHMuXG4gICAgICAgICAqL1xuICAgICAgICBzdXBlcih0ZXh0ZmllbGQgYXMgdW5rbm93biBhcyBBYnN0cmFjdFR1aUNvbnRyb2w8dW5rbm93bj4pO1xuICAgIH1cblxuICAgIGdldCByZWFkT25seSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dGZpZWxkLnJlYWRPbmx5IHx8ICF0aGlzLnRleHRmaWVsZC5lZGl0YWJsZTtcbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50ZXh0ZmllbGQub25Nb2RlbENoYW5nZSh2YWx1ZSk7XG4gICAgfVxufVxuIl19