import { CHAR_HYPHEN, CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
import { getFractionPartPadded } from './get-fractional-part-padded';
// TODO: refactor later to `formatNumber(value: number, options: Partial<AllTheStuff>)`
/**
 * @deprecated: use {@link tuiFormatNumber} instead
 * Formats number adding a thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @param zeroPadding enable zeros at the end of decimal part
 * @return the formatted string
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function formatNumber(value, decimalLimit, decimalSeparator, thousandSeparator, zeroPadding) {
    if (decimalLimit === void 0) { decimalLimit = null; }
    if (decimalSeparator === void 0) { decimalSeparator = ","; }
    if (thousandSeparator === void 0) { thousandSeparator = CHAR_NO_BREAK_SPACE; }
    if (zeroPadding === void 0) { zeroPadding = true; }
    var integerPartString = String(Math.floor(Math.abs(value)));
    var fractionPartPadded = getFractionPartPadded(value, decimalLimit);
    if (decimalLimit !== null) {
        if (zeroPadding) {
            var zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);
            var zeroPartString = "0".repeat(zeroPaddingSize);
            fractionPartPadded = "" + fractionPartPadded + zeroPartString;
        }
        else {
            fractionPartPadded = fractionPartPadded.replace(/0*$/, "");
        }
    }
    var remainder = integerPartString.length % 3;
    var sign = value < 0 ? CHAR_HYPHEN : "";
    var result = sign + integerPartString.charAt(0);
    for (var i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;
}
export var tuiFormatNumber = formatNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LW51bWJlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL2Zvcm1hdC8iLCJzb3VyY2VzIjpbImZvcm1hdC1udW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUvRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVuRSx1RkFBdUY7QUFDdkY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLFlBQVksQ0FDeEIsS0FBYSxFQUNiLFlBQWtDLEVBQ2xDLGdCQUE4QixFQUM5QixpQkFBK0MsRUFDL0MsV0FBMkI7SUFIM0IsNkJBQUEsRUFBQSxtQkFBa0M7SUFDbEMsaUNBQUEsRUFBQSxzQkFBOEI7SUFDOUIsa0NBQUEsRUFBQSx1Q0FBK0M7SUFDL0MsNEJBQUEsRUFBQSxrQkFBMkI7SUFFM0IsSUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU5RCxJQUFJLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVwRSxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7UUFDdkIsSUFBSSxXQUFXLEVBQUU7WUFDYixJQUFNLGVBQWUsR0FBVyxJQUFJLENBQUMsR0FBRyxDQUNwQyxZQUFZLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxFQUN4QyxDQUFDLENBQ0osQ0FBQztZQUNGLElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbkQsa0JBQWtCLEdBQUcsS0FBRyxrQkFBa0IsR0FBRyxjQUFnQixDQUFDO1NBQ2pFO2FBQU07WUFDSCxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzlEO0tBQ0o7SUFFRCxJQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLElBQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFDLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckQsTUFBTSxJQUFJLGlCQUFpQixDQUFDO1NBQy9CO1FBRUQsTUFBTSxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6QztJQUVELE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hGLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDSEFSX0hZUEhFTiwgQ0hBUl9OT19CUkVBS19TUEFDRX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbmltcG9ydCB7Z2V0RnJhY3Rpb25QYXJ0UGFkZGVkfSBmcm9tICcuL2dldC1mcmFjdGlvbmFsLXBhcnQtcGFkZGVkJztcblxuLy8gVE9ETzogcmVmYWN0b3IgbGF0ZXIgdG8gYGZvcm1hdE51bWJlcih2YWx1ZTogbnVtYmVyLCBvcHRpb25zOiBQYXJ0aWFsPEFsbFRoZVN0dWZmPilgXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUZvcm1hdE51bWJlcn0gaW5zdGVhZFxuICogRm9ybWF0cyBudW1iZXIgYWRkaW5nIGEgdGhvdXNhbmQgc2VwYXJhdG9ycyBhbmQgY29ycmVjdCBkZWNpbWFsIHNlcGFyYXRvclxuICogcGFkZGluZyBkZWNpbWFsIHBhcnQgd2l0aCB6ZXJvZXMgdG8gZ2l2ZW4gbGVuZ3RoXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSBpbnB1dCBudW1iZXJcbiAqIEBwYXJhbSBkZWNpbWFsTGltaXQgbnVtYmVyIG9mIGRpZ2l0cyBvZiBkZWNpbWFsIHBhcnQsIG51bGwgdG8ga2VlcCB1bnRvdWNoZWRcbiAqIEBwYXJhbSBkZWNpbWFsU2VwYXJhdG9yIHNlcGFyYXRvciBiZXR3ZWVuIHRoZSBpbnRlZ2VyIGFuZCB0aGUgZGVjaW1hbCBwYXJ0XG4gKiBAcGFyYW0gdGhvdXNhbmRTZXBhcmF0b3Igc2VwYXJhdG9yIGJldHdlZW4gdGhvdXNhbmRzXG4gKiBAcGFyYW0gemVyb1BhZGRpbmcgZW5hYmxlIHplcm9zIGF0IHRoZSBlbmQgb2YgZGVjaW1hbCBwYXJ0XG4gKiBAcmV0dXJuIHRoZSBmb3JtYXR0ZWQgc3RyaW5nXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXIoXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBkZWNpbWFsTGltaXQ6IG51bWJlciB8IG51bGwgPSBudWxsLFxuICAgIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyA9IGAsYCxcbiAgICB0aG91c2FuZFNlcGFyYXRvcjogc3RyaW5nID0gQ0hBUl9OT19CUkVBS19TUEFDRSxcbiAgICB6ZXJvUGFkZGluZzogYm9vbGVhbiA9IHRydWUsXG4pOiBzdHJpbmcge1xuICAgIGNvbnN0IGludGVnZXJQYXJ0U3RyaW5nID0gU3RyaW5nKE1hdGguZmxvb3IoTWF0aC5hYnModmFsdWUpKSk7XG5cbiAgICBsZXQgZnJhY3Rpb25QYXJ0UGFkZGVkID0gZ2V0RnJhY3Rpb25QYXJ0UGFkZGVkKHZhbHVlLCBkZWNpbWFsTGltaXQpO1xuXG4gICAgaWYgKGRlY2ltYWxMaW1pdCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoemVyb1BhZGRpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHplcm9QYWRkaW5nU2l6ZTogbnVtYmVyID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgZGVjaW1hbExpbWl0IC0gZnJhY3Rpb25QYXJ0UGFkZGVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IHplcm9QYXJ0U3RyaW5nID0gYDBgLnJlcGVhdCh6ZXJvUGFkZGluZ1NpemUpO1xuXG4gICAgICAgICAgICBmcmFjdGlvblBhcnRQYWRkZWQgPSBgJHtmcmFjdGlvblBhcnRQYWRkZWR9JHt6ZXJvUGFydFN0cmluZ31gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhY3Rpb25QYXJ0UGFkZGVkID0gZnJhY3Rpb25QYXJ0UGFkZGVkLnJlcGxhY2UoLzAqJC8sIGBgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbWFpbmRlciA9IGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aCAlIDM7XG4gICAgY29uc3Qgc2lnbiA9IHZhbHVlIDwgMCA/IENIQVJfSFlQSEVOIDogYGA7XG4gICAgbGV0IHJlc3VsdCA9IHNpZ24gKyBpbnRlZ2VyUGFydFN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpICUgMyA9PT0gcmVtYWluZGVyICYmIGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aG91c2FuZFNlcGFyYXRvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBpbnRlZ2VyUGFydFN0cmluZy5jaGFyQXQoaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWN0aW9uUGFydFBhZGRlZCA/IHJlc3VsdCArIGRlY2ltYWxTZXBhcmF0b3IgKyBmcmFjdGlvblBhcnRQYWRkZWQgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCB0dWlGb3JtYXROdW1iZXIgPSBmb3JtYXROdW1iZXI7XG4iXX0=