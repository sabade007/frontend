import { __read, __spread } from "tslib";
import { CHAR_EN_DASH, CHAR_HYPHEN, CHAR_NO_BREAK_SPACE, tuiAssert } from '@taiga-ui/cdk';
import { MASK_CARET_TRAP, TUI_DIGIT_REGEXP, TUI_LEADING_ZEROES_REGEXP, TUI_NON_DIGITS_REGEXP, } from '@taiga-ui/core/constants';
import { otherDecimalSymbol } from '@taiga-ui/core/utils/format';
var NON_ZERO_DIGIT = /[1-9]/;
/**
 * Adaptation for {@link https://github.com/text-mask/text-mask/tree/master/addons#createnumbermask `createNumberMask`}
 */
export function tuiCreateNumberMask(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.allowDecimal, allowDecimal = _c === void 0 ? false : _c, _d = _b.decimalSymbol, decimalSymbol = _d === void 0 ? "," : _d, _e = _b.thousandSymbol, thousandSymbol = _e === void 0 ? CHAR_NO_BREAK_SPACE : _e, _f = _b.autoCorrectDecimalSymbol, autoCorrectDecimalSymbol = _f === void 0 ? true : _f, _g = _b.decimalLimit, decimalLimit = _g === void 0 ? 2 : _g, _h = _b.requireDecimal, requireDecimal = _h === void 0 ? false : _h, _j = _b.allowNegative, allowNegative = _j === void 0 ? false : _j, _k = _b.integerLimit, integerLimit = _k === void 0 ? 0 : _k;
    tuiAssert.assert(Number.isInteger(decimalLimit));
    tuiAssert.assert(decimalLimit >= 0);
    tuiAssert.assert(Number.isInteger(integerLimit));
    tuiAssert.assert(integerLimit >= 0);
    return function (rawValue, _a) {
        var previousConformedValue = _a.previousConformedValue;
        if (previousConformedValue && requireDecimal) {
            var conformedWithoutSeparator = rawValue.split(thousandSymbol).join("");
            var previousConformedValueWithoutDecimalSymbolAndSeparator = previousConformedValue
                .split(thousandSymbol)
                .join("")
                .split(decimalSymbol)
                .join("");
            // Forbid removal of decimal separator if decimal part is required
            if (conformedWithoutSeparator ===
                previousConformedValueWithoutDecimalSymbolAndSeparator) {
                rawValue = previousConformedValue;
            }
        }
        var isNegative = (rawValue[0] === CHAR_HYPHEN || rawValue[0] === CHAR_EN_DASH) &&
            allowNegative;
        if (isDecimalSymbol(rawValue, decimalSymbol, autoCorrectDecimalSymbol) &&
            allowDecimal) {
            return ["0", decimalSymbol, TUI_DIGIT_REGEXP];
        }
        if (isNegative) {
            rawValue = rawValue.slice(1);
        }
        var decimalIndex = getDecimalSymbolIndex(rawValue, decimalSymbol, autoCorrectDecimalSymbol);
        var hasDecimal = decimalIndex !== -1;
        var integer = hasDecimal ? rawValue.slice(0, decimalIndex) : rawValue;
        var thousandSeparators = integer.match(new RegExp(thousandSymbol, "g")) || [];
        var integerCapped = integerLimit
            ? integer.slice(0, integerLimit + thousandSeparators.length)
            : integer;
        var integerCappedClean = integerCapped.replace(TUI_NON_DIGITS_REGEXP, "");
        var _b = __read(integerCappedClean.match(TUI_LEADING_ZEROES_REGEXP) || [""], 1), leadingZerosMatch = _b[0];
        var leadingZerosAmount = leadingZerosMatch.length;
        var integerCappedZerosClean = integerCappedClean
            .replace(/^0+(?!\.|$)/, "")
            .trim();
        var withSeparator = addThousandsSeparator(integerCappedZerosClean, thousandSymbol);
        var mask = convertToMask(withSeparator);
        if ((hasDecimal && allowDecimal) || requireDecimal) {
            var fraction = hasDecimal
                ? convertToMask(rawValue.slice(decimalIndex + 1).replace(TUI_NON_DIGITS_REGEXP, ""))
                : [];
            var fractionCapped = decimalLimit
                ? fraction.slice(0, decimalLimit)
                : fraction;
            if (rawValue[decimalIndex] !== otherDecimalSymbol(decimalSymbol)) {
                mask.push(MASK_CARET_TRAP);
            }
            mask.push.apply(mask, __spread([decimalSymbol, MASK_CARET_TRAP], fractionCapped));
            for (var i = 0; i < decimalLimit - fractionCapped.length; i++) {
                mask.push(TUI_DIGIT_REGEXP);
            }
        }
        var isOnlyZeroDigit = mask.length === 1 && integerCappedZerosClean === "0";
        if (isNegative) {
            if (mask.length === 0) {
                mask.push(TUI_DIGIT_REGEXP);
            }
            mask.unshift(CHAR_HYPHEN);
        }
        return preventLeadingZeroes(mask, isOnlyZeroDigit, leadingZerosAmount);
    };
}
function preventLeadingZeroes(mask, isOnlyZeroDigit, leadingZerosAmount) {
    if (isOnlyZeroDigit === void 0) { isOnlyZeroDigit = false; }
    if (leadingZerosAmount === void 0) { leadingZerosAmount = 0; }
    if (isOnlyZeroDigit || leadingZerosAmount === 0) {
        return mask;
    }
    var firstDigitIndex = mask.indexOf(TUI_DIGIT_REGEXP);
    if (firstDigitIndex === -1) {
        return mask;
    }
    var secondMaskDigit = mask[firstDigitIndex + 1];
    var isCaretTrap = secondMaskDigit === MASK_CARET_TRAP;
    if (isCaretTrap && leadingZerosAmount === 1) {
        return mask;
    }
    if (isCaretTrap) {
        mask.unshift(NON_ZERO_DIGIT);
        return mask;
    }
    mask[firstDigitIndex] = NON_ZERO_DIGIT;
    return mask;
}
function getDecimalSymbolIndex(str, decimalSymbol, autoCorrectDecimalSymbol) {
    if (!autoCorrectDecimalSymbol) {
        return str.lastIndexOf(decimalSymbol);
    }
    return Math.max(str.lastIndexOf(decimalSymbol), str.lastIndexOf(otherDecimalSymbol(decimalSymbol)));
}
function isDecimalSymbol(str, decimalSymbol, autoCorrectDecimalSymbol) {
    if (autoCorrectDecimalSymbol) {
        return /^[,.]$/.test(str);
    }
    return str === decimalSymbol;
}
function convertToMask(strNumber) {
    return strNumber
        .split("")
        .map(function (char) { return (TUI_DIGIT_REGEXP.test(char) ? TUI_DIGIT_REGEXP : char); });
}
function addThousandsSeparator(strNumber, thousandSymbol) {
    return strNumber.length > 3
        ? // TODO: investigate to disallow potentially catastrophic exponential-time regular expressions.
            // eslint-disable-next-line unicorn/no-unsafe-regex
            strNumber.replace(/\B(?=(\d{3})+(?!\d))/g, thousandSymbol)
        : strNumber;
}
//# sourceMappingURL=data:application/json;base64,