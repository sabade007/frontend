import { __read, __spread } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk';
import { MASK_CARET_TRAP } from '@taiga-ui/core/constants';
var ASSERTION = "Correction function must return single char or null";
export function tuiCreateCorrectionMask(allowed, correctionHandler) {
    return function (rawValue) {
        var mask = rawValue.split("").reduce(function (result, char, index) {
            var corrected = correctionHandler(char, index);
            tuiAssert.assert(corrected === null || corrected.length === 1, ASSERTION);
            if (!allowed.test(char) && !corrected) {
                return result;
            }
            if (allowed.test(char)) {
                return __spread(result, [allowed]);
            }
            if (corrected) {
                return __spread(result, [corrected, MASK_CARET_TRAP]);
            }
            return result;
        }, []);
        var lastIndex = mask.lastIndexOf(MASK_CARET_TRAP);
        var filtered = mask.filter(function (item, index) { return item !== MASK_CARET_TRAP || index === lastIndex; });
        return filtered.some(function (item) { return item !== allowed; })
            ? __spread(filtered, [allowed]) : filtered;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNvcnJlY3Rpb24tbWFzay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL21hc2svIiwic291cmNlcyI6WyJjcmVhdGUtY29ycmVjdGlvbi1tYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQU96RCxJQUFNLFNBQVMsR0FBRyxxREFBcUQsQ0FBQztBQUV4RSxNQUFNLFVBQVUsdUJBQXVCLENBQ25DLE9BQWUsRUFDZixpQkFBK0M7SUFFL0MsT0FBTyxVQUFBLFFBQVE7UUFDWCxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBa0IsVUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUs7WUFDeEUsSUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRWpELFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLElBQUksSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUUxRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkMsT0FBTyxNQUFNLENBQUM7YUFDakI7WUFFRCxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLGdCQUFXLE1BQU0sR0FBRSxPQUFPLEdBQUU7YUFDL0I7WUFFRCxJQUFJLFNBQVMsRUFBRTtnQkFDWCxnQkFBVyxNQUFNLEdBQUUsU0FBUyxFQUFFLGVBQWUsR0FBRTthQUNsRDtZQUVELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNQLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDcEQsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDeEIsVUFBQyxJQUFJLEVBQUUsS0FBSyxJQUFLLE9BQUEsSUFBSSxLQUFLLGVBQWUsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUEvQyxDQUErQyxDQUNuRSxDQUFDO1FBRUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxLQUFLLE9BQU8sRUFBaEIsQ0FBZ0IsQ0FBQztZQUMxQyxDQUFDLFVBQUssUUFBUSxHQUFFLE9BQU8sR0FDdkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNuQixDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtNQVNLX0NBUkVUX1RSQVB9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICAgIFR1aVRleHRNYXNrQ29ycmVjdGlvbkhhbmRsZXIsXG4gICAgVHVpVGV4dE1hc2tMaXN0LFxuICAgIFR1aVRleHRNYXNrTGlzdEhhbmRsZXIsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL21hc2snO1xuXG5jb25zdCBBU1NFUlRJT04gPSBgQ29ycmVjdGlvbiBmdW5jdGlvbiBtdXN0IHJldHVybiBzaW5nbGUgY2hhciBvciBudWxsYDtcblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZUNvcnJlY3Rpb25NYXNrKFxuICAgIGFsbG93ZWQ6IFJlZ0V4cCxcbiAgICBjb3JyZWN0aW9uSGFuZGxlcjogVHVpVGV4dE1hc2tDb3JyZWN0aW9uSGFuZGxlcixcbik6IFR1aVRleHRNYXNrTGlzdEhhbmRsZXIge1xuICAgIHJldHVybiByYXdWYWx1ZSA9PiB7XG4gICAgICAgIGNvbnN0IG1hc2sgPSByYXdWYWx1ZS5zcGxpdChgYCkucmVkdWNlPFR1aVRleHRNYXNrTGlzdD4oKHJlc3VsdCwgY2hhciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvcnJlY3RlZCA9IGNvcnJlY3Rpb25IYW5kbGVyKGNoYXIsIGluZGV4KTtcblxuICAgICAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChjb3JyZWN0ZWQgPT09IG51bGwgfHwgY29ycmVjdGVkLmxlbmd0aCA9PT0gMSwgQVNTRVJUSU9OKTtcblxuICAgICAgICAgICAgaWYgKCFhbGxvd2VkLnRlc3QoY2hhcikgJiYgIWNvcnJlY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd2VkLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLnJlc3VsdCwgYWxsb3dlZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb3JyZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLnJlc3VsdCwgY29ycmVjdGVkLCBNQVNLX0NBUkVUX1RSQVBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IG1hc2subGFzdEluZGV4T2YoTUFTS19DQVJFVF9UUkFQKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBtYXNrLmZpbHRlcihcbiAgICAgICAgICAgIChpdGVtLCBpbmRleCkgPT4gaXRlbSAhPT0gTUFTS19DQVJFVF9UUkFQIHx8IGluZGV4ID09PSBsYXN0SW5kZXgsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkLnNvbWUoaXRlbSA9PiBpdGVtICE9PSBhbGxvd2VkKVxuICAgICAgICAgICAgPyBbLi4uZmlsdGVyZWQsIGFsbG93ZWRdXG4gICAgICAgICAgICA6IGZpbHRlcmVkO1xuICAgIH07XG59XG4iXX0=