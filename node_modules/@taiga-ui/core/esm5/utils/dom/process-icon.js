var WIDTH_SEARCH = "width=\"";
var HEIGHT_SEARCH = "height=\"";
var START = "<svg";
/**
 * @deprecated: use {@link tuiProcessIcon} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function processIcon(source, name) {
    if (source.includes("id=\"" + name + "\"")) {
        return source;
    }
    var src = source.slice(Math.max(0, source.indexOf(START)));
    var attributes = src.slice(0, Math.max(0, src.indexOf(">")));
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
        return src.replace(START, "<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg") + "</g></svg>";
    }
    var indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    var indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    var widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    var heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    var widthString = attributes.slice(widthOffset, attributes.indexOf("\"", widthOffset));
    var heightString = attributes.slice(heightOffset, attributes.indexOf("\"", heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes("%") ||
        heightString.includes("%") ||
        widthString.includes("em") ||
        heightString.includes("em")) {
        return src.replace(START, "<svg id=\"" + name + "\"");
    }
    var width = parseInt(widthString, 10);
    var height = parseInt(heightString, 10);
    return "<g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg  x=\"50%\" y=\"50%\" width=\"" + width / 16 + "em\" height=\"" + height / 16 + "em\" overflow=\"visible\" viewBox=\"0 0 " + width + " " + height + "\"><svg x=\"" + -width / 2 + "\" y=\"" + -height / 2 + "\">" + src + "</svg></svg></g>";
}
export var tuiProcessIcon = processIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pY29uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvdXRpbHMvZG9tLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1pY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU0sWUFBWSxHQUFHLFVBQVMsQ0FBQztBQUMvQixJQUFNLGFBQWEsR0FBRyxXQUFVLENBQUM7QUFDakMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBRXJCOztHQUVHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBYyxFQUFFLElBQVk7SUFDcEQsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQU8sSUFBSSxPQUFHLENBQUMsRUFBRTtRQUNqQyxPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVELElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsSUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0QsSUFBSSxFQUFDLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxRQUFRLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVFLE9BQVUsR0FBRyxDQUFDLE9BQU8sQ0FDakIsS0FBSyxFQUNMLHVEQUFrRCxJQUFJLGlEQUEyQyxDQUNwRyxlQUFZLENBQUM7S0FDakI7SUFFRCxJQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RELElBQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEQsSUFBTSxXQUFXLEdBQUcsWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDdkQsSUFBTSxZQUFZLEdBQUcsYUFBYSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDMUQsSUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FDaEMsV0FBVyxFQUNYLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBRyxFQUFFLFdBQVcsQ0FBQyxDQUN2QyxDQUFDO0lBQ0YsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FDakMsWUFBWSxFQUNaLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBRyxFQUFFLFlBQVksQ0FBQyxDQUN4QyxDQUFDO0lBRUYsSUFDSSxDQUFDLFlBQVk7UUFDYixDQUFDLFdBQVc7UUFDWixXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN6QixZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUMxQixXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMxQixZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUM3QjtRQUNFLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBWSxJQUFJLE9BQUcsQ0FBQyxDQUFDO0tBQ2xEO0lBRUQsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QyxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTFDLE9BQU8sYUFBVSxJQUFJLGtGQUNqQixLQUFLLEdBQUcsRUFBRSxzQkFFVixNQUFNLEdBQUcsRUFBRSxnREFDd0IsS0FBSyxTQUFJLE1BQU0sb0JBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxlQUN6RSxDQUFDLE1BQU0sR0FBRyxDQUFDLFdBQ1YsR0FBRyxxQkFBa0IsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFdJRFRIX1NFQVJDSCA9IGB3aWR0aD1cImA7XG5jb25zdCBIRUlHSFRfU0VBUkNIID0gYGhlaWdodD1cImA7XG5jb25zdCBTVEFSVCA9IGA8c3ZnYDtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlQcm9jZXNzSWNvbn0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ljb24oc291cmNlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHNvdXJjZS5pbmNsdWRlcyhgaWQ9XCIke25hbWV9XCJgKSkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cblxuICAgIGNvbnN0IHNyYyA9IHNvdXJjZS5zbGljZShNYXRoLm1heCgwLCBzb3VyY2UuaW5kZXhPZihTVEFSVCkpKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3JjLnNsaWNlKDAsIE1hdGgubWF4KDAsIHNyYy5pbmRleE9mKGA+YCkpKTtcblxuICAgIGlmICghYXR0cmlidXRlcz8uaW5jbHVkZXMoV0lEVEhfU0VBUkNIKSB8fCAhYXR0cmlidXRlcy5pbmNsdWRlcyhIRUlHSFRfU0VBUkNIKSkge1xuICAgICAgICByZXR1cm4gYCR7c3JjLnJlcGxhY2UoXG4gICAgICAgICAgICBTVEFSVCxcbiAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHN2Z2AsXG4gICAgICAgICl9PC9nPjwvc3ZnPmA7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXhPZldpZHRoID0gYXR0cmlidXRlcy5pbmRleE9mKFdJRFRIX1NFQVJDSCk7XG4gICAgY29uc3QgaW5kZXhPZkhlaWdodCA9IGF0dHJpYnV0ZXMuaW5kZXhPZihIRUlHSFRfU0VBUkNIKTtcbiAgICBjb25zdCB3aWR0aE9mZnNldCA9IGluZGV4T2ZXaWR0aCArIFdJRFRIX1NFQVJDSC5sZW5ndGg7XG4gICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gaW5kZXhPZkhlaWdodCArIEhFSUdIVF9TRUFSQ0gubGVuZ3RoO1xuICAgIGNvbnN0IHdpZHRoU3RyaW5nID0gYXR0cmlidXRlcy5zbGljZShcbiAgICAgICAgd2lkdGhPZmZzZXQsXG4gICAgICAgIGF0dHJpYnV0ZXMuaW5kZXhPZihgXCJgLCB3aWR0aE9mZnNldCksXG4gICAgKTtcbiAgICBjb25zdCBoZWlnaHRTdHJpbmcgPSBhdHRyaWJ1dGVzLnNsaWNlKFxuICAgICAgICBoZWlnaHRPZmZzZXQsXG4gICAgICAgIGF0dHJpYnV0ZXMuaW5kZXhPZihgXCJgLCBoZWlnaHRPZmZzZXQpLFxuICAgICk7XG5cbiAgICBpZiAoXG4gICAgICAgICFoZWlnaHRTdHJpbmcgfHxcbiAgICAgICAgIXdpZHRoU3RyaW5nIHx8XG4gICAgICAgIHdpZHRoU3RyaW5nLmluY2x1ZGVzKGAlYCkgfHxcbiAgICAgICAgaGVpZ2h0U3RyaW5nLmluY2x1ZGVzKGAlYCkgfHxcbiAgICAgICAgd2lkdGhTdHJpbmcuaW5jbHVkZXMoYGVtYCkgfHxcbiAgICAgICAgaGVpZ2h0U3RyaW5nLmluY2x1ZGVzKGBlbWApXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzcmMucmVwbGFjZShTVEFSVCwgYDxzdmcgaWQ9XCIke25hbWV9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHdpZHRoU3RyaW5nLCAxMCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0U3RyaW5nLCAxMCk7XG5cbiAgICByZXR1cm4gYDxnIGlkPVwiJHtuYW1lfVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48c3ZnICB4PVwiNTAlXCIgeT1cIjUwJVwiIHdpZHRoPVwiJHtcbiAgICAgICAgd2lkdGggLyAxNlxuICAgIH1lbVwiIGhlaWdodD1cIiR7XG4gICAgICAgIGhlaWdodCAvIDE2XG4gICAgfWVtXCIgb3ZlcmZsb3c9XCJ2aXNpYmxlXCIgdmlld0JveD1cIjAgMCAke3dpZHRofSAke2hlaWdodH1cIj48c3ZnIHg9XCIkey13aWR0aCAvIDJ9XCIgeT1cIiR7XG4gICAgICAgIC1oZWlnaHQgLyAyXG4gICAgfVwiPiR7c3JjfTwvc3ZnPjwvc3ZnPjwvZz5gO1xufVxuXG5leHBvcnQgY29uc3QgdHVpUHJvY2Vzc0ljb24gPSBwcm9jZXNzSWNvbjtcbiJdfQ==