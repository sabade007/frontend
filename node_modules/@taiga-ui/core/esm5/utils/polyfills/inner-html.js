import { TuiXmlParsingException } from '@taiga-ui/cdk';
/**
 * @deprecated
 * TODO: remove in v3.0
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function innerHTML(documentRef) {
    var svg = documentRef.createElementNS("http://www.w3.org/2000/svg", "svg");
    if (svg.innerHTML !== undefined) {
        return;
    }
    var serializer = new XMLSerializer();
    var parser = new DOMParser();
    Object.defineProperty(SVGElement.prototype, "innerHTML", {
        get: function () {
            var result = [];
            var childNode = this.firstChild;
            while (childNode) {
                result.push(serializer.serializeToString(childNode));
                childNode = childNode.nextSibling;
            }
            return result.join("");
        },
        set: function (text) {
            while (this.firstChild) {
                this.removeChild(this.firstChild);
            }
            try {
                var svgDocElement = parser.parseFromString(text, "image/svg+xml").documentElement;
                if (this.ownerDocument) {
                    this.appendChild(this.ownerDocument.importNode(svgDocElement, true));
                }
            }
            catch (e) {
                throw new TuiXmlParsingException();
            }
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5uZXItaHRtbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL3BvbHlmaWxscy8iLCJzb3VyY2VzIjpbImlubmVyLWh0bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJEOzs7R0FHRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsU0FBUyxDQUFDLFdBQXFCO0lBQzNDLElBQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFN0UsSUFBSSxHQUFHLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUM3QixPQUFPO0tBQ1Y7SUFFRCxJQUFNLFVBQVUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLElBQU0sTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFFL0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRTtRQUNyRCxHQUFHLEVBQUg7WUFDSSxJQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7WUFDNUIsSUFBSSxTQUFTLEdBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUVyQyxPQUFPLFNBQVMsRUFBRTtnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQzthQUNyQztZQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBQ0QsR0FBRyxFQUFILFVBQXNCLElBQVk7WUFDOUIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNyQztZQUVELElBQUk7Z0JBQ0EsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FDeEMsSUFBSSxFQUNKLGVBQWUsQ0FDbEIsQ0FBQyxlQUFlLENBQUM7Z0JBRWxCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtvQkFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDeEU7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLE1BQU0sSUFBSSxzQkFBc0IsRUFBRSxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQztLQUNKLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R1aVhtbFBhcnNpbmdFeGNlcHRpb259IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBUT0RPOiByZW1vdmUgaW4gdjMuMFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gaW5uZXJIVE1MKGRvY3VtZW50UmVmOiBEb2N1bWVudCk6IHZvaWQge1xuICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50UmVmLmNyZWF0ZUVsZW1lbnROUyhgaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdgLCBgc3ZnYCk7XG5cbiAgICBpZiAoc3ZnLmlubmVySFRNTCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpYWxpemVyID0gbmV3IFhNTFNlcmlhbGl6ZXIoKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHRWxlbWVudC5wcm90b3R5cGUsIGBpbm5lckhUTUxgLCB7XG4gICAgICAgIGdldCh0aGlzOiBTVkdFbGVtZW50KTogc3RyaW5nIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGxldCBjaGlsZE5vZGU6IGFueSA9IHRoaXMuZmlyc3RDaGlsZDtcblxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcoY2hpbGROb2RlKSk7XG4gICAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oYGApO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodGhpczogU1ZHRWxlbWVudCwgdGV4dDogc3RyaW5nKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN2Z0RvY0VsZW1lbnQgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICBgaW1hZ2Uvc3ZnK3htbGAsXG4gICAgICAgICAgICAgICAgKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoc3ZnRG9jRWxlbWVudCwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHVpWG1sUGFyc2luZ0V4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufVxuIl19