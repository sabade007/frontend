import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TUI_ICONS_PATH } from '@taiga-ui/core/tokens';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
var TuiFlagPipe = /** @class */ (function () {
    function TuiFlagPipe(iconsPath) {
        this.iconsPath = iconsPath;
        this.staticPath = this.iconsPath("tuiIcon").replace("tuiIcon.svg#tuiIcon", "");
    }
    TuiFlagPipe.prototype.transform = function (countryIsoCode) {
        if (!countryIsoCode) {
            return null;
        }
        switch (countryIsoCode) {
            case TuiCountryIsoCode.BL:
            case TuiCountryIsoCode.BQ:
            case TuiCountryIsoCode.CW:
            case TuiCountryIsoCode.GF:
            case TuiCountryIsoCode.GP:
            case TuiCountryIsoCode.MF:
            case TuiCountryIsoCode.MQ:
            case TuiCountryIsoCode.NC:
            case TuiCountryIsoCode.RE:
            case TuiCountryIsoCode.YT:
                return "" + this.staticPath + TuiCountryIsoCode.FR + ".png";
            case TuiCountryIsoCode.SX:
                return "" + this.staticPath + TuiCountryIsoCode.NL + ".png";
            default:
                return "" + this.staticPath + countryIsoCode + ".png";
        }
    };
    TuiFlagPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS_PATH,] }] }
    ]; };
    TuiFlagPipe = __decorate([
        Pipe({ name: "tuiFlag" }),
        __param(0, Inject(TUI_ICONS_PATH))
    ], TuiFlagPipe);
    return TuiFlagPipe;
}());
export { TuiFlagPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvcGlwZXMvZmxhZy8iLCJzb3VyY2VzIjpbImZsYWcucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBRTFELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUdqRDtJQU1JLHFCQUVxQixTQUFtQztRQUFuQyxjQUFTLEdBQVQsU0FBUyxDQUEwQjtRQVB2QyxlQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQzNELHFCQUFxQixFQUNyQixFQUFFLENBQ0wsQ0FBQztJQUtDLENBQUM7SUFJSiwrQkFBUyxHQUFULFVBQVUsY0FBa0Q7UUFDeEQsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsUUFBUSxjQUFjLEVBQUU7WUFDcEIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUNyQixPQUFPLEtBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLFNBQU0sQ0FBQztZQUMzRCxLQUFLLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ3JCLE9BQU8sS0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsU0FBTSxDQUFDO1lBQzNEO2dCQUNJLE9BQU8sS0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsU0FBTSxDQUFDO1NBQ3hEO0lBQ0wsQ0FBQzs7Z0RBNUJJLE1BQU0sU0FBQyxjQUFjOztJQVBqQixXQUFXO1FBRHZCLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQztRQVFmLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO09BUGxCLFdBQVcsQ0FvQ3ZCO0lBQUQsa0JBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQXBDWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlTdHJpbmdIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0lDT05TX1BBVEh9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aUNvdW50cnlJc29Db2RlfSBmcm9tICdAdGFpZ2EtdWkvaTE4bic7XG5cbkBQaXBlKHtuYW1lOiBgdHVpRmxhZ2B9KVxuZXhwb3J0IGNsYXNzIFR1aUZsYWdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0aWNQYXRoID0gdGhpcy5pY29uc1BhdGgoYHR1aUljb25gKS5yZXBsYWNlKFxuICAgICAgICBgdHVpSWNvbi5zdmcjdHVpSWNvbmAsXG4gICAgICAgIGBgLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfSUNPTlNfUEFUSClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpY29uc1BhdGg6IFR1aVN0cmluZ0hhbmRsZXI8c3RyaW5nPixcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm0oY291bnRyeUlzb0NvZGU6IFR1aUNvdW50cnlJc29Db2RlIHwgc3RyaW5nKTogc3RyaW5nO1xuICAgIHRyYW5zZm9ybShjb3VudHJ5SXNvQ29kZT86IFR1aUNvdW50cnlJc29Db2RlIHwgc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB8IG51bGw7XG4gICAgdHJhbnNmb3JtKGNvdW50cnlJc29Db2RlPzogVHVpQ291bnRyeUlzb0NvZGUgfCBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICghY291bnRyeUlzb0NvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChjb3VudHJ5SXNvQ29kZSkge1xuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5CTDpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuQlE6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLkNXOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5HRjpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuR1A6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLk1GOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5NUTpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuTkM6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLlJFOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5ZVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5zdGF0aWNQYXRofSR7VHVpQ291bnRyeUlzb0NvZGUuRlJ9LnBuZ2A7XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLlNYOlxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXRpY1BhdGh9JHtUdWlDb3VudHJ5SXNvQ29kZS5OTH0ucG5nYDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhdGljUGF0aH0ke2NvdW50cnlJc29Db2RlfS5wbmdgO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19