import { DAYS_IN_WEEK, inRange, tuiAssert, TuiDay, } from '@taiga-ui/cdk';
// TODO: 3.0 Remove export in ivy compilation
/**
 * Computes day of week offset of the beginning of the month
 */
export var getMonthStartDaysOffset = function (month, firstDayOfWeek) {
    var startMonthOffsetFromSunday = new Date(month.year, month.month, 1).getDay();
    return startMonthOffsetFromSunday >= firstDayOfWeek
        ? startMonthOffsetFromSunday - firstDayOfWeek
        : DAYS_IN_WEEK - (firstDayOfWeek - startMonthOffsetFromSunday);
};
/*
TODO: 3.0 delete:
 * TuiDay.getDayFromMonthRowCol
 * TuiMonth.monthStartDaysOffset
 * TuiMonth.weeksRowsCount
 * TuiYear.yearStartDaysOffset
 * TuiYear.getYearStartDaysOffset
 */
/**
 * Calculated day on a calendar grid
 * @return resulting day on these coordinates (could exceed passed month)
 */
export var getDayFromMonthRowCol = function (_a) {
    var month = _a.month, rowIndex = _a.rowIndex, colIndex = _a.colIndex, firstDayOfWeek = _a.firstDayOfWeek;
    tuiAssert.assert(Number.isInteger(rowIndex));
    tuiAssert.assert(inRange(rowIndex, 0, 6));
    tuiAssert.assert(Number.isInteger(colIndex));
    tuiAssert.assert(inRange(colIndex, 0, DAYS_IN_WEEK));
    var day = rowIndex * DAYS_IN_WEEK +
        colIndex -
        getMonthStartDaysOffset(month, firstDayOfWeek) +
        1;
    if (day > month.daysCount) {
        day -= month.daysCount;
        month = month.append({ month: 1 });
    }
    if (day <= 0) {
        month = month.append({ month: -1 });
        day = month.daysCount + day;
    }
    return new TuiDay(month.year, month.month, day);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9waXBlcy9jYWxlbmRhci1zaGVldC8iLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxZQUFZLEVBQ1osT0FBTyxFQUNQLFNBQVMsRUFDVCxNQUFNLEdBR1QsTUFBTSxlQUFlLENBQUM7QUFFdkIsNkNBQTZDO0FBQzdDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsVUFDbkMsS0FBZSxFQUNmLGNBQTRCO0lBRTVCLElBQU0sMEJBQTBCLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRWpGLE9BQU8sMEJBQTBCLElBQUksY0FBYztRQUMvQyxDQUFDLENBQUMsMEJBQTBCLEdBQUcsY0FBYztRQUM3QyxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsY0FBYyxHQUFHLDBCQUEwQixDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7R0FPRztBQUNIOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLFVBQUMsRUFtQnJDO1FBbEJHLGdCQUFLLEVBQ0wsc0JBQVEsRUFDUixzQkFBUSxFQUNSLGtDQUFjO0lBZ0JkLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM3QyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFFckQsSUFBSSxHQUFHLEdBQ0gsUUFBUSxHQUFHLFlBQVk7UUFDdkIsUUFBUTtRQUNSLHVCQUF1QixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7UUFDOUMsQ0FBQyxDQUFDO0lBRU4sSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRTtRQUN2QixHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ1YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztLQUMvQjtJQUVELE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgREFZU19JTl9XRUVLLFxuICAgIGluUmFuZ2UsXG4gICAgdHVpQXNzZXJ0LFxuICAgIFR1aURheSxcbiAgICBUdWlEYXlPZldlZWssXG4gICAgVHVpTW9udGgsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vLyBUT0RPOiAzLjAgUmVtb3ZlIGV4cG9ydCBpbiBpdnkgY29tcGlsYXRpb25cbi8qKlxuICogQ29tcHV0ZXMgZGF5IG9mIHdlZWsgb2Zmc2V0IG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRNb250aFN0YXJ0RGF5c09mZnNldCA9IChcbiAgICBtb250aDogVHVpTW9udGgsXG4gICAgZmlyc3REYXlPZldlZWs6IFR1aURheU9mV2Vlayxcbik6IG51bWJlciA9PiB7XG4gICAgY29uc3Qgc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkgPSBuZXcgRGF0ZShtb250aC55ZWFyLCBtb250aC5tb250aCwgMSkuZ2V0RGF5KCk7XG5cbiAgICByZXR1cm4gc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkgPj0gZmlyc3REYXlPZldlZWtcbiAgICAgICAgPyBzdGFydE1vbnRoT2Zmc2V0RnJvbVN1bmRheSAtIGZpcnN0RGF5T2ZXZWVrXG4gICAgICAgIDogREFZU19JTl9XRUVLIC0gKGZpcnN0RGF5T2ZXZWVrIC0gc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkpO1xufTtcblxuLypcblRPRE86IDMuMCBkZWxldGU6XG4gKiBUdWlEYXkuZ2V0RGF5RnJvbU1vbnRoUm93Q29sXG4gKiBUdWlNb250aC5tb250aFN0YXJ0RGF5c09mZnNldFxuICogVHVpTW9udGgud2Vla3NSb3dzQ291bnRcbiAqIFR1aVllYXIueWVhclN0YXJ0RGF5c09mZnNldFxuICogVHVpWWVhci5nZXRZZWFyU3RhcnREYXlzT2Zmc2V0XG4gKi9cbi8qKlxuICogQ2FsY3VsYXRlZCBkYXkgb24gYSBjYWxlbmRhciBncmlkXG4gKiBAcmV0dXJuIHJlc3VsdGluZyBkYXkgb24gdGhlc2UgY29vcmRpbmF0ZXMgKGNvdWxkIGV4Y2VlZCBwYXNzZWQgbW9udGgpXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREYXlGcm9tTW9udGhSb3dDb2wgPSAoe1xuICAgIG1vbnRoLFxuICAgIHJvd0luZGV4LFxuICAgIGNvbEluZGV4LFxuICAgIGZpcnN0RGF5T2ZXZWVrLFxufToge1xuICAgIG1vbnRoOiBUdWlNb250aDtcbiAgICAvKipcbiAgICAgKiByb3cgaW4gYSBjYWxlbmRhclxuICAgICAqL1xuICAgIHJvd0luZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogY29sdW1uIGluIGEgY2FsZW5kYXJcbiAgICAgKi9cbiAgICBjb2xJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIGZpcnN0IGRheSBvZiB0aGUgd2VlayBpbmRleCAoU3VuZGF5IC0gMCwgU2F0dXJkYXkgLSA2KVxuICAgICAqL1xuICAgIGZpcnN0RGF5T2ZXZWVrOiBUdWlEYXlPZldlZWs7XG59KTogVHVpRGF5ID0+IHtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KE51bWJlci5pc0ludGVnZXIocm93SW5kZXgpKTtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KGluUmFuZ2Uocm93SW5kZXgsIDAsIDYpKTtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KE51bWJlci5pc0ludGVnZXIoY29sSW5kZXgpKTtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KGluUmFuZ2UoY29sSW5kZXgsIDAsIERBWVNfSU5fV0VFSykpO1xuXG4gICAgbGV0IGRheSA9XG4gICAgICAgIHJvd0luZGV4ICogREFZU19JTl9XRUVLICtcbiAgICAgICAgY29sSW5kZXggLVxuICAgICAgICBnZXRNb250aFN0YXJ0RGF5c09mZnNldChtb250aCwgZmlyc3REYXlPZldlZWspICtcbiAgICAgICAgMTtcblxuICAgIGlmIChkYXkgPiBtb250aC5kYXlzQ291bnQpIHtcbiAgICAgICAgZGF5IC09IG1vbnRoLmRheXNDb3VudDtcbiAgICAgICAgbW9udGggPSBtb250aC5hcHBlbmQoe21vbnRoOiAxfSk7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8PSAwKSB7XG4gICAgICAgIG1vbnRoID0gbW9udGguYXBwZW5kKHttb250aDogLTF9KTtcbiAgICAgICAgZGF5ID0gbW9udGguZGF5c0NvdW50ICsgZGF5O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHVpRGF5KG1vbnRoLnllYXIsIG1vbnRoLm1vbnRoLCBkYXkpO1xufTtcbiJdfQ==