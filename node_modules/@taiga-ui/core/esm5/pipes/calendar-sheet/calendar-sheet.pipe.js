import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { DAYS_IN_WEEK } from '@taiga-ui/cdk';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';
import { getDayFromMonthRowCol } from './utils';
var CALENDAR_ROWS_COUNT = 6;
var TuiCalendarSheetPipe = /** @class */ (function () {
    function TuiCalendarSheetPipe(firstDayOfWeek) {
        this.firstDayOfWeek = firstDayOfWeek;
        this.currentMonth = null;
        this.currentSheet = [];
    }
    TuiCalendarSheetPipe.prototype.transform = function (month, showAdjacentDays) {
        if (showAdjacentDays === void 0) { showAdjacentDays = false; }
        var _a;
        if ((_a = this.currentMonth) === null || _a === void 0 ? void 0 : _a.monthSame(month)) {
            return this.currentSheet;
        }
        var sheet = [];
        for (var rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
            var row = [];
            for (var colIndex = 0; colIndex < DAYS_IN_WEEK; colIndex++) {
                var day = getDayFromMonthRowCol({
                    month: month,
                    rowIndex: rowIndex,
                    colIndex: colIndex,
                    firstDayOfWeek: this.firstDayOfWeek,
                });
                var isPrevMonthDay = function (day, relativeToMonth) {
                    if (relativeToMonth === void 0) { relativeToMonth = month; }
                    return day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                };
                var isNextMonthDay = function (day, relativeToMonth) {
                    if (relativeToMonth === void 0) { relativeToMonth = month; }
                    return day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                };
                if (isPrevMonthDay(day) && !showAdjacentDays) {
                    continue;
                }
                if (isNextMonthDay(day) && !showAdjacentDays) {
                    break;
                }
                row.push(day);
            }
            sheet.push(row);
        }
        this.currentSheet = sheet.filter(function (row) { return row.length; });
        this.currentMonth = month;
        return this.currentSheet;
    };
    TuiCalendarSheetPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_FIRST_DAY_OF_WEEK,] }] }
    ]; };
    TuiCalendarSheetPipe = __decorate([
        Pipe({
            name: "tuiCalendarSheet",
        }),
        __param(0, Inject(TUI_FIRST_DAY_OF_WEEK))
    ], TuiCalendarSheetPipe);
    return TuiCalendarSheetPipe;
}());
export { TuiCalendarSheetPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2hlZXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3BpcGVzL2NhbGVuZGFyLXNoZWV0LyIsInNvdXJjZXMiOlsiY2FsZW5kYXItc2hlZXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQWlDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUU5QyxJQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUs5QjtJQUlJLDhCQUVxQixjQUE0QjtRQUE1QixtQkFBYyxHQUFkLGNBQWMsQ0FBYztRQUx6QyxpQkFBWSxHQUFvQixJQUFJLENBQUM7UUFDckMsaUJBQVksR0FBcUMsRUFBRSxDQUFDO0lBS3pELENBQUM7SUFFSix3Q0FBUyxHQUFULFVBQ0ksS0FBZSxFQUNmLGdCQUFpQztRQUFqQyxpQ0FBQSxFQUFBLHdCQUFpQzs7UUFFakMsVUFBSSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxTQUFTLENBQUMsS0FBSyxHQUFHO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUM1QjtRQUVELElBQU0sS0FBSyxHQUE2QixFQUFFLENBQUM7UUFFM0MsS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUSxHQUFHLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQy9ELElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztZQUV6QixLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFO2dCQUN4RCxJQUFNLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQztvQkFDOUIsS0FBSyxPQUFBO29CQUNMLFFBQVEsVUFBQTtvQkFDUixRQUFRLFVBQUE7b0JBQ1IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO2lCQUN0QyxDQUFDLENBQUM7Z0JBRUgsSUFBTSxjQUFjLEdBQUcsVUFBQyxHQUFXLEVBQUUsZUFBdUI7b0JBQXZCLGdDQUFBLEVBQUEsdUJBQXVCO29CQUN4RCxPQUFBLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLO2dCQUFwRSxDQUFvRSxDQUFDO2dCQUV6RSxJQUFNLGNBQWMsR0FBRyxVQUFDLEdBQVcsRUFBRSxlQUF1QjtvQkFBdkIsZ0NBQUEsRUFBQSx1QkFBdUI7b0JBQ3hELE9BQUEsR0FBRyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUs7Z0JBQXBFLENBQW9FLENBQUM7Z0JBRXpFLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFDLFNBQVM7aUJBQ1o7Z0JBRUQsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDMUMsTUFBTTtpQkFDVDtnQkFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxNQUFNLEVBQVYsQ0FBVSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFFMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7O2dEQWpESSxNQUFNLFNBQUMscUJBQXFCOztJQUx4QixvQkFBb0I7UUFIaEMsSUFBSSxDQUFDO1lBQ0YsSUFBSSxFQUFFLGtCQUFrQjtTQUMzQixDQUFDO1FBTU8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtPQUx6QixvQkFBb0IsQ0F1RGhDO0lBQUQsMkJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXZEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RBWVNfSU5fV0VFSywgVHVpRGF5LCBUdWlEYXlPZldlZWssIFR1aU1vbnRofSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0ZJUlNUX0RBWV9PRl9XRUVLfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuXG5pbXBvcnQge2dldERheUZyb21Nb250aFJvd0NvbH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IENBTEVOREFSX1JPV1NfQ09VTlQgPSA2O1xuXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUNhbGVuZGFyU2hlZXRgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDYWxlbmRhclNoZWV0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgY3VycmVudE1vbnRoOiBUdWlNb250aCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgY3VycmVudFNoZWV0OiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFR1aURheVtdPiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0ZJUlNUX0RBWV9PRl9XRUVLKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGZpcnN0RGF5T2ZXZWVrOiBUdWlEYXlPZldlZWssXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtKFxuICAgICAgICBtb250aDogVHVpTW9udGgsXG4gICAgICAgIHNob3dBZGphY2VudERheXM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFR1aURheVtdPiB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb250aD8ubW9udGhTYW1lKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNoZWV0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hlZXQ6IEFycmF5PHJlYWRvbmx5IFR1aURheVtdPiA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCBDQUxFTkRBUl9ST1dTX0NPVU5UOyByb3dJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3c6IFR1aURheVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBEQVlTX0lOX1dFRUs7IGNvbEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBnZXREYXlGcm9tTW9udGhSb3dDb2woe1xuICAgICAgICAgICAgICAgICAgICBtb250aCxcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGNvbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmaXJzdERheU9mV2VlazogdGhpcy5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJldk1vbnRoRGF5ID0gKGRheTogVHVpRGF5LCByZWxhdGl2ZVRvTW9udGggPSBtb250aCk6IGJvb2xlYW4gPT5cbiAgICAgICAgICAgICAgICAgICAgZGF5LnllYXIgPCByZWxhdGl2ZVRvTW9udGgueWVhciB8fCBkYXkubW9udGggPCByZWxhdGl2ZVRvTW9udGgubW9udGg7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc05leHRNb250aERheSA9IChkYXk6IFR1aURheSwgcmVsYXRpdmVUb01vbnRoID0gbW9udGgpOiBib29sZWFuID0+XG4gICAgICAgICAgICAgICAgICAgIGRheS55ZWFyID4gcmVsYXRpdmVUb01vbnRoLnllYXIgfHwgZGF5Lm1vbnRoID4gcmVsYXRpdmVUb01vbnRoLm1vbnRoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzUHJldk1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV4dE1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcm93LnB1c2goZGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hlZXQucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50U2hlZXQgPSBzaGVldC5maWx0ZXIocm93ID0+IHJvdy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRNb250aCA9IG1vbnRoO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRTaGVldDtcbiAgICB9XG59XG4iXX0=