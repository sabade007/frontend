import { __decorate, __param } from "tslib";
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
// TODO: 3.0 remove `tui-wrapper` mode
var TuiWrapperDirective = /** @class */ (function () {
    function TuiWrapperDirective(mode$) {
        this.mode$ = mode$;
        this.disabled = false;
        this.readOnly = false;
        // TODO: 3.0 Rename to `hover`
        this.hovered = null;
        // TODO: 3.0 Rename to `active`
        this.pressed = null;
        this.focused = false;
        this.invalid = false;
        this.appearance = '';
    }
    Object.defineProperty(TuiWrapperDirective.prototype, "computedInvalid", {
        get: function () {
            return !this.disabled && !this.readOnly && this.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "computedFocused", {
        get: function () {
            return this.focused && !this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "interactiveState", {
        get: function () {
            if (this.disabled) {
                return "disabled" /* Disabled */;
            }
            if (this.readOnly) {
                return "readonly" /* Readonly */;
            }
            if (this.pressed) {
                return "pressed" /* Pressed */;
            }
            if (this.hovered) {
                return "hovered" /* Hovered */;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "noHover", {
        get: function () {
            return this.readOnly || this.hovered === false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiWrapperDirective.prototype, "noActive", {
        get: function () {
            return this.readOnly || this.pressed === false;
        },
        enumerable: true,
        configurable: true
    });
    TuiWrapperDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "readOnly", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "hovered", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "pressed", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "focused", void 0);
    __decorate([
        Input()
    ], TuiWrapperDirective.prototype, "invalid", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-appearance')
    ], TuiWrapperDirective.prototype, "appearance", void 0);
    __decorate([
        HostBinding('class._invalid')
    ], TuiWrapperDirective.prototype, "computedInvalid", null);
    __decorate([
        HostBinding('class._focused')
    ], TuiWrapperDirective.prototype, "computedFocused", null);
    __decorate([
        HostBinding('attr.data-state')
    ], TuiWrapperDirective.prototype, "interactiveState", null);
    __decorate([
        HostBinding('class._no-hover')
    ], TuiWrapperDirective.prototype, "noHover", null);
    __decorate([
        HostBinding('class._no-active')
    ], TuiWrapperDirective.prototype, "noActive", null);
    TuiWrapperDirective = __decorate([
        Directive({
            selector: 'tui-wrapper, [tuiWrapper]',
            providers: [MODE_PROVIDER],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
        }),
        __param(0, Inject(TUI_MODE))
    ], TuiWrapperDirective);
    return TuiWrapperDirective;
}());
export { TuiWrapperDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3dyYXBwZXIvIiwic291cmNlcyI6WyJ3cmFwcGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRS9DLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFaEMsc0NBQXNDO0FBUXRDO0lBeUJJLDZCQUF1QyxLQUF1QztRQUF2QyxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQXZCOUUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUdqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLDhCQUE4QjtRQUU5QixZQUFPLEdBQW1CLElBQUksQ0FBQztRQUUvQiwrQkFBK0I7UUFFL0IsWUFBTyxHQUFtQixJQUFJLENBQUM7UUFHL0IsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdoQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLGVBQVUsR0FBRyxFQUFFLENBQUM7SUFFaUUsQ0FBQztJQUdsRixzQkFBSSxnREFBZTthQUFuQjtZQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVELENBQUM7OztPQUFBO0lBR0Qsc0JBQUksZ0RBQWU7YUFBbkI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksaURBQWdCO2FBQXBCO1lBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLGlDQUFvQzthQUN2QztZQUVELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixpQ0FBb0M7YUFDdkM7WUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2QsK0JBQW1DO2FBQ3RDO1lBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNkLCtCQUFtQzthQUN0QztZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksd0NBQU87YUFBWDtZQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLHlDQUFRO2FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUM7UUFDbkQsQ0FBQzs7O09BQUE7O2dCQXpDNkMsVUFBVSx1QkFBM0MsTUFBTSxTQUFDLFFBQVE7O0lBdkI1QjtRQURDLEtBQUssRUFBRTt5REFDUztJQUdqQjtRQURDLEtBQUssRUFBRTt5REFDUztJQUlqQjtRQURDLEtBQUssRUFBRTt3REFDdUI7SUFJL0I7UUFEQyxLQUFLLEVBQUU7d0RBQ3VCO0lBRy9CO1FBREMsS0FBSyxFQUFFO3dEQUNRO0lBR2hCO1FBREMsS0FBSyxFQUFFO3dEQUNRO0lBSWhCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLHNCQUFzQixDQUFDOzJEQUNwQjtJQUtoQjtRQURDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQzs4REFHN0I7SUFHRDtRQURDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQzs4REFHN0I7SUFHRDtRQURDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQzsrREFtQjlCO0lBR0Q7UUFEQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7c0RBRzlCO0lBR0Q7UUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7dURBRy9CO0lBbEVRLG1CQUFtQjtRQVAvQixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUMxQixJQUFJLEVBQUU7Z0JBQ0Ysb0JBQW9CLEVBQUUsT0FBTzthQUNoQztTQUNKLENBQUM7UUEwQmUsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7T0F6QnBCLG1CQUFtQixDQW1FL0I7SUFBRCwwQkFBQztDQUFBLEFBbkVELElBbUVDO1NBbkVZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUludGVyYWN0aXZlU3RhdGV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2VudW1zJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvcHJvdmlkZXJzJztcbmltcG9ydCB7VFVJX01PREV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aUJyaWdodG5lc3N9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbi8vIFRPRE86IDMuMCByZW1vdmUgYHR1aS13cmFwcGVyYCBtb2RlXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS13cmFwcGVyLCBbdHVpV3JhcHBlcl0nLFxuICAgIHByb3ZpZGVyczogW01PREVfUFJPVklERVJdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJygkLmRhdGEtbW9kZS5hdHRyKSc6ICdtb2RlJCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpV3JhcHBlckRpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICByZWFkT25seSA9IGZhbHNlO1xuXG4gICAgLy8gVE9ETzogMy4wIFJlbmFtZSB0byBgaG92ZXJgXG4gICAgQElucHV0KClcbiAgICBob3ZlcmVkOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvLyBUT0RPOiAzLjAgUmVuYW1lIHRvIGBhY3RpdmVgXG4gICAgQElucHV0KClcbiAgICBwcmVzc2VkOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIGZvY3VzZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1hcHBlYXJhbmNlJylcbiAgICBhcHBlYXJhbmNlID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFRVSV9NT0RFKSByZWFkb25seSBtb2RlJDogT2JzZXJ2YWJsZTxUdWlCcmlnaHRuZXNzIHwgbnVsbD4pIHt9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9pbnZhbGlkJylcbiAgICBnZXQgY29tcHV0ZWRJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMucmVhZE9ubHkgJiYgdGhpcy5pbnZhbGlkO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2ZvY3VzZWQnKVxuICAgIGdldCBjb21wdXRlZEZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvY3VzZWQgJiYgIXRoaXMuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc3RhdGUnKVxuICAgIGdldCBpbnRlcmFjdGl2ZVN0YXRlKCk6IFR1aUludGVyYWN0aXZlU3RhdGUgfCBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLkRpc2FibGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLlJlYWRvbmx5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIFR1aUludGVyYWN0aXZlU3RhdGUuUHJlc3NlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhvdmVyZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLkhvdmVyZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9uby1ob3ZlcicpXG4gICAgZ2V0IG5vSG92ZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5IHx8IHRoaXMuaG92ZXJlZCA9PT0gZmFsc2U7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fbm8tYWN0aXZlJylcbiAgICBnZXQgbm9BY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5IHx8IHRoaXMucHJlc3NlZCA9PT0gZmFsc2U7XG4gICAgfVxufVxuIl19