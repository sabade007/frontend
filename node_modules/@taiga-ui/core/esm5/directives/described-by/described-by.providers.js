import { ElementRef, InjectionToken } from '@angular/core';
import { stopPropagation, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, } from '@taiga-ui/cdk';
import { merge, timer } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMapTo, take, takeUntil, } from 'rxjs/operators';
var DELAY = 1000;
export var TUI_DESCRIBED_BY_SHOW = new InjectionToken("Accessible tooltip visibility stream");
export var TUI_DESCRIBED_BY_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    {
        provide: TUI_DESCRIBED_BY_SHOW,
        deps: [TuiFocusVisibleService, ElementRef],
        useFactory: describedByFactory,
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function describedByFactory(focusVisible$, _a) {
    var nativeElement = _a.nativeElement;
    return focusVisible$
        .pipe(filter(Boolean), switchMapTo(timer(DELAY).pipe(mapTo(true), takeUntil(merge(typedFromEvent(nativeElement, "keydown"), typedFromEvent(nativeElement, "blur"))))), switchMapTo(merge(typedFromEvent(nativeElement, "keydown").pipe(filter(function (_a) {
        var key = _a.key;
        return key === "Escape";
    }), take(1), stopPropagation(), mapTo(false), startWith(true)), typedFromEvent(nativeElement, "blur").pipe(mapTo(false)))))
        .pipe(distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQ0gsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsS0FBSyxFQUFjLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxJQUFJLEVBQ0osU0FBUyxHQUNaLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRW5CLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNuRCxzQ0FBc0MsQ0FDekMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFlO0lBQ2xELGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEI7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxDQUFDLHNCQUFzQixFQUFFLFVBQVUsQ0FBQztRQUMxQyxVQUFVLEVBQUUsa0JBQWtCO0tBQ2pDO0NBQ0osQ0FBQztBQUVGLGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsa0JBQWtCLENBQzlCLGFBQWtDLEVBQ2xDLEVBQXdDO1FBQXZDLGdDQUFhO0lBRWQsT0FBTyxhQUFhO1NBQ2YsSUFBSSxDQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixXQUFXLENBQ1AsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDYixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ1gsU0FBUyxDQUNMLEtBQUssQ0FDRCxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxFQUN4QyxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUN4QyxDQUNKLENBQ0osQ0FDSixFQUNELFdBQVcsQ0FDUCxLQUFLLENBQ0QsY0FBYyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3pDLE1BQU0sQ0FBQyxVQUFDLEVBQUs7WUFBSixZQUFHO1FBQU0sT0FBQSxHQUFHLEtBQUssUUFBUTtJQUFoQixDQUFnQixDQUFDLEVBQ25DLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxlQUFlLEVBQUUsRUFDakIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDbEIsRUFDRCxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDM0QsQ0FDSixDQUNKO1NBQ0EsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBzdG9wUHJvcGFnYXRpb24sXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICB0eXBlZEZyb21FdmVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBtYXBUbyxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwVG8sXG4gICAgdGFrZSxcbiAgICB0YWtlVW50aWwsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgREVMQVkgPSAxMDAwO1xuXG5leHBvcnQgY29uc3QgVFVJX0RFU0NSSUJFRF9CWV9TSE9XID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8Ym9vbGVhbj4+KFxuICAgIGBBY2Nlc3NpYmxlIHRvb2x0aXAgdmlzaWJpbGl0eSBzdHJlYW1gLFxuKTtcbmV4cG9ydCBjb25zdCBUVUlfREVTQ1JJQkVEX0JZX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0RFU0NSSUJFRF9CWV9TSE9XLFxuICAgICAgICBkZXBzOiBbVHVpRm9jdXNWaXNpYmxlU2VydmljZSwgRWxlbWVudFJlZl0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IGRlc2NyaWJlZEJ5RmFjdG9yeSxcbiAgICB9LFxuXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2NyaWJlZEJ5RmFjdG9yeShcbiAgICBmb2N1c1Zpc2libGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gZm9jdXNWaXNpYmxlJFxuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIGZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgICAgIHRpbWVyKERFTEFZKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtYXBUbyh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYGtleWRvd25gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCBgYmx1cmApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCBga2V5ZG93bmApLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoKHtrZXl9KSA9PiBrZXkgPT09IGBFc2NhcGVgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFRvKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYGJsdXJgKS5waXBlKG1hcFRvKGZhbHNlKSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG59XG4iXX0=