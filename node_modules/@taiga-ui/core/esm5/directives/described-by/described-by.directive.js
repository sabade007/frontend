import { __decorate, __param } from "tslib";
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiHintService } from '@taiga-ui/core/services';
import { Observable } from 'rxjs';
import { TUI_DESCRIBED_BY_PROVIDERS, TUI_DESCRIBED_BY_SHOW, } from './described-by.providers';
export var DESCRIBED_BY = '_described-by';
/**
 * A directive linking focusable elements and hints for accessibility
 */
var TuiDescribedByDirective = /** @class */ (function () {
    function TuiDescribedByDirective(hintService, visibility$) {
        var _this = this;
        this.tuiDescribedBy = '';
        visibility$.subscribe(function (visible) {
            if (!_this.tuiDescribedBy) {
                return;
            }
            if (visible) {
                hintService.showHintForId(_this.tuiDescribedBy);
            }
            else {
                hintService.hideHintForId(_this.tuiDescribedBy);
            }
        });
    }
    Object.defineProperty(TuiDescribedByDirective.prototype, "computedDescribedBy", {
        get: function () {
            return this.tuiDescribedBy ? this.tuiDescribedBy + DESCRIBED_BY : null;
        },
        enumerable: true,
        configurable: true
    });
    TuiDescribedByDirective.ctorParameters = function () { return [
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DESCRIBED_BY_SHOW,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiDescribedByDirective.prototype, "tuiDescribedBy", void 0);
    __decorate([
        HostBinding('attr.aria-describedby')
    ], TuiDescribedByDirective.prototype, "computedDescribedBy", null);
    TuiDescribedByDirective = __decorate([
        Directive({
            selector: '[tuiDescribedBy]:not(ng-container)',
            providers: TUI_DESCRIBED_BY_PROVIDERS,
        }),
        __param(0, Inject(TuiHintService)),
        __param(1, Inject(TUI_DESCRIBED_BY_SHOW))
    ], TuiDescribedByDirective);
    return TuiDescribedByDirective;
}());
export { TuiDescribedByDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRWhDLE9BQU8sRUFDSCwwQkFBMEIsRUFDMUIscUJBQXFCLEdBQ3hCLE1BQU0sMEJBQTBCLENBQUM7QUFFbEMsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQztBQUU1Qzs7R0FFRztBQUtIO0lBS0ksaUNBQzRCLFdBQTJCLEVBQ3BCLFdBQWdDO1FBRm5FLGlCQWVDO1FBakJELG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBTWhCLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBQSxPQUFPO1lBQ3pCLElBQUksQ0FBQyxLQUFJLENBQUMsY0FBYyxFQUFFO2dCQUN0QixPQUFPO2FBQ1Y7WUFFRCxJQUFJLE9BQU8sRUFBRTtnQkFDVCxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNsRDtpQkFBTTtnQkFDSCxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNsRDtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdELHNCQUFJLHdEQUFtQjthQUF2QjtZQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMzRSxDQUFDOzs7T0FBQTs7Z0JBbkJ3QyxjQUFjLHVCQUFsRCxNQUFNLFNBQUMsY0FBYztnQkFDc0IsVUFBVSx1QkFBckQsTUFBTSxTQUFDLHFCQUFxQjs7SUFKakM7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7bUVBQ0c7SUFvQnBCO1FBREMsV0FBVyxDQUFDLHVCQUF1QixDQUFDO3NFQUdwQztJQXpCUSx1QkFBdUI7UUFKbkMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9DQUFvQztZQUM5QyxTQUFTLEVBQUUsMEJBQTBCO1NBQ3hDLENBQUM7UUFPTyxXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUN0QixXQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO09BUHpCLHVCQUF1QixDQTBCbkM7SUFBRCw4QkFBQztDQUFBLEFBMUJELElBMEJDO1NBMUJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpSGludFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3NlcnZpY2VzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gICAgVFVJX0RFU0NSSUJFRF9CWV9QUk9WSURFUlMsXG4gICAgVFVJX0RFU0NSSUJFRF9CWV9TSE9XLFxufSBmcm9tICcuL2Rlc2NyaWJlZC1ieS5wcm92aWRlcnMnO1xuXG5leHBvcnQgY29uc3QgREVTQ1JJQkVEX0JZID0gJ19kZXNjcmliZWQtYnknO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIGxpbmtpbmcgZm9jdXNhYmxlIGVsZW1lbnRzIGFuZCBoaW50cyBmb3IgYWNjZXNzaWJpbGl0eVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEZXNjcmliZWRCeV06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIHByb3ZpZGVyczogVFVJX0RFU0NSSUJFRF9CWV9QUk9WSURFUlMsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURlc2NyaWJlZEJ5RGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgdHVpRGVzY3JpYmVkQnkgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aUhpbnRTZXJ2aWNlKSBoaW50U2VydmljZTogVHVpSGludFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoVFVJX0RFU0NSSUJFRF9CWV9TSE9XKSB2aXNpYmlsaXR5JDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICApIHtcbiAgICAgICAgdmlzaWJpbGl0eSQuc3Vic2NyaWJlKHZpc2libGUgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnR1aURlc2NyaWJlZEJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGhpbnRTZXJ2aWNlLnNob3dIaW50Rm9ySWQodGhpcy50dWlEZXNjcmliZWRCeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpbnRTZXJ2aWNlLmhpZGVIaW50Rm9ySWQodGhpcy50dWlEZXNjcmliZWRCeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWRlc2NyaWJlZGJ5JylcbiAgICBnZXQgY29tcHV0ZWREZXNjcmliZWRCeSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHVpRGVzY3JpYmVkQnkgPyB0aGlzLnR1aURlc2NyaWJlZEJ5ICsgREVTQ1JJQkVEX0JZIDogbnVsbDtcbiAgICB9XG59XG4iXX0=