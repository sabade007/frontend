import { __decorate, __extends, __param, __read } from "tslib";
import { Directive, ElementRef, Inject, Input, OnDestroy, Optional, Renderer2, Self, } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp, TuiDestroyService, TuiHoveredService, TuiObscuredService, TuiParentsScrollService, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';
import { TuiHintService } from '@taiga-ui/core/services';
import { combineLatest, of, Subject } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, switchMap, take, takeUntil, } from 'rxjs/operators';
import { TUI_HINT_OPTIONS } from './hint-options';
export var HINT_HOVERED_CLASS = '_hint_hovered';
var TuiHintDirective = /** @class */ (function (_super) {
    __extends(TuiHintDirective, _super);
    function TuiHintDirective(renderer, elementRef, hintService, destroy$, obscured$, hoveredService, activeZone, options) {
        var _this = _super.call(this, elementRef, hintService, activeZone, options) || this;
        _this.renderer = renderer;
        _this.options = options;
        _this.tuiHintShowDelay = _this.options.tuiHintShowDelay;
        _this.tuiHintHideDelay = _this.options.tuiHintHideDelay;
        _this.tuiHintHost = null;
        _this.componentHovered$ = new Subject();
        // @bad TODO: Use private provider
        combineLatest(hoveredService.createHovered$(elementRef.nativeElement), _this.componentHovered$.pipe(startWith(false)))
            .pipe(map(function (_a) {
            var _b = __read(_a, 2), directiveHovered = _b[0], componentHovered = _b[1];
            return directiveHovered || componentHovered;
        }), switchMap(function (visible) {
            _this.toggleClass(visible);
            return of(visible).pipe(delay(visible ? _this.tuiHintShowDelay : _this.tuiHintHideDelay));
        }), switchMap(function (visible) {
            return visible && _this.mode !== 'overflow'
                ? obscured$.pipe(map(function (obscured) { return !obscured; }), take(2))
                : of(visible);
        }), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe(function (visible) {
            if (visible) {
                _this.showTooltip();
            }
            else {
                _this.hideTooltip();
            }
        });
        _this.hintService.register(_this);
        return _this;
    }
    Object.defineProperty(TuiHintDirective.prototype, "tuiHint", {
        // TODO: 3.0 Remove null
        set: function (value) {
            if (!value) {
                this.hideTooltip();
                this.content = '';
                return;
            }
            this.content = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHintDirective.prototype, "id", {
        get: function () {
            return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHintDirective.prototype, "host", {
        get: function () {
            return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiHintDirective.prototype.getElementClientRect = function () {
        return this.host.getBoundingClientRect();
    };
    TuiHintDirective.prototype.ngOnDestroy = function () {
        this.hintService.unregister(this);
    };
    TuiHintDirective.prototype.showTooltip = function () {
        if (this.content === '') {
            return;
        }
        this.toggleClass(true);
        this.hintService.add(this);
    };
    TuiHintDirective.prototype.hideTooltip = function () {
        this.toggleClass(false);
        this.hintService.remove(this);
    };
    TuiHintDirective.prototype.toggleClass = function (add) {
        if (add) {
            this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
    };
    TuiHintDirective.ctorParameters = function () { return [
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiObscuredService, decorators: [{ type: Inject, args: [TuiObscuredService,] }, { type: Self }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
        { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_HINT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiHintDirective.prototype, "tuiHintId", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHintDirective.prototype, "tuiHintShowDelay", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHintDirective.prototype, "tuiHintHideDelay", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHintDirective.prototype, "tuiHintHost", void 0);
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiHintDirective.prototype, "tuiHint", null);
    TuiHintDirective = __decorate([
        Directive({
            selector: '[tuiHint]:not(ng-container)',
            providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
        }),
        __param(0, Inject(Renderer2)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiHintService)),
        __param(3, Inject(TuiDestroyService)),
        __param(4, Inject(TuiObscuredService)),
        __param(4, Self()),
        __param(5, Inject(TuiHoveredService)),
        __param(6, Optional()),
        __param(6, Inject(TuiActiveZoneDirective)),
        __param(7, Inject(TUI_HINT_OPTIONS))
    ], TuiHintDirective);
    return TuiHintDirective;
}(AbstractTuiHint));
export { TuiHintDirective };
//# sourceMappingURL=data:application/json;base64,