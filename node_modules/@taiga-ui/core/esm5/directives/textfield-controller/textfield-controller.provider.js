import { __read, __spread } from "tslib";
import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, watch } from '@taiga-ui/cdk';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiTextfieldController } from './textfield.controller';
import { TUI_TEXTFIELD_AUTOCOMPLETE, } from './textfield-autocomplete.directive';
import { TUI_TEXTFIELD_CLEANER, } from './textfield-cleaner.directive';
import { TUI_TEXTFIELD_CUSTOM_CONTENT, } from './textfield-custom-content.directive';
import { TUI_TEXTFIELD_EXAMPLE_TEXT, } from './textfield-example-text.directive';
import { TUI_TEXTFIELD_INPUT_MODE, } from './textfield-input-mode.directive';
import { TUI_TEXTFIELD_LABEL_OUTSIDE, } from './textfield-label-outside.directive';
import { TUI_TEXTFIELD_MAX_LENGTH, } from './textfield-max-length.directive';
import { TUI_TEXTFIELD_SIZE } from './textfield-size.directive';
import { TUI_TEXTFIELD_TYPE } from './textfield-type.directive';
export var TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken("watched textfield controller");
/**
 * @deprecated: use {@link tuiTextfieldWatchedControllerFactory} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function textfieldWatchedControllerFactory(changeDetectorRef, destroy$) {
    var controllers = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        controllers[_i - 2] = arguments[_i];
    }
    var change$ = merge.apply(void 0, __spread(controllers.map(function (_a) {
        var change$ = _a.change$;
        return change$ || NEVER;
    }))).pipe(watch(changeDetectorRef), takeUntil(destroy$));
    change$.subscribe();
    return new (TuiTextfieldController.bind.apply(TuiTextfieldController, __spread([void 0, change$], controllers)))();
}
export var TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_AUTOCOMPLETE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_EXAMPLE_TEXT,
            TUI_TEXTFIELD_INPUT_MODE,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_MAX_LENGTH,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_TYPE,
        ],
        useFactory: textfieldWatchedControllerFactory,
    },
];
export var tuiTextfieldWatchedControllerFactory = textfieldWatchedControllerFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyLyIsInNvdXJjZXMiOlsidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFekMsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUNILDBCQUEwQixHQUU3QixNQUFNLG9DQUFvQyxDQUFDO0FBQzVDLE9BQU8sRUFDSCxxQkFBcUIsR0FFeEIsTUFBTSwrQkFBK0IsQ0FBQztBQUN2QyxPQUFPLEVBQ0gsNEJBQTRCLEdBRS9CLE1BQU0sc0NBQXNDLENBQUM7QUFDOUMsT0FBTyxFQUNILDBCQUEwQixHQUU3QixNQUFNLG9DQUFvQyxDQUFDO0FBQzVDLE9BQU8sRUFDSCx3QkFBd0IsR0FFM0IsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxQyxPQUFPLEVBQ0gsMkJBQTJCLEdBRTlCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUNILHdCQUF3QixHQUUzQixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFBQyxrQkFBa0IsRUFBNEIsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RixPQUFPLEVBQUMsa0JBQWtCLEVBQTRCLE1BQU0sNEJBQTRCLENBQUM7QUFFekYsTUFBTSxDQUFDLElBQU0sZ0NBQWdDLEdBQ3pDLElBQUksY0FBYyxDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFDO0FBRS9FOztHQUVHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxpQ0FBaUMsQ0FDN0MsaUJBQW9DLEVBQ3BDLFFBQTBCO0lBQzFCLHFCQVdDO1NBWEQsVUFXQyxFQVhELHFCQVdDLEVBWEQsSUFXQztRQVhELG9DQVdDOztJQUVELElBQU0sT0FBTyxHQUFHLEtBQUssd0JBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQVM7WUFBUixvQkFBTztRQUFNLE9BQUEsT0FBTyxJQUFJLEtBQUs7SUFBaEIsQ0FBZ0IsQ0FBQyxHQUFFLElBQUksQ0FDM0UsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztJQUVGLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVwQixZQUFXLHNCQUFzQixZQUF0QixzQkFBc0Isb0JBQUMsT0FBTyxHQUFLLFdBQVcsTUFBRTtBQUMvRCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sNkJBQTZCLEdBQWE7SUFDbkQsaUJBQWlCO0lBQ2pCO1FBQ0ksT0FBTyxFQUFFLGdDQUFnQztRQUN6QyxJQUFJLEVBQUU7WUFDRixpQkFBaUI7WUFDakIsaUJBQWlCO1lBQ2pCLDBCQUEwQjtZQUMxQixxQkFBcUI7WUFDckIsNEJBQTRCO1lBQzVCLDBCQUEwQjtZQUMxQix3QkFBd0I7WUFDeEIsMkJBQTJCO1lBQzNCLHdCQUF3QjtZQUN4QixrQkFBa0I7WUFDbEIsa0JBQWtCO1NBQ3JCO1FBQ0QsVUFBVSxFQUFFLGlDQUFpQztLQUNoRDtDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxvQ0FBb0MsR0FBRyxpQ0FBaUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIEluamVjdGlvblRva2VuLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlLCB3YXRjaH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge21lcmdlLCBORVZFUiwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVRleHRmaWVsZENvbnRyb2xsZXJ9IGZyb20gJy4vdGV4dGZpZWxkLmNvbnRyb2xsZXInO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0FVVE9DT01QTEVURSxcbiAgICBUdWlUZXh0ZmllbGRBdXRvY29tcGxldGVEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWF1dG9jb21wbGV0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0NMRUFORVIsXG4gICAgVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtY2xlYW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0NVU1RPTV9DT05URU5ULFxuICAgIFR1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWN1c3RvbS1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfRVhBTVBMRV9URVhULFxuICAgIFR1aVRleHRmaWVsZEV4YW1wbGVUZXh0RGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1leGFtcGxlLXRleHQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9JTlBVVF9NT0RFLFxuICAgIFR1aVRleHRmaWVsZElucHV0TW9kZURpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtaW5wdXQtbW9kZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0xBQkVMX09VVFNJREUsXG4gICAgVHVpVGV4dGZpZWxkTGFiZWxPdXRzaWRlRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1sYWJlbC1vdXRzaWRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfTUFYX0xFTkdUSCxcbiAgICBUdWlUZXh0ZmllbGRNYXhMZW5ndGhEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLW1heC1sZW5ndGguZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9TSVpFLCBUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1zaXplLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfVFlQRSwgVHVpVGV4dGZpZWxkVHlwZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtdHlwZS5kaXJlY3RpdmUnO1xuXG5leHBvcnQgY29uc3QgVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIgPVxuICAgIG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlUZXh0ZmllbGRDb250cm9sbGVyPihgd2F0Y2hlZCB0ZXh0ZmllbGQgY29udHJvbGxlcmApO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aVRleHRmaWVsZFdhdGNoZWRDb250cm9sbGVyRmFjdG9yeX0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5KFxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAuLi5jb250cm9sbGVyczogW1xuICAgICAgICBUdWlUZXh0ZmllbGRBdXRvY29tcGxldGVEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZEV4YW1wbGVUZXh0RGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRJbnB1dE1vZGVEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbiAgICAgICAgVHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlLFxuICAgICAgICAvLyBAdHMtaWdub3JlIHJlbW92ZSBhZnRlciBUUyB1cGRhdGVcbiAgICAgICAgVHVpVGV4dGZpZWxkVHlwZURpcmVjdGl2ZSxcbiAgICBdXG4pOiBUdWlUZXh0ZmllbGRDb250cm9sbGVyIHtcbiAgICBjb25zdCBjaGFuZ2UkID0gbWVyZ2UoLi4uY29udHJvbGxlcnMubWFwKCh7Y2hhbmdlJH0pID0+IGNoYW5nZSQgfHwgTkVWRVIpKS5waXBlKFxuICAgICAgICB3YXRjaChjaGFuZ2VEZXRlY3RvclJlZiksXG4gICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgKTtcblxuICAgIGNoYW5nZSQuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gbmV3IFR1aVRleHRmaWVsZENvbnRyb2xsZXIoY2hhbmdlJCwgLi4uY29udHJvbGxlcnMpO1xufVxuXG5leHBvcnQgY29uc3QgVEVYVEZJRUxEX0NPTlRST0xMRVJfUFJPVklERVI6IFByb3ZpZGVyID0gW1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0FVVE9DT01QTEVURSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ0xFQU5FUixcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ1VTVE9NX0NPTlRFTlQsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0VYQU1QTEVfVEVYVCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfSU5QVVRfTU9ERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTEFCRUxfT1VUU0lERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTUFYX0xFTkdUSCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfU0laRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfVFlQRSxcbiAgICAgICAgXSxcbiAgICAgICAgdXNlRmFjdG9yeTogdGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5LFxuICAgIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgdHVpVGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5ID0gdGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5O1xuIl19