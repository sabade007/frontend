import { __decorate, __param } from "tslib";
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID, } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiSvgService } from '@taiga-ui/core/services';
import { innerHTML } from '@taiga-ui/core/utils/polyfills';
import { takeUntil } from 'rxjs/operators';
// @dynamic
var TuiSvgDefsHostComponent = /** @class */ (function () {
    function TuiSvgDefsHostComponent(documentRef, svgService, changeDetectorRef, destroy$, platformId) {
        this.svgService = svgService;
        this.changeDetectorRef = changeDetectorRef;
        this.destroy$ = destroy$;
        this.isBrowser = true;
        this.isBrowser = !isPlatformServer(platformId);
        innerHTML(documentRef);
    }
    // @bad TODO: Looks like it could be async piped but it was probably written like that for a reason
    TuiSvgDefsHostComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.svgService.items$.pipe(takeUntil(this.destroy$)).subscribe(function (defsMap) {
            _this.items = defsMap.values();
            _this.changeDetectorRef.detectChanges();
        });
    };
    TuiSvgDefsHostComponent.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    TuiSvgDefsHostComponent = __decorate([
        Component({
            selector: 'tui-svg-defs-host',
            template: "<svg:svg\n    version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n    <ng-container *ngIf=\"isBrowser; else server\">\n        <defs\n            *ngFor=\"let def of items\"\n            [innerHTML]=\"def\"\n        ></defs>\n    </ng-container>\n    <ng-template #server>\n        <!--svg[outerHTML] - to support SSR, because there is no support of innerHTML for for defs element in domino-->\n        <defs *ngFor=\"let def of items\">\n            <svg [outerHTML]=\"def\"></svg>\n        </defs>\n    </ng-template>\n</svg:svg>\n",
            providers: [TuiDestroyService],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:none}"]
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(TuiSvgService)),
        __param(2, Inject(ChangeDetectorRef)),
        __param(3, Inject(TuiDestroyService)),
        __param(4, Inject(PLATFORM_ID))
    ], TuiSvgDefsHostComponent);
    return TuiSvgDefsHostComponent;
}());
export { TuiSvgDefsHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9pbnRlcm5hbC9zdmctZGVmcy1ob3N0LyIsInNvdXJjZXMiOlsic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXpDLFdBQVc7QUFRWDtJQUlJLGlDQUNzQixXQUFxQixFQUNDLFVBQXlCLEVBQ3JCLGlCQUFvQyxFQUUvRCxRQUEyQixFQUN2QixVQUFtQztRQUpoQixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ3JCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFFL0QsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFQaEQsY0FBUyxHQUFHLElBQUksQ0FBQztRQVViLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELG1HQUFtRztJQUNuRywwQ0FBUSxHQUFSO1FBQUEsaUJBS0M7UUFKRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDbkUsS0FBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUIsS0FBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBakJrQyxRQUFRLHVCQUF0QyxNQUFNLFNBQUMsUUFBUTtnQkFDb0MsYUFBYSx1QkFBaEUsTUFBTSxTQUFDLGFBQWE7Z0JBQzBDLGlCQUFpQix1QkFBL0UsTUFBTSxTQUFDLGlCQUFpQjtnQkFFRSxpQkFBaUIsdUJBRDNDLE1BQU0sU0FBQyxpQkFBaUI7Z0RBRXhCLE1BQU0sU0FBQyxXQUFXOztJQVZkLHVCQUF1QjtRQVBuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLDZsQkFBNEM7WUFFNUMsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7WUFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2xELENBQUM7UUFNTyxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNoQixXQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNyQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFFekIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7T0FWZix1QkFBdUIsQ0F1Qm5DO0lBQUQsOEJBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQXZCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5ULCBpc1BsYXRmb3JtU2VydmVyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0LFxuICAgIE9uSW5pdCxcbiAgICBQTEFURk9STV9JRCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTdmdTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcyc7XG5pbXBvcnQge2lubmVySFRNTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMvcG9seWZpbGxzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zdmctZGVmcy1ob3N0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc3ZnLWRlZnMtaG9zdC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zdmctZGVmcy1ob3N0LnN0eWxlLmxlc3MnXSxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVN2Z0RlZnNIb3N0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBpdGVtcyE6IEl0ZXJhYmxlSXRlcmF0b3I8U2FmZUh0bWw+O1xuICAgIGlzQnJvd3NlciA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuICAgICAgICBASW5qZWN0KFR1aVN2Z1NlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgc3ZnU2VydmljZTogVHVpU3ZnU2VydmljZSxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgdGhpcy5pc0Jyb3dzZXIgPSAhaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKTtcbiAgICAgICAgaW5uZXJIVE1MKGRvY3VtZW50UmVmKTtcbiAgICB9XG5cbiAgICAvLyBAYmFkIFRPRE86IExvb2tzIGxpa2UgaXQgY291bGQgYmUgYXN5bmMgcGlwZWQgYnV0IGl0IHdhcyBwcm9iYWJseSB3cml0dGVuIGxpa2UgdGhhdCBmb3IgYSByZWFzb25cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdmdTZXJ2aWNlLml0ZW1zJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGRlZnNNYXAgPT4ge1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGRlZnNNYXAudmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19