"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const workspace_1 = require("@schematics/angular/utility/workspace");
const ng_morph_1 = require("ng-morph");
const add_unique_import_1 = require("../../utils/add-unique-import");
const get_project_1 = require("../../utils/get-project");
const get_project_target_options_1 = require("../../utils/get-project-target-options");
const modules_1 = require("../constants/modules");
function addTaigaModules(options) {
    return (tree, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const workspace = yield workspace_1.getWorkspace(tree);
        const project = get_project_1.getProject(options, workspace);
        const buildOptions = get_project_target_options_1.getProjectTargetOptions(project, `build`);
        ng_morph_1.setActiveProject(ng_morph_1.createProject(tree, `/`, [`**/*.ts`, `**/*.json`]));
        const mainModule = ng_morph_1.getMainModule(buildOptions.main);
        addTuiModules(mainModule, options, context);
        addTuiProviders(mainModule, options);
        ng_morph_1.saveActiveProject();
    });
}
exports.addTaigaModules = addTaigaModules;
function addTuiModules(mainModule, options, context) {
    const modules = [
        ...modules_1.MAIN_MODULES,
        ...(options.addDialogsModule ? modules_1.DIALOG_MODULES : []),
        ...(options.addAlertModule ? modules_1.ALERT_MODULES : []),
    ];
    const mainModulePath = mainModule.getSourceFile().getFilePath();
    modules.forEach(module => {
        ng_morph_1.addImportToNgModule(mainModule, module.name, { unique: true });
        add_unique_import_1.addUniqueImport(mainModulePath, module.name, module.packageName);
    });
    context.logger.info(`${modules.map(module => module.name)} was added to ${mainModulePath}`);
}
function addTuiProviders(mainModule, options) {
    if (!options.addSanitizer) {
        return;
    }
    ng_morph_1.addProviderToNgModule(mainModule, `{provide: TUI_SANITIZER, useClass: NgDompurifySanitizer}`, { unique: true });
    modules_1.SANITIZER_MODULES.forEach(module => {
        add_unique_import_1.addUniqueImport(mainModule.getSourceFile().getFilePath(), module.name, module.packageName);
    });
}
