import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostBinding, Inject, Input, NgZone } from '@angular/core';
import { tuiZonefree, typedFromEvent } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { canScroll, getScrollParent } from '@taiga-ui/cdk/utils/dom';
import { Observable } from 'rxjs';
import { filter, switchMap, takeUntil, tap } from 'rxjs/operators';
/**
 * Directive to isolate scrolling, i.e. prevent body scroll behind modal dialog
 * @dynamic
 */
let TuiOverscrollDirective = class TuiOverscrollDirective {
    constructor({ nativeElement }, ngZone, destroy$) {
        this.mode = 'scroll';
        typedFromEvent(nativeElement, 'wheel', { passive: false })
            .pipe(filter(() => this.enabled), tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(event => {
            this.processEvent(event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);
        });
        typedFromEvent(nativeElement, 'touchstart', { passive: true })
            .pipe(switchMap(({ touches }) => {
            let { clientX, clientY } = touches[0];
            let deltaX = 0;
            let deltaY = 0;
            let vertical;
            return typedFromEvent(nativeElement, 'touchmove', {
                passive: false,
            }).pipe(filter(() => this.enabled), tap(event => {
                // We have to have it in tap instead of subscribe due to variables in closure
                const changedTouch = event.changedTouches[0];
                deltaX = clientX - changedTouch.clientX;
                deltaY = clientY - changedTouch.clientY;
                clientX = changedTouch.clientX;
                clientY = changedTouch.clientY;
                if (vertical === undefined) {
                    vertical = Math.abs(deltaY) > Math.abs(deltaX);
                }
                this.processEvent(event, vertical, vertical ? deltaY < 0 : deltaX < 0);
            }));
        }), tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe();
    }
    get enabled() {
        return this.mode !== 'none';
    }
    get overscrollBehavior() {
        return this.enabled ? 'contain' : null;
    }
    processEvent(event, vertical, negative) {
        var _a;
        const { target, currentTarget, cancelable } = event;
        // TODO: iframe warning
        if (!cancelable ||
            !(target instanceof Element) ||
            ((_a = target) === null || _a === void 0 ? void 0 : _a.type) === 'range') {
            return;
        }
        // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior
        if (this.mode === 'all' &&
            ((vertical && !currentTarget.contains(getScrollParent(target))) ||
                (!vertical && !currentTarget.contains(getScrollParent(target, false))))) {
            event.preventDefault();
            return;
        }
        // This is Safari/IE/Edge fallback
        if (vertical &&
            ((negative && !canScroll(target, currentTarget, true, false)) ||
                (!negative && !canScroll(target, currentTarget, true, true)))) {
            event.preventDefault();
            return;
        }
        if (!vertical &&
            ((negative && !canScroll(target, currentTarget, false, false)) ||
                (!negative && !canScroll(target, currentTarget, false, true)))) {
            event.preventDefault();
        }
    }
};
TuiOverscrollDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Input('tuiOverscroll')
], TuiOverscrollDirective.prototype, "mode", void 0);
__decorate([
    HostBinding('style.overscrollBehavior')
], TuiOverscrollDirective.prototype, "overscrollBehavior", null);
TuiOverscrollDirective = __decorate([
    Directive({
        selector: '[tuiOverscroll]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService))
], TuiOverscrollDirective);
export { TuiOverscrollDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnNjcm9sbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvb3ZlcnNjcm9sbC8iLCJzb3VyY2VzIjpbIm92ZXJzY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUV6RCxPQUFPLEVBQUMsU0FBUyxFQUFFLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ25FLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWpFOzs7R0FHRztBQUtILElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBSS9CLFlBQ3dCLEVBQUMsYUFBYSxFQUEwQixFQUM1QyxNQUFjLEVBQ0gsUUFBMEI7UUFMekQsU0FBSSxHQUE0QixRQUFRLENBQUM7UUFPckMsY0FBYyxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUM7YUFDbkQsSUFBSSxDQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQzFCLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFDbkIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjthQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxZQUFZLENBQ2IsS0FBSyxFQUNMLENBQUMs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LENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0dBUHJCLHNCQUFzQixDQXFIbEM7U0FySFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbmplY3QsIElucHV0LCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlab25lZnJlZSwgdHlwZWRGcm9tRXZlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1R1aUV2ZW50V2l0aCwgVHVpT3ZlcnNjcm9sbE1vZGVUfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcbmltcG9ydCB7Y2FuU2Nyb2xsLCBnZXRTY3JvbGxQYXJlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0byBpc29sYXRlIHNjcm9sbGluZywgaS5lLiBwcmV2ZW50IGJvZHkgc2Nyb2xsIGJlaGluZCBtb2RhbCBkaWFsb2dcbiAqIEBkeW5hbWljXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aU92ZXJzY3JvbGxdJyxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU92ZXJzY3JvbGxEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgndHVpT3ZlcnNjcm9sbCcpXG4gICAgbW9kZTogVHVpT3ZlcnNjcm9sbE1vZGVUIHwgJycgPSAnc2Nyb2xsJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgKSB7XG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICd3aGVlbCcsIHtwYXNzaXZlOiBmYWxzZX0pXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKCkgPT4gdGhpcy5lbmFibGVkKSxcbiAgICAgICAgICAgICAgICB0dWlab25lZnJlZShuZ1pvbmUpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NFdmVudChcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICEhZXZlbnQuZGVsdGFZLFxuICAgICAgICAgICAgICAgICAgICBldmVudC5kZWx0YVkgPyBldmVudC5kZWx0YVkgPCAwIDogZXZlbnQuZGVsdGFYIDwgMCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ3RvdWNoc3RhcnQnLCB7cGFzc2l2ZTogdHJ1ZX0pXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKHt0b3VjaGVzfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQge2NsaWVudFgsIGNsaWVudFl9ID0gdG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhWCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWx0YVkgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmVydGljYWw6IGJvb2xlYW47XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICd0b3VjaG1vdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmVuYWJsZWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGhhdmUgaXQgaW4gdGFwIGluc3RlYWQgb2Ygc3Vic2NyaWJlIGR1ZSB0byB2YXJpYWJsZXMgaW4gY2xvc3VyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZWRUb3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFYID0gY2xpZW50WCAtIGNoYW5nZWRUb3VjaC5jbGllbnRYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhWSA9IGNsaWVudFkgLSBjaGFuZ2VkVG91Y2guY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRYID0gY2hhbmdlZFRvdWNoLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50WSA9IGNoYW5nZWRUb3VjaC5jbGllbnRZO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwgPSBNYXRoLmFicyhkZWx0YVkpID4gTWF0aC5hYnMoZGVsdGFYKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbCA/IGRlbHRhWSA8IDAgOiBkZWx0YVggPCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0dWlab25lZnJlZShuZ1pvbmUpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgIT09ICdub25lJztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLm92ZXJzY3JvbGxCZWhhdmlvcicpXG4gICAgZ2V0IG92ZXJzY3JvbGxCZWhhdmlvcigpOiAnY29udGFpbicgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlZCA/ICdjb250YWluJyA6IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzRXZlbnQoXG4gICAgICAgIGV2ZW50OiBUdWlFdmVudFdpdGg8RXZlbnQsIEhUTUxFbGVtZW50PixcbiAgICAgICAgdmVydGljYWw6IGJvb2xlYW4sXG4gICAgICAgIG5lZ2F0aXZlOiBib29sZWFuLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB7dGFyZ2V0LCBjdXJyZW50VGFyZ2V0LCBjYW5jZWxhYmxlfSA9IGV2ZW50O1xuXG4gICAgICAgIC8vIFRPRE86IGlmcmFtZSB3YXJuaW5nXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFjYW5jZWxhYmxlIHx8XG4gICAgICAgICAgICAhKHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpIHx8XG4gICAgICAgICAgICAodGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpPy50eXBlID09PSAncmFuZ2UnXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyBhbGwgd2hhdCdzIG5lZWRlZCBpbiBDaHJvbWUvRmlyZWZveCB0aGFua3MgdG8gQ1NTIG92ZXJzY3JvbGwtYmVoYXZpb3JcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5tb2RlID09PSAnYWxsJyAmJlxuICAgICAgICAgICAgKCh2ZXJ0aWNhbCAmJiAhY3VycmVudFRhcmdldC5jb250YWlucyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0KSkpIHx8XG4gICAgICAgICAgICAgICAgKCF2ZXJ0aWNhbCAmJiAhY3VycmVudFRhcmdldC5jb250YWlucyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LCBmYWxzZSkpKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIFNhZmFyaS9JRS9FZGdlIGZhbGxiYWNrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHZlcnRpY2FsICYmXG4gICAgICAgICAgICAoKG5lZ2F0aXZlICYmICFjYW5TY3JvbGwodGFyZ2V0LCBjdXJyZW50VGFyZ2V0LCB0cnVlLCBmYWxzZSkpIHx8XG4gICAgICAgICAgICAgICAgKCFuZWdhdGl2ZSAmJiAhY2FuU2Nyb2xsKHRhcmdldCwgY3VycmVudFRhcmdldCwgdHJ1ZSwgdHJ1ZSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF2ZXJ0aWNhbCAmJlxuICAgICAgICAgICAgKChuZWdhdGl2ZSAmJiAhY2FuU2Nyb2xsKHRhcmdldCwgY3VycmVudFRhcmdldCwgZmFsc2UsIGZhbHNlKSkgfHxcbiAgICAgICAgICAgICAgICAoIW5lZ2F0aXZlICYmICFjYW5TY3JvbGwodGFyZ2V0LCBjdXJyZW50VGFyZ2V0LCBmYWxzZSwgdHJ1ZSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=