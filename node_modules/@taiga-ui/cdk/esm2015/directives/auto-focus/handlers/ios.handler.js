import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, NgZone, Optional, Renderer2, Self, } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk/tokens';
import { tuiPx } from '@taiga-ui/cdk/utils';
import { AbstractTuiAutofocusHandler } from './abstract.handler';
// @dynamic
let TuiIosAutofocusHandler = class TuiIosAutofocusHandler extends AbstractTuiAutofocusHandler {
    constructor(tuiFocusableComponent, elementRef, renderer, ngZone, windowRef) {
        super(tuiFocusableComponent, elementRef);
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.windowRef = windowRef;
        this.patchCssStyles();
    }
    setFocus() {
        if (this.isTextFieldElement) {
            this.ngZone.runOutsideAngular(() => this.iosWebkitAutofocus());
        }
        else {
            this.element.focus();
        }
    }
    iosWebkitAutofocus() {
        var _a;
        const fakeInput = this.makeFakeInput();
        const duration = this.getDurationTimeBeforeFocus();
        let fakeFocusTimeoutId = 0;
        let elementFocusTimeoutId = 0;
        const blurHandler = () => fakeInput.focus({ preventScroll: true });
        const focusHandler = () => {
            clearTimeout(fakeFocusTimeoutId);
            fakeFocusTimeoutId = this.windowRef.setTimeout(() => {
                clearTimeout(elementFocusTimeoutId);
                fakeInput.removeEventListener(`blur`, blurHandler);
                fakeInput.removeEventListener(`focus`, focusHandler);
                elementFocusTimeoutId = this.windowRef.setTimeout(() => {
                    this.element.focus({ preventScroll: false });
                    fakeInput.remove();
                }, duration);
            });
        };
        fakeInput.addEventListener(`blur`, blurHandler, { once: true });
        fakeInput.addEventListener(`focus`, focusHandler);
        if (this.insideDialog()) {
            this.windowRef.document.body.appendChild(fakeInput);
        }
        else {
            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(fakeInput);
        }
        fakeInput.focus({ preventScroll: true });
    }
    /**
     * @note:
     * emulate textfield position in layout with cursor
     * before focus to real textfield element
     */
    makeFakeInput() {
        const fakeInput = this.renderer.createElement(`input`);
        const rect = this.element.getBoundingClientRect();
        fakeInput.setAttribute(`maxlength`, `0`);
        // @note: don't use opacity: 0,
        // sometimes it's doesn't work for emulate real input
        fakeInput.style.height = tuiPx(rect.height);
        fakeInput.style.width = tuiPx(rect.width / 2);
        fakeInput.style.position = `fixed`;
        fakeInput.style.zIndex = `-99999999`;
        fakeInput.style.caretColor = `transparent`;
        fakeInput.style.color = `transparent`;
        fakeInput.style.cursor = `none`;
        fakeInput.style.fontSize = tuiPx(16); // disable possible auto zoom
        fakeInput.readOnly = true; // prevent keyboard for fake input
        // @note: emulate position cursor before focus to real textfield element
        fakeInput.style.top = tuiPx(rect.top);
        fakeInput.style.left = tuiPx(rect.left);
        return fakeInput;
    }
    getDurationTimeBeforeFocus() {
        return (parseFloat(this.windowRef
            .getComputedStyle(this.element)
            .getPropertyValue(`--tui-duration`)) || 0);
    }
    /**
     * @note:
     * unfortunately, in older versions of iOS
     * there is a bug that the fake input cursor
     * will move along with the dialog animation
     * and then that dialog will be shaking
     */
    insideDialog() {
        return !!this.element.closest(`tui-dialog`);
    }
    /**
     * @note:
     * This is necessary so that the viewport isn't recalculated
     * and then the dialogs don't shake.
     *
     * Also, we need to fixed height viewport,
     * so that when focusing the dialogs don't shake
     */
    patchCssStyles() {
        const documentRef = this.windowRef.document;
        for (const element of [documentRef.documentElement, documentRef.body]) {
            element.style.setProperty(`overflow`, `auto`);
            element.style.setProperty(`height`, `100%`);
        }
    }
};
TuiIosAutofocusHandler.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TUI_FOCUSABLE_ITEM_ACCESSOR,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
TuiIosAutofocusHandler = __decorate([
    Directive(),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(TUI_FOCUSABLE_ITEM_ACCESSOR)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(NgZone)),
    __param(4, Inject(WINDOW))
], TuiIosAutofocusHandler);
export { TuiIosAutofocusHandler };
//# sourceMappingURL=data:application/json;base64,