import { __decorate } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { tuiAssertIsHTMLElement } from '@taiga-ui/cdk/classes';
import { shouldCall } from '@tinkoff/ng-event-plugins';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function movedOut({ currentTarget, relatedTarget }) {
    if (!relatedTarget) {
        return true;
    }
    tuiAssertIsHTMLElement(currentTarget);
    tuiAssertIsHTMLElement(relatedTarget);
    return !currentTarget.contains(relatedTarget);
}
let TuiHoveredDirective = class TuiHoveredDirective {
    constructor() {
        this.tuiHoveredChange = new EventEmitter();
    }
    onHover() {
        this.tuiHoveredChange.emit(true);
    }
    onOut(_) {
        this.tuiHoveredChange.emit(false);
    }
};
__decorate([
    Output()
], TuiHoveredDirective.prototype, "tuiHoveredChange", void 0);
__decorate([
    HostListener('mouseenter')
], TuiHoveredDirective.prototype, "onHover", null);
__decorate([
    shouldCall(movedOut),
    HostListener('mouseout.init', ['$event']),
    HostListener('mouseout.silent', ['$event'])
], TuiHoveredDirective.prototype, "onOut", null);
TuiHoveredDirective = __decorate([
    Directive({
        selector: '[tuiHoveredChange]',
    })
], TuiHoveredDirective);
export { TuiHoveredDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXJlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvaG92ZXJlZC8iLCJzb3VyY2VzIjpbImhvdmVyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLFFBQVEsQ0FBQyxFQUFDLGFBQWEsRUFBRSxhQUFhLEVBQWE7SUFDL0QsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdEMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUtELElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBQWhDO1FBRWEscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQWE1RCxDQUFDO0lBVkcsT0FBTztRQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUtELEtBQUssQ0FBQyxDQUFhO1FBQ2YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0osQ0FBQTtBQWJHO0lBREMsTUFBTSxFQUFFOzZEQUMrQztBQUd4RDtJQURDLFlBQVksQ0FBQyxZQUFZLENBQUM7a0RBRzFCO0FBS0Q7SUFIQyxVQUFVLENBQUMsUUFBUSxDQUFDO0lBQ3BCLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnREFHM0M7QUFkUSxtQkFBbUI7SUFIL0IsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9CQUFvQjtLQUNqQyxDQUFDO0dBQ1csbUJBQW1CLENBZS9CO1NBZlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlBc3NlcnRJc0hUTUxFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHtzaG91bGRDYWxsfSBmcm9tICdAdGlua29mZi9uZy1ldmVudC1wbHVnaW5zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVkT3V0KHtjdXJyZW50VGFyZ2V0LCByZWxhdGVkVGFyZ2V0fTogTW91c2VFdmVudCk6IGJvb2xlYW4ge1xuICAgIGlmICghcmVsYXRlZFRhcmdldCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0dWlBc3NlcnRJc0hUTUxFbGVtZW50KGN1cnJlbnRUYXJnZXQpO1xuICAgIHR1aUFzc2VydElzSFRNTEVsZW1lbnQocmVsYXRlZFRhcmdldCk7XG5cbiAgICByZXR1cm4gIWN1cnJlbnRUYXJnZXQuY29udGFpbnMocmVsYXRlZFRhcmdldCk7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUhvdmVyZWRDaGFuZ2VdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSG92ZXJlZERpcmVjdGl2ZSB7XG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpSG92ZXJlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICAgIG9uSG92ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudHVpSG92ZXJlZENoYW5nZS5lbWl0KHRydWUpO1xuICAgIH1cblxuICAgIEBzaG91bGRDYWxsKG1vdmVkT3V0KVxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3V0LmluaXQnLCBbJyRldmVudCddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3V0LnNpbGVudCcsIFsnJGV2ZW50J10pXG4gICAgb25PdXQoXzogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnR1aUhvdmVyZWRDaGFuZ2UuZW1pdChmYWxzZSk7XG4gICAgfVxufVxuIl19