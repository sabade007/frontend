import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { preventDefault, typedFromEvent } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { merge, Observable } from 'rxjs';
import { distinctUntilChanged, filter, map, mapTo, startWith, switchMap, takeUntil, } from 'rxjs/operators';
// @dynamic
let TuiDroppableDirective = class TuiDroppableDirective {
    constructor({ nativeElement }, destroy$) {
        this.tuiDroppableDropped = typedFromEvent(nativeElement, 'drop').pipe(preventDefault(), map(event => event.dataTransfer), filter(isPresent));
        this.tuiDroppableDragOverChange = typedFromEvent(nativeElement, 'dragenter').pipe(switchMap(({ target, dataTransfer }) => merge(typedFromEvent(nativeElement, 'dragleave').pipe(filter(event => event.target === target)), typedFromEvent(nativeElement, 'drop')).pipe(mapTo(null), startWith(dataTransfer))), distinctUntilChanged((a, b) => (!!a && !!b) || (!a && !b)));
        // Required by Drag and Drop API to stop redirecting
        typedFromEvent(nativeElement, 'dragover')
            .pipe(preventDefault(), takeUntil(destroy$))
            .subscribe();
    }
};
TuiDroppableDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Output()
], TuiDroppableDirective.prototype, "tuiDroppableDropped", void 0);
__decorate([
    Output()
], TuiDroppableDirective.prototype, "tuiDroppableDragOverChange", void 0);
TuiDroppableDirective = __decorate([
    Directive({
        selector: '[tuiDroppableDropped], [tuiDroppableDragOverChange]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiDestroyService))
], TuiDroppableDirective);
export { TuiDroppableDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcHBhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9kcm9wcGFibGUvIiwic291cmNlcyI6WyJkcm9wcGFibGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxjQUFjLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDekUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEdBQ1osTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixXQUFXO0FBS1gsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFPOUIsWUFDd0IsRUFBQyxhQUFhLEVBQTBCLEVBQ2pDLFFBQTBCO1FBRXJELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDakUsY0FBYyxFQUFFLEVBQ2hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUNwQixDQUFDO1FBRUYsSUFBSSxDQUFDLDBCQUEwQixHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM3RSxTQUFTLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUMsRUFBRSxFQUFFLENBQ2pDLEtBQUssQ0FDRCxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FDM0MsRUFDRCxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUN4QyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQy9DLEVBQ0Qsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM3RCxDQUFDO1FBRUYsb0RBQW9EO1FBQ3BELGNBQWMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDO2FBQ3BDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDM0MsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNKLENBQUE7O1lBMUI0QyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtZQUNtQixVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCOztBQVA3QjtJQURDLE1BQU0sRUFBRTtrRUFDOEM7QUFHdkQ7SUFEQyxNQUFNLEVBQUU7eUVBQzREO0FBTDVELHFCQUFxQjtJQUpqQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUscURBQXFEO1FBQy9ELFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0tBQ2pDLENBQUM7SUFTTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0dBVHJCLHFCQUFxQixDQWtDakM7U0FsQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7cHJldmVudERlZmF1bHQsIHR5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgZmlsdGVyLFxuICAgIG1hcCxcbiAgICBtYXBUbyxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwLFxuICAgIHRha2VVbnRpbCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBAZHluYW1pY1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpRHJvcHBhYmxlRHJvcHBlZF0sIFt0dWlEcm9wcGFibGVEcmFnT3ZlckNoYW5nZV0nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcHBhYmxlRGlyZWN0aXZlIHtcbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlEcm9wcGFibGVEcm9wcGVkOiBPYnNlcnZhYmxlPERhdGFUcmFuc2Zlcj47XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlEcm9wcGFibGVEcmFnT3ZlckNoYW5nZTogT2JzZXJ2YWJsZTxEYXRhVHJhbnNmZXIgfCBudWxsPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHZvaWQ+LFxuICAgICkge1xuICAgICAgICB0aGlzLnR1aURyb3BwYWJsZURyb3BwZWQgPSB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnZHJvcCcpLnBpcGUoXG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCgpLFxuICAgICAgICAgICAgbWFwKGV2ZW50ID0+IGV2ZW50LmRhdGFUcmFuc2ZlciksXG4gICAgICAgICAgICBmaWx0ZXIoaXNQcmVzZW50KSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnR1aURyb3BwYWJsZURyYWdPdmVyQ2hhbmdlID0gdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2RyYWdlbnRlcicpLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKHt0YXJnZXQsIGRhdGFUcmFuc2Zlcn0pID0+XG4gICAgICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdkcmFnbGVhdmUnKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKGV2ZW50ID0+IGV2ZW50LnRhcmdldCA9PT0gdGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2Ryb3AnKSxcbiAgICAgICAgICAgICAgICApLnBpcGUobWFwVG8obnVsbCksIHN0YXJ0V2l0aChkYXRhVHJhbnNmZXIpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gKCEhYSAmJiAhIWIpIHx8ICghYSAmJiAhYikpLFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFJlcXVpcmVkIGJ5IERyYWcgYW5kIERyb3AgQVBJIHRvIHN0b3AgcmVkaXJlY3RpbmdcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2RyYWdvdmVyJylcbiAgICAgICAgICAgIC5waXBlKHByZXZlbnREZWZhdWx0KCksIHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuIl19