import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, Output, Renderer2, } from '@angular/core';
let TuiCheckedDirective = class TuiCheckedDirective {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.tuiCheckedChange = new EventEmitter();
        this.updateProperty('checked', false);
    }
    set tuiChecked(checked) {
        this.updateProperty('checked', checked || false);
        this.updateProperty('indeterminate', checked === null);
    }
    onChange({ checked }) {
        this.updateProperty('indeterminate', false);
        this.tuiCheckedChange.emit(checked);
    }
    updateProperty(property, value) {
        this.renderer.setProperty(this.element.nativeElement, property, value);
    }
};
TuiCheckedDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
];
__decorate([
    Input()
], TuiCheckedDirective.prototype, "tuiChecked", null);
__decorate([
    Output()
], TuiCheckedDirective.prototype, "tuiCheckedChange", void 0);
__decorate([
    HostListener('change', ['$event.target'])
], TuiCheckedDirective.prototype, "onChange", null);
TuiCheckedDirective = __decorate([
    Directive({
        selector: 'input[tuiChecked], input[tuiCheckedChange]',
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(Renderer2))
], TuiCheckedDirective);
export { TuiCheckedDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvY2hlY2tlZC8iLCJzb3VyY2VzIjpbImNoZWNrZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUt2QixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQVU1QixZQUVxQixPQUFxQyxFQUNsQixRQUFtQjtRQUR0QyxZQUFPLEdBQVAsT0FBTyxDQUE4QjtRQUNsQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBTGxELHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFPcEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQWRELElBQUksVUFBVSxDQUFDLE9BQXVCO1FBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQWNELFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBbUI7UUFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQXFDLEVBQUUsS0FBYztRQUN4RSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0UsQ0FBQztDQUNKLENBQUE7O1lBZmlDLFVBQVUsdUJBRG5DLE1BQU0sU0FBQyxVQUFVO1lBRTRCLFNBQVMsdUJBQXRELE1BQU0sU0FBQyxTQUFTOztBQVhyQjtJQURDLEtBQUssRUFBRTtxREFJUDtBQUdEO0lBREMsTUFBTSxFQUFFOzZEQUMrQztBQVd4RDtJQURDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQzttREFJekM7QUF0QlEsbUJBQW1CO0lBSC9CLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSw0Q0FBNEM7S0FDekQsQ0FBQztJQVlPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRWxCLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0dBYmIsbUJBQW1CLENBMkIvQjtTQTNCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aUNoZWNrZWRdLCBpbnB1dFt0dWlDaGVja2VkQ2hhbmdlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUNoZWNrZWREaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHR1aUNoZWNrZWQoY2hlY2tlZDogYm9vbGVhbiB8IG51bGwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnY2hlY2tlZCcsIGNoZWNrZWQgfHwgZmFsc2UpO1xuICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdpbmRldGVybWluYXRlJywgY2hlY2tlZCA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpQ2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PixcbiAgICAgICAgQEluamVjdChSZW5kZXJlcjIpIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICApIHtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjaGFuZ2UnLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICBvbkNoYW5nZSh7Y2hlY2tlZH06IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnaW5kZXRlcm1pbmF0ZScsIGZhbHNlKTtcbiAgICAgICAgdGhpcy50dWlDaGVja2VkQ2hhbmdlLmVtaXQoY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVQcm9wZXJ0eShwcm9wZXJ0eTogJ2NoZWNrZWQnIHwgJ2luZGV0ZXJtaW5hdGUnLCB2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==