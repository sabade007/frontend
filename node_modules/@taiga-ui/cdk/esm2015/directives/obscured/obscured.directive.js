import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, Optional, Output, Self } from '@angular/core';
import { tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
import { TuiActiveZoneDirective } from '@taiga-ui/cdk/directives/active-zone';
import { TuiDestroyService, TuiObscuredService, TuiParentsScrollService, } from '@taiga-ui/cdk/services';
import { EMPTY, Subject } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
/**
 * Directive that monitors element visibility
 */
let TuiObscuredDirective = class TuiObscuredDirective {
    constructor(activeZone, obscured$) {
        this.enabled$ = new Subject();
        const mapped$ = obscured$.pipe(map(obscuredBy => !!obscuredBy &&
            (!activeZone ||
                !obscuredBy.length ||
                obscuredBy.every(element => !activeZone.contains(element)))));
        this.tuiObscured = this.enabled$.pipe(switchMap(enabled => (enabled ? mapped$ : EMPTY)));
    }
    set tuiObscuredEnabled(enabled) {
        this.enabled$.next(enabled);
    }
};
TuiObscuredDirective.ctorParameters = () => [
    { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiActiveZoneDirective,] }] },
    { type: TuiObscuredService, decorators: [{ type: Self }, { type: Inject, args: [TuiObscuredService,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiObscuredDirective.prototype, "tuiObscuredEnabled", null);
__decorate([
    Output()
], TuiObscuredDirective.prototype, "tuiObscured", void 0);
TuiObscuredDirective = __decorate([
    Directive({
        selector: '[tuiObscured]',
        providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
    }),
    __param(0, Optional()),
    __param(0, Inject(TuiActiveZoneDirective)),
    __param(1, Self()),
    __param(1, Inject(TuiObscuredService))
], TuiObscuredDirective);
export { TuiObscuredDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL29ic2N1cmVkLyIsInNvdXJjZXMiOlsib2JzY3VyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUNILGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsdUJBQXVCLEdBQzFCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBYyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5Qzs7R0FFRztBQUtILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBWTdCLFlBR0ksVUFBeUMsRUFHekMsU0FBNkI7UUFqQmhCLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBbUIvQyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUMxQixHQUFHLENBQ0MsVUFBVSxDQUFDLEVBQUUsQ0FDVCxDQUFDLENBQUMsVUFBVTtZQUNaLENBQUMsQ0FBQyxVQUFVO2dCQUNSLENBQUMsVUFBVSxDQUFDLE1BQU07Z0JBQ2xCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUN0RSxDQUNKLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNqQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNwRCxDQUFDO0lBQ04sQ0FBQztJQTVCRCxJQUFJLGtCQUFrQixDQUFDLE9BQWdCO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0EyQkosQ0FBQTs7WUFuQm1CLHNCQUFzQix1QkFGakMsUUFBUSxZQUNSLE1BQU0sU0FBQyxzQkFBc0I7WUFJbkIsa0JBQWtCLHVCQUY1QixJQUFJLFlBQ0osTUFBTSxTQUFDLGtCQUFrQjs7QUFaOUI7SUFGQyxLQUFLLEVBQUU7SUFDUCxpQkFBaUIsRUFBRTs4REFHbkI7QUFHRDtJQURDLE1BQU0sRUFBRTt5REFDaUM7QUFWakMsb0JBQW9CO0lBSmhDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDO0tBQzlFLENBQUM7SUFjTyxXQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsV0FBQSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQTtJQUU5QixXQUFBLElBQUksRUFBRSxDQUFBO0lBQ04sV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtHQWpCdEIsb0JBQW9CLENBa0NoQztTQWxDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RlY29yYXRvcnMnO1xuaW1wb3J0IHtUdWlBY3RpdmVab25lRGlyZWN0aXZlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYWN0aXZlLXpvbmUnO1xuaW1wb3J0IHtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlPYnNjdXJlZFNlcnZpY2UsXG4gICAgVHVpUGFyZW50c1Njcm9sbFNlcnZpY2UsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtFTVBUWSwgT2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRoYXQgbW9uaXRvcnMgZWxlbWVudCB2aXNpYmlsaXR5XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aU9ic2N1cmVkXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpT2JzY3VyZWRTZXJ2aWNlLCBUdWlQYXJlbnRzU2Nyb2xsU2VydmljZSwgVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlPYnNjdXJlZERpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbmFibGVkJCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlSZXF1aXJlZFNldHRlcigpXG4gICAgc2V0IHR1aU9ic2N1cmVkRW5hYmxlZChlbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCQubmV4dChlbmFibGVkKTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlPYnNjdXJlZDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUpXG4gICAgICAgIGFjdGl2ZVpvbmU6IFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUgfCBudWxsLFxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpT2JzY3VyZWRTZXJ2aWNlKVxuICAgICAgICBvYnNjdXJlZCQ6IFR1aU9ic2N1cmVkU2VydmljZSxcbiAgICApIHtcbiAgICAgICAgY29uc3QgbWFwcGVkJCA9IG9ic2N1cmVkJC5waXBlKFxuICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgIG9ic2N1cmVkQnkgPT5cbiAgICAgICAgICAgICAgICAgICAgISFvYnNjdXJlZEJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICghYWN0aXZlWm9uZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIW9ic2N1cmVkQnkubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNjdXJlZEJ5LmV2ZXJ5KGVsZW1lbnQgPT4gIWFjdGl2ZVpvbmUuY29udGFpbnMoZWxlbWVudCkpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy50dWlPYnNjdXJlZCA9IHRoaXMuZW5hYmxlZCQucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcChlbmFibGVkID0+IChlbmFibGVkID8gbWFwcGVkJCA6IEVNUFRZKSksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19