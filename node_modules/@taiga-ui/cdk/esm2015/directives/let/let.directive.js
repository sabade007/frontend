import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { TuiLetContext } from './let-context';
/**
 * Works like *ngIf but does not have a condition â€” use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
let TuiLetDirective = class TuiLetDirective {
    constructor(viewContainer, templateRef) {
        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
};
TuiLetDirective.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
];
__decorate([
    Input()
], TuiLetDirective.prototype, "tuiLet", void 0);
TuiLetDirective = __decorate([
    Directive({
        selector: '[tuiLet]',
    }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(TemplateRef))
], TuiLetDirective);
export { TuiLetDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQvIiwic291cmNlcyI6WyJsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXRGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUM7OztHQUdHO0FBSUgsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUl4QixZQUM4QixhQUErQixFQUNwQyxXQUEwQztRQUUvRCxhQUFhLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksYUFBYSxDQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLHNCQUFzQixDQUN6QixJQUF3QixFQUN4QixJQUFhO1FBRWIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKLENBQUE7O1lBbEJnRCxnQkFBZ0IsdUJBQXhELE1BQU0sU0FBQyxnQkFBZ0I7WUFDVSxXQUFXLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7QUFKdkI7SUFEQyxLQUFLLEVBQUU7K0NBQ0c7QUFGRixlQUFlO0lBSDNCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCLENBQUM7SUFNTyxXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ3hCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBTmYsZUFBZSxDQXVCM0I7U0F2QlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7VHVpTGV0Q29udGV4dH0gZnJvbSAnLi9sZXQtY29udGV4dCc7XG5cbi8qKlxuICogV29ya3MgbGlrZSAqbmdJZiBidXQgZG9lcyBub3QgaGF2ZSBhIGNvbmRpdGlvbiDigJQgdXNlIGl0IHRvIGRlY2xhcmVcbiAqIHRoZSByZXN1bHQgb2YgcGlwZXMgY2FsY3VsYXRpb24gKGkuZS4gYXN5bmMgcGlwZSlcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpTGV0XScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUxldERpcmVjdGl2ZTxUPiB7XG4gICAgQElucHV0KClcbiAgICB0dWlMZXQhOiBUO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVmlld0NvbnRhaW5lclJlZikgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZikgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFR1aUxldENvbnRleHQ8VD4+LFxuICAgICkge1xuICAgICAgICB2aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZiwgbmV3IFR1aUxldENvbnRleHQ8VD4odGhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2VydHMgdGhlIGNvcnJlY3QgdHlwZSBvZiB0aGUgY29udGV4dCBmb3IgdGhlIHRlbXBsYXRlIHRoYXQgYFR1aUxldGAgd2lsbCByZW5kZXIuXG4gICAgICpcbiAgICAgKiBUaGUgcHJlc2VuY2Ugb2YgdGhpcyBtZXRob2QgaXMgYSBzaWduYWwgdG8gdGhlIEl2eSB0ZW1wbGF0ZSB0eXBlLWNoZWNrIGNvbXBpbGVyIHRoYXQgdGhlXG4gICAgICogYFR1aUxldGAgc3RydWN0dXJhbCBkaXJlY3RpdmUgcmVuZGVycyBpdHMgdGVtcGxhdGUgd2l0aCBhIHNwZWNpZmljIGNvbnRleHQgdHlwZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgbmdUZW1wbGF0ZUNvbnRleHRHdWFyZDxUPihcbiAgICAgICAgX2RpcjogVHVpTGV0RGlyZWN0aXZlPFQ+LFxuICAgICAgICBfY3R4OiB1bmtub3duLFxuICAgICk6IF9jdHggaXMgVHVpTGV0RGlyZWN0aXZlPEV4Y2x1ZGU8VCwgbnVsbCB8IHVuZGVmaW5lZD4+IHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIl19