import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
import { clamp } from '@taiga-ui/cdk/utils/math';
const MAX_VALUE = 0x10000;
export class TuiRepeatTimesContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
}
/**
 * Directive similar to ngFor but using a number of repetitions rather than an array
 *
 * {@link TuiRepeatTimesDirective.tuiRepeatTimesOf requested number of times}.
 * {@link TuiRepeatTimesContext context} for every instance of the template inherits outer context and stores
 * {@link TuiRepeatTimesContext.$implicit index} of a template instance.
 */
let TuiRepeatTimesDirective = class TuiRepeatTimesDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    set tuiRepeatTimesOf(count) {
        const safeCount = Math.floor(clamp(count, 0, MAX_VALUE));
        const { length } = this.viewContainer;
        if (count < length) {
            this.removeContainers(length - count);
        }
        else {
            this.addContainers(safeCount);
        }
    }
    addContainers(count) {
        for (let index = this.viewContainer.length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, new TuiRepeatTimesContext(index));
        }
    }
    removeContainers(amount) {
        for (let index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    }
};
TuiRepeatTimesDirective.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiRepeatTimesDirective.prototype, "tuiRepeatTimesOf", null);
TuiRepeatTimesDirective = __decorate([
    Directive({
        selector: '[tuiRepeatTimes][tuiRepeatTimesOf]',
    }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(TemplateRef))
], TuiRepeatTimesDirective);
export { TuiRepeatTimesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LXRpbWVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9yZXBlYXQtdGltZXMvIiwic291cmNlcyI6WyJyZXBlYXQtdGltZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRTNELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUvQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFFMUIsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixZQUFxQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQUcsQ0FBQztDQUM3QztBQUVEOzs7Ozs7R0FNRztBQUlILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBZWhDLFlBRXFCLGFBQStCLEVBRS9CLFdBQStDO1FBRi9DLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUUvQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0M7SUFDakUsQ0FBQztJQWpCSixJQUFJLGdCQUFnQixDQUFDLEtBQWE7UUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRXpELE1BQU0sRUFBQyxNQUFNLEVBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBRXBDLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQVNPLGFBQWEsQ0FBQyxLQUFhO1FBQy9CLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUNqQyxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUNuQyxDQUFDO1NBQ0w7SUFDTCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsTUFBYztRQUNuQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0I7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7WUFuQnVDLGdCQUFnQix1QkFEL0MsTUFBTSxTQUFDLGdCQUFnQjtZQUdNLFdBQVcsdUJBRHhDLE1BQU0sU0FBQyxXQUFXOztBQWZ2QjtJQUZDLEtBQUssRUFBRTtJQUNQLGlCQUFpQixFQUFFOytEQVduQjtBQWJRLHVCQUF1QjtJQUhuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsb0NBQW9DO0tBQ2pELENBQUM7SUFpQk8sV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUV4QixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQWxCZix1QkFBdUIsQ0FvQ25DO1NBcENZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RlY29yYXRvcnMnO1xuaW1wb3J0IHtUdWlDb250ZXh0V2l0aEltcGxpY2l0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtjbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcblxuY29uc3QgTUFYX1ZBTFVFID0gMHgxMDAwMDtcblxuZXhwb3J0IGNsYXNzIFR1aVJlcGVhdFRpbWVzQ29udGV4dCBpbXBsZW1lbnRzIFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8bnVtYmVyPiB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgJGltcGxpY2l0OiBudW1iZXIpIHt9XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHNpbWlsYXIgdG8gbmdGb3IgYnV0IHVzaW5nIGEgbnVtYmVyIG9mIHJlcGV0aXRpb25zIHJhdGhlciB0aGFuIGFuIGFycmF5XG4gKlxuICoge0BsaW5rIFR1aVJlcGVhdFRpbWVzRGlyZWN0aXZlLnR1aVJlcGVhdFRpbWVzT2YgcmVxdWVzdGVkIG51bWJlciBvZiB0aW1lc30uXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNDb250ZXh0IGNvbnRleHR9IGZvciBldmVyeSBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgaW5oZXJpdHMgb3V0ZXIgY29udGV4dCBhbmQgc3RvcmVzXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNDb250ZXh0LiRpbXBsaWNpdCBpbmRleH0gb2YgYSB0ZW1wbGF0ZSBpbnN0YW5jZS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUmVwZWF0VGltZXNdW3R1aVJlcGVhdFRpbWVzT2ZdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUmVwZWF0VGltZXNEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgdHVpUmVwZWF0VGltZXNPZihjb3VudDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNhZmVDb3VudCA9IE1hdGguZmxvb3IoY2xhbXAoY291bnQsIDAsIE1BWF9WQUxVRSkpO1xuXG4gICAgICAgIGNvbnN0IHtsZW5ndGh9ID0gdGhpcy52aWV3Q29udGFpbmVyO1xuXG4gICAgICAgIGlmIChjb3VudCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDb250YWluZXJzKGxlbmd0aCAtIGNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29udGFpbmVycyhzYWZlQ291bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVmlld0NvbnRhaW5lclJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBASW5qZWN0KFRlbXBsYXRlUmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxUdWlSZXBlYXRUaW1lc0NvbnRleHQ+LFxuICAgICkge31cblxuICAgIHByaXZhdGUgYWRkQ29udGFpbmVycyhjb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy52aWV3Q29udGFpbmVyLmxlbmd0aDsgaW5kZXggPCBjb3VudDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldzxUdWlSZXBlYXRUaW1lc0NvbnRleHQ+KFxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVSZWYsXG4gICAgICAgICAgICAgICAgbmV3IFR1aVJlcGVhdFRpbWVzQ29udGV4dChpbmRleCksXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVDb250YWluZXJzKGFtb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhbW91bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==