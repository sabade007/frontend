import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, NgZone, Output } from '@angular/core';
import { tuiZoneOptimized, typedFromEvent } from '@taiga-ui/cdk/observables';
import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { merge } from 'rxjs';
import { distinctUntilChanged, map, skip, startWith } from 'rxjs/operators';
/**
 * Directive to monitor focus/blur status, works with focusIn/focus-out
 * instead of focus/blur to sync events order with Internet Explorer and
 * other focus related directives that require bubbling
 */
let TuiFocusedDirective = class TuiFocusedDirective {
    constructor({ nativeElement }, ngZone) {
        this.tuiFocusedChange = merge(typedFromEvent(nativeElement, 'focusin'), typedFromEvent(nativeElement, 'focusout')).pipe(map(() => isNativeFocused(nativeElement)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(ngZone));
    }
};
TuiFocusedDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
];
__decorate([
    Output()
], TuiFocusedDirective.prototype, "tuiFocusedChange", void 0);
TuiFocusedDirective = __decorate([
    Directive({
        selector: '[tuiFocusedChange]',
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone))
], TuiFocusedDirective);
export { TuiFocusedDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXNlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZm9jdXNlZC8iLCJzb3VyY2VzIjpbImZvY3VzZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0UsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUU7Ozs7R0FJRztBQUlILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBSTVCLFlBRUksRUFBQyxhQUFhLEVBQTBCLEVBQ3hCLE1BQWM7UUFFOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FDekIsY0FBYyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsRUFDeEMsY0FBYyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FDNUMsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUN6QyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hCLG9CQUFvQixFQUFFLEVBQ3RCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FDM0IsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQWR3QixVQUFVLHVCQUQxQixNQUFNLFNBQUMsVUFBVTtZQUVNLE1BQU0sdUJBQTdCLE1BQU0sU0FBQyxNQUFNOztBQUxsQjtJQURDLE1BQU0sRUFBRTs2REFDc0M7QUFGdEMsbUJBQW1CO0lBSC9CLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7S0FDakMsQ0FBQztJQU1PLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRWxCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBUFYsbUJBQW1CLENBb0IvQjtTQXBCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBOZ1pvbmUsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVpvbmVPcHRpbWl6ZWQsIHR5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7aXNOYXRpdmVGb2N1c2VkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBza2lwLCBzdGFydFdpdGh9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdG8gbW9uaXRvciBmb2N1cy9ibHVyIHN0YXR1cywgd29ya3Mgd2l0aCBmb2N1c0luL2ZvY3VzLW91dFxuICogaW5zdGVhZCBvZiBmb2N1cy9ibHVyIHRvIHN5bmMgZXZlbnRzIG9yZGVyIHdpdGggSW50ZXJuZXQgRXhwbG9yZXIgYW5kXG4gKiBvdGhlciBmb2N1cyByZWxhdGVkIGRpcmVjdGl2ZXMgdGhhdCByZXF1aXJlIGJ1YmJsaW5nXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUZvY3VzZWRDaGFuZ2VdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRm9jdXNlZERpcmVjdGl2ZSB7XG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpRm9jdXNlZENoYW5nZTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICApIHtcbiAgICAgICAgdGhpcy50dWlGb2N1c2VkQ2hhbmdlID0gbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnZm9jdXNpbicpLFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2ZvY3Vzb3V0JyksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIG1hcCgoKSA9PiBpc05hdGl2ZUZvY3VzZWQobmF0aXZlRWxlbWVudCkpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKGZhbHNlKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICBza2lwKDEpLFxuICAgICAgICAgICAgdHVpWm9uZU9wdGltaXplZChuZ1pvbmUpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==