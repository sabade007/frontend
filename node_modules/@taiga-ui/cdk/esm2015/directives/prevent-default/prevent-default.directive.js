import { __decorate, __param } from "tslib";
import { Attribute, Directive, ElementRef, Inject, NgZone } from '@angular/core';
import { preventDefault, tuiZonefree } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { fromEvent, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * Simple prevent default on event directive when you do not need anything
 * else on event and do not want to trigger change detection
 * @dynamic
 */
let TuiPreventDefaultDirective = class TuiPreventDefaultDirective {
    constructor({ nativeElement }, ngZone, destroy$, eventName) {
        fromEvent(nativeElement, eventName, { passive: false })
            .pipe(tuiZonefree(ngZone), preventDefault(), takeUntil(destroy$))
            .subscribe();
    }
};
TuiPreventDefaultDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['tuiPreventDefault',] }] }
];
TuiPreventDefaultDirective = __decorate([
    Directive({
        selector: '[tuiPreventDefault]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Attribute('tuiPreventDefault'))
], TuiPreventDefaultDirective);
export { TuiPreventDefaultDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmVudC1kZWZhdWx0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9wcmV2ZW50LWRlZmF1bHQvIiwic291cmNlcyI6WyJwcmV2ZW50LWRlZmF1bHQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMsY0FBYyxFQUFFLFdBQVcsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6Qzs7OztHQUlHO0FBS0gsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUFDbkMsWUFDd0IsRUFBQyxhQUFhLEVBQTBCLEVBQzVDLE1BQWMsRUFDSCxRQUEwQixFQUNyQixTQUFpQjtRQUVqRCxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsQ0FBQzthQUNoRCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGNBQWMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoRSxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0osQ0FBQTs7WUFUNEMsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLFVBQVU7WUFDTSxNQUFNLHVCQUE3QixNQUFNLFNBQUMsTUFBTTtZQUN1QixVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCO3lDQUN4QixTQUFTLFNBQUMsbUJBQW1COztBQUx6QiwwQkFBMEI7SUFKdEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQixTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNqQyxDQUFDO0lBR08sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ3pCLFdBQUEsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUE7R0FMMUIsMEJBQTBCLENBV3RDO1NBWFksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBdHRyaWJ1dGUsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtwcmV2ZW50RGVmYXVsdCwgdHVpWm9uZWZyZWV9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge2Zyb21FdmVudCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIFNpbXBsZSBwcmV2ZW50IGRlZmF1bHQgb24gZXZlbnQgZGlyZWN0aXZlIHdoZW4geW91IGRvIG5vdCBuZWVkIGFueXRoaW5nXG4gKiBlbHNlIG9uIGV2ZW50IGFuZCBkbyBub3Qgd2FudCB0byB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb25cbiAqIEBkeW5hbWljXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVByZXZlbnREZWZhdWx0XScsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmV2ZW50RGVmYXVsdERpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgQEF0dHJpYnV0ZSgndHVpUHJldmVudERlZmF1bHQnKSBldmVudE5hbWU6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgZnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSwge3Bhc3NpdmU6IGZhbHNlfSlcbiAgICAgICAgICAgIC5waXBlKHR1aVpvbmVmcmVlKG5nWm9uZSksIHByZXZlbnREZWZhdWx0KCksIHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuIl19