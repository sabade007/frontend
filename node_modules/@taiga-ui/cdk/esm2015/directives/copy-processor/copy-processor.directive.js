import { __decorate, __param } from "tslib";
import { Directive, HostListener, Inject, Input } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiGetSelectedText } from '@taiga-ui/cdk/utils';
import { identity } from 'rxjs';
// @dynamic
let TuiCopyProcessorDirective = class TuiCopyProcessorDirective {
    constructor(windowRef) {
        this.windowRef = windowRef;
        this.tuiCopyProcessor = identity;
    }
    onCopy(event) {
        var _a;
        const text = tuiGetSelectedText(this.windowRef);
        if (text) {
            (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', this.tuiCopyProcessor(text));
        }
    }
};
TuiCopyProcessorDirective.ctorParameters = () => [
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCopyProcessorDirective.prototype, "tuiCopyProcessor", void 0);
__decorate([
    HostListener('copy.prevent', ['$event'])
], TuiCopyProcessorDirective.prototype, "onCopy", null);
TuiCopyProcessorDirective = __decorate([
    Directive({
        selector: '[tuiCopyProcessor]',
    }),
    __param(0, Inject(WINDOW))
], TuiCopyProcessorDirective);
export { TuiCopyProcessorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL2NvcHktcHJvY2Vzc29yLyIsInNvdXJjZXMiOlsiY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU5QixXQUFXO0FBSVgsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFLbEMsWUFBNkMsU0FBaUI7UUFBakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUY5RCxxQkFBZ0IsR0FBNkIsUUFBUSxDQUFDO0lBRVcsQ0FBQztJQUdsRSxNQUFNLENBQUMsS0FBcUI7O1FBQ3hCLE1BQU0sSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoRCxJQUFJLElBQUksRUFBRTtZQUNOLE1BQUEsS0FBSyxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7U0FDM0U7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7WUFWMkQsTUFBTSx1QkFBakQsTUFBTSxTQUFDLE1BQU07O0FBRjFCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsY0FBYyxFQUFFO21FQUNxQztBQUt0RDtJQURDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt1REFPeEM7QUFkUSx5QkFBeUI7SUFIckMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9CQUFvQjtLQUNqQyxDQUFDO0lBTWUsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7R0FMbEIseUJBQXlCLENBZXJDO1NBZlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RlY29yYXRvcnMnO1xuaW1wb3J0IHtUdWlTdHJpbmdIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcbmltcG9ydCB7dHVpR2V0U2VsZWN0ZWRUZXh0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzJztcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gJ3J4anMnO1xuXG4vLyBAZHluYW1pY1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpQ29weVByb2Nlc3Nvcl0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDb3B5UHJvY2Vzc29yRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgdHVpQ29weVByb2Nlc3NvcjogVHVpU3RyaW5nSGFuZGxlcjxzdHJpbmc+ID0gaWRlbnRpdHk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW5kb3dSZWY6IFdpbmRvdykge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NvcHkucHJldmVudCcsIFsnJGV2ZW50J10pXG4gICAgb25Db3B5KGV2ZW50OiBDbGlwYm9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdHVpR2V0U2VsZWN0ZWRUZXh0KHRoaXMud2luZG93UmVmKTtcblxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YT8uc2V0RGF0YSgndGV4dC9wbGFpbicsIHRoaXMudHVpQ29weVByb2Nlc3Nvcih0ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=