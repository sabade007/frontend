import { __decorate, __param } from "tslib";
import { Directive, EventEmitter, HostBinding, HostListener, Inject, Output, } from '@angular/core';
import { TuiDirectiveStylesService } from '@taiga-ui/cdk/services';
import { TuiAutofilledStyleComponent } from './autofilled-style.component';
let TuiAutofilledDirective = class TuiAutofilledDirective {
    constructor(directiveStyles) {
        this.autofilled = false;
        this.tuiAutofilledChange = new EventEmitter();
        directiveStyles.addComponent(TuiAutofilledStyleComponent);
    }
    transitionStartHandler({ propertyName, target }) {
        var _a;
        const matchedAutofill = propertyName.includes('box-shadow') && ((_a = target) === null || _a === void 0 ? void 0 : _a.matches('input'));
        if (matchedAutofill) {
            this.autofilled = !this.autofilled;
            this.tuiAutofilledChange.emit(this.autofilled);
        }
    }
};
TuiAutofilledDirective.ctorParameters = () => [
    { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] }
];
__decorate([
    HostBinding('class._autofilled')
], TuiAutofilledDirective.prototype, "autofilled", void 0);
__decorate([
    Output()
], TuiAutofilledDirective.prototype, "tuiAutofilledChange", void 0);
__decorate([
    HostListener('transitionstart', ['$event'])
], TuiAutofilledDirective.prototype, "transitionStartHandler", null);
TuiAutofilledDirective = __decorate([
    Directive({
        selector: '[tuiAutofilledChange]',
        host: { class: 'tui-autofill' },
    }),
    __param(0, Inject(TuiDirectiveStylesService))
], TuiAutofilledDirective);
export { TuiAutofilledDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZpbGxlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYXV0b2ZpbGxlZC8iLCJzb3VyY2VzIjpbImF1dG9maWxsZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFakUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFNekUsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFPL0IsWUFDdUMsZUFBMEM7UUFOakYsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUdWLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFLdkQsZUFBZSxDQUFDLFlBQVksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFHRCxzQkFBc0IsQ0FBQyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQWtCOztRQUMxRCxNQUFNLGVBQWUsR0FDakIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBSyxNQUFrQiwwQ0FBRSxPQUFPLENBQUMsT0FBTyxFQUFDLENBQUM7UUFFakYsSUFBSSxlQUFlLEVBQUU7WUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbkMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7WUFmMkQseUJBQXlCLHVCQUE1RSxNQUFNLFNBQUMseUJBQXlCOztBQU5yQztJQURDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQzswREFDZDtBQUduQjtJQURDLE1BQU0sRUFBRTttRUFDa0Q7QUFTM0Q7SUFEQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztvRUFTM0M7QUF0QlEsc0JBQXNCO0lBSmxDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLGNBQWMsRUFBQztLQUNoQyxDQUFDO0lBU08sV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtHQVI3QixzQkFBc0IsQ0F1QmxDO1NBdkJZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuXG5pbXBvcnQge1R1aUF1dG9maWxsZWRTdHlsZUNvbXBvbmVudH0gZnJvbSAnLi9hdXRvZmlsbGVkLXN0eWxlLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUF1dG9maWxsZWRDaGFuZ2VdJyxcbiAgICBob3N0OiB7Y2xhc3M6ICd0dWktYXV0b2ZpbGwnfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQXV0b2ZpbGxlZERpcmVjdGl2ZSB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fYXV0b2ZpbGxlZCcpXG4gICAgYXV0b2ZpbGxlZCA9IGZhbHNlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpQXV0b2ZpbGxlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2UpIGRpcmVjdGl2ZVN0eWxlczogVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZSxcbiAgICApIHtcbiAgICAgICAgZGlyZWN0aXZlU3R5bGVzLmFkZENvbXBvbmVudChUdWlBdXRvZmlsbGVkU3R5bGVDb21wb25lbnQpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3RyYW5zaXRpb25zdGFydCcsIFsnJGV2ZW50J10pXG4gICAgdHJhbnNpdGlvblN0YXJ0SGFuZGxlcih7cHJvcGVydHlOYW1lLCB0YXJnZXR9OiBUcmFuc2l0aW9uRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlZEF1dG9maWxsID1cbiAgICAgICAgICAgIHByb3BlcnR5TmFtZS5pbmNsdWRlcygnYm94LXNoYWRvdycpICYmICh0YXJnZXQgYXMgRWxlbWVudCk/Lm1hdGNoZXMoJ2lucHV0Jyk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWRBdXRvZmlsbCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvZmlsbGVkID0gIXRoaXMuYXV0b2ZpbGxlZDtcbiAgICAgICAgICAgIHRoaXMudHVpQXV0b2ZpbGxlZENoYW5nZS5lbWl0KHRoaXMuYXV0b2ZpbGxlZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=