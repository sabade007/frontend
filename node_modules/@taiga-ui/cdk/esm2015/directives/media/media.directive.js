import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function nonNegativeFiniteAssertion(value) {
    return Number.isFinite(value) && value >= 0;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
export function volumeAssertion(volume) {
    return Number.isFinite(volume) && volume >= 0 && volume <= 1;
}
let TuiMediaDirective = class TuiMediaDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.playbackRate = 1;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
    }
    set playbackRateSetter(playbackRate) {
        this.updatePlaybackRate(playbackRate);
    }
    set currentTime(currentTime) {
        if (Math.abs(currentTime - this.currentTime) > 0.05) {
            this.elementRef.nativeElement.currentTime = currentTime;
        }
    }
    get currentTime() {
        return this.elementRef.nativeElement.currentTime;
    }
    set paused(paused) {
        if (paused) {
            this.elementRef.nativeElement.pause();
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.elementRef.nativeElement.play();
            this.updatePlaybackRate(this.playbackRate);
        }
    }
    get paused() {
        return this.elementRef.nativeElement.paused;
    }
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    onPausedChange(paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    }
    onVolumeChange() {
        this.volume = this.elementRef.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    }
    onCurrentTimeChange() {
        this.currentTimeChange.emit(this.currentTime);
    }
    changeDetectionTrigger() {
        // @bad TODO: consider if other events need to trigger CD
    }
    updatePlaybackRate(playbackRate) {
        this.playbackRate = playbackRate;
        this.elementRef.nativeElement.playbackRate = this.playbackRate;
    }
};
TuiMediaDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input(),
    HostBinding('volume'),
    tuiDefaultProp(volumeAssertion)
], TuiMediaDirective.prototype, "volume", void 0);
__decorate([
    Input('playbackRate'),
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "playbackRateSetter", null);
__decorate([
    Input(),
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "currentTime", null);
__decorate([
    Input()
], TuiMediaDirective.prototype, "paused", null);
__decorate([
    Output()
], TuiMediaDirective.prototype, "currentTimeChange", void 0);
__decorate([
    Output()
], TuiMediaDirective.prototype, "pausedChange", void 0);
__decorate([
    Output()
], TuiMediaDirective.prototype, "volumeChange", void 0);
__decorate([
    HostListener('ended', ['true']),
    HostListener('pause', ['true']),
    HostListener('play', ['false'])
], TuiMediaDirective.prototype, "onPausedChange", null);
__decorate([
    HostListener('volumechange')
], TuiMediaDirective.prototype, "onVolumeChange", null);
__decorate([
    HostListener('timeupdate'),
    HostListener('seeking'),
    HostListener('seeked')
], TuiMediaDirective.prototype, "onCurrentTimeChange", null);
__decorate([
    HostListener('durationchange')
], TuiMediaDirective.prototype, "changeDetectionTrigger", null);
TuiMediaDirective = __decorate([
    Directive({
        selector: 'video[tuiMedia], audio[tuiMedia]',
        exportAs: 'tuiMedia',
    }),
    __param(0, Inject(ElementRef))
], TuiMediaDirective);
export { TuiMediaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL21lZGlhLyIsInNvdXJjZXMiOlsibWVkaWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFM0UsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxLQUFhO0lBQ3BELE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFjO0lBQzFDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDakUsQ0FBQztBQU1ELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBa0QxQixZQUVxQixVQUF3QztRQUF4QyxlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQW5EckQsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFLekIsV0FBTSxHQUFHLENBQUMsQ0FBQztRQW9DRixzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRy9DLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUczQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFLaEQsQ0FBQztJQTNDSixJQUFJLGtCQUFrQixDQUFDLFlBQW9CO1FBQ3ZDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENB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QUM7K0RBRzlCO0FBaEZRLGlCQUFpQjtJQUo3QixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsa0NBQWtDO1FBQzVDLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCLENBQUM7SUFvRE8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7R0FuRGQsaUJBQWlCLENBc0Y3QjtTQXRGWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCB0dWlSZXF1aXJlZFNldHRlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIG5vbk5lZ2F0aXZlRmluaXRlQXNzZXJ0aW9uKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSAmJiB2YWx1ZSA+PSAwO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdm9sdW1lQXNzZXJ0aW9uKHZvbHVtZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2b2x1bWUpICYmIHZvbHVtZSA+PSAwICYmIHZvbHVtZSA8PSAxO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3ZpZGVvW3R1aU1lZGlhXSwgYXVkaW9bdHVpTWVkaWFdJyxcbiAgICBleHBvcnRBczogJ3R1aU1lZGlhJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTWVkaWFEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcGxheWJhY2tSYXRlID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCd2b2x1bWUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCh2b2x1bWVBc3NlcnRpb24pXG4gICAgdm9sdW1lID0gMTtcblxuICAgIEBJbnB1dCgncGxheWJhY2tSYXRlJylcbiAgICBAdHVpUmVxdWlyZWRTZXR0ZXIobm9uTmVnYXRpdmVGaW5pdGVBc3NlcnRpb24pXG4gICAgc2V0IHBsYXliYWNrUmF0ZVNldHRlcihwbGF5YmFja1JhdGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKG5vbk5lZ2F0aXZlRmluaXRlQXNzZXJ0aW9uKVxuICAgIHNldCBjdXJyZW50VGltZShjdXJyZW50VGltZTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50VGltZSAtIHRoaXMuY3VycmVudFRpbWUpID4gMC4wNSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBjdXJyZW50VGltZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY3VycmVudFRpbWU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgcGF1c2VkKHBhdXNlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAocGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wYXVzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGxheSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHBhdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBhdXNlZDtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBjdXJyZW50VGltZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgcGF1c2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdm9sdW1lQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTE1lZGlhRWxlbWVudD4sXG4gICAgKSB7fVxuXG4gICAgLy8gQGJhZCBUT0RPOiBNYWtlIHN1cmUgbm8gb3RoZXIgZXZlbnRzIGNhbiBhZmZlY3QgdGhpcyBsaWtlIG5ldHdvcmsgaXNzdWVzIGV0Yy5cbiAgICBASG9zdExpc3RlbmVyKCdlbmRlZCcsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ3BhdXNlJywgWyd0cnVlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcigncGxheScsIFsnZmFsc2UnXSlcbiAgICBvblBhdXNlZENoYW5nZShwYXVzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXVzZWRDaGFuZ2UuZW1pdChwYXVzZWQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYXliYWNrUmF0ZSh0aGlzLnBsYXliYWNrUmF0ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigndm9sdW1lY2hhbmdlJylcbiAgICBvblZvbHVtZUNoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52b2x1bWUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52b2x1bWU7XG4gICAgICAgIHRoaXMudm9sdW1lQ2hhbmdlLmVtaXQodGhpcy52b2x1bWUpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3RpbWV1cGRhdGUnKVxuICAgIEBIb3N0TGlzdGVuZXIoJ3NlZWtpbmcnKVxuICAgIEBIb3N0TGlzdGVuZXIoJ3NlZWtlZCcpXG4gICAgb25DdXJyZW50VGltZUNoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZUNoYW5nZS5lbWl0KHRoaXMuY3VycmVudFRpbWUpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2R1cmF0aW9uY2hhbmdlJylcbiAgICBjaGFuZ2VEZXRlY3Rpb25UcmlnZ2VyKCk6IHZvaWQge1xuICAgICAgICAvLyBAYmFkIFRPRE86IGNvbnNpZGVyIGlmIG90aGVyIGV2ZW50cyBuZWVkIHRvIHRyaWdnZXIgQ0RcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnBsYXliYWNrUmF0ZSA9IHBsYXliYWNrUmF0ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGxheWJhY2tSYXRlID0gdGhpcy5wbGF5YmFja1JhdGU7XG4gICAgfVxufVxuIl19