import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, OnChanges, OnDestroy, TemplateRef, ViewContainerRef, } from '@angular/core';
import { from, of, Subject } from 'rxjs';
import { concatMap, delay, takeUntil } from 'rxjs/operators';
let TuiForAsyncDirective = class TuiForAsyncDirective {
    constructor(view, template) {
        this.view = view;
        this.template = template;
        this.destroy$ = new Subject();
        this.tuiForAsyncTimeout = 10;
    }
    ngOnChanges() {
        this.clearViewForOldNodes();
        this.createAsyncViewForNewNodes();
    }
    ngOnDestroy() {
        this.clearViewForOldNodes();
        this.destroy$.complete();
    }
    createAsyncViewForNewNodes() {
        from((this.tuiForAsyncOf || []).entries())
            .pipe(concatMap(entry => of(entry).pipe(delay(this.tuiForAsyncTimeout))), takeUntil(this.destroy$))
            .subscribe(([index, item]) => this.view
            .createEmbeddedView(this.template, { $implicit: item, index }, index)
            .detectChanges());
    }
    clearViewForOldNodes() {
        this.destroy$.next();
        this.view.clear();
    }
};
TuiForAsyncDirective.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
];
__decorate([
    Input()
], TuiForAsyncDirective.prototype, "tuiForAsyncOf", void 0);
__decorate([
    Input()
], TuiForAsyncDirective.prototype, "tuiForAsyncTimeout", void 0);
TuiForAsyncDirective = __decorate([
    Directive({ selector: '[tuiForAsync][tuiForAsyncOf]' }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(TemplateRef))
], TuiForAsyncDirective);
export { TuiForAsyncDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWFzeW5jLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9mb3ItYXN5bmMvIiwic291cmNlcyI6WyJmb3ItYXN5bmMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUczRCxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQVM3QixZQUMrQyxJQUFzQixFQUMzQixRQUE4QjtRQUR6QixTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQVZ2RCxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU1oRCx1QkFBa0IsR0FBRyxFQUFFLENBQUM7SUFLckIsQ0FBQztJQUVKLFdBQVc7UUFDUCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLDBCQUEwQjtRQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3JDLElBQUksQ0FDRCxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQ2xFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCO2FBQ0EsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUN6QixJQUFJLENBQUMsSUFBSTthQUNKLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxFQUFFLEtBQUssQ0FBQzthQUNsRSxhQUFhLEVBQUUsQ0FDdkIsQ0FBQztJQUNWLENBQUM7SUFFTyxvQkFBb0I7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7Q0FDSixDQUFBOztZQS9Cd0QsZ0JBQWdCLHVCQUFoRSxNQUFNLFNBQUMsZ0JBQWdCO1lBQ3dCLFdBQVcsdUJBQTFELE1BQU0sU0FBQyxXQUFXOztBQVB2QjtJQURDLEtBQUssRUFBRTsyREFDdUM7QUFHL0M7SUFEQyxLQUFLLEVBQUU7Z0VBQ2dCO0FBUGYsb0JBQW9CO0lBRGhDLFNBQVMsQ0FBQyxFQUFDLFFBQVEsRUFBRSw4QkFBOEIsRUFBQyxDQUFDO0lBVzdDLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDeEIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7R0FYZixvQkFBb0IsQ0F5Q2hDO1NBekNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25EZXN0cm95LFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtmcm9tLCBvZiwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NvbmNhdE1hcCwgZGVsYXksIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1t0dWlGb3JBc3luY11bdHVpRm9yQXN5bmNPZl0nfSlcbmV4cG9ydCBjbGFzcyBUdWlGb3JBc3luY0RpcmVjdGl2ZTxUPiBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgdHVpRm9yQXN5bmNPZjogcmVhZG9ubHkgVFtdIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAgIEBJbnB1dCgpXG4gICAgdHVpRm9yQXN5bmNUaW1lb3V0ID0gMTA7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKSBwcml2YXRlIHJlYWRvbmx5IHZpZXc6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHVua25vd24+LFxuICAgICkge31cblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsZWFyVmlld0Zvck9sZE5vZGVzKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQXN5bmNWaWV3Rm9yTmV3Tm9kZXMoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGVhclZpZXdGb3JPbGROb2RlcygpO1xuICAgICAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBc3luY1ZpZXdGb3JOZXdOb2RlcygpOiB2b2lkIHtcbiAgICAgICAgZnJvbSgodGhpcy50dWlGb3JBc3luY09mIHx8IFtdKS5lbnRyaWVzKCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjb25jYXRNYXAoZW50cnkgPT4gb2YoZW50cnkpLnBpcGUoZGVsYXkodGhpcy50dWlGb3JBc3luY1RpbWVvdXQpKSksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoW2luZGV4LCBpdGVtXSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlLCB7JGltcGxpY2l0OiBpdGVtLCBpbmRleH0sIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAuZGV0ZWN0Q2hhbmdlcygpLFxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFyVmlld0Zvck9sZE5vZGVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICAgICAgdGhpcy52aWV3LmNsZWFyKCk7XG4gICAgfVxufVxuIl19