import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { dragAndDropFrom } from '@taiga-ui/cdk/observables';
import { filter, map } from 'rxjs/operators';
let TuiDragDirective = class TuiDragDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.dragAndDropFrom$ = dragAndDropFrom(this.elementRef.nativeElement);
        this.start = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 0 /* Start */), map(({ event }) => event));
        this.continues = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 1 /* Continues */), map(({ event }) => event));
        this.end = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 2 /* End */), map(({ event }) => event));
    }
};
TuiDragDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Output('tuiDragStart')
], TuiDragDirective.prototype, "start", void 0);
__decorate([
    Output('tuiDragContinues')
], TuiDragDirective.prototype, "continues", void 0);
__decorate([
    Output('tuiDragEnd')
], TuiDragDirective.prototype, "end", void 0);
TuiDragDirective = __decorate([
    Directive({
        selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
    }),
    __param(0, Inject(ElementRef))
], TuiDragDirective);
export { TuiDragDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZHJhZy8iLCJzb3VyY2VzIjpbImRyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxlQUFlLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxPQUFPLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBSzNDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBcUJ6QixZQUVxQixVQUErQjtRQUEvQixlQUFVLEdBQVYsVUFBVSxDQUFxQjtRQXRCbkMscUJBQWdCLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFHMUUsVUFBSyxHQUEyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUMvRCxNQUFNLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLGtCQUF1QixDQUFDLEVBQ2pELEdBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUFDO1FBR08sY0FBUyxHQUEyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUNuRSxNQUFNLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLHNCQUEyQixDQUFDLEVBQ3JELEdBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUFDO1FBR08sUUFBRyxHQUEyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUM3RCxNQUFNLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLGdCQUFxQixDQUFDLEVBQy9DLEdBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUFDO0lBS0MsQ0FBQztDQUNQLENBQUE7O1lBRm9DLFVBQVUsdUJBRHRDLE1BQU0sU0FBQyxVQUFVOztBQWxCdEI7SUFEQyxNQUFNLENBQUMsY0FBYyxDQUFDOytDQUlyQjtBQUdGO0lBREMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO21EQUl6QjtBQUdGO0lBREMsTUFBTSxDQUFDLFlBQVksQ0FBQzs2Q0FJbkI7QUFuQk8sZ0JBQWdCO0lBSDVCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxrREFBa0Q7S0FDL0QsQ0FBQztJQXVCTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQXRCZCxnQkFBZ0IsQ0F5QjVCO1NBekJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2RyYWdBbmREcm9wRnJvbSwgVHVpRHJhZ1N0YWdlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aURyYWdTdGFydF0sIFt0dWlEcmFnQ29udGludWVzXSwgW3R1aURyYWdFbmRdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJhZ0RpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkcmFnQW5kRHJvcEZyb20kID0gZHJhZ0FuZERyb3BGcm9tKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblxuICAgIEBPdXRwdXQoJ3R1aURyYWdTdGFydCcpXG4gICAgcmVhZG9ubHkgc3RhcnQ6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmRyYWdBbmREcm9wRnJvbSQucGlwZShcbiAgICAgICAgZmlsdGVyKCh7c3RhZ2V9KSA9PiBzdGFnZSA9PT0gVHVpRHJhZ1N0YWdlLlN0YXJ0KSxcbiAgICAgICAgbWFwKCh7ZXZlbnR9KSA9PiBldmVudCksXG4gICAgKTtcblxuICAgIEBPdXRwdXQoJ3R1aURyYWdDb250aW51ZXMnKVxuICAgIHJlYWRvbmx5IGNvbnRpbnVlczogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiA9IHRoaXMuZHJhZ0FuZERyb3BGcm9tJC5waXBlKFxuICAgICAgICBmaWx0ZXIoKHtzdGFnZX0pID0+IHN0YWdlID09PSBUdWlEcmFnU3RhZ2UuQ29udGludWVzKSxcbiAgICAgICAgbWFwKCh7ZXZlbnR9KSA9PiBldmVudCksXG4gICAgKTtcblxuICAgIEBPdXRwdXQoJ3R1aURyYWdFbmQnKVxuICAgIHJlYWRvbmx5IGVuZDogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiA9IHRoaXMuZHJhZ0FuZERyb3BGcm9tJC5waXBlKFxuICAgICAgICBmaWx0ZXIoKHtzdGFnZX0pID0+IHN0YWdlID09PSBUdWlEcmFnU3RhZ2UuRW5kKSxcbiAgICAgICAgbWFwKCh7ZXZlbnR9KSA9PiBldmVudCksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxFbGVtZW50PixcbiAgICApIHt9XG59XG4iXX0=