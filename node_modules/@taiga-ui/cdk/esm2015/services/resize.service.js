import { __decorate, __param } from "tslib";
import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { RESIZE_OBSERVER_SUPPORT, RESIZE_OPTION_BOX, ResizeObserverService, } from '@ng-web-apis/resize-observer';
import { EMPTY_ARRAY, POLLING_TIME } from '@taiga-ui/cdk/constants';
import { tuiZonefree } from '@taiga-ui/cdk/observables';
import { Observable } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, map, mapTo, takeUntil, throttleTime, } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
// @dynamic
let TuiResizeService = class TuiResizeService extends ResizeObserverService {
    constructor(elementRef, ngZone, destroy$, support, box, animationFrame$) {
        super(elementRef, ngZone, support, box);
        return this.pipe(catchError(() => animationFrame$.pipe(throttleTime(POLLING_TIME), map(() => `${elementRef.nativeElement.clientWidth} ${elementRef.nativeElement.clientHeight}`), distinctUntilChanged(), mapTo(EMPTY_ARRAY))), debounceTime(0), tuiZonefree(ngZone), takeUntil(destroy$));
    }
};
TuiResizeService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] }
];
TuiResizeService = __decorate([
    Injectable(),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(RESIZE_OBSERVER_SUPPORT)),
    __param(4, Inject(RESIZE_OPTION_BOX)),
    __param(5, Inject(ANIMATION_FRAME))
], TuiResizeService);
export { TuiResizeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsicmVzaXplLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLHFCQUFxQixHQUN4QixNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFBQyxXQUFXLEVBQUUsWUFBWSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbEUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUNILFVBQVUsRUFDVixZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLEdBQUcsRUFDSCxLQUFLLEVBQ0wsU0FBUyxFQUNULFlBQVksR0FDZixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXBELFdBQVc7QUFFWCxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFpQixTQUFRLHFCQUFxQjtJQUN2RCxZQUN3QixVQUFtQyxFQUN2QyxNQUFjLEVBQ0gsUUFBMEIsRUFDcEIsT0FBZ0IsRUFDdEIsR0FBaUMsRUFDbkMsZUFBbUM7UUFFNUQsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FDWixVQUFVLENBQUMsR0FBRyxFQUFFLENBQ1osZUFBZSxDQUFDLElBQUksQ0FDaEIsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUMxQixHQUFHLENBQ0MsR0FBRyxFQUFFLENBQ0QsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUN6RixFQUNELG9CQUFvQixFQUFFLEVBQ3RCLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FDckIsQ0FDSixFQUNELFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDZixXQUFXLENBQUMsTUFBTSxDQUFDLEVBQ25CLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQTFCdUMsVUFBVSx1QkFBekMsTUFBTSxTQUFDLFVBQVU7WUFDTSxNQUFNLHVCQUE3QixNQUFNLFNBQUMsTUFBTTtZQUN1QixVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCOzBDQUN4QixNQUFNLFNBQUMsdUJBQXVCOzRDQUM5QixNQUFNLFNBQUMsaUJBQWlCO1lBQ2lCLFVBQVUsdUJBQW5ELE1BQU0sU0FBQyxlQUFlOztBQVBsQixnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0lBR0osV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ3pCLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDL0IsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN6QixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtHQVBuQixnQkFBZ0IsQ0E0QjVCO1NBNUJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUV9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBSRVNJWkVfT0JTRVJWRVJfU1VQUE9SVCxcbiAgICBSRVNJWkVfT1BUSU9OX0JPWCxcbiAgICBSZXNpemVPYnNlcnZlclNlcnZpY2UsXG59IGZyb20gJ0BuZy13ZWItYXBpcy9yZXNpemUtb2JzZXJ2ZXInO1xuaW1wb3J0IHtFTVBUWV9BUlJBWSwgUE9MTElOR19USU1FfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NvbnN0YW50cyc7XG5pbXBvcnQge3R1aVpvbmVmcmVlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGNhdGNoRXJyb3IsXG4gICAgZGVib3VuY2VUaW1lLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIG1hcCxcbiAgICBtYXBUbyxcbiAgICB0YWtlVW50aWwsXG4gICAgdGhyb3R0bGVUaW1lLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJy4vZGVzdHJveS5zZXJ2aWNlJztcblxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlSZXNpemVTZXJ2aWNlIGV4dGVuZHMgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgQEluamVjdChSRVNJWkVfT0JTRVJWRVJfU1VQUE9SVCkgc3VwcG9ydDogYm9vbGVhbixcbiAgICAgICAgQEluamVjdChSRVNJWkVfT1BUSU9OX0JPWCkgYm94OiBSZXNpemVPYnNlcnZlck9wdGlvbnNbJ2JveCddLFxuICAgICAgICBASW5qZWN0KEFOSU1BVElPTl9GUkFNRSkgYW5pbWF0aW9uRnJhbWUkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIG5nWm9uZSwgc3VwcG9ydCwgYm94KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoKSA9PlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lJC5waXBlKFxuICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZVRpbWUoUE9MTElOR19USU1FKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGh9ICR7ZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodH1gLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXBUbyhFTVBUWV9BUlJBWSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgICAgICB0dWlab25lZnJlZShuZ1pvbmUpLFxuICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=