import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, mapTo, repeat, shareReplay, startWith, switchMapTo, take, withLatestFrom, } from 'rxjs/operators';
import { tuiIsAlive } from './is-alive';
import { typedFromEvent } from './typed-from-event';
let documentMouseUpIsAlive$;
let documentMouseDownIsAlive$;
/**
 * @deprecated: use {@link tuiFocusVisibleObservable} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function focusVisibleObservable(element) {
    const elementBlur$ = typedFromEvent(element, `blur`);
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, `mouseup`, {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
        documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, `mousedown`, {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(typedFromEvent(element, `focus`).pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(() => !isNativeFocused(element)), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, (_event, elementActual, documentActual) => elementActual || documentActual), filter(isUserFocus => !isUserFocus))).pipe(switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))), distinctUntilChanged());
}
export const tuiFocusVisibleObservable = focusVisibleObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImZvY3VzLXZpc2libGUtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sY0FBYyxFQUNkLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxFQUNKLGNBQWMsR0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxJQUFJLHVCQUE0QyxDQUFDO0FBQ2pELElBQUkseUJBQThDLENBQUM7QUFFbkQ7O0dBRUc7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE9BQWdCO0lBQ25ELE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsTUFBTSxFQUFDLGFBQWEsRUFBQyxHQUFHLE9BQU8sQ0FBQztJQUVoQyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2hCLE1BQU0sSUFBSSx5QkFBeUIsRUFBRSxDQUFDO0tBQ3pDO0lBRUQsSUFBSSxDQUFDLHlCQUF5QixJQUFJLENBQUMsdUJBQXVCLEVBQUU7UUFDeEQsdUJBQXVCLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUU7WUFDL0QsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDLElBQUksQ0FDSCxVQUFVLEVBQUUsRUFDWixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hCLFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQy9DLENBQUM7UUFDRix5QkFBeUIsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRTtZQUNuRSxPQUFPLEVBQUUsSUFBSTtTQUNoQixDQUFDLENBQUMsSUFBSSxDQUNILFVBQVUsRUFBRSxFQUNaLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFDaEIsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FDL0MsQ0FBQztLQUNMO0lBRUQsT0FBTyxLQUFLO0lBQ1IsaUVBQWlFO0lBQ2pFLE1BQU0sQ0FDRixjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsa0dBQWtHO0lBQ2xHLFlBQVksQ0FBQyxJQUFJLENBQ2IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxjQUFjLEVBQUUsQ0FDbkIsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLEVBQUUsRUFDUixjQUFjLENBQ1YseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2QixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLEVBQUUsQ0FDdEMsYUFBYSxJQUFJLGNBQWMsQ0FDdEMsRUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUN0QyxDQUNKLENBQUMsSUFBSSxDQUNGLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDdEUsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxzQkFBc0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9leGNlcHRpb25zJztcbmltcG9ydCB7aXNOYXRpdmVGb2N1c2VkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcbmltcG9ydCB7Y29uY2F0LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBpZ25vcmVFbGVtZW50cyxcbiAgICBtYXBUbyxcbiAgICByZXBlYXQsXG4gICAgc2hhcmVSZXBsYXksXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcFRvLFxuICAgIHRha2UsXG4gICAgd2l0aExhdGVzdEZyb20sXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHt0dWlJc0FsaXZlfSBmcm9tICcuL2lzLWFsaXZlJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmxldCBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcbmxldCBkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUZvY3VzVmlzaWJsZU9ic2VydmFibGV9IGluc3RlYWRcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZU9ic2VydmFibGUoZWxlbWVudDogRWxlbWVudCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGVsZW1lbnRCbHVyJCA9IHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsIGBibHVyYCk7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIGlmICghZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCB8fCAhZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQpIHtcbiAgICAgICAgZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQgPSB0eXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCBgbW91c2V1cGAsIHtcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIH0pLnBpcGUoXG4gICAgICAgICAgICB0dWlJc0FsaXZlKCksXG4gICAgICAgICAgICBzdGFydFdpdGgoZmFsc2UpLFxuICAgICAgICAgICAgc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSksXG4gICAgICAgICk7XG4gICAgICAgIGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQgPSB0eXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCBgbW91c2Vkb3duYCwge1xuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgfSkucGlwZShcbiAgICAgICAgICAgIHR1aUlzQWxpdmUoKSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgICAgICBzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgIC8vIGZvY3VzIGV2ZW50cyBleGNsdWRpbmcgb25lcyB0aGF0IGNhbWUgcmlnaHQgYWZ0ZXIgbW91c2UgYWN0aW9uXG4gICAgICAgIGNvbmNhdChcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsIGBmb2N1c2ApLnBpcGUodGFrZSgxKSksXG4gICAgICAgICAgICAvLyBmaWx0ZXJpbmcgb3V0IGJsdXIgZXZlbnRzIHdoZW4gZWxlbWVudCByZW1haW5zIGZvY3VzZWQgc28gdGhhdCB3ZSBpZ25vcmUgYnJvd3NlciB0YWIgZm9jdXMgbG9zc1xuICAgICAgICAgICAgZWxlbWVudEJsdXIkLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKCgpID0+ICFpc05hdGl2ZUZvY3VzZWQoZWxlbWVudCkpLFxuICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgaWdub3JlRWxlbWVudHMoKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIHJlcGVhdCgpLFxuICAgICAgICAgICAgd2l0aExhdGVzdEZyb20oXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCxcbiAgICAgICAgICAgICAgICBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCxcbiAgICAgICAgICAgICAgICAoX2V2ZW50LCBlbGVtZW50QWN0dWFsLCBkb2N1bWVudEFjdHVhbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudEFjdHVhbCB8fCBkb2N1bWVudEFjdHVhbCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmaWx0ZXIoaXNVc2VyRm9jdXMgPT4gIWlzVXNlckZvY3VzKSxcbiAgICAgICAgKSxcbiAgICApLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcFRvKGVsZW1lbnRCbHVyJC5waXBlKG1hcFRvKGZhbHNlKSwgdGFrZSgxKSwgc3RhcnRXaXRoKHRydWUpKSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aUZvY3VzVmlzaWJsZU9ic2VydmFibGUgPSBmb2N1c1Zpc2libGVPYnNlcnZhYmxlO1xuIl19