import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { concat, merge } from 'rxjs';
import { endWith, map, repeat, take, takeWhile } from 'rxjs/operators';
import { mouseDragFinishFrom } from './mouse-drag-finish-from';
import { typedFromEvent } from './typed-from-event';
export var TuiDragStage;
(function (TuiDragStage) {
    TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
    TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
    TuiDragStage[TuiDragStage["End"] = 2] = "End";
})(TuiDragStage || (TuiDragStage = {}));
export class TuiDragState {
    constructor(stage, event) {
        this.stage = stage;
        this.event = event;
    }
}
/**
 * @deprecated: use {@link tuiDragAndDropFrom} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function dragAndDropFrom(element) {
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    return concat(typedFromEvent(element, `mousedown`).pipe(take(1), map(event => new TuiDragState(0 /* Start */, event))), merge(typedFromEvent(ownerDocument, `mousemove`).pipe(map(event => new TuiDragState(1 /* Continues */, event))), mouseDragFinishFrom(ownerDocument).pipe(take(1), map(event => new TuiDragState(2 /* End */, event)), endWith(null))).pipe(takeWhile(isPresent))).pipe(repeat());
}
export const tuiDragAndDropFrom = dragAndDropFrom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1mcm9tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImRyYWctYW5kLWRyb3AtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDNUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbEQsTUFBTSxDQUFOLElBQWtCLFlBSWpCO0FBSkQsV0FBa0IsWUFBWTtJQUMxQixpREFBSyxDQUFBO0lBQ0wseURBQVMsQ0FBQTtJQUNULDZDQUFHLENBQUE7QUFDUCxDQUFDLEVBSmlCLFlBQVksS0FBWixZQUFZLFFBSTdCO0FBRUQsTUFBTSxPQUFPLFlBQVk7SUFDckIsWUFBcUIsS0FBbUIsRUFBVyxLQUFpQjtRQUEvQyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQVcsVUFBSyxHQUFMLEtBQUssQ0FBWTtJQUFHLENBQUM7Q0FDM0U7QUFFRDs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQWdCO0lBQzVDLE1BQU0sRUFBQyxhQUFhLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFaEMsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLElBQUkseUJBQXlCLEVBQUUsQ0FBQztLQUN6QztJQUVELE9BQU8sTUFBTSxDQUNULGNBQWMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLGdCQUFxQixLQUFLLENBQUMsQ0FBQyxDQUM1RCxFQUNELEtBQUssQ0FDRCxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLG9CQUF5QixLQUFLLENBQUMsQ0FBQyxDQUNoRSxFQUNELG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxjQUFtQixLQUFLLENBQUMsQ0FBQyxFQUN2RCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQ2hCLENBQ0osQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQy9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9leGNlcHRpb25zJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtjb25jYXQsIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZW5kV2l0aCwgbWFwLCByZXBlYXQsIHRha2UsIHRha2VXaGlsZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge21vdXNlRHJhZ0ZpbmlzaEZyb219IGZyb20gJy4vbW91c2UtZHJhZy1maW5pc2gtZnJvbSc7XG5pbXBvcnQge3R5cGVkRnJvbUV2ZW50fSBmcm9tICcuL3R5cGVkLWZyb20tZXZlbnQnO1xuXG5leHBvcnQgY29uc3QgZW51bSBUdWlEcmFnU3RhZ2Uge1xuICAgIFN0YXJ0LFxuICAgIENvbnRpbnVlcyxcbiAgICBFbmQsXG59XG5cbmV4cG9ydCBjbGFzcyBUdWlEcmFnU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHN0YWdlOiBUdWlEcmFnU3RhZ2UsIHJlYWRvbmx5IGV2ZW50OiBNb3VzZUV2ZW50KSB7fVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aURyYWdBbmREcm9wRnJvbX0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZHJhZ0FuZERyb3BGcm9tKGVsZW1lbnQ6IEVsZW1lbnQpOiBPYnNlcnZhYmxlPFR1aURyYWdTdGF0ZT4ge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR1aU93bmVyRG9jdW1lbnRFeGNlcHRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uY2F0KFxuICAgICAgICB0eXBlZEZyb21FdmVudChlbGVtZW50LCBgbW91c2Vkb3duYCkucGlwZShcbiAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuU3RhcnQsIGV2ZW50KSksXG4gICAgICAgICksXG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQob3duZXJEb2N1bWVudCwgYG1vdXNlbW92ZWApLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKGV2ZW50ID0+IG5ldyBUdWlEcmFnU3RhdGUoVHVpRHJhZ1N0YWdlLkNvbnRpbnVlcywgZXZlbnQpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBtb3VzZURyYWdGaW5pc2hGcm9tKG93bmVyRG9jdW1lbnQpLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuRW5kLCBldmVudCkpLFxuICAgICAgICAgICAgICAgIGVuZFdpdGgobnVsbCksXG4gICAgICAgICAgICApLFxuICAgICAgICApLnBpcGUodGFrZVdoaWxlKGlzUHJlc2VudCkpLFxuICAgICkucGlwZShyZXBlYXQoKSk7XG59XG5cbmV4cG9ydCBjb25zdCB0dWlEcmFnQW5kRHJvcEZyb20gPSBkcmFnQW5kRHJvcEZyb207XG4iXX0=