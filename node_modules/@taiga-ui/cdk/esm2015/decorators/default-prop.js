import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
export function tuiDefaultProp(assertion, ...args) {
    return (target, key) => {
        const { name } = target.constructor;
        const errorGetDefaultMessage = errorGetDefault(key, name);
        const errorSetDefaultMessage = errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            configurable: true,
            get() {
                tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set(initialValue) {
                const isValid = initialValue !== undefined;
                const errorMessage = errorSetDefaultInitial(key, name);
                let currentValue = initialValue;
                tuiAssert.assert(isValid, errorMessage);
                if (isValid && assertion) {
                    tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
                }
                Object.defineProperty(this, key, {
                    configurable: true,
                    get() {
                        return currentValue;
                    },
                    set(value) {
                        const isValid = value !== undefined;
                        const backupValue = initialValue;
                        tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (isValid && assertion) {
                            tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
function errorGetDefault(key, component) {
    return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
    return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9wLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzLyIsInNvdXJjZXMiOlsiZGVmYXVsdC1wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzFCLFNBQW1DLEVBQ25DLEdBQUcsSUFBZTtJQUVsQixPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2xDLE1BQU0sc0JBQXNCLEdBQUcsZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQy9CLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUc7Z0JBQ0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztnQkFFaEQsT0FBTyxTQUFTLENBQUM7WUFDckIsQ0FBQztZQUNELEdBQUcsQ0FBVSxZQUFrQjtnQkFDM0IsTUFBTSxPQUFPLEdBQUcsWUFBWSxLQUFLLFNBQVMsQ0FBQztnQkFDM0MsTUFBTSxZQUFZLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLFlBQVksR0FBRyxZQUFZLENBQUM7Z0JBRWhDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLE9BQU8sSUFBSSxTQUFTLEVBQUU7b0JBQ3RCLFNBQVMsQ0FBQyxNQUFNLENBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLEVBQ2xDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksWUFBWSxFQUNyQyxZQUFZLEVBQ1osR0FBRyxJQUFJLENBQ1YsQ0FBQztpQkFDTDtnQkFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7b0JBQzdCLFlBQVksRUFBRSxJQUFJO29CQUNsQixHQUFHO3dCQUNDLE9BQU8sWUFBWSxDQUFDO29CQUN4QixDQUFDO29CQUNELEdBQUcsQ0FBVSxLQUFXO3dCQUNwQixNQUFNLE9BQU8sR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDO3dCQUNwQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7d0JBRWpDLFNBQVMsQ0FBQyxNQUFNLENBQ1osT0FBTyxFQUNQLHNCQUFzQixFQUN0QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQ3RCLENBQUM7d0JBRUYsSUFBSSxPQUFPLElBQUksU0FBUyxFQUFFOzRCQUN0QixTQUFTLENBQUMsTUFBTSxDQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLFlBQVksRUFDckMsS0FBSyxFQUNMLEdBQUcsSUFBSSxDQUNWLENBQUM7eUJBQ0w7d0JBRUQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQ2pELENBQUM7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8scUJBQXFCLE1BQU0sQ0FDOUIsR0FBRyxDQUNOLHdCQUF3QixTQUFTLGlDQUFpQyxDQUFDO0FBQ3hFLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8sMkJBQTJCLE1BQU0sQ0FDcEMsR0FBRyxDQUNOLE9BQU8sU0FBUyxnREFBZ0QsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQ25FLE9BQU8sNkNBQTZDLE1BQU0sQ0FDdEQsR0FBRyxDQUNOLE9BQU8sU0FBUyxpQ0FBaUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvY2xhc3Nlcyc7XG5pbXBvcnQge1R1aUJvb2xlYW5IYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcblxuLyoqXG4gKiBEZWNvcmF0b3IgZm9yIGNoZWNraW5nIGlucHV0IHZhbHVlcyBmb3IgdW5kZWZpbmVkLiBZb3UgY2FuIGFsc28gcGFzc1xuICogb3B0aW9uYWwgYXNzZXJ0aW9uIHRvIGNoZWNrIGlucHV0IGFnYWluc3QuXG4gKlxuICogQ0FVVElPTjogVGhpcyBkZWNvcmF0b3Igb3ZlcndyaXRlcyBvdGhlciBnZXR0ZXJzIGFuZCBzZXR0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpRGVmYXVsdFByb3A8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBhc3NlcnRpb24/OiBUdWlCb29sZWFuSGFuZGxlcjxUW0tdPixcbiAgICAuLi5hcmdzOiB1bmtub3duW11cbik6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICByZXR1cm4gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHtuYW1lfSA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgZXJyb3JHZXREZWZhdWx0TWVzc2FnZSA9IGVycm9yR2V0RGVmYXVsdChrZXksIG5hbWUpO1xuICAgICAgICBjb25zdCBlcnJvclNldERlZmF1bHRNZXNzYWdlID0gZXJyb3JTZXREZWZhdWx0KGtleSwgbmFtZSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQoKTogdW5kZWZpbmVkIHtcbiAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KGZhbHNlLCBlcnJvckdldERlZmF1bHRNZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHRoaXM6IFQsIGluaXRpYWxWYWx1ZTogVFtLXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvclNldERlZmF1bHRJbml0aWFsKGtleSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoaXNWYWxpZCwgZXJyb3JNZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmIGFzc2VydGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uLmNhbGwodGhpcywgaW5pdGlhbFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQoKTogVFtLXSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQodGhpczogVCwgdmFsdWU6IFRbS10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFja3VwVmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclNldERlZmF1bHRNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhiYWNrdXBWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBhc3NlcnRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24uY2FsbCh0aGlzLCB2YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlzVmFsaWQgPyB2YWx1ZSA6IGJhY2t1cFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXJyb3JHZXREZWZhdWx0KGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBEZWZhdWx0IHZhbHVlIGZvciAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHdhcyBub3QgcHJvdmlkZWQgaW4gJHtjb21wb25lbnR9LCBlcnJvciBpbiBUYWlnYSBVSSBBbmd1bGFyIEtpdGA7XG59XG5cbmZ1bmN0aW9uIGVycm9yU2V0RGVmYXVsdChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIHdoaWNoIGlzIGludmFsaWQgaW5wdXQsIHVzaW5nIGRlZmF1bHQgdmFsdWU6YDtcbn1cblxuZnVuY3Rpb24gZXJyb3JTZXREZWZhdWx0SW5pdGlhbChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgZGVmYXVsdCB2YWx1ZSBmb3IgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIGVycm9yIGluIFRhaWdhIFVJIEFuZ3VsYXIgS2l0YDtcbn1cbiJdfQ==