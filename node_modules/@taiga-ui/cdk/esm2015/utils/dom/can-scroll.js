/**
 * @deprecated: use {@link tuiCanScroll} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function canScroll(element, rootElement, vertical, scrollEnd) {
    return vertical
        ? canScrollVertical(element, rootElement, scrollEnd)
        : canScrollHorizontal(element, rootElement, scrollEnd);
}
export const tuiCanScroll = canScroll;
function canScrollVertical(element, rootElement, scrollEnd) {
    let currentElement = element;
    while (currentElement !== rootElement.parentElement) {
        if ((Math.floor(currentElement.scrollTop) > 0 && !scrollEnd) ||
            (Math.ceil(currentElement.scrollTop + currentElement.clientHeight) <
                currentElement.scrollHeight &&
                scrollEnd)) {
            return true;
        }
        if (currentElement.parentElement) {
            currentElement = currentElement.parentElement;
        }
        else {
            return false;
        }
    }
    return false;
}
function canScrollHorizontal(element, rootElement, scrollEnd) {
    let currentElement = element;
    while (currentElement !== rootElement.parentElement) {
        if ((Math.floor(currentElement.scrollLeft) > 0 && !scrollEnd) ||
            (Math.ceil(currentElement.scrollLeft + currentElement.clientWidth) <
                currentElement.scrollWidth &&
                scrollEnd)) {
            return true;
        }
        if (currentElement.parentElement) {
            currentElement = currentElement.parentElement;
        }
        else {
            return false;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuLXNjcm9sbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tLyIsInNvdXJjZXMiOlsiY2FuLXNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsU0FBUyxDQUNyQixPQUFnQixFQUNoQixXQUFvQixFQUNwQixRQUFpQixFQUNqQixTQUFrQjtJQUVsQixPQUFPLFFBQVE7UUFDWCxDQUFDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUM7UUFDcEQsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7QUFFdEMsU0FBUyxpQkFBaUIsQ0FDdEIsT0FBZ0IsRUFDaEIsV0FBb0IsRUFDcEIsU0FBa0I7SUFFbEIsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDO0lBRTdCLE9BQU8sY0FBYyxLQUFLLFdBQVcsQ0FBQyxhQUFhLEVBQUU7UUFDakQsSUFDSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN4RCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDO2dCQUM5RCxjQUFjLENBQUMsWUFBWTtnQkFDM0IsU0FBUyxDQUFDLEVBQ2hCO1lBQ0UsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksY0FBYyxDQUFDLGFBQWEsRUFBRTtZQUM5QixjQUFjLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQztTQUNqRDthQUFNO1lBQ0gsT0FBTyxLQUFLLENBQUM7U0FDaEI7S0FDSjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUN4QixPQUFnQixFQUNoQixXQUFvQixFQUNwQixTQUFrQjtJQUVsQixJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFFN0IsT0FBTyxjQUFjLEtBQUssV0FBVyxDQUFDLGFBQWEsRUFBRTtRQUNqRCxJQUNJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3pELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUM7Z0JBQzlELGNBQWMsQ0FBQyxXQUFXO2dCQUMxQixTQUFTLENBQUMsRUFDaEI7WUFDRSxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxjQUFjLENBQUMsYUFBYSxFQUFFO1lBQzlCLGNBQWMsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFDO1NBQ2pEO2FBQU07WUFDSCxPQUFPLEtBQUssQ0FBQztTQUNoQjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpQ2FuU2Nyb2xsfSBpbnN0ZWFkXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBjYW5TY3JvbGwoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICByb290RWxlbWVudDogRWxlbWVudCxcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgICBzY3JvbGxFbmQ6IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmVydGljYWxcbiAgICAgICAgPyBjYW5TY3JvbGxWZXJ0aWNhbChlbGVtZW50LCByb290RWxlbWVudCwgc2Nyb2xsRW5kKVxuICAgICAgICA6IGNhblNjcm9sbEhvcml6b250YWwoZWxlbWVudCwgcm9vdEVsZW1lbnQsIHNjcm9sbEVuZCk7XG59XG5cbmV4cG9ydCBjb25zdCB0dWlDYW5TY3JvbGwgPSBjYW5TY3JvbGw7XG5cbmZ1bmN0aW9uIGNhblNjcm9sbFZlcnRpY2FsKFxuICAgIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcm9vdEVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgc2Nyb2xsRW5kOiBib29sZWFuLFxuKTogYm9vbGVhbiB7XG4gICAgbGV0IGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCAhPT0gcm9vdEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoTWF0aC5mbG9vcihjdXJyZW50RWxlbWVudC5zY3JvbGxUb3ApID4gMCAmJiAhc2Nyb2xsRW5kKSB8fFxuICAgICAgICAgICAgKE1hdGguY2VpbChjdXJyZW50RWxlbWVudC5zY3JvbGxUb3AgKyBjdXJyZW50RWxlbWVudC5jbGllbnRIZWlnaHQpIDxcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgJiZcbiAgICAgICAgICAgICAgICBzY3JvbGxFbmQpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjYW5TY3JvbGxIb3Jpem9udGFsKFxuICAgIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcm9vdEVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgc2Nyb2xsRW5kOiBib29sZWFuLFxuKTogYm9vbGVhbiB7XG4gICAgbGV0IGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCAhPT0gcm9vdEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoTWF0aC5mbG9vcihjdXJyZW50RWxlbWVudC5zY3JvbGxMZWZ0KSA+IDAgJiYgIXNjcm9sbEVuZCkgfHxcbiAgICAgICAgICAgIChNYXRoLmNlaWwoY3VycmVudEVsZW1lbnQuc2Nyb2xsTGVmdCArIGN1cnJlbnRFbGVtZW50LmNsaWVudFdpZHRoKSA8XG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuc2Nyb2xsV2lkdGggJiZcbiAgICAgICAgICAgICAgICBzY3JvbGxFbmQpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIl19