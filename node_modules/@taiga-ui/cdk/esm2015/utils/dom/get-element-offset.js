import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * @deprecated: use {@link tuiGetElementOffset} instead
 * Calculates offset for an element relative to it's parent several levels above
 *
 * @param host parent element
 * @param element
 * @return object with offsetTop and offsetLeft number properties
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function getElementOffset(host, element) {
    tuiAssert.assert(host.contains(element), `Host must contain element`);
    let { offsetTop, offsetLeft, offsetParent } = element;
    // TODO: iframe warning
    while (offsetParent && offsetParent instanceof HTMLElement && offsetParent !== host) {
        offsetTop += offsetParent.offsetTop;
        offsetLeft += offsetParent.offsetLeft;
        offsetParent = offsetParent.offsetParent;
    }
    return { offsetTop, offsetLeft };
}
export const tuiGetElementOffset = getElementOffset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWVsZW1lbnQtb2Zmc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay91dGlscy9kb20vIiwic291cmNlcyI6WyJnZXQtZWxlbWVudC1vZmZzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRWhEOzs7Ozs7O0dBT0c7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixJQUFhLEVBQ2IsT0FBb0I7SUFFcEIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFFdEUsSUFBSSxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFDLEdBQUcsT0FBTyxDQUFDO0lBRXBELHVCQUF1QjtJQUN2QixPQUFPLFlBQVksSUFBSSxZQUFZLFlBQVksV0FBVyxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7UUFDakYsU0FBUyxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDcEMsVUFBVSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDdEMsWUFBWSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUM7S0FDNUM7SUFFRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUdldEVsZW1lbnRPZmZzZXR9IGluc3RlYWRcbiAqIENhbGN1bGF0ZXMgb2Zmc2V0IGZvciBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0J3MgcGFyZW50IHNldmVyYWwgbGV2ZWxzIGFib3ZlXG4gKlxuICogQHBhcmFtIGhvc3QgcGFyZW50IGVsZW1lbnRcbiAqIEBwYXJhbSBlbGVtZW50XG4gKiBAcmV0dXJuIG9iamVjdCB3aXRoIG9mZnNldFRvcCBhbmQgb2Zmc2V0TGVmdCBudW1iZXIgcHJvcGVydGllc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudE9mZnNldChcbiAgICBob3N0OiBFbGVtZW50LFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuKToge29mZnNldFRvcDogbnVtYmVyOyBvZmZzZXRMZWZ0OiBudW1iZXJ9IHtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KGhvc3QuY29udGFpbnMoZWxlbWVudCksIGBIb3N0IG11c3QgY29udGFpbiBlbGVtZW50YCk7XG5cbiAgICBsZXQge29mZnNldFRvcCwgb2Zmc2V0TGVmdCwgb2Zmc2V0UGFyZW50fSA9IGVsZW1lbnQ7XG5cbiAgICAvLyBUT0RPOiBpZnJhbWUgd2FybmluZ1xuICAgIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBob3N0KSB7XG4gICAgICAgIG9mZnNldFRvcCArPSBvZmZzZXRQYXJlbnQub2Zmc2V0VG9wO1xuICAgICAgICBvZmZzZXRMZWZ0ICs9IG9mZnNldFBhcmVudC5vZmZzZXRMZWZ0O1xuICAgICAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiB7b2Zmc2V0VG9wLCBvZmZzZXRMZWZ0fTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aUdldEVsZW1lbnRPZmZzZXQgPSBnZXRFbGVtZW50T2Zmc2V0O1xuIl19