import { clamp } from '@taiga-ui/cdk/utils/math';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { getDocumentOrShadowRoot } from './get-document-or-shadow-root';
/**
 * @deprecated: use {@link tuiGetElementObscures} instead
 * Returns array of Elements covering edges of given element or null if at least one edge middle point is visible
 *
 * CAUTION: Empty array means element if offscreen i.e. covered by no elements, rather than not covered
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function getElementObscurers(element) {
    const { ownerDocument } = element;
    if (!(ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.defaultView)) {
        return null;
    }
    const { innerWidth, innerHeight } = ownerDocument.defaultView;
    const documentRef = getDocumentOrShadowRoot(element);
    const rect = element.getBoundingClientRect();
    const left = clamp(Math.round(rect.left) + 2, 0, innerWidth);
    const top = clamp(Math.round(rect.top) + 2, 0, innerHeight);
    const right = clamp(Math.round(rect.right) - 2, 0, innerWidth);
    const bottom = clamp(Math.round(rect.bottom) - 2, 0, innerHeight);
    const horizontalMiddle = clamp(Math.round(rect.left + rect.width / 2), 0, innerWidth);
    const verticalMiddle = clamp(Math.round(rect.top + rect.height / 2), 0, innerHeight);
    const elements = [
        documentRef.elementFromPoint(horizontalMiddle, top),
        documentRef.elementFromPoint(horizontalMiddle, bottom),
        documentRef.elementFromPoint(left, verticalMiddle),
        documentRef.elementFromPoint(right, verticalMiddle),
    ];
    const nonNull = elements.filter(isPresent);
    if (!nonNull.length) {
        return nonNull;
    }
    const filtered = nonNull.filter(el => !element.contains(el));
    return filtered.length === 4 ? filtered : null;
}
export const tuiGetElementObscures = getElementObscurers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWVsZW1lbnQtb2JzY3VyZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay91dGlscy9kb20vIiwic291cmNlcyI6WyJnZXQtZWxlbWVudC1vYnNjdXJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUU1RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RTs7Ozs7R0FLRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsT0FBZ0I7SUFDaEQsTUFBTSxFQUFDLGFBQWEsRUFBQyxHQUFHLE9BQU8sQ0FBQztJQUVoQyxJQUFJLEVBQUMsYUFBYSxhQUFiLGFBQWEsdUJBQWIsYUFBYSxDQUFFLFdBQVcsQ0FBQSxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFFRCxNQUFNLEVBQUMsVUFBVSxFQUFFLFdBQVcsRUFBQyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDNUQsTUFBTSxXQUFXLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDN0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0QsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDNUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDL0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbEUsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckYsTUFBTSxRQUFRLEdBQUc7UUFDYixXQUFXLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDO1FBQ25ELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUM7UUFDdEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxjQUFjLENBQUM7UUFDbEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7S0FDdEQsQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDakIsT0FBTyxPQUFPLENBQUM7S0FDbEI7SUFFRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFN0QsT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbkQsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuXG5pbXBvcnQge2dldERvY3VtZW50T3JTaGFkb3dSb290fSBmcm9tICcuL2dldC1kb2N1bWVudC1vci1zaGFkb3ctcm9vdCc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpR2V0RWxlbWVudE9ic2N1cmVzfSBpbnN0ZWFkXG4gKiBSZXR1cm5zIGFycmF5IG9mIEVsZW1lbnRzIGNvdmVyaW5nIGVkZ2VzIG9mIGdpdmVuIGVsZW1lbnQgb3IgbnVsbCBpZiBhdCBsZWFzdCBvbmUgZWRnZSBtaWRkbGUgcG9pbnQgaXMgdmlzaWJsZVxuICpcbiAqIENBVVRJT046IEVtcHR5IGFycmF5IG1lYW5zIGVsZW1lbnQgaWYgb2Zmc2NyZWVuIGkuZS4gY292ZXJlZCBieSBubyBlbGVtZW50cywgcmF0aGVyIHRoYW4gbm90IGNvdmVyZWRcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRPYnNjdXJlcnMoZWxlbWVudDogRWxlbWVudCk6IHJlYWRvbmx5IEVsZW1lbnRbXSB8IG51bGwge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQ/LmRlZmF1bHRWaWV3KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHtpbm5lcldpZHRoLCBpbm5lckhlaWdodH0gPSBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIGNvbnN0IGRvY3VtZW50UmVmID0gZ2V0RG9jdW1lbnRPclNoYWRvd1Jvb3QoZWxlbWVudCk7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgbGVmdCA9IGNsYW1wKE1hdGgucm91bmQocmVjdC5sZWZ0KSArIDIsIDAsIGlubmVyV2lkdGgpO1xuICAgIGNvbnN0IHRvcCA9IGNsYW1wKE1hdGgucm91bmQocmVjdC50b3ApICsgMiwgMCwgaW5uZXJIZWlnaHQpO1xuICAgIGNvbnN0IHJpZ2h0ID0gY2xhbXAoTWF0aC5yb3VuZChyZWN0LnJpZ2h0KSAtIDIsIDAsIGlubmVyV2lkdGgpO1xuICAgIGNvbnN0IGJvdHRvbSA9IGNsYW1wKE1hdGgucm91bmQocmVjdC5ib3R0b20pIC0gMiwgMCwgaW5uZXJIZWlnaHQpO1xuICAgIGNvbnN0IGhvcml6b250YWxNaWRkbGUgPSBjbGFtcChNYXRoLnJvdW5kKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKSwgMCwgaW5uZXJXaWR0aCk7XG4gICAgY29uc3QgdmVydGljYWxNaWRkbGUgPSBjbGFtcChNYXRoLnJvdW5kKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyKSwgMCwgaW5uZXJIZWlnaHQpO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW1xuICAgICAgICBkb2N1bWVudFJlZi5lbGVtZW50RnJvbVBvaW50KGhvcml6b250YWxNaWRkbGUsIHRvcCksXG4gICAgICAgIGRvY3VtZW50UmVmLmVsZW1lbnRGcm9tUG9pbnQoaG9yaXpvbnRhbE1pZGRsZSwgYm90dG9tKSxcbiAgICAgICAgZG9jdW1lbnRSZWYuZWxlbWVudEZyb21Qb2ludChsZWZ0LCB2ZXJ0aWNhbE1pZGRsZSksXG4gICAgICAgIGRvY3VtZW50UmVmLmVsZW1lbnRGcm9tUG9pbnQocmlnaHQsIHZlcnRpY2FsTWlkZGxlKSxcbiAgICBdO1xuICAgIGNvbnN0IG5vbk51bGwgPSBlbGVtZW50cy5maWx0ZXIoaXNQcmVzZW50KTtcblxuICAgIGlmICghbm9uTnVsbC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5vbk51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyZWQgPSBub25OdWxsLmZpbHRlcihlbCA9PiAhZWxlbWVudC5jb250YWlucyhlbCkpO1xuXG4gICAgcmV0dXJuIGZpbHRlcmVkLmxlbmd0aCA9PT0gNCA/IGZpbHRlcmVkIDogbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aUdldEVsZW1lbnRPYnNjdXJlcyA9IGdldEVsZW1lbnRPYnNjdXJlcnM7XG4iXX0=