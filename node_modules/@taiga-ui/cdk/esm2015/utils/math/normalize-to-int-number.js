import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * @deprecated: use {@link tuiNormalizeToIntNumber} instead
 * Normalizes any number to an integer within inclusive range
 *
 * @param value
 * @param min lower inclusive integer
 * @param max upper inclusive integer
 * @return an integer between min and max inclusive
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function normalizeToIntNumber(value, min, max) {
    tuiAssert.assert(Number.isInteger(min));
    tuiAssert.assert(Number.isInteger(max));
    tuiAssert.assert(min <= max);
    if (Number.isNaN(value) || value <= min) {
        return min;
    }
    if (value >= max) {
        return max;
    }
    return Math.round(value);
}
export const tuiNormalizeToIntNumber = normalizeToIntNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLXRvLWludC1udW1iZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgvIiwic291cmNlcyI6WyJub3JtYWxpemUtdG8taW50LW51bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFaEQ7Ozs7Ozs7O0dBUUc7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsR0FBVztJQUN4RSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4QyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4QyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUU3QixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLEdBQUcsRUFBRTtRQUNyQyxPQUFPLEdBQUcsQ0FBQztLQUNkO0lBRUQsSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLENBQUM7S0FDZDtJQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlOb3JtYWxpemVUb0ludE51bWJlcn0gaW5zdGVhZFxuICogTm9ybWFsaXplcyBhbnkgbnVtYmVyIHRvIGFuIGludGVnZXIgd2l0aGluIGluY2x1c2l2ZSByYW5nZVxuICpcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIG1pbiBsb3dlciBpbmNsdXNpdmUgaW50ZWdlclxuICogQHBhcmFtIG1heCB1cHBlciBpbmNsdXNpdmUgaW50ZWdlclxuICogQHJldHVybiBhbiBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggaW5jbHVzaXZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUb0ludE51bWJlcih2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHR1aUFzc2VydC5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihtaW4pKTtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KE51bWJlci5pc0ludGVnZXIobWF4KSk7XG4gICAgdHVpQXNzZXJ0LmFzc2VydChtaW4gPD0gbWF4KTtcblxuICAgIGlmIChOdW1iZXIuaXNOYU4odmFsdWUpIHx8IHZhbHVlIDw9IG1pbikge1xuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA+PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBjb25zdCB0dWlOb3JtYWxpemVUb0ludE51bWJlciA9IG5vcm1hbGl6ZVRvSW50TnVtYmVyO1xuIl19