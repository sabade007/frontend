import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, InjectionToken } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { HISTORY } from '@ng-web-apis/common';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk/constants';
import { TUI_DIALOGS } from '@taiga-ui/cdk/tokens';
import { combineLatest, Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
export const TUI_DIALOG_CLOSES_ON_BACK = new InjectionToken('Is closing dialog on browser backward navigation enabled', {
    factory: () => of(false),
});
// TODO: 3.0 remove in ivy compilation
export const FAKE_HISTORY_STATE = { label: 'ignoreMe' };
// TODO: 3.0 remove in ivy compilation
export const isFakeHistoryState = (historyState) => (historyState === null || historyState === void 0 ? void 0 : historyState.label) === FAKE_HISTORY_STATE.label;
// @dynamic
let TuiDialogHostComponent = class TuiDialogHostComponent {
    constructor(isDialogClosesOnBack$, dialogsByType, historyRef, titleService) {
        this.isDialogClosesOnBack$ = isDialogClosesOnBack$;
        this.dialogsByType = dialogsByType;
        this.historyRef = historyRef;
        this.titleService = titleService;
        this.dialogs$ = combineLatest(this.dialogsByType).pipe(map(allTypesDialogs => new Array()
            .concat(...allTypesDialogs)
            .sort((a, b) => a.createdAt - b.createdAt)));
    }
    closeLast(dialogs, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack) {
            return;
        }
        const [last] = dialogs.slice(-1);
        if (!last) {
            return;
        }
        if (dialogs.length > 1) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        last.$implicit.complete();
    }
    onDialog({ propertyName }, popupOpened, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack || propertyName !== 'letter-spacing') {
            return;
        }
        if (popupOpened) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        else if (isFakeHistoryState(this.historyRef.state)) {
            this.historyRef.back();
        }
    }
};
TuiDialogHostComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DIALOG_CLOSES_ON_BACK,] }] },
    { type: Array, decorators: [{ type: Inject, args: [TUI_DIALOGS,] }] },
    { type: History, decorators: [{ type: Inject, args: [HISTORY,] }] },
    { type: Title, decorators: [{ type: Inject, args: [Title,] }] }
];
TuiDialogHostComponent = __decorate([
    Component({
        selector: 'tui-dialog-host',
        template: "<ng-container *ngIf=\"dialogs$ | async as dialogs\">\n    <section\n        *ngFor=\"let item of dialogs\"\n        polymorpheus-outlet\n        tuiFocusTrap\n        tuiScrollRef\n        tuiOverscroll=\"all\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        class=\"t-dialog\"\n        @tuiParentAnimation\n        [attr.aria-labelledby]=\"item.id\"\n        [content]=\"item.component\"\n        [context]=\"item\"\n    ></section>\n    <div\n        *tuiLet=\"isDialogClosesOnBack$ | async as isDialogClosesOnBack\"\n        class=\"t-overlay\"\n        [class.t-overlay_visible]=\"dialogs.length\"\n        (window:popstate)=\"closeLast(dialogs, isDialogClosesOnBack)\"\n        (transitionend)=\"onDialog($event, !!dialogs.length, isDialogClosesOnBack)\"\n    ></div>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [TUI_PARENT_ANIMATION],
        styles: [":host{position:fixed;left:0;bottom:0;width:100%;height:0}.t-dialog,.t-overlay{position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:flex-start;outline:0;overflow:auto;overflow:overlay}.t-dialog{bottom:auto;height:100%}.t-overlay{height:100%;pointer-events:none;touch-action:none;opacity:0;letter-spacing:normal;transition:opacity var(--tui-duration),letter-spacing 10ms;background:rgba(0,0,0,.75)}.t-overlay_visible{opacity:1;letter-spacing:1px}.t-dialog:last-of-type{z-index:1}"]
    }),
    __param(0, Inject(TUI_DIALOG_CLOSES_ON_BACK)),
    __param(1, Inject(TUI_DIALOGS)),
    __param(2, Inject(HISTORY)),
    __param(3, Inject(Title))
], TuiDialogHostComponent);
export { TuiDialogHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWhvc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9jb21wb25lbnRzL2RpYWxvZy1ob3N0LyIsInNvdXJjZXMiOlsiZGlhbG9nLWhvc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFakQsT0FBTyxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FDdkQsMERBQTBELEVBQzFEO0lBQ0ksT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDM0IsQ0FDSixDQUFDO0FBRUYsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBVSxDQUFDO0FBQy9ELHNDQUFzQztBQUN0QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUM5QixZQUFxQyxFQUNJLEVBQUUsQ0FDM0MsQ0FBQSxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsS0FBSyxNQUFLLGtCQUFrQixDQUFDLEtBQUssQ0FBQztBQUVyRCxXQUFXO0FBUVgsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFTL0IsWUFFYSxxQkFBMEMsRUFFbEMsYUFBOEMsRUFDN0IsVUFBbUIsRUFDckIsWUFBbUI7UUFKMUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFxQjtRQUVsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBaUM7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBTztRQWQ5QyxhQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQ3RELEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUNsQixJQUFJLEtBQUssRUFBSzthQUNULE1BQU0sQ0FBQyxHQUFHLGVBQWUsQ0FBQzthQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FDakQsQ0FDSixDQUFDO0lBU0MsQ0FBQztJQUVKLFNBQVMsQ0FBQyxPQUFxQixFQUFFLG9CQUE2QjtRQUMxRCxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDdkIsT0FBTztTQUNWO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsT0FBTztTQUNWO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDL0U7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxRQUFRLENBQ0osRUFBQyxZQUFZLEVBQWtCLEVBQy9CLFdBQW9CLEVBQ3BCLG9CQUE2QjtRQUU3QixJQUFJLENBQUMsb0JBQW9CLElBQUksWUFBWSxLQUFLLGdCQUFnQixFQUFFO1lBQzVELE9BQU87U0FDVjtRQUVELElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQy9FO2FBQU0sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7WUF4Q3VDLFVBQVUsdUJBRHpDLE1BQU0sU0FBQyx5QkFBeUI7WUFHRCxLQUFLLHVCQURwQyxNQUFNLFNBQUMsV0FBVztZQUUyQixPQUFPLHVCQUFwRCxNQUFNLFNBQUMsT0FBTztZQUMrQixLQUFLLHVCQUFsRCxNQUFNLFNBQUMsS0FBSzs7QUFmUixzQkFBc0I7SUFQbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixrekJBQTBDO1FBRTFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxDQUFDLG9CQUFvQixDQUFDOztLQUNyQyxDQUFDO0lBV08sV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUVqQyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUVuQixXQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNmLFdBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0dBZlQsc0JBQXNCLENBbURsQztTQW5EWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdCwgSW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUaXRsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge0hJU1RPUll9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtUVUlfUEFSRU5UX0FOSU1BVElPTn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHtUVUlfRElBTE9HU30gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHtUdWlEaWFsb2d9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY29uc3QgVFVJX0RJQUxPR19DTE9TRVNfT05fQkFDSyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPGJvb2xlYW4+PihcbiAgICAnSXMgY2xvc2luZyBkaWFsb2cgb24gYnJvd3NlciBiYWNrd2FyZCBuYXZpZ2F0aW9uIGVuYWJsZWQnLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogKCkgPT4gb2YoZmFsc2UpLFxuICAgIH0sXG4pO1xuXG4vLyBUT0RPOiAzLjAgcmVtb3ZlIGluIGl2eSBjb21waWxhdGlvblxuZXhwb3J0IGNvbnN0IEZBS0VfSElTVE9SWV9TVEFURSA9IHtsYWJlbDogJ2lnbm9yZU1lJ30gYXMgY29uc3Q7XG4vLyBUT0RPOiAzLjAgcmVtb3ZlIGluIGl2eSBjb21waWxhdGlvblxuZXhwb3J0IGNvbnN0IGlzRmFrZUhpc3RvcnlTdGF0ZSA9IChcbiAgICBoaXN0b3J5U3RhdGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuKTogaGlzdG9yeVN0YXRlIGlzIHR5cGVvZiBGQUtFX0hJU1RPUllfU1RBVEUgPT5cbiAgICBoaXN0b3J5U3RhdGU/LmxhYmVsID09PSBGQUtFX0hJU1RPUllfU1RBVEUubGFiZWw7XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1kaWFsb2ctaG9zdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWxvZy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2RpYWxvZy1ob3N0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBhbmltYXRpb25zOiBbVFVJX1BBUkVOVF9BTklNQVRJT05dLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlEaWFsb2dIb3N0Q29tcG9uZW50PFQgZXh0ZW5kcyBUdWlEaWFsb2c8dW5rbm93biwgdW5rbm93bj4+IHtcbiAgICByZWFkb25seSBkaWFsb2dzJCA9IGNvbWJpbmVMYXRlc3QodGhpcy5kaWFsb2dzQnlUeXBlKS5waXBlKFxuICAgICAgICBtYXAoYWxsVHlwZXNEaWFsb2dzID0+XG4gICAgICAgICAgICBuZXcgQXJyYXk8VD4oKVxuICAgICAgICAgICAgICAgIC5jb25jYXQoLi4uYWxsVHlwZXNEaWFsb2dzKVxuICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmNyZWF0ZWRBdCAtIGIuY3JlYXRlZEF0KSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0RJQUxPR19DTE9TRVNfT05fQkFDSylcbiAgICAgICAgcmVhZG9ubHkgaXNEaWFsb2dDbG9zZXNPbkJhY2skOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgICAgICBASW5qZWN0KFRVSV9ESUFMT0dTKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZ3NCeVR5cGU6IEFycmF5PE9ic2VydmFibGU8cmVhZG9ubHkgVFtdPj4sXG4gICAgICAgIEBJbmplY3QoSElTVE9SWSkgcHJpdmF0ZSByZWFkb25seSBoaXN0b3J5UmVmOiBIaXN0b3J5LFxuICAgICAgICBASW5qZWN0KFRpdGxlKSBwcml2YXRlIHJlYWRvbmx5IHRpdGxlU2VydmljZTogVGl0bGUsXG4gICAgKSB7fVxuXG4gICAgY2xvc2VMYXN0KGRpYWxvZ3M6IHJlYWRvbmx5IFRbXSwgaXNEaWFsb2dDbG9zZXNPbkJhY2s6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKCFpc0RpYWxvZ0Nsb3Nlc09uQmFjaykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgW2xhc3RdID0gZGlhbG9ncy5zbGljZSgtMSk7XG5cbiAgICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlhbG9ncy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlSZWYucHVzaFN0YXRlKEZBS0VfSElTVE9SWV9TVEFURSwgdGhpcy50aXRsZVNlcnZpY2UuZ2V0VGl0bGUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0LiRpbXBsaWNpdC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIG9uRGlhbG9nKFxuICAgICAgICB7cHJvcGVydHlOYW1lfTogVHJhbnNpdGlvbkV2ZW50LFxuICAgICAgICBwb3B1cE9wZW5lZDogYm9vbGVhbixcbiAgICAgICAgaXNEaWFsb2dDbG9zZXNPbkJhY2s6IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICghaXNEaWFsb2dDbG9zZXNPbkJhY2sgfHwgcHJvcGVydHlOYW1lICE9PSAnbGV0dGVyLXNwYWNpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdXBPcGVuZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZi5wdXNoU3RhdGUoRkFLRV9ISVNUT1JZX1NUQVRFLCB0aGlzLnRpdGxlU2VydmljZS5nZXRUaXRsZSgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Zha2VIaXN0b3J5U3RhdGUodGhpcy5oaXN0b3J5UmVmLnN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5UmVmLmJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==