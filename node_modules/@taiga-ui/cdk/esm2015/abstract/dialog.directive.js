import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, Directive, Inject, TemplateRef } from '@angular/core';
import { PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { EMPTY, Subject } from 'rxjs';
import { endWith, ignoreElements, switchMap } from 'rxjs/operators';
import { AbstractTuiDialogService } from './dialog.service';
let AbstractTuiDialogDirective = class AbstractTuiDialogDirective extends PolymorpheusTemplate {
    constructor(templateRef, changeDetectorRef, service) {
        super(templateRef, changeDetectorRef);
        this.service = service;
        this.open$ = new Subject();
        this.options = {};
        this.openChange = this.open$.pipe(switchMap(open => open
            ? this.service
                .open(this, this.options)
                .pipe(ignoreElements(), endWith(false))
            : EMPTY));
    }
    set open(open) {
        this.open$.next(open);
    }
};
AbstractTuiDialogDirective.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: AbstractTuiDialogService, decorators: [{ type: Inject, args: [AbstractTuiDialogService,] }] }
];
AbstractTuiDialogDirective = __decorate([
    Directive(),
    __param(0, Inject(TemplateRef)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(AbstractTuiDialogService))
], AbstractTuiDialogDirective);
export { AbstractTuiDialogDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvYWJzdHJhY3QvIiwic291cmNlcyI6WyJkaWFsb2cuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFHMUQsSUFBc0IsMEJBQTBCLEdBQWhELE1BQXNCLDBCQUE4QixTQUFRLG9CQUUzRDtJQW1CRyxZQUVJLFdBQTRDLEVBQ2pCLGlCQUFvQyxFQUU5QyxPQUFvQztRQUVyRCxLQUFLLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFGckIsWUFBTyxHQUFQLE9BQU8sQ0FBNkI7UUF2QnhDLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBRWhELFlBQU8sR0FBZSxFQUFFLENBQUM7UUFNekIsZUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN4QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDYixJQUFJO1lBQ0EsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO2lCQUNQLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDeEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsS0FBSyxDQUNkLENBQ0osQ0FBQztJQVVGLENBQUM7SUF0QkQsSUFBSSxJQUFJLENBQUMsSUFBYTtRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBcUJKLENBQUE7O1lBUG9CLFdBQVcsdUJBRHZCLE1BQU0sU0FBQyxXQUFXO1lBRTJCLGlCQUFpQix1QkFBOUQsTUFBTSxTQUFDLGlCQUFpQjtZQUVDLHdCQUF3Qix1QkFEakQsTUFBTSxTQUFDLHdCQUF3Qjs7QUF6QmxCLDBCQUEwQjtJQUQvQyxTQUFTLEVBQUU7SUF1QkgsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFbkIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN6QixXQUFBLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0dBekJuQiwwQkFBMEIsQ0E4Qi9DO1NBOUJxQiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEluamVjdCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEaWFsb2d9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNUZW1wbGF0ZX0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7RU1QVFksIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtlbmRXaXRoLCBpZ25vcmVFbGVtZW50cywgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7QWJzdHJhY3RUdWlEaWFsb2dTZXJ2aWNlfSBmcm9tICcuL2RpYWxvZy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlEaWFsb2dEaXJlY3RpdmU8VD4gZXh0ZW5kcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxcbiAgICBUdWlEaWFsb2c8VCwgdm9pZD5cbj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3BlbiQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgb3B0aW9uczogUGFydGlhbDxUPiA9IHt9O1xuXG4gICAgc2V0IG9wZW4ob3BlbjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLm9wZW4kLm5leHQob3Blbik7XG4gICAgfVxuXG4gICAgb3BlbkNoYW5nZSA9IHRoaXMub3BlbiQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKG9wZW4gPT5cbiAgICAgICAgICAgIG9wZW5cbiAgICAgICAgICAgICAgICA/IHRoaXMuc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgIC5vcGVuKHRoaXMsIHRoaXMub3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAucGlwZShpZ25vcmVFbGVtZW50cygpLCBlbmRXaXRoKGZhbHNlKSlcbiAgICAgICAgICAgICAgICA6IEVNUFRZLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZilcbiAgICAgICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFR1aURpYWxvZzxULCB2b2lkPj4sXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChBYnN0cmFjdFR1aURpYWxvZ1NlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZTogQWJzdHJhY3RUdWlEaWFsb2dTZXJ2aWNlPFQ+LFxuICAgICkge1xuICAgICAgICBzdXBlcih0ZW1wbGF0ZVJlZiwgY2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIH1cbn1cbiJdfQ==