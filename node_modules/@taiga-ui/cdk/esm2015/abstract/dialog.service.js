import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { BehaviorSubject, Observable } from 'rxjs';
let AbstractTuiDialogService = class AbstractTuiDialogService extends Observable {
    constructor(idService) {
        super(observer => this.dialogs$.subscribe(observer));
        this.idService = idService;
        this.dialogs$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable(observer => {
            const completeWith = (result) => {
                observer.next(result);
                observer.complete();
            };
            const dialog = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), { content,
                completeWith, $implicit: observer, component: this.component, createdAt: Date.now(), id: this.idService.generate() });
            this.dialogs$.next([...this.dialogs$.value, dialog]);
            return () => {
                this.dialogs$.next(this.dialogs$.value.filter(item => item !== dialog));
            };
        });
    }
};
AbstractTuiDialogService.ctorParameters = () => [
    { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
];
AbstractTuiDialogService = __decorate([
    Injectable(),
    __param(0, Inject(TuiIdService))
], AbstractTuiDialogService);
export { AbstractTuiDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUdwRCxPQUFPLEVBQUMsZUFBZSxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUdqRCxJQUFzQix3QkFBd0IsR0FBOUMsTUFBc0Isd0JBQXNDLFNBQVEsVUFFbkU7SUFTRyxZQUMyQyxTQUF1QjtRQUU5RCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRmQsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUwvQyxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQzdDLEVBQUUsQ0FDTCxDQUFDO0lBTUYsQ0FBQztJQUVELElBQUksQ0FDQSxPQUE4RSxFQUM5RSxVQUFzQixFQUFFO1FBRXhCLE9BQU8sSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUE4QixFQUFRLEVBQUU7Z0JBQzFELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFDRixNQUFNLE1BQU0saURBQ0wsSUFBSSxDQUFDLGNBQWMsR0FDbkIsT0FBTyxLQUNWLE9BQU87Z0JBQ1AsWUFBWSxFQUNaLFNBQVMsRUFBRSxRQUFRLEVBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUN6QixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNyQixFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FDaEMsQ0FBQztZQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRXJELE9BQU8sR0FBRyxFQUFFO2dCQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzVFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7O1lBaEN5RCxZQUFZLHVCQUE3RCxNQUFNLFNBQUMsWUFBWTs7QUFaTix3QkFBd0I7SUFEN0MsVUFBVSxFQUFFO0lBYUosV0FBQSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7R0FaUCx3QkFBd0IsQ0E0QzdDO1NBNUNxQix3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUJhc2VEaWFsb2dDb250ZXh0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUdWlJZFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtUdWlEaWFsb2d9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnQsIFBvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aURpYWxvZ1NlcnZpY2U8VCwgSyA9IHZvaWQ+IGV4dGVuZHMgT2JzZXJ2YWJsZTxcbiAgICBSZWFkb25seUFycmF5PFR1aURpYWxvZzxULCBhbnk+PlxuPiB7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IGNvbXBvbmVudDogUG9seW1vcnBoZXVzQ29tcG9uZW50PGFueSwgVHVpRGlhbG9nPFQsIGFueT4+O1xuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IGRlZmF1bHRPcHRpb25zOiBUO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpYWxvZ3MkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZWFkb25seUFycmF5PFR1aURpYWxvZzxULCBhbnk+Pj4oXG4gICAgICAgIFtdLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSWRTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IGlkU2VydmljZTogVHVpSWRTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcihvYnNlcnZlciA9PiB0aGlzLmRpYWxvZ3MkLnN1YnNjcmliZShvYnNlcnZlcikpO1xuICAgIH1cblxuICAgIG9wZW48RyA9IHZvaWQ+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFQgJiBUdWlCYXNlRGlhbG9nQ29udGV4dDxLIGV4dGVuZHMgdm9pZCA/IEcgOiBLPj4sXG4gICAgICAgIG9wdGlvbnM6IFBhcnRpYWw8VD4gPSB7fSxcbiAgICApOiBPYnNlcnZhYmxlPEsgZXh0ZW5kcyB2b2lkID8gRyA6IEs+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlV2l0aCA9IChyZXN1bHQ6IEsgZXh0ZW5kcyB2b2lkID8gRyA6IEspOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkaWFsb2cgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgY29tcGxldGVXaXRoLFxuICAgICAgICAgICAgICAgICRpbXBsaWNpdDogb2JzZXJ2ZXIsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLmNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWRTZXJ2aWNlLmdlbmVyYXRlKCksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmRpYWxvZ3MkLm5leHQoWy4uLnRoaXMuZGlhbG9ncyQudmFsdWUsIGRpYWxvZ10pO1xuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9ncyQubmV4dCh0aGlzLmRpYWxvZ3MkLnZhbHVlLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IGRpYWxvZykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19