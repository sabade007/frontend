var AbstractTuiThemeSwitcher_1;
import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, Inject } from '@angular/core';
/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 * @dynamic
 */
let AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher_1 = class AbstractTuiThemeSwitcher {
    constructor(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        const styles = this.documentRef.head.querySelectorAll(`style`);
        this.constructor.style =
            styles[styles.length - 1];
    }
    get style() {
        return this.constructor.style;
    }
    ngOnDestroy() {
        this.removeTheme();
    }
    addTheme() {
        if (this.style) {
            this.documentRef.head.appendChild(this.style);
        }
    }
    removeTheme() {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    }
};
AbstractTuiThemeSwitcher.style = null;
AbstractTuiThemeSwitcher.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher_1 = __decorate([
    Directive(),
    __param(0, Inject(DOCUMENT))
], AbstractTuiThemeSwitcher);
export { AbstractTuiThemeSwitcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc3dpdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsidGhlbWUtc3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQVksTUFBTSxlQUFlLENBQUM7QUFFM0Q7Ozs7OztHQU1HO0FBRUgsSUFBc0Isd0JBQXdCLGdDQUE5QyxNQUFzQix3QkFBd0I7SUFHMUMsWUFBK0MsV0FBcUI7UUFBckIsZ0JBQVcsR0FBWCxXQUFXLENBQVU7UUFDaEUsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsT0FBTztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0IsSUFBSSxDQUFDLFdBQVksQ0FBQyxLQUFLO1lBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUF5QyxJQUFJLENBQUMsV0FBWSxDQUFDLEtBQUssQ0FBQztJQUNyRSxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU8sUUFBUTtRQUNaLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDO0lBRU8sV0FBVztRQUNmLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQWxDVSw4QkFBSyxHQUE0QixJQUFJLENBQUM7O1lBRWUsUUFBUSx1QkFBdkQsTUFBTSxTQUFDLFFBQVE7O0FBSFYsd0JBQXdCO0lBRDdDLFNBQVMsRUFBRTtJQUlLLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0dBSFgsd0JBQXdCLENBbUM3QztTQW5DcUIsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYWJzdHJhY3QgY2xhc3MgdG8gY3JlYXRlIHlvdXIgb3duIHRvZ2dsZWFibGUgdGhlbWVzLlxuICogQSBjb21wb25lbnQgZXh0ZW5kaW5nIHRoaXMgY2xhc3MgbXVzdCBoYXZlIENTUyB2YXJpYWJsZXMgZGVmaW5pdGlvbnNcbiAqIGFuZCBoYXZlIFZpZXdFbmNhcHN1bGF0aW9uIHNldCB0byBOT05FLiBBIGJvb2xlYW4gaW5wdXQgYWxsb3dzIHRvXG4gKiBzd2l0Y2ggdGhlbWUgb24gb3Igb2ZmLlxuICogQGR5bmFtaWNcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlUaGVtZVN3aXRjaGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBzdGF0aWMgc3R5bGU6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnRSZWY6IERvY3VtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRoZW1lKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuZG9jdW1lbnRSZWYuaGVhZC5xdWVyeVNlbGVjdG9yQWxsKGBzdHlsZWApO1xuXG4gICAgICAgICg8dHlwZW9mIEFic3RyYWN0VHVpVGhlbWVTd2l0Y2hlcj50aGlzLmNvbnN0cnVjdG9yKS5zdHlsZSA9XG4gICAgICAgICAgICBzdHlsZXNbc3R5bGVzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGdldCBzdHlsZSgpOiBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiAoPHR5cGVvZiBBYnN0cmFjdFR1aVRoZW1lU3dpdGNoZXI+dGhpcy5jb25zdHJ1Y3Rvcikuc3R5bGU7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlVGhlbWUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFRoZW1lKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmFwcGVuZENoaWxkKHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVUaGVtZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmNvbnRhaW5zKHRoaXMuc3R5bGUpKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVmLmhlYWQucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=