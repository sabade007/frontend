{"version":3,"sources":["ng://@taiga-ui/cdk/utils/math/clamp.ts","ng://@taiga-ui/cdk/utils/math/in-range.ts","ng://@taiga-ui/cdk/utils/math/normalize-to-int-number.ts","ng://@taiga-ui/cdk/utils/math/quantize.ts","ng://@taiga-ui/cdk/utils/math/round.ts","ng://@taiga-ui/cdk/utils/math/sum.ts","ng://@taiga-ui/cdk/utils/math/to-int.ts","ng://@taiga-ui/cdk/utils/math/to-radians.ts"],"names":["clamp","value","min","max","tuiAssert","assert","Number","isNaN","Math","tuiClamp","inRange","fromInclude","toExclude","tuiInRange","normalizeToIntNumber","isInteger","round","tuiNormalizeToIntNumber","quantize","quantum","isFinite","remainder","tuiQuantize","precision","calculate","ceil","floor","tuiRound","tuiCeil","tuiFloor","func","Infinity","pair","split","processedPair","sum","args","_i","arguments","length","reduce","a","b","tuiSum","toInt","bool","tuiToInt","toRadians","deg","PI","tuiToRadians"],"mappings":"+cAWgBA,EAAMC,EAAeC,EAAaC,GAM9C,OALAC,EAAAA,UAAUC,QAAQC,OAAOC,MAAMN,IAC/BG,EAAAA,UAAUC,QAAQC,OAAOC,MAAML,IAC/BE,EAAAA,UAAUC,QAAQC,OAAOC,MAAMJ,IAC/BC,EAAAA,UAAUC,OAAOF,GAAOD,GAEjBM,KAAKN,IAAIC,EAAKK,KAAKL,IAAID,EAAKD,QAG1BQ,EAAWT,WCTRU,EAAQT,EAAeU,EAAqBC,GAMxD,OALAR,EAAAA,UAAUC,QAAQC,OAAOC,MAAMN,IAC/BG,EAAAA,UAAUC,QAAQC,OAAOC,MAAMI,IAC/BP,EAAAA,UAAUC,QAAQC,OAAOC,MAAMK,IAC/BR,EAAAA,UAAUC,OAAOM,EAAcC,GAExBX,GAASU,GAAeV,EAAQW,MAG9BC,EAAaH,WCRVI,EAAqBb,EAAeC,EAAaC,GAK7D,OAJAC,EAAAA,UAAUC,OAAOC,OAAOS,UAAUb,IAClCE,EAAAA,UAAUC,OAAOC,OAAOS,UAAUZ,IAClCC,EAAAA,UAAUC,OAAOH,GAAOC,GAEpBG,OAAOC,MAAMN,IAAUA,GAASC,EACzBA,EAGPD,GAASE,EACFA,EAGJK,KAAKQ,MAAMf,OAGTgB,EAA0BH,WClBvBI,EAASjB,EAAekB,GACpCf,EAAAA,UAAUC,OAAOC,OAAOc,SAASnB,IACjCG,EAAAA,UAAUC,OAAOC,OAAOc,SAASD,IACjCf,EAAAA,UAAUC,OAAOc,EAAU,GAE3B,IAAME,EAAYpB,EAAQkB,EAE1B,OAAOE,EAAYF,EAAU,EAAIlB,EAAQoB,EAAYpB,EAAQkB,EAAUE,MAG9DC,EAAcJ,WCZXF,EAAMf,EAAesB,GACjC,YADiC,IAAAA,IAAAA,EAAA,GAC1BC,EAAUvB,EAAOsB,EAAWf,KAAKQ,gBAO5BS,EAAKxB,EAAesB,GAChC,YADgC,IAAAA,IAAAA,EAAA,GACzBC,EAAUvB,EAAOsB,EAAWf,KAAKiB,eAO5BC,EAAMzB,EAAesB,GACjC,YADiC,IAAAA,IAAAA,EAAA,GAC1BC,EAAUvB,EAAOsB,EAAWf,KAAKkB,WAG/BC,EAAWX,EACXY,EAAUH,EACVI,EAAWH,EASxB,SAASF,EACLvB,EACAsB,EACAO,GAEA,GAAI7B,IAAU8B,EAAAA,EACV,OAAO9B,EAGXG,EAAAA,UAAUC,QAAQC,OAAOC,MAAMN,GAAQ,wBACvCG,EAAAA,UAAUC,OAAOC,OAAOS,UAAUQ,GAAY,6BAE9CA,EAAYf,KAAKN,IAAIqB,EAjDH,KAmDlB,IAAMS,GAAU/B,EAAK,KAAIgC,MAAM,KAEzBC,GADYJ,EAAKxB,OAAU0B,EAAK,GAAE,KAAI1B,OAAO0B,EAAK,IAAMT,KAC5B,KAAIU,MAAM,KAE5C,OAAO3B,OAAU4B,EAAc,GAAE,KAAI5B,OAAO4B,EAAc,IAAMX,aCpDpDY,QAAI,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAChB,OAAOD,EAAKI,QAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,IAAG,OAG3BC,EAASR,WCLNS,EAAMC,GAClB,OAAOA,EAAO,EAAI,MAGTC,EAAWF,WCHRG,EAAUC,GACtB,OAAQA,EAAMxC,KAAKyC,GAAM,QAGhBC,EAAeH","sourcesContent":["import {tuiAssert} from '@taiga-ui/cdk/classes';\n\n/**\n * @deprecated: use {@link tuiClamp} instead\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function clamp(value: number, min: number, max: number): number {\n    tuiAssert.assert(!Number.isNaN(value));\n    tuiAssert.assert(!Number.isNaN(min));\n    tuiAssert.assert(!Number.isNaN(max));\n    tuiAssert.assert(max >= min);\n\n    return Math.min(max, Math.max(min, value));\n}\n\nexport const tuiClamp = clamp;\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\n/**\n * @deprecated: use {@link tuiInRange} instead\n * Checks if the value is in range\n *\n * @param value\n * @param fromInclude lower inclusive limit\n * @param toExclude upper exclusive limit\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function inRange(value: number, fromInclude: number, toExclude: number): boolean {\n    tuiAssert.assert(!Number.isNaN(value));\n    tuiAssert.assert(!Number.isNaN(fromInclude));\n    tuiAssert.assert(!Number.isNaN(toExclude));\n    tuiAssert.assert(fromInclude < toExclude);\n\n    return value >= fromInclude && value < toExclude;\n}\n\nexport const tuiInRange = inRange;\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\n/**\n * @deprecated: use {@link tuiNormalizeToIntNumber} instead\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function normalizeToIntNumber(value: number, min: number, max: number): number {\n    tuiAssert.assert(Number.isInteger(min));\n    tuiAssert.assert(Number.isInteger(max));\n    tuiAssert.assert(min <= max);\n\n    if (Number.isNaN(value) || value <= min) {\n        return min;\n    }\n\n    if (value >= max) {\n        return max;\n    }\n\n    return Math.round(value);\n}\n\nexport const tuiNormalizeToIntNumber = normalizeToIntNumber;\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\n/**\n * @deprecated: use {@link tuiQuantize} instead\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function quantize(value: number, quantum: number): number {\n    tuiAssert.assert(Number.isFinite(value));\n    tuiAssert.assert(Number.isFinite(quantum));\n    tuiAssert.assert(quantum > 0);\n\n    const remainder = value % quantum;\n\n    return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\n\nexport const tuiQuantize = quantize;\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\nconst MAX_PRECISION = 292;\n\n/**\n * @deprecated: use {@link tuiRound} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function round(value: number, precision: number = 0): number {\n    return calculate(value, precision, Math.round);\n}\n\n/**\n * @deprecated: use {@link tuiCeil} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ceil(value: number, precision: number = 0): number {\n    return calculate(value, precision, Math.ceil);\n}\n\n/**\n * @deprecated: use {@link tuiFloor} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function floor(value: number, precision: number = 0): number {\n    return calculate(value, precision, Math.floor);\n}\n\nexport const tuiRound = round;\nexport const tuiCeil = ceil;\nexport const tuiFloor = floor;\n\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(\n    value: number,\n    precision: number,\n    func: (x: number) => number,\n): number {\n    if (value === Infinity) {\n        return value;\n    }\n\n    tuiAssert.assert(!Number.isNaN(value), `Value must be number`);\n    tuiAssert.assert(Number.isInteger(precision), `Precision must be integer`);\n\n    precision = Math.min(precision, MAX_PRECISION);\n\n    const pair = `${value}e`.split(`e`);\n    const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n    const processedPair = `${tempValue}e`.split(`e`);\n\n    return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\n","/**\n * @deprecated: use {@link tuiSum} instead\n * Calculates sum of any number of passed arguments\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function sum(...args: number[]): number {\n    return args.reduce((a, b) => a + b, 0);\n}\n\nexport const tuiSum = sum;\n","/**\n * @deprecated: use {@link tuiToInt} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function toInt(bool: boolean): 0 | 1 {\n    return bool ? 1 : 0;\n}\n\nexport const tuiToInt = toInt;\n","/**\n * @deprecated: use {@link tuiToRadians} instead\n * Converts angle in degrees to radians\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function toRadians(deg: number): number {\n    return (deg * Math.PI) / 180;\n}\n\nexport const tuiToRadians = toRadians;\n"]}