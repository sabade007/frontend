{"version":3,"sources":["ng://@taiga-ui/cdk/classes/assert.ts","ng://@taiga-ui/cdk/classes/validation-error.ts"],"names":["tuiAssert","enabled","assert","this","Function","prototype","bind","call","console","EMPTY_FUNCTION","message","context","node","defaultView","_b","_a","ownerDocument","isElement","Element","HTMLDocument"],"mappings":"sZAEaA,EAAY,CACrBC,SAAS,EACTC,aACI,OAAOC,KAAKF,QACNG,SAASC,UAAUC,KAAKC,KAAKC,QAAQN,OAAQM,SAC7CC,EAAAA,uBCJV,SACaC,EACAC,QAAA,IAAAA,IAAAA,EAAa,IADbR,KAAAO,QAAAA,EACAP,KAAAQ,QAAAA,0EDkBsBC,WAC7BC,EAA2C,QAA7BC,EAAc,QAAdC,EAACH,SAAa,IAAAG,OAAA,EAAAA,EAAEC,qBAAa,IAAAF,OAAA,EAAAA,EAC3CD,YACAI,IACAJ,IACDD,aAAgBC,EAAYK,SAAWN,aAAgBC,EAAYM,cAExEnB,EAAUE,OAAOe,EAAW","sourcesContent":["import {EMPTY_FUNCTION} from '@taiga-ui/cdk/constants';\n\nexport const tuiAssert = {\n    enabled: false,\n    get assert(): (assertion: boolean, ...args: unknown[]) => void {\n        return this.enabled\n            ? Function.prototype.bind.call(console.assert, console)\n            : EMPTY_FUNCTION;\n    },\n};\n\ntype PossibleNode = Element | EventTarget | Node | null;\n\n// TODO: remove `DefaultView` in v3.0\n// TS 3.8 Property 'Element' does not exist on type 'Window'.\ninterface DefaultView {\n    Element: typeof Node;\n    HTMLElement: typeof Node;\n    HTMLDocument: typeof Node;\n}\n\n// TODO: replace `HTMLElement` to `Element` in v3.0\n// TS 3.8 Argument of type Argument of type 'TuiNativeFocusableElement | HTMLElement' is not assignable to parameter of type 'HTMLElement'.\nexport function tuiAssertIsHTMLElement(node?: PossibleNode): asserts node is HTMLElement {\n    const defaultView = (node as Node)?.ownerDocument\n        ?.defaultView as unknown as DefaultView;\n    const isElement =\n        !!defaultView &&\n        (node instanceof defaultView.Element || node instanceof defaultView.HTMLDocument);\n\n    tuiAssert.assert(isElement, `Node is not an Element`);\n}\n","import {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\n\nexport class TuiValidationError<T extends Record<string, any> = Record<string, unknown>> {\n    constructor(\n        readonly message: PolymorpheusContent<T>,\n        readonly context: T = {} as T,\n    ) {}\n}\n"]}