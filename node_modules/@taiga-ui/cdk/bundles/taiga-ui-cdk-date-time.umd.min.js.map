{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@taiga-ui/cdk/date-time/date-time.ts","ng://@taiga-ui/cdk/date-time/date-fillers.ts","ng://@taiga-ui/cdk/date-time/date-format.ts","ng://@taiga-ui/cdk/date-time/date-separator.ts","ng://@taiga-ui/cdk/date-time/year.ts","ng://@taiga-ui/cdk/date-time/month.ts","ng://@taiga-ui/cdk/date-time/day.ts","ng://@taiga-ui/cdk/date-time/month-range.ts","ng://@taiga-ui/cdk/date-time/day-range.ts","ng://@taiga-ui/cdk/date-time/days.const.ts","ng://@taiga-ui/cdk/date-time/time.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","RANGE_SEPARATOR_CHAR","CHAR_NO_BREAK_SPACE","CHAR_EN_DASH","TUI_DATE_FILLER","InjectionToken","factory","TUI_DATE_RANGE_FILLER","dateFiller","inject","DATE_RANGE_FILLER_LENGTH","length","TUI_DATE_FORMAT","TUI_DATE_SEPARATOR","TuiYear","year","tuiAssert","assert","isValidYear","Number","isInteger","inRange","MAX_YEAR","isLeapYear","getAbsoluteLeapYears","Math","ceil","getYearStartDaysOffset","absoluteLeapYears","lengthBetween","from","to","normalizeYearPart","normalizeToIntNumber","defineProperty","padStart","yearBefore","_a","yearSameOrBefore","yearSame","yearSameOrAfter","yearAfter","append","backwards","_b","resultYear","toString","formattedYear","valueOf","Symbol","toPrimitive","hint","Date","toJSON","TuiMonth","month","_this","_super","isValidMonth","isValidMonthPart","getMonthDaysCount","currentLocal","nativeDate","getFullYear","getMonth","currentUtc","getUTCFullYear","getUTCMonth","absoluteFrom","normalizeMonthPart","MAX_MONTH","formattedMonthPart","monthStartDaysOffset","daysCount","result","yearStartDaysOffset","currentMonth","monthBefore","another","monthSameOrBefore","monthSame","monthSameOrAfter","monthAfter","_c","totalMonths","floor","formattedMonth","toLocalNativeDate","toUtcNativeDate","UTC","TuiDay","day","isValidDay","fromLocalNativeDate","date","getDate","fromUtcNativeDate","getUTCDate","getDayFromMonthRowCol","row","col","normalizeOf","normalizedYear","normalizedMonth","normalizedDay","normalizeDayPart","round","getTime","parseRawDateString","dateMode","parseInt","slice","normalizeParse","rawDate","jsonParse","yearMonthDayString","InvalidYearException","InvalidMonthException","InvalidDayException","monthDaysCount","formattedDayPart","dayOfWeek","startFromMonday","getDay","dayBefore","daySameOrBefore","daySame","daySameOrAfter","dayAfter","dayLimit","min","max","_d","years","months","days","getFormattedDay","dateFormat","separator","dd","mm","yyyy","TuiMonthRange","sort","month1","month2","isDateMode","includes","TuiDayRange","day1","day2","rangeString","leftDay","getFormattedDayRange","dateSeparator","TUI_FIRST_DAY","TUI_LAST_DAY","TuiTime","hours","minutes","seconds","ms","isValidTime","current","fromAbsoluteMilliseconds","now","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_SECOND","getTimezoneOffset","milliseconds","MILLISECONDS_IN_MINUTE","fromString","time","getHours","getMinutes","getSeconds","getMilliseconds","shift","_e","newMs","secondsToAdd","newSeconds","minutesToAdd","newMinutes","hoursToAdd","mode","needAddMs","needAddSeconds","formatTime","toAbsoluteMilliseconds","digits","dateString","newDateSeparator","replace"],"mappings":"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","sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import {CHAR_EN_DASH, CHAR_NO_BREAK_SPACE} from '@taiga-ui/cdk/constants';\n\nexport const DAYS_IN_WEEK = 7;\n\nexport const DAYS_IN_NORMAL_YEAR = 365;\n\nexport const DAYS_IN_LEAP_YEAR = 366;\n\nexport const MONTHS_IN_YEAR = 12;\n\nexport const MIN_DAY = 1;\n\nexport const MIN_MONTH = 0;\n\nexport const MAX_MONTH = 11;\n\nexport const MIN_YEAR = 0;\n\nexport const MAX_YEAR = 9999;\n\nexport const RANGE_SEPARATOR_CHAR = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`;\n\nexport const MILLISECONDS_IN_SECOND = 1000;\n\nexport const SECONDS_IN_MINUTE = 60;\n\nexport const MINUTES_IN_HOUR = 60;\n\nexport const HOURS_IN_DAY = 24;\n\nexport const MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\n\nexport const MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;\n\nexport const MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\n\n/**\n * @deprecated dont use it. See {@link TUI_DATE_FORMAT}\n */\nexport const TUI_DATE_FILLER = new InjectionToken<string>(`date filler for Taiga UI`, {\n    factory: () => `dd.mm.yyyy`,\n});\n\n/**\n * @deprecated dont use it\n */\nexport const TUI_DATE_RANGE_FILLER = new InjectionToken<string>(\n    `date range filler for Taiga UI`,\n    {\n        factory: () => {\n            const dateFiller = inject(TUI_DATE_FILLER);\n\n            return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;\n        },\n    },\n);\n\n/**\n * @internal 'dd.mm.yyyy'.length\n * Used in:\n * - {@link TuiInputDateComponent}\n * - {@link TuiInputDateRangeComponent}\n * - {@link TuiInputDateTimeComponent}\n */\nexport const DATE_FILLER_LENGTH = 10;\n/**\n * @internal\n * Used in {@link TuiInputDateRangeComponent}\n */\nexport const DATE_RANGE_FILLER_LENGTH =\n    2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;\n","import {InjectionToken} from '@angular/core';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\n\nexport const TUI_DATE_FORMAT = new InjectionToken<TuiDateMode>(\n    `Active date format for Taiga UI`,\n    {\n        factory: () => `DMY`,\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const TUI_DATE_SEPARATOR = new InjectionToken<string>(\n    `Date separator for Taiga UI components`,\n    {\n        factory: () => `.`,\n    },\n);\n\nexport const changeDateSeparator = (\n    dateString: string,\n    newDateSeparator: string,\n): string => dateString.replace(/[^0-9A-Za-zА-Яа-я]/gi, newDateSeparator);\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiYearLike} from '@taiga-ui/cdk/interfaces';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {\n    DAYS_IN_LEAP_YEAR,\n    DAYS_IN_NORMAL_YEAR,\n    DAYS_IN_WEEK,\n    MAX_YEAR,\n    MIN_YEAR,\n} from './date-time';\n\n/**\n * Immutable year object\n * @nosideeffects\n */\nexport class TuiYear implements TuiYearLike {\n    constructor(readonly year: number) {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n    }\n\n    /**\n     * Checks year for validity\n     */\n    static isValidYear(year: number): boolean {\n        return Number.isInteger(year) && inRange(year, MIN_YEAR, MAX_YEAR + 1);\n    }\n\n    /**\n     * Check if passed year is a leap year\n     */\n    static isLeapYear(year: number): boolean {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n\n        return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n    }\n\n    /**\n     * Returns amount of leap years from year 0 to the passed one\n     */\n    static getAbsoluteLeapYears(year: number): number {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n\n        return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Returns day of week offset of the beginning of the passed year\n     *\n     * @param year\n     * @param absoluteLeapYears amount of leap years prior to the passed one\n     * @return offset in days\n     */\n    static getYearStartDaysOffset(year: number, absoluteLeapYears: number): number {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n        tuiAssert.assert(Number.isInteger(absoluteLeapYears));\n        tuiAssert.assert(year >= absoluteLeapYears);\n        tuiAssert.assert(absoluteLeapYears >= 0);\n\n        return (\n            (absoluteLeapYears * DAYS_IN_LEAP_YEAR +\n                (year - absoluteLeapYears) * DAYS_IN_NORMAL_YEAR +\n                5) %\n            DAYS_IN_WEEK\n        );\n    }\n\n    static lengthBetween(from: TuiYear, to: TuiYear): number {\n        return to.year - from.year;\n    }\n\n    /**\n     * Normalizes year by clamping it between min and max years\n     */\n    protected static normalizeYearPart(year: number): number {\n        return normalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);\n    }\n\n    get formattedYear(): string {\n        return padStart(String(this.year), 4, `0`);\n    }\n\n    get isLeapYear(): boolean {\n        return TuiYear.isLeapYear(this.year);\n    }\n\n    /**\n     * Returns amount of leap years from year 0 to current\n     */\n    get absoluteLeapYears(): number {\n        return TuiYear.getAbsoluteLeapYears(this.year);\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Returns day of week offset of the beginning of the current year\n     */\n    get yearStartDaysOffset(): number {\n        return TuiYear.getYearStartDaysOffset(this.year, this.absoluteLeapYears);\n    }\n\n    /**\n     * Passed year is after current\n     */\n    yearBefore({year}: TuiYear): boolean {\n        return this.year < year;\n    }\n\n    /**\n     * Passed year is the same or after current\n     */\n    yearSameOrBefore({year}: TuiYear): boolean {\n        return this.year <= year;\n    }\n\n    /**\n     * Passed year is the same as current\n     */\n    yearSame({year}: TuiYear): boolean {\n        return this.year === year;\n    }\n\n    /**\n     * Passed year is either the same of before the current\n     */\n    yearSameOrAfter({year}: TuiYear): boolean {\n        return this.year >= year;\n    }\n\n    /**\n     * Passed year is before current\n     */\n    yearAfter({year}: TuiYear): boolean {\n        return this.year > year;\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably offsets year\n     */\n    append({year = 0}: TuiYearLike, backwards: boolean = false): TuiYear {\n        tuiAssert.assert(Number.isInteger(year));\n\n        if (backwards) {\n            year *= -1;\n        }\n\n        const resultYear = this.year + year;\n\n        tuiAssert.assert(TuiYear.isValidYear(resultYear));\n\n        return new TuiYear(resultYear);\n    }\n\n    toString(): string {\n        return this.formattedYear;\n    }\n\n    valueOf(): number {\n        return this.year;\n    }\n\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint: string): number | string {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n\n    toJSON(): string {\n        return this.formattedYear;\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiMonthNumber} from '@taiga-ui/cdk/enums';\nimport {TuiMonthLike} from '@taiga-ui/cdk/interfaces';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {DAYS_IN_WEEK, MAX_MONTH, MIN_MONTH, MONTHS_IN_YEAR} from './date-time';\nimport {TuiYear} from './year';\n\n/**\n * Immutable object consisting of year and month\n */\nexport class TuiMonth extends TuiYear implements TuiMonthLike {\n    /**\n     * @param year\n     * @param month (starting with 0)\n     */\n    constructor(year: number, readonly month: number) {\n        super(year);\n        tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n    }\n\n    /**\n     * Tests month and year for validity\n     */\n    static isValidMonth(year: number, month: number): boolean {\n        return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);\n    }\n\n    /**\n     * Returns number of days in a month\n     */\n    static getMonthDaysCount(month: number, isLeapYear: boolean): number {\n        tuiAssert.assert(TuiMonth.isValidMonthPart(month));\n\n        switch (month) {\n            case TuiMonthNumber.February:\n                return isLeapYear ? 29 : 28;\n            case TuiMonthNumber.April:\n            case TuiMonthNumber.June:\n            case TuiMonthNumber.September:\n            case TuiMonthNumber.November:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Returns current month and year based on local time zone\n     * @nosideeffects\n     */\n    static currentLocal(): TuiMonth {\n        const nativeDate = new Date();\n\n        return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());\n    }\n\n    /**\n     * Returns current month and year based on UTC\n     */\n    static currentUtc(): TuiMonth {\n        const nativeDate = new Date();\n\n        return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());\n    }\n\n    static lengthBetween(from: TuiMonth, to: TuiMonth): number {\n        const absoluteFrom = from.month + from.year * 12;\n        const absoluteTo = to.month + to.year * 12;\n\n        return absoluteTo - absoluteFrom;\n    }\n\n    /**\n     * Normalizes number by clamping it between min and max month\n     */\n    protected static normalizeMonthPart(month: number): number {\n        return normalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);\n    }\n\n    /**\n     * Tests month for validity\n     */\n    private static isValidMonthPart(month: number): boolean {\n        return Number.isInteger(month) && inRange(month, MIN_MONTH, MAX_MONTH + 1);\n    }\n\n    get formattedMonthPart(): string {\n        return padStart(String(this.month + 1), 2, `0`);\n    }\n\n    /**\n     * @deprecated\n     * Formatter month and year\n     */\n    get formattedMonth(): string {\n        return `${this.formattedMonthPart}.${this.formattedYear}`;\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Calculates number of weeks in a month (counting non-full weeks)\n     */\n    get weeksRowsCount(): number {\n        return Math.ceil((this.monthStartDaysOffset + this.daysCount) / DAYS_IN_WEEK);\n    }\n\n    /**\n     * Returns days in a month\n     */\n    get daysCount(): number {\n        return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Computes day of week offset of the beginning of the month\n     */\n    get monthStartDaysOffset(): number {\n        let result = this.yearStartDaysOffset;\n\n        for (let currentMonth = 0; currentMonth <= this.month - 1; currentMonth++) {\n            result += TuiMonth.getMonthDaysCount(currentMonth, this.isLeapYear);\n        }\n\n        return result % DAYS_IN_WEEK;\n    }\n\n    /**\n     * Passed month and year are after current\n     */\n    monthBefore(another: TuiMonth): boolean {\n        return (\n            this.yearBefore(another) ||\n            (this.yearSame(another) && this.month < another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are after or the same as current\n     */\n    monthSameOrBefore(another: TuiMonth): boolean {\n        return (\n            this.yearBefore(another) ||\n            (this.yearSame(another) && this.month <= another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are the same as current\n     */\n    monthSame(another: TuiMonth): boolean {\n        return this.yearSame(another) && this.month === another.month;\n    }\n\n    /**\n     * Passed month and year are either before or equal to current\n     */\n    monthSameOrAfter(another: TuiMonth): boolean {\n        return (\n            this.yearAfter(another) ||\n            (this.yearSame(another) && this.month >= another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are before current\n     */\n    monthAfter(another: TuiMonth): boolean {\n        return (\n            this.yearAfter(another) ||\n            (this.yearSame(another) && this.month > another.month)\n        );\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably alters current month and year by passed offset\n     *\n     * @param offset\n     * @param backwards shift date backwards\n     * @return new month and year object as a result of offsetting current\n     */\n    append({year = 0, month = 0}: TuiMonthLike, backwards: boolean = false): TuiMonth {\n        if (backwards) {\n            year *= -1;\n            month *= -1;\n        }\n\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n\n        return new TuiMonth(\n            Math.floor(totalMonths / MONTHS_IN_YEAR),\n            totalMonths % MONTHS_IN_YEAR,\n        );\n    }\n\n    toString(): string {\n        return this.formattedMonth;\n    }\n\n    valueOf(): number {\n        return this.toLocalNativeDate().valueOf();\n    }\n\n    toJSON(): string {\n        return `${super.toJSON()}-${this.formattedMonthPart}`;\n    }\n\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate(): Date {\n        return new Date(this.year, this.month);\n    }\n\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate(): Date {\n        return new Date(Date.UTC(this.year, this.month));\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiDayOfWeek, TuiMonthNumber} from '@taiga-ui/cdk/enums';\nimport {\n    InvalidDayException,\n    InvalidMonthException,\n    InvalidYearException,\n} from '@taiga-ui/cdk/exceptions';\nimport {TuiDayLike} from '@taiga-ui/cdk/interfaces';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {DATE_FILLER_LENGTH} from './date-fillers';\nimport {DAYS_IN_WEEK, MIN_DAY, MONTHS_IN_YEAR} from './date-time';\nimport {TuiMonth} from './month';\nimport {TuiYear} from './year';\n\n// TODO: Localized formatting\n/**\n * Immutable date object, consisting of day, month and year\n */\nexport class TuiDay extends TuiMonth {\n    constructor(year: number, month: number, readonly day: number) {\n        super(year, month);\n        tuiAssert.assert(TuiDay.isValidDay(year, month, day));\n    }\n\n    /**\n     * Creates {@link TuiDay} from native {@link Date} based on local time zone\n     */\n    static fromLocalNativeDate(date: Date): TuiDay {\n        return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * Creates {@link TuiDay} from native {@link Date} using UTC\n     */\n    static fromUtcNativeDate(date: Date): TuiDay {\n        return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n    }\n\n    /**\n     * Check validity of year, month and day\n     *\n     * @param year\n     * @param month\n     * @param day\n     * @return boolean validity\n     */\n    static isValidDay(year: number, month: number, day: number): boolean {\n        return (\n            TuiMonth.isValidMonth(year, month) &&\n            Number.isInteger(day) &&\n            inRange(\n                day,\n                MIN_DAY,\n                TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1,\n            )\n        );\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Calculated day on a calendar grid\n     *\n     * @param month\n     * @param row row in a calendar\n     * @param col column in a calendar\n     * @return resulting day on these coordinates (could exceed passed month)\n     */\n    static getDayFromMonthRowCol(month: TuiMonth, row: number, col: number): TuiDay {\n        tuiAssert.assert(Number.isInteger(row));\n        tuiAssert.assert(inRange(row, 0, 6));\n        tuiAssert.assert(Number.isInteger(col));\n        tuiAssert.assert(inRange(col, 0, DAYS_IN_WEEK));\n\n        let day = row * DAYS_IN_WEEK + col - month.monthStartDaysOffset + 1;\n\n        if (day > month.daysCount) {\n            day -= month.daysCount;\n            month = month.append({month: 1});\n        }\n\n        if (day <= 0) {\n            month = month.append({month: -1});\n            day = month.daysCount + day;\n        }\n\n        return new TuiDay(month.year, month.month, day);\n    }\n\n    /**\n     * Current day based on local time zone\n     */\n    static currentLocal(): TuiDay {\n        const nativeDate = new Date();\n        const year = nativeDate.getFullYear();\n        const month = nativeDate.getMonth();\n        const day = nativeDate.getDate();\n\n        return new TuiDay(year, month, day);\n    }\n\n    /**\n     * Returns current day based on UTC\n     */\n    static currentUtc(): TuiDay {\n        const nativeDate = new Date();\n        const year = nativeDate.getUTCFullYear();\n        const month = nativeDate.getUTCMonth();\n        const day = nativeDate.getUTCDate();\n\n        return new TuiDay(year, month, day);\n    }\n\n    /**\n     * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.\n     *\n     * @param year any year value, including invalid\n     * @param month any month value, including invalid (months start with 0)\n     * @param day any day value, including invalid\n     * @return normalized date\n     */\n    static normalizeOf(year: number, month: number, day: number): TuiDay {\n        const normalizedYear = TuiYear.normalizeYearPart(year);\n        const normalizedMonth = TuiMonth.normalizeMonthPart(month);\n        const normalizedDay = TuiDay.normalizeDayPart(\n            day,\n            normalizedMonth,\n            normalizedYear,\n        );\n\n        return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);\n    }\n\n    static lengthBetween(from: TuiDay, to: TuiDay): number {\n        return Math.round(\n            (to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) /\n                (1000 * 60 * 60 * 24),\n        );\n    }\n\n    static parseRawDateString(\n        date: string,\n        dateMode: TuiDateMode = `DMY`,\n    ): {day: number; month: number; year: number} {\n        tuiAssert.assert(\n            date.length === DATE_FILLER_LENGTH,\n            `[parseRawDateString]: wrong date string length`,\n        );\n\n        switch (dateMode) {\n            case `YMD`:\n                return {\n                    day: parseInt(date.slice(8, 10), 10),\n                    month: parseInt(date.slice(5, 7), 10) - 1,\n                    year: parseInt(date.slice(0, 4), 10),\n                };\n\n            case `MDY`:\n                return {\n                    day: parseInt(date.slice(3, 5), 10),\n                    month: parseInt(date.slice(0, 2), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n\n            default:\n            case `DMY`:\n                return {\n                    day: parseInt(date.slice(0, 2), 10),\n                    month: parseInt(date.slice(3, 5), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n        }\n    }\n\n    // TODO: Move month and year related code corresponding classes\n    /**\n     * Parsing a string with date with normalization\n     *\n     * @param rawDate date string\n     * @param dateMode date format of the date string (DMY | MDY | YMD)\n     * @return normalized date\n     */\n    static normalizeParse(rawDate: string, dateMode: TuiDateMode = `DMY`): TuiDay {\n        const {day, month, year} = this.parseRawDateString(rawDate, dateMode);\n\n        return TuiDay.normalizeOf(year, month, day);\n    }\n\n    /**\n     * Parsing a date stringified in a toJSON format\n     * @param yearMonthDayString date string in format of YYYY-MM-DD\n     * @return date\n     * @throws exceptions if any part of the date is invalid\n     */\n    static jsonParse(yearMonthDayString: string): TuiDay {\n        const {day, month, year} = this.parseRawDateString(yearMonthDayString, `YMD`);\n\n        if (!TuiYear.isValidYear(year)) {\n            throw new InvalidYearException(year);\n        }\n\n        if (!TuiMonth.isValidMonth(year, month)) {\n            throw new InvalidMonthException(month);\n        }\n\n        if (\n            !Number.isInteger(day) ||\n            !inRange(\n                day,\n                MIN_DAY,\n                TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1,\n            )\n        ) {\n            throw new InvalidDayException(day);\n        }\n\n        return new TuiDay(year, month, day);\n    }\n\n    protected static normalizeDayPart(day: number, month: number, year: number): number {\n        tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n\n        const monthDaysCount = TuiMonth.getMonthDaysCount(\n            month,\n            TuiYear.isLeapYear(year),\n        );\n\n        return normalizeToIntNumber(day, 1, monthDaysCount);\n    }\n\n    get formattedDayPart(): string {\n        return padStart(String(this.day), 2, `0`);\n    }\n\n    /**\n     * @deprecated use {@link getFormattedDay} instead\n     * Formatted whole date\n     */\n    get formattedDay(): string {\n        return `${this.formattedDayPart}.${this.formattedMonth}`;\n    }\n\n    get isWeekend(): boolean {\n        const dayOfWeek = this.dayOfWeek(false);\n\n        return dayOfWeek === TuiDayOfWeek.Saturday || dayOfWeek === TuiDayOfWeek.Sunday;\n    }\n\n    /**\n     * Returns day of week\n     *\n     * @param startFromMonday whether week starts from Monday and not from Sunday\n     * @return day of week (from 0 to 6)\n     */\n    dayOfWeek(startFromMonday: boolean = true): number {\n        const dayOfWeek = startFromMonday\n            ? this.toLocalNativeDate().getDay() - 1\n            : this.toLocalNativeDate().getDay();\n\n        return dayOfWeek < 0 ? 6 : dayOfWeek;\n    }\n\n    /**\n     * Passed date is after current\n     */\n    dayBefore(another: TuiDay): boolean {\n        return (\n            this.monthBefore(another) ||\n            (this.monthSame(another) && this.day < another.day)\n        );\n    }\n\n    /**\n     * Passed date is after or equals to current\n     */\n    daySameOrBefore(another: TuiDay): boolean {\n        return (\n            this.monthBefore(another) ||\n            (this.monthSame(another) && this.day <= another.day)\n        );\n    }\n\n    /**\n     * Passed date is the same as current\n     */\n    daySame(another: TuiDay): boolean {\n        return this.monthSame(another) && this.day === another.day;\n    }\n\n    /**\n     * Passed date is either before or the same as current\n     */\n    daySameOrAfter(another: TuiDay): boolean {\n        return (\n            this.monthAfter(another) ||\n            (this.monthSame(another) && this.day >= another.day)\n        );\n    }\n\n    /**\n     * Passed date is before current\n     */\n    dayAfter(another: TuiDay): boolean {\n        return (\n            this.monthAfter(another) ||\n            (this.monthSame(another) && this.day > another.day)\n        );\n    }\n\n    /**\n     * Clamping date between two limits\n     *\n     * @param min\n     * @param max\n     * @return clamped date\n     */\n    dayLimit(min: TuiDay | null, max: TuiDay | null): TuiDay {\n        if (min !== null && this.dayBefore(min)) {\n            return min;\n        }\n\n        if (max !== null && this.dayAfter(max)) {\n            return max;\n        }\n\n        return this;\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably alters current day by passed offset\n     *\n     * If resulting month has more days than original one, date is rounded to the maximum day\n     * in the resulting month. Offset of days will be calculated based on the resulted year and month\n     * to not interfere with parent classes methods\n     *\n     * @param offset\n     * @param backwards shift date backwards\n     * @return new date object as a result of offsetting current\n     */\n    append(\n        {year = 0, month = 0, day = 0}: TuiDayLike,\n        backwards: boolean = false,\n    ): TuiDay {\n        if (backwards) {\n            year *= -1;\n            month *= -1;\n            day *= -1;\n        }\n\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n        let years = Math.floor(totalMonths / MONTHS_IN_YEAR);\n        let months = totalMonths % MONTHS_IN_YEAR;\n\n        let days =\n            Math.min(\n                this.day,\n                TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years)),\n            ) + day;\n\n        while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {\n            days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n\n            if (months === TuiMonthNumber.December) {\n                years++;\n                months = TuiMonthNumber.January;\n            } else {\n                months++;\n            }\n        }\n\n        while (days < MIN_DAY) {\n            if (months === TuiMonthNumber.January) {\n                years--;\n                months = TuiMonthNumber.December;\n            } else {\n                months--;\n            }\n\n            days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n        }\n\n        return new TuiDay(years, months, days);\n    }\n\n    /**\n     * Returns formatted whole date\n     */\n    getFormattedDay(dateFormat: TuiDateMode, separator: string): string {\n        tuiAssert.assert(\n            separator.length === 1,\n            `Separator should consist of only 1 symbol`,\n        );\n\n        const dd = this.formattedDayPart;\n        const mm = this.formattedMonthPart;\n        const yyyy = this.formattedYear;\n\n        switch (dateFormat) {\n            case `YMD`:\n                return `${yyyy}${separator}${mm}${separator}${dd}`;\n            case `MDY`:\n                return `${mm}${separator}${dd}${separator}${yyyy}`;\n            case `DMY`:\n            default:\n                return `${dd}${separator}${mm}${separator}${yyyy}`;\n        }\n    }\n\n    toString(dateFormat: TuiDateMode = `DMY`, separator: string = `.`): string {\n        return this.getFormattedDay(dateFormat, separator);\n    }\n\n    toJSON(): string {\n        return `${super.toJSON()}-${this.formattedDayPart}`;\n    }\n\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate(): Date {\n        return new Date(this.year, this.month, this.day);\n    }\n\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate(): Date {\n        return new Date(Date.UTC(this.year, this.month, this.day));\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\nimport {TuiMonth} from './month';\n\n/**\n * An immutable range of two {@link TuiMonth} objects\n */\nexport class TuiMonthRange {\n    constructor(readonly from: TuiMonth, readonly to: TuiMonth) {\n        tuiAssert.assert(from.monthSameOrBefore(to));\n    }\n\n    static sort(month1: TuiMonth, month2: TuiMonth): TuiMonthRange {\n        return month1.monthSameOrBefore(month2)\n            ? new TuiMonthRange(month1, month2)\n            : new TuiMonthRange(month2, month1);\n    }\n\n    get isSingleMonth(): boolean {\n        return this.from.monthSame(this.to);\n    }\n\n    /**\n     * @deprecated\n     */\n    get formattedMonthRange(): string {\n        return `${this.from.formattedMonth}${RANGE_SEPARATOR_CHAR}${this.to.formattedMonth}`;\n    }\n\n    monthSame(another: TuiMonthRange): boolean {\n        return this.from.monthSame(another.from) && this.to.monthSame(another.to);\n    }\n\n    toString(): string {\n        return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\n\nimport {DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH} from './date-fillers';\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\nimport {TuiDay} from './day';\nimport {TuiMonthRange} from './month-range';\n\n/**\n * Temporary type guard to satisfy ts-overloading of normalizeParse method\n * @deprecated\n */\nexport const isDateMode = (dateMode: string): dateMode is TuiDateMode =>\n    [`DMY`, `YMD`, `MDY`].includes(dateMode);\n\n/**\n * An immutable range of two {@link TuiDay} objects\n */\nexport class TuiDayRange extends TuiMonthRange {\n    constructor(readonly from: TuiDay, readonly to: TuiDay) {\n        super(from, to);\n\n        tuiAssert.assert(from.daySameOrBefore(to));\n    }\n\n    /**\n     * Creates range from two days after sorting them\n     *\n     * @param day1\n     * @param day2\n     * @return new range with sorted days\n     */\n    static sort(day1: TuiDay, day2: TuiDay): TuiDayRange {\n        return day1.daySameOrBefore(day2)\n            ? new TuiDayRange(day1, day2)\n            : new TuiDayRange(day2, day1);\n    }\n\n    /**\n     * @deprecated\n     */\n    static normalizeParse(\n        rangeString: string,\n        dateFiller: string,\n        dateRangeFiller: string,\n    ): TuiDayRange;\n    static normalizeParse(rangeString: string, dateMode?: TuiDateMode): TuiDayRange;\n\n    /**\n     * Parse and correct a day range in string format\n     *\n     * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy\n     * @param dateMode {@link TuiDateMode}\n     * @return normalized day range object\n     */\n    static normalizeParse(\n        rangeString: string,\n        dateMode: TuiDateMode | string = `DMY`,\n    ): TuiDayRange {\n        const dateFormat = isDateMode(dateMode) ? dateMode : `DMY`;\n\n        const leftDay = TuiDay.normalizeParse(\n            rangeString.slice(0, DATE_FILLER_LENGTH),\n            dateFormat,\n        );\n\n        if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {\n            return new TuiDayRange(leftDay, leftDay);\n        }\n\n        return TuiDayRange.sort(\n            leftDay,\n            TuiDay.normalizeParse(\n                rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length),\n                dateFormat,\n            ),\n        );\n    }\n\n    get isSingleDay(): boolean {\n        return this.from.daySame(this.to);\n    }\n\n    /**\n     * Human readable format.\n     * @deprecated use {@link getFormattedDayRange} instead\n     */\n    get formattedDayRange(): string {\n        const from = this.from.getFormattedDay(`DMY`, `.`);\n        const to = this.to.getFormattedDay(`DMY`, `.`);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n\n    /**\n     * Tests ranges for identity\n     *\n     * @param another second range to test against current\n     * @return `true` if days are identical\n     */\n    daySame(another: TuiDayRange): boolean {\n        return this.from.daySame(another.from) && this.to.daySame(another.to);\n    }\n\n    /**\n     * Locks range between two days included, or limits from one side if the other is null\n     *\n     * @param min\n     * @param max\n     * @return range — clamped range\n     */\n    dayLimit(min: TuiDay | null, max: TuiDay | null): TuiDayRange {\n        return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));\n    }\n\n    /**\n     * Human readable format.\n     */\n    getFormattedDayRange(dateFormat: TuiDateMode, dateSeparator: string): string {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n\n    toString(dateFormat: TuiDateMode = `DMY`, dateSeparator: string = `.`): string {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n}\n","import {MAX_MONTH, MAX_YEAR, MIN_DAY, MIN_MONTH, MIN_YEAR} from './date-time';\nimport {TuiDay} from './day';\n\nexport const TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);\n\nexport const TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiTimeLike} from '@taiga-ui/cdk/interfaces';\nimport {TuiTimeMode} from '@taiga-ui/cdk/types';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange} from '@taiga-ui/cdk/utils/math';\n\nimport {\n    HOURS_IN_DAY,\n    MILLISECONDS_IN_DAY,\n    MILLISECONDS_IN_HOUR,\n    MILLISECONDS_IN_MINUTE,\n    MINUTES_IN_HOUR,\n    SECONDS_IN_MINUTE,\n} from './date-time';\n\n/**\n * Immutable time object with hours, minutes, seconds and ms\n */\nexport class TuiTime implements TuiTimeLike {\n    constructor(\n        readonly hours: number,\n        readonly minutes: number,\n        readonly seconds: number = 0,\n        readonly ms: number = 0,\n    ) {\n        tuiAssert.assert(\n            TuiTime.isValidTime(hours, minutes, seconds, ms),\n            `Time must be real, but got:`,\n            hours,\n            minutes,\n            seconds,\n            ms,\n        );\n    }\n\n    /**\n     * Checks if time is valid\n     */\n    static isValidTime(\n        hours: number,\n        minutes: number,\n        seconds: number = 0,\n        ms: number = 0,\n    ): boolean {\n        return (\n            Number.isInteger(hours) &&\n            inRange(hours, 0, HOURS_IN_DAY) &&\n            Number.isInteger(minutes) &&\n            inRange(minutes, 0, MINUTES_IN_HOUR) &&\n            Number.isInteger(seconds) &&\n            inRange(seconds, 0, SECONDS_IN_MINUTE) &&\n            Number.isInteger(ms) &&\n            inRange(ms, 0, 1000)\n        );\n    }\n\n    /**\n     * Current UTC time.\n     */\n    static current(): TuiTime {\n        return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);\n    }\n\n    /**\n     * Current time in local timezone\n     */\n    static currentLocal(): TuiTime {\n        const date = new Date();\n\n        return TuiTime.fromAbsoluteMilliseconds(\n            (Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) %\n                MILLISECONDS_IN_DAY,\n        );\n    }\n\n    /**\n     * Calculates TuiTime from milliseconds\n     */\n    static fromAbsoluteMilliseconds(milliseconds: number): TuiTime {\n        tuiAssert.assert(Number.isInteger(milliseconds));\n        tuiAssert.assert(\n            inRange(milliseconds, 0, MILLISECONDS_IN_DAY),\n            `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`,\n        );\n\n        const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);\n        const minutes = Math.floor(\n            (milliseconds % MILLISECONDS_IN_HOUR) / MILLISECONDS_IN_MINUTE,\n        );\n        const seconds =\n            Math.floor(\n                ((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) / 1000,\n            ) || 0;\n        const ms =\n            Math.floor(\n                ((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) % 1000,\n            ) || 0;\n\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n\n    /**\n     * Parses string into TuiTime object\n     */\n    static fromString(time: string): TuiTime {\n        const hours = Number(time.slice(0, 2));\n        const minutes = Number(time.slice(3, 5));\n        const seconds = Number(time.slice(6, 8)) || 0;\n        const ms = Number(time.slice(9, 12)) || 0;\n\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n\n    /**\n     * Converts Date object into TuiTime\n     * @param date\n     */\n    static fromLocalNativeDate(date: Date): TuiTime {\n        return new TuiTime(\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        );\n    }\n\n    /**\n     * Shifts time by hours and minutes\n     */\n    shift({hours = 0, minutes = 0, seconds = 0, ms = 0}: TuiTimeLike): TuiTime {\n        const newMs = (1000 + this.ms + (ms % 1000)) % 1000;\n\n        const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);\n        const secondsToAdd = secondsInMs + seconds;\n        const newSeconds = (60 + this.seconds + (secondsToAdd % 60)) % 60;\n\n        const minutesInSeconds =\n            secondsToAdd < 0\n                ? Math.ceil(secondsToAdd / 60)\n                : Math.floor(secondsToAdd / 60);\n        const minutesToAdd = minutesInSeconds + minutes;\n        const newMinutes = (60 + this.minutes + (minutesToAdd % 60)) % 60;\n\n        const hoursInMinutes =\n            minutesToAdd < 0\n                ? Math.ceil(minutesToAdd / 60)\n                : Math.floor(minutesToAdd / 60);\n        const hoursToAdd = hoursInMinutes + hours;\n        const newHours = (24 + this.hours + (hoursToAdd % 24)) % 24;\n\n        return new TuiTime(newHours, newMinutes, newSeconds, newMs);\n    }\n\n    /**\n     * Converts TuiTime to string\n     */\n    toString(mode?: TuiTimeMode): string {\n        const needAddMs = mode === `HH:MM:SS.MSS` || (!mode && this.ms > 0);\n        const needAddSeconds =\n            needAddMs || mode === `HH:MM:SS` || (!mode && this.seconds > 0);\n\n        return (\n            `${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}` +\n            `${needAddSeconds ? `:${this.formatTime(this.seconds)}` : ``}` +\n            `${needAddMs ? `.${this.formatTime(this.ms, 3)}` : ``}`\n        );\n    }\n\n    valueOf(): number {\n        return this.toAbsoluteMilliseconds();\n    }\n\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint: string): number | string {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n\n    /**\n     * Converts TuiTime to milliseconds\n     */\n    toAbsoluteMilliseconds(): number {\n        return (\n            this.hours * MILLISECONDS_IN_HOUR +\n            this.minutes * MILLISECONDS_IN_MINUTE +\n            this.seconds * 1000 +\n            this.ms\n        );\n    }\n\n    private formatTime(time: number, digits: number = 2): string {\n        return padStart(String(time), digits, `0`);\n    }\n}\n"]}