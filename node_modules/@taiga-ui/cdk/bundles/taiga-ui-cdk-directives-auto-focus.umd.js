(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-web-apis/common'), require('@taiga-ui/cdk/tokens'), require('@taiga-ui/cdk/constants'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/cdk/utils')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/auto-focus', ['exports', '@angular/core', '@ng-web-apis/common', '@taiga-ui/cdk/tokens', '@taiga-ui/cdk/constants', 'rxjs', 'rxjs/operators', '@taiga-ui/cdk/utils'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.directives = global['taiga-ui'].cdk.directives || {}, global['taiga-ui'].cdk.directives['auto-focus'] = {}), global.ng.core, global.common, global['taiga-ui'].cdk.tokens, global['taiga-ui'].cdk.constants, global.rxjs, global.rxjs.operators, global['taiga-ui'].cdk.utils));
}(this, (function (exports, core, common, tokens, constants, rxjs, operators, utils) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access) context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0) continue;
                if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                if (_ = accept(result.get)) descriptor.get = _;
                if (_ = accept(result.set)) descriptor.set = _;
                if (_ = accept(result.init)) initializers.push(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field") initializers.push(_);
                else descriptor[key] = _;
            }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    };

    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    };

    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    };

    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    function __exportStar(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var AbstractTuiAutofocusHandler = /** @class */ (function () {
        function AbstractTuiAutofocusHandler(tuiFocusableComponent, elementRef) {
            this.tuiFocusableComponent = tuiFocusableComponent;
            this.elementRef = elementRef;
        }
        Object.defineProperty(AbstractTuiAutofocusHandler.prototype, "element", {
            get: function () {
                var _a;
                return (((_a = this.tuiFocusableComponent) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) ||
                    this.elementRef.nativeElement);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiAutofocusHandler.prototype, "isTextFieldElement", {
            get: function () {
                return this.element.matches("input, textarea");
            },
            enumerable: true,
            configurable: true
        });
        AbstractTuiAutofocusHandler.ctorParameters = function () { return [
            { type: undefined },
            { type: core.ElementRef }
        ]; };
        AbstractTuiAutofocusHandler = __decorate([
            core.Directive()
        ], AbstractTuiAutofocusHandler);
        return AbstractTuiAutofocusHandler;
    }());

    var TIMEOUT = 1000;
    var NG_ANIMATION_SELECTOR = ".ng-animating";
    var TuiDefaultAutofocusHandler = /** @class */ (function (_super) {
        __extends(TuiDefaultAutofocusHandler, _super);
        function TuiDefaultAutofocusHandler(tuiFocusableComponent, elementRef, animationFrame$) {
            var _this = _super.call(this, tuiFocusableComponent, elementRef) || this;
            _this.animationFrame$ = animationFrame$;
            return _this;
        }
        TuiDefaultAutofocusHandler.prototype.setFocus = function () {
            var _this = this;
            if (this.isTextFieldElement) {
                rxjs.race(rxjs.timer(TIMEOUT), this.animationFrame$.pipe(operators.throttleTime(constants.POLLING_TIME), operators.map(function () { return _this.element.closest(NG_ANIMATION_SELECTOR); }), operators.skipWhile(Boolean), operators.take(1))).subscribe(function () { return _this.element.focus(); });
            }
            else {
                this.element.focus();
            }
        };
        TuiDefaultAutofocusHandler.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [tokens.TUI_FOCUSABLE_ITEM_ACCESSOR,] }] },
            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },
            { type: rxjs.Observable, decorators: [{ type: core.Inject, args: [common.ANIMATION_FRAME,] }] }
        ]; };
        TuiDefaultAutofocusHandler = __decorate([
            core.Directive(),
            __param(0, core.Optional()),
            __param(0, core.Self()),
            __param(0, core.Inject(tokens.TUI_FOCUSABLE_ITEM_ACCESSOR)),
            __param(1, core.Inject(core.ElementRef)),
            __param(2, core.Inject(common.ANIMATION_FRAME))
        ], TuiDefaultAutofocusHandler);
        return TuiDefaultAutofocusHandler;
    }(AbstractTuiAutofocusHandler));

    // @dynamic
    var TuiIosAutofocusHandler = /** @class */ (function (_super) {
        __extends(TuiIosAutofocusHandler, _super);
        function TuiIosAutofocusHandler(tuiFocusableComponent, elementRef, renderer, ngZone, windowRef) {
            var _this = _super.call(this, tuiFocusableComponent, elementRef) || this;
            _this.renderer = renderer;
            _this.ngZone = ngZone;
            _this.windowRef = windowRef;
            _this.patchCssStyles();
            return _this;
        }
        TuiIosAutofocusHandler.prototype.setFocus = function () {
            var _this = this;
            if (this.isTextFieldElement) {
                this.ngZone.runOutsideAngular(function () { return _this.iosWebkitAutofocus(); });
            }
            else {
                this.element.focus();
            }
        };
        TuiIosAutofocusHandler.prototype.iosWebkitAutofocus = function () {
            var _this = this;
            var _a;
            var fakeInput = this.makeFakeInput();
            var duration = this.getDurationTimeBeforeFocus();
            var fakeFocusTimeoutId = 0;
            var elementFocusTimeoutId = 0;
            var blurHandler = function () { return fakeInput.focus({ preventScroll: true }); };
            var focusHandler = function () {
                clearTimeout(fakeFocusTimeoutId);
                fakeFocusTimeoutId = _this.windowRef.setTimeout(function () {
                    clearTimeout(elementFocusTimeoutId);
                    fakeInput.removeEventListener("blur", blurHandler);
                    fakeInput.removeEventListener("focus", focusHandler);
                    elementFocusTimeoutId = _this.windowRef.setTimeout(function () {
                        _this.element.focus({ preventScroll: false });
                        fakeInput.remove();
                    }, duration);
                });
            };
            fakeInput.addEventListener("blur", blurHandler, { once: true });
            fakeInput.addEventListener("focus", focusHandler);
            if (this.insideDialog()) {
                this.windowRef.document.body.appendChild(fakeInput);
            }
            else {
                (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(fakeInput);
            }
            fakeInput.focus({ preventScroll: true });
        };
        /**
         * @note:
         * emulate textfield position in layout with cursor
         * before focus to real textfield element
         */
        TuiIosAutofocusHandler.prototype.makeFakeInput = function () {
            var fakeInput = this.renderer.createElement("input");
            var rect = this.element.getBoundingClientRect();
            fakeInput.setAttribute("maxlength", "0");
            // @note: don't use opacity: 0,
            // sometimes it's doesn't work for emulate real input
            fakeInput.style.height = utils.tuiPx(rect.height);
            fakeInput.style.width = utils.tuiPx(rect.width / 2);
            fakeInput.style.position = "fixed";
            fakeInput.style.zIndex = "-99999999";
            fakeInput.style.caretColor = "transparent";
            fakeInput.style.color = "transparent";
            fakeInput.style.cursor = "none";
            fakeInput.style.fontSize = utils.tuiPx(16); // disable possible auto zoom
            fakeInput.readOnly = true; // prevent keyboard for fake input
            // @note: emulate position cursor before focus to real textfield element
            fakeInput.style.top = utils.tuiPx(rect.top);
            fakeInput.style.left = utils.tuiPx(rect.left);
            return fakeInput;
        };
        TuiIosAutofocusHandler.prototype.getDurationTimeBeforeFocus = function () {
            return (parseFloat(this.windowRef
                .getComputedStyle(this.element)
                .getPropertyValue("--tui-duration")) || 0);
        };
        /**
         * @note:
         * unfortunately, in older versions of iOS
         * there is a bug that the fake input cursor
         * will move along with the dialog animation
         * and then that dialog will be shaking
         */
        TuiIosAutofocusHandler.prototype.insideDialog = function () {
            return !!this.element.closest("tui-dialog");
        };
        /**
         * @note:
         * This is necessary so that the viewport isn't recalculated
         * and then the dialogs don't shake.
         *
         * Also, we need to fixed height viewport,
         * so that when focusing the dialogs don't shake
         */
        TuiIosAutofocusHandler.prototype.patchCssStyles = function () {
            var e_1, _a;
            var documentRef = this.windowRef.document;
            try {
                for (var _b = __values([documentRef.documentElement, documentRef.body]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var element = _c.value;
                    element.style.setProperty("overflow", "auto");
                    element.style.setProperty("height", "100%");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        TuiIosAutofocusHandler.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [tokens.TUI_FOCUSABLE_ITEM_ACCESSOR,] }] },
            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },
            { type: core.Renderer2, decorators: [{ type: core.Inject, args: [core.Renderer2,] }] },
            { type: core.NgZone, decorators: [{ type: core.Inject, args: [core.NgZone,] }] },
            { type: Window, decorators: [{ type: core.Inject, args: [common.WINDOW,] }] }
        ]; };
        TuiIosAutofocusHandler = __decorate([
            core.Directive(),
            __param(0, core.Optional()),
            __param(0, core.Self()),
            __param(0, core.Inject(tokens.TUI_FOCUSABLE_ITEM_ACCESSOR)),
            __param(1, core.Inject(core.ElementRef)),
            __param(2, core.Inject(core.Renderer2)),
            __param(3, core.Inject(core.NgZone)),
            __param(4, core.Inject(common.WINDOW))
        ], TuiIosAutofocusHandler);
        return TuiIosAutofocusHandler;
    }(AbstractTuiAutofocusHandler));

    var TUI_AUTOFOCUS_HANDLER = new core.InjectionToken("Autofocusing handler");
    // TODO: 3.0 remove in ivy compilation
    function tuiAutofocusHandlerFactory(tuiFocusableComponent, elementRef, animationFrame$, renderer, ngZone, windowRef, isIos) {
        return isIos
            ? new TuiIosAutofocusHandler(tuiFocusableComponent, elementRef, renderer, ngZone, windowRef)
            : new TuiDefaultAutofocusHandler(tuiFocusableComponent, elementRef, animationFrame$);
    }
    var TUI_AUTOFOCUS_PROVIDERS = [
        {
            provide: TUI_AUTOFOCUS_HANDLER,
            // TODO: replace to useClass in v3.0
            useFactory: tuiAutofocusHandlerFactory,
            deps: [
                [new core.Optional(), new core.Self(), tokens.TUI_FOCUSABLE_ITEM_ACCESSOR],
                core.ElementRef,
                common.ANIMATION_FRAME,
                core.Renderer2,
                core.NgZone,
                common.WINDOW,
                tokens.TUI_IS_IOS,
            ],
        },
    ];

    // TODO: 3.0 change input name to tuiAutoFocus and handle empty string
    var TuiAutoFocusDirective = /** @class */ (function () {
        function TuiAutoFocusDirective(handler) {
            this.handler = handler;
            this.autoFocus = true;
        }
        TuiAutoFocusDirective.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        TuiAutoFocusDirective.prototype.focus = function () {
            var _this = this;
            void Promise.resolve().then(function () { return _this.handler.setFocus(); });
        };
        TuiAutoFocusDirective.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [TUI_AUTOFOCUS_HANDLER,] }] }
        ]; };
        __decorate([
            core.Input()
        ], TuiAutoFocusDirective.prototype, "autoFocus", void 0);
        TuiAutoFocusDirective = __decorate([
            core.Directive({
                selector: '[tuiAutoFocus]',
                providers: TUI_AUTOFOCUS_PROVIDERS,
            }),
            __param(0, core.Inject(TUI_AUTOFOCUS_HANDLER))
        ], TuiAutoFocusDirective);
        return TuiAutoFocusDirective;
    }());

    var TuiAutoFocusModule = /** @class */ (function () {
        function TuiAutoFocusModule() {
        }
        TuiAutoFocusModule = __decorate([
            core.NgModule({
                declarations: [TuiAutoFocusDirective],
                exports: [TuiAutoFocusDirective],
            })
        ], TuiAutoFocusModule);
        return TuiAutoFocusModule;
    }());

    var TuiSynchronousAutofocusHandler = /** @class */ (function (_super) {
        __extends(TuiSynchronousAutofocusHandler, _super);
        function TuiSynchronousAutofocusHandler(tuiFocusableComponent, elementRef) {
            return _super.call(this, tuiFocusableComponent, elementRef) || this;
        }
        TuiSynchronousAutofocusHandler.prototype.setFocus = function () {
            this.element.focus();
        };
        TuiSynchronousAutofocusHandler.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [tokens.TUI_FOCUSABLE_ITEM_ACCESSOR,] }] },
            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
        ]; };
        TuiSynchronousAutofocusHandler = __decorate([
            core.Directive(),
            __param(0, core.Optional()),
            __param(0, core.Self()),
            __param(0, core.Inject(tokens.TUI_FOCUSABLE_ITEM_ACCESSOR)),
            __param(1, core.Inject(core.ElementRef))
        ], TuiSynchronousAutofocusHandler);
        return TuiSynchronousAutofocusHandler;
    }(AbstractTuiAutofocusHandler));

    exports.AbstractTuiAutofocusHandler = AbstractTuiAutofocusHandler;
    exports.TUI_AUTOFOCUS_HANDLER = TUI_AUTOFOCUS_HANDLER;
    exports.TUI_AUTOFOCUS_PROVIDERS = TUI_AUTOFOCUS_PROVIDERS;
    exports.TuiAutoFocusDirective = TuiAutoFocusDirective;
    exports.TuiAutoFocusModule = TuiAutoFocusModule;
    exports.TuiDefaultAutofocusHandler = TuiDefaultAutofocusHandler;
    exports.TuiIosAutofocusHandler = TuiIosAutofocusHandler;
    exports.TuiSynchronousAutofocusHandler = TuiSynchronousAutofocusHandler;
    exports.tuiAutofocusHandlerFactory = tuiAutofocusHandlerFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-directives-auto-focus.umd.js.map
