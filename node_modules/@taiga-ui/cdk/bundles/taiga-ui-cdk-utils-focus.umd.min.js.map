{"version":3,"sources":["ng://@taiga-ui/cdk/utils/focus/get-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/set-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/blur-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/is-native-keyboard-focusable.ts","ng://@taiga-ui/cdk/utils/focus/is-native-mouse-focusable.ts","ng://@taiga-ui/cdk/utils/focus/get-closest-keyboard-focusable.ts","ng://@taiga-ui/cdk/utils/focus/is-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/is-native-focused-in.ts","ng://@taiga-ui/cdk/utils/focus/move-focus.ts","ng://@taiga-ui/cdk/utils/focus/set-native-mouse-focused.ts"],"names":["getNativeFocused","documentRef","_a","activeElement","shadowRoot","element","tuiGetNativeFocused","setNativeFocused","focused","preventScroll","focus","blur","blurNativeFocused","HTMLElement","tuiBlurNativeFocused","isNativeKeyboardFocusable","hasAttribute","getAttribute","isContentEditable","tagName","tuiIsNativeKeyboardFocusable","isNativeMouseFocusable","tuiIsNativeMouseFocusable","getClosestFocusable","initial","prev","root","keyboard","ownerDocument","check","treeWalker","createTreeWalker","NodeFilter","SHOW_ELEMENT","svgNodeFilter","currentNode","previousNode","nextNode","getClosestKeyboardFocusable","tuiGetClosestFocusable","isNativeFocused","node","tuiIsNativeFocused","isNativeFocusedIn","contains","nativeFocused","tuiIsNativeFocusedIn","moveFocus","currentIndex","elements","step","length","tuiMoveFocus","setNativeMouseFocused","Event","dispatchEvent","bubbles","cancelable","event_1","createEvent","initEvent","tuiSetNativeMouseFocused"],"mappings":"udAOgBA,EAAiBC,SAC7B,KAA8B,QAA1BC,EAACD,EAAYE,qBAAa,IAAAD,OAAA,EAAAA,EAAEE,YAC5B,OAAOH,EAAYE,cAKvB,IAFA,IAAIE,EAAUJ,EAAYE,cAAcC,WAAWD,cAE5CE,MAAAA,OAAO,EAAPA,EAASD,YACZC,EAAUA,EAAQD,WAAWD,cAGjC,OAAOE,MAGEC,EAAsBN,WCXnBO,EACZF,EACAG,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEID,EACAH,EAAQK,MAAM,CAACD,cAAaA,IAE5BJ,EAAQM,gBCVAC,EAAkBX,GAC9B,IAAME,EAAgBH,EAAiBC,GAGnCE,aAAyBU,aACzBN,EAAiBJ,GAAe,OAI3BW,EAAuBF,WCTpBG,EAA0BV,GACtC,GAAIA,EAAQW,aAAa,aAAoD,OAArCX,EAAQY,aAAa,YACzD,OAAO,EAIX,GACKZ,aAAmBQ,aAAeR,EAAQa,mBACN,MAArCb,EAAQY,aAAa,YAErB,OAAO,EAGX,OAAQZ,EAAQc,SACZ,IAAK,SACL,IAAK,SACL,IAAK,WACD,OAAO,EACX,IAAK,QACL,IAAK,QACD,OAAOd,EAAQW,aAAa,YAChC,IAAK,QACD,MAAwC,WAAjCX,EAAQY,aAAa,QAChC,IAAK,IACL,IAAK,OACD,OAAOZ,EAAQW,aAAa,QAChC,QACI,OAAO,OAINI,EAA+BL,WCjC5BM,EAAuBhB,GACnC,OACKA,EAAQW,aAAa,cACgB,OAArCX,EAAQY,aAAa,aAAwBF,EAA0BV,QAInEiB,EAA4BD,WCGzBE,EACZC,EACAC,EACAC,EACAC,GAEA,QAJA,IAAAF,IAAAA,GAAA,QAEA,IAAAE,IAAAA,GAAA,IAEKD,EAAKE,cACN,OAAO,KAGX,IAAMC,EAAQF,EAAWZ,EAA4BM,EAI/CS,EAAaJ,EAAKE,cAAcG,iBAClCL,EACAM,WAAWC,aACXC,EAAAA,eACA,GAKJ,IAFAJ,EAAWK,YAAcX,EAElBC,EAAOK,EAAWM,eAAiBN,EAAWO,YAMjD,GAJIP,EAAWK,uBAAuBtB,cAClCW,EAAUM,EAAWK,aAGrBN,EAAML,GACN,OAAOA,EAIf,OAAO,SAMEc,EAA8Bf,EAE9BgB,EAAyBhB,WC9CtBiB,EAAgBC,GAC5B,QACMA,KAAUA,EAAKb,eAAiB5B,EAAiByC,EAAKb,iBAAmBa,MAItEC,EAAqBF,WCRlBG,EAAkBF,GAE9B,IAAKA,EAAKb,gBAAkBa,EAAKG,SAC7B,OAAO,EAGX,IAAMC,EAAgB7C,EAAiByC,EAAKb,eAE5C,OAAyB,OAAlBiB,GAA0BJ,EAAKG,SAASC,OAGtCC,EAAuBH,WCTpBI,EACZC,EACAC,EACAC,GAIA,IAFAF,GAAgBE,EAETF,GAAgB,GAAKA,EAAeC,EAASE,QAAQ,CAGxD,GAFA5C,EAAiB0C,EAASD,IAEtBR,EAAgBS,EAASD,IACzB,OAGJA,GAAgBE,OAIXE,EAAeL,WCnBZM,EACZhD,EACAG,EACAC,GAEA,QAHA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEKJ,EAAQuB,cAAb,CAIA,GAAqB,mBAAV0B,MACPjD,EAAQkD,cAAc,IAAID,MAAM,YAAa,CAACE,SAAS,EAAMC,YAAY,SACtE,CACH,IAAMC,EAAQrD,EAAQuB,cAAc+B,YAAY,SAEhDD,EAAME,UAAU,aAAa,GAAM,GACnCvD,EAAQkD,cAAcG,GAG1BnD,EAAiBF,EAASG,EAASC,QAG1BoD,EAA2BR","sourcesContent":["/**\n * @deprecated: use {@link tuiGetNativeFocused} instead\n * Returns current active element, including shadow dom\n *\n * @return element or null\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getNativeFocused(documentRef: Document): Element | null {\n    if (!documentRef.activeElement?.shadowRoot) {\n        return documentRef.activeElement;\n    }\n\n    let element = documentRef.activeElement.shadowRoot.activeElement;\n\n    while (element?.shadowRoot) {\n        element = element.shadowRoot.activeElement;\n    }\n\n    return element;\n}\n\nexport const tuiGetNativeFocused = getNativeFocused;\n","/**\n * @deprecated: use native element.focus()\n * TODO: remove in v3.0\n * Focuses or blurs and element\n *\n * @param element native element\n * @param focused boolean focused state\n * @param preventScroll optional flag to prevent native scroll to the element\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function setNativeFocused(\n    element: HTMLOrSVGElement,\n    focused: boolean = true,\n    preventScroll: boolean = false,\n): void {\n    if (focused) {\n        element.focus({preventScroll});\n    } else {\n        element.blur();\n    }\n}\n","import {getNativeFocused} from './get-native-focused';\nimport {setNativeFocused} from './set-native-focused';\n\n/**\n * @deprecated: use {@link tuiBlurNativeFocused} instead\n * Finds and blurs current active element, including shadow DOM\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function blurNativeFocused(documentRef: Document): void {\n    const activeElement = getNativeFocused(documentRef);\n\n    // TODO: iframe warning\n    if (activeElement instanceof HTMLElement) {\n        setNativeFocused(activeElement, false);\n    }\n}\n\nexport const tuiBlurNativeFocused = blurNativeFocused;\n","/**\n * @deprecated: use {@link tuiIsNativeKeyboardFocusable} instead\n * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to\n * only target natural focus order. Not checking the possibility of an element to\n * be focused, for example element can have display: none applied to it or any other\n * circumstances could prevent actual focus.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNativeKeyboardFocusable(element: Element): boolean {\n    if (element.hasAttribute(`disabled`) || element.getAttribute(`tabIndex`) === `-1`) {\n        return false;\n    }\n\n    // TODO: iframe warning\n    if (\n        (element instanceof HTMLElement && element.isContentEditable) ||\n        element.getAttribute(`tabIndex`) === `0`\n    ) {\n        return true;\n    }\n\n    switch (element.tagName) {\n        case `BUTTON`:\n        case `SELECT`:\n        case `TEXTAREA`:\n            return true;\n        case `VIDEO`:\n        case `AUDIO`:\n            return element.hasAttribute(`controls`);\n        case `INPUT`:\n            return element.getAttribute(`type`) !== `hidden`;\n        case `A`:\n        case `LINK`:\n            return element.hasAttribute(`href`);\n        default:\n            return false;\n    }\n}\n\nexport const tuiIsNativeKeyboardFocusable = isNativeKeyboardFocusable;\n","import {isNativeKeyboardFocusable} from './is-native-keyboard-focusable';\n\n/**\n * @deprecated: use {@link tuiIsNativeMouseFocusable} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNativeMouseFocusable(element: Element): boolean {\n    return (\n        !element.hasAttribute(`disabled`) &&\n        (element.getAttribute(`tabIndex`) === `-1` || isNativeKeyboardFocusable(element))\n    );\n}\n\nexport const tuiIsNativeMouseFocusable = isNativeMouseFocusable;\n","import {svgNodeFilter} from '@taiga-ui/cdk/constants';\n\nimport {isNativeKeyboardFocusable} from './is-native-keyboard-focusable';\nimport {isNativeMouseFocusable} from './is-native-mouse-focusable';\n\n/**\n * @deprecated: use {@link tuiGetClosestFocusable} instead\n * Finds the closest element that can be focused with a keyboard or mouse in theory\n *\n * @param initial current HTML element\n * @param prev should it look backwards instead (find item that will be focused with Shift + Tab)\n * @param root top Node limiting the search area\n * @param keyboard determine if only keyboard focus is of interest\n *\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getClosestFocusable(\n    initial: HTMLElement,\n    prev: boolean = false,\n    root: Node,\n    keyboard: boolean = true,\n): HTMLElement | null {\n    if (!root.ownerDocument) {\n        return null;\n    }\n\n    const check = keyboard ? isNativeKeyboardFocusable : isNativeMouseFocusable;\n\n    // Deprecated but ony this overload works in IE\n    // Filter must be a function in IE, other modern browsers are compliant to this format\n    const treeWalker = root.ownerDocument.createTreeWalker(\n        root,\n        NodeFilter.SHOW_ELEMENT,\n        svgNodeFilter,\n        false,\n    );\n\n    treeWalker.currentNode = initial;\n\n    while (prev ? treeWalker.previousNode() : treeWalker.nextNode()) {\n        // TODO: iframe warning\n        if (treeWalker.currentNode instanceof HTMLElement) {\n            initial = treeWalker.currentNode;\n        }\n\n        if (check(initial)) {\n            return initial;\n        }\n    }\n\n    return null;\n}\n\n/**\n * @deprecated: use {@link tuiGetClosestFocusable} instead\n */\nexport const getClosestKeyboardFocusable = getClosestFocusable;\n\nexport const tuiGetClosestFocusable = getClosestFocusable;\n","import {getNativeFocused} from './get-native-focused';\n\n/**\n * @deprecated: use {@link tuiIsNativeFocused} instead\n * Checks if element is focused.\n *\n * Could return true even after blur since element remains focused if you switch away from a browser tab.\n *\n * @param node or null (as a common return value of DOM nodes walking)\n * @return true if focused\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNativeFocused(node: Node | null): boolean {\n    return (\n        !!node && !!node.ownerDocument && getNativeFocused(node.ownerDocument) === node\n    );\n}\n\nexport const tuiIsNativeFocused = isNativeFocused;\n","import {getNativeFocused} from './get-native-focused';\n\n/**\n * @deprecated: use {@link tuiIsNativeFocusedIn} instead\n * Checks if focused element is within given element.\n *\n * @param node\n * @return true if focused node is contained within element\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNativeFocusedIn(node: Node): boolean {\n    // !node.contains - check for IE11\n    if (!node.ownerDocument || !node.contains) {\n        return false;\n    }\n\n    const nativeFocused = getNativeFocused(node.ownerDocument);\n\n    return nativeFocused !== null && node.contains(nativeFocused);\n}\n\nexport const tuiIsNativeFocusedIn = isNativeFocusedIn;\n","import {isNativeFocused} from './is-native-focused';\nimport {setNativeFocused} from './set-native-focused';\n\n/**\n * @deprecated: use {@link tuiMoveFocus} instead\n * Utility method for moving focus in a list of elements\n *\n * @param currentIndex currently focused index\n * @param elements array of focusable elements\n * @param step a step to move focus by, typically -1 or 1\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function moveFocus(\n    currentIndex: number,\n    elements: readonly HTMLElement[],\n    step: number,\n): void {\n    currentIndex += step;\n\n    while (currentIndex >= 0 && currentIndex < elements.length) {\n        setNativeFocused(elements[currentIndex]);\n\n        if (isNativeFocused(elements[currentIndex])) {\n            return;\n        }\n\n        currentIndex += step;\n    }\n}\n\nexport const tuiMoveFocus = moveFocus;\n","import {setNativeFocused} from './set-native-focused';\n\n/**\n * @deprecated: use {@link tuiSetNativeMouseFocused} instead\n * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})\n *\n * @param element\n * @param focused desired focused state\n * @param preventScroll optionally prevent native browser scroll after focus\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function setNativeMouseFocused(\n    element: Element & HTMLOrSVGElement,\n    focused: boolean = true,\n    preventScroll: boolean = false,\n): void {\n    if (!element.ownerDocument) {\n        return;\n    }\n\n    if (typeof Event === `function`) {\n        element.dispatchEvent(new Event(`mousedown`, {bubbles: true, cancelable: true}));\n    } else {\n        const event = element.ownerDocument.createEvent(`Event`);\n\n        event.initEvent(`mousedown`, true, true);\n        element.dispatchEvent(event);\n    }\n\n    setNativeFocused(element, focused, preventScroll);\n}\n\nexport const tuiSetNativeMouseFocused = setNativeMouseFocused;\n"]}