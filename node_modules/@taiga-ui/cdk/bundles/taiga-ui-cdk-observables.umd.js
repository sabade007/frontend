(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk/exceptions'), require('@taiga-ui/cdk/utils/miscellaneous'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/cdk/utils/focus')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/observables', ['exports', '@taiga-ui/cdk/exceptions', '@taiga-ui/cdk/utils/miscellaneous', 'rxjs', 'rxjs/operators', '@taiga-ui/cdk/utils/focus'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.observables = {}), global['taiga-ui'].cdk.exceptions, global['taiga-ui'].cdk.utils.miscellaneous, global.rxjs, global.rxjs.operators, global['taiga-ui'].cdk.utils.focus));
}(this, (function (exports, exceptions, miscellaneous, rxjs, operators, focus) { 'use strict';

    /**
     * @deprecated: use {@link tuiTypedFromEvent} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function typedFromEvent(target, event, options) {
        if (options === void 0) { options = {}; }
        return rxjs.fromEvent(target, event, options);
    }
    var tuiTypedFromEvent = typedFromEvent;

    /**
     * @deprecated: use {@link tuiMouseDragFinishFrom} instead
     * Letting go of the mouse after it was pressed
     * @param target
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function mouseDragFinishFrom(target) {
        return rxjs.merge(typedFromEvent(target, "mouseup"), typedFromEvent(target, "dragend"));
    }
    var tuiMouseDragFinishFrom = mouseDragFinishFrom;


    (function (TuiDragStage) {
        TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
        TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
        TuiDragStage[TuiDragStage["End"] = 2] = "End";
    })(exports.TuiDragStage || (exports.TuiDragStage = {}));
    var TuiDragState = /** @class */ (function () {
        function TuiDragState(stage, event) {
            this.stage = stage;
            this.event = event;
        }
        return TuiDragState;
    }());
    /**
     * @deprecated: use {@link tuiDragAndDropFrom} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function dragAndDropFrom(element) {
        var ownerDocument = element.ownerDocument;
        if (!ownerDocument) {
            throw new exceptions.TuiOwnerDocumentException();
        }
        return rxjs.concat(typedFromEvent(element, "mousedown").pipe(operators.take(1), operators.map(function (event) { return new TuiDragState(0 /* Start */, event); })), rxjs.merge(typedFromEvent(ownerDocument, "mousemove").pipe(operators.map(function (event) { return new TuiDragState(1 /* Continues */, event); })), mouseDragFinishFrom(ownerDocument).pipe(operators.take(1), operators.map(function (event) { return new TuiDragState(2 /* End */, event); }), operators.endWith(null))).pipe(operators.takeWhile(miscellaneous.isPresent))).pipe(operators.repeat());
    }
    var tuiDragAndDropFrom = dragAndDropFrom;

    /**
     * Operator to set lifespan after which current value is considered obsolete
     */
    function tuiIsAlive(lifespan) {
        if (lifespan === void 0) { lifespan = 0; }
        return rxjs.pipe(operators.switchMapTo(rxjs.timer(lifespan).pipe(operators.mapTo(false), operators.startWith(true))), operators.distinctUntilChanged());
    }

    var documentMouseUpIsAlive$;
    var documentMouseDownIsAlive$;
    /**
     * @deprecated: use {@link tuiFocusVisibleObservable} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function focusVisibleObservable(element) {
        var elementBlur$ = typedFromEvent(element, "blur");
        var ownerDocument = element.ownerDocument;
        if (!ownerDocument) {
            throw new exceptions.TuiOwnerDocumentException();
        }
        if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
            documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, "mouseup", {
                capture: true,
            }).pipe(tuiIsAlive(), operators.startWith(false), operators.shareReplay({ bufferSize: 1, refCount: true }));
            documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, "mousedown", {
                capture: true,
            }).pipe(tuiIsAlive(), operators.startWith(false), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        return rxjs.merge(
        // focus events excluding ones that came right after mouse action
        rxjs.concat(typedFromEvent(element, "focus").pipe(operators.take(1)), 
        // filtering out blur events when element remains focused so that we ignore browser tab focus loss
        elementBlur$.pipe(operators.filter(function () { return !focus.isNativeFocused(element); }), operators.take(1), operators.ignoreElements())).pipe(operators.repeat(), operators.withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, function (_event, elementActual, documentActual) {
            return elementActual || documentActual;
        }), operators.filter(function (isUserFocus) { return !isUserFocus; }))).pipe(operators.switchMapTo(elementBlur$.pipe(operators.mapTo(false), operators.take(1), operators.startWith(true))), operators.distinctUntilChanged());
    }
    var tuiFocusVisibleObservable = focusVisibleObservable;

    /**
     * In RxJS 8 `observers` will be removed, this util is for future safety
     */
    function tuiIsObserved(observable) {
        return observable.observed || !!observable.observers.length;
    }

    /**
     * @deprecated: use {@link tuiItemsQueryListObservable} instead
     * Converts changes observable of a QueryList to an Observable of arrays
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function itemsQueryListObservable(queryList) {
        return queryList.changes.pipe(operators.map(function () { return miscellaneous.getOriginalArrayFromQueryList(queryList); }), operators.startWith(miscellaneous.getOriginalArrayFromQueryList(queryList)));
    }
    var tuiItemsQueryListObservable = itemsQueryListObservable;

    /**
     * @deprecated: use {@link tuiMustBePresent} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function mustBePresent() {
        return operators.map(function (value) {
            if (!miscellaneous.isPresent(value)) {
                throw new exceptions.TuiValuePresentException();
            }
            return value;
        });
    }
    var tuiMustBePresent = mustBePresent;

    /**
     * @deprecated: use {@link tuiPressedObservable} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function pressedObservable(element, _a) {
        var onlyTrusted = (_a === void 0 ? { onlyTrusted: true } : _a).onlyTrusted;
        var ownerDocument = element.ownerDocument;
        if (!ownerDocument) {
            throw new exceptions.TuiOwnerDocumentException();
        }
        return typedFromEvent(element, "mousedown").pipe(operators.filter(function (_a) {
            var isTrusted = _a.isTrusted;
            return isTrusted || !onlyTrusted;
        }), operators.switchMapTo(mouseDragFinishFrom(ownerDocument).pipe(operators.mapTo(false), operators.take(1), operators.startWith(true))));
    }
    var tuiPressedObservable = pressedObservable;

    /**
     * @deprecated: use {@link tuiPreventDefault} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function preventDefault() {
        return operators.tap(function (event) { return event.preventDefault(); });
    }
    var tuiPreventDefault = preventDefault;

    /**
     * Turns AbstractControl/Abstract-control-directive valueChanges into ReplaySubject(1)
     * TODO: 3.0 name should be shorter.
     */
    function tuiReplayedValueChangesFrom(control) {
        return new rxjs.Observable(function (subscriber) {
            if (!control.valueChanges) {
                throw new exceptions.TuiValueChangesException();
            }
            control.valueChanges.pipe(operators.startWith(control.value)).subscribe(subscriber);
        });
    }

    /**
     * Normalizes scroll event in case element is `html` (document.documentElement)
     */
    function tuiScrollFrom(element) {
        var _a;
        return tuiTypedFromEvent(element === ((_a = element.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement)
            ? element.ownerDocument
            : element, "scroll");
    }

    /**
     * @deprecated: use {@link tuiStopPropagation} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function stopPropagation() {
        return operators.tap(function (e) {
            e.stopPropagation();
        });
    }
    var tuiStopPropagation = stopPropagation;

    /**
     * @deprecated: use {@link tuiWatch} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function watch(changeDetectorRef) {
        return operators.tap(function () {
            changeDetectorRef.markForCheck();
        });
    }
    var tuiWatch = watch;

    function tuiZonefull(ngZone) {
        return function (source) {
            return new rxjs.Observable(function (subscriber) {
                return source.subscribe({
                    next: function (value) { return ngZone.run(function () { return subscriber.next(value); }); },
                    error: function (error) { return ngZone.run(function () { return subscriber.error(error); }); },
                    complete: function () { return ngZone.run(function () { return subscriber.complete(); }); },
                });
            });
        };
    }
    function tuiZonefree(ngZone) {
        return function (source) {
            return new rxjs.Observable(function (subscriber) {
                return ngZone.runOutsideAngular(function () { return source.subscribe(subscriber); });
            });
        };
    }
    function tuiZoneOptimized(ngZone) {
        return rxjs.pipe(tuiZonefree(ngZone), tuiZonefull(ngZone));
    }

    exports.TuiDragState = TuiDragState;
    exports.dragAndDropFrom = dragAndDropFrom;
    exports.focusVisibleObservable = focusVisibleObservable;
    exports.itemsQueryListObservable = itemsQueryListObservable;
    exports.mouseDragFinishFrom = mouseDragFinishFrom;
    exports.mustBePresent = mustBePresent;
    exports.pressedObservable = pressedObservable;
    exports.preventDefault = preventDefault;
    exports.stopPropagation = stopPropagation;
    exports.tuiDragAndDropFrom = tuiDragAndDropFrom;
    exports.tuiFocusVisibleObservable = tuiFocusVisibleObservable;
    exports.tuiIsAlive = tuiIsAlive;
    exports.tuiIsObserved = tuiIsObserved;
    exports.tuiItemsQueryListObservable = tuiItemsQueryListObservable;
    exports.tuiMouseDragFinishFrom = tuiMouseDragFinishFrom;
    exports.tuiMustBePresent = tuiMustBePresent;
    exports.tuiPressedObservable = tuiPressedObservable;
    exports.tuiPreventDefault = tuiPreventDefault;
    exports.tuiReplayedValueChangesFrom = tuiReplayedValueChangesFrom;
    exports.tuiScrollFrom = tuiScrollFrom;
    exports.tuiStopPropagation = tuiStopPropagation;
    exports.tuiTypedFromEvent = tuiTypedFromEvent;
    exports.tuiWatch = tuiWatch;
    exports.tuiZoneOptimized = tuiZoneOptimized;
    exports.tuiZonefree = tuiZonefree;
    exports.tuiZonefull = tuiZonefull;
    exports.typedFromEvent = typedFromEvent;
    exports.watch = watch;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-observables.umd.js.map
