{"version":3,"sources":["ng://@taiga-ui/cdk/utils/miscellaneous/distance-between-touches.ts","ng://@taiga-ui/cdk/utils/miscellaneous/ease-in-out-quad.ts","ng://@taiga-ui/cdk/utils/miscellaneous/is-present.ts","ng://@taiga-ui/cdk/utils/miscellaneous/flat-length.ts","ng://@taiga-ui/cdk/utils/miscellaneous/get-original-array-from-query-list.ts","ng://@taiga-ui/cdk/utils/miscellaneous/get-swipe-direction.ts","ng://@taiga-ui/cdk/utils/miscellaneous/is-element-editable.ts","ng://@taiga-ui/cdk/utils/miscellaneous/is-number.ts","ng://@taiga-ui/cdk/utils/miscellaneous/mark-control-as-touched-and-validate.ts","ng://@taiga-ui/cdk/utils/miscellaneous/nullable-same.ts","ng://@taiga-ui/cdk/utils/miscellaneous/uniq-by.ts","ng://@taiga-ui/cdk/utils/miscellaneous/fallback-value.ts","ng://@taiga-ui/cdk/utils/miscellaneous/identity.ts"],"names":["distanceBetweenTouches","_a","touches","Math","hypot","clientX","clientY","tuiDistanceBetweenTouches","easeInOutQuad","t","tuiAssert","assert","tuiEaseInOutQuad","isPresent","value","tuiIsPresent","flatLength","array","reduce","count","section","length","tuiFlatLength","getOriginalArrayFromQueryList","queryList","find","_item","_index","originalArray","tuiGetOriginalArrayFromQueryList","getSwipeDirection","deltaX","deltaY","abs","tuiGetSwipeDirection","isElementEditable","element","HTMLInputElement","readOnly","HTMLTextAreaElement","isContentEditable","tuiIsElementEditable","isNumber","tuiIsNumber","markControlAsTouchedAndValidate","control","FormArray","controls","forEach","nestedControl","FormGroup","Object","values","markAsTouched","updateValueAndValidity","tuiMarkControlAsTouchedAndValidate","nullableSame","a","b","handler","tuiNullableSame","uniqBy","key","Array","from","map","item","has","set","Map","tuiUniqBy","fallback"],"mappings":"yhBAIgBA,EAAuBC,OAACC,EAAAD,EAAAC,QACpC,OAAOC,KAAKC,MACRF,EAAQ,GAAGG,QAAUH,EAAQ,GAAGG,QAChCH,EAAQ,GAAGI,QAAUJ,EAAQ,GAAGI,aAI3BC,EAA4BP,WCLzBQ,EAAcC,GAO1B,OANAC,EAAAA,UAAUC,OACNF,GAAK,GAAKA,GAAK,EACf,wDACAA,GAGGA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAlB,MAGrBG,EAAmBJ,WCZhBK,EAAaC,GACzB,OAAOA,MAAAA,MAGEC,EAAeF,WCDZG,EAAWC,GACvB,OAAOA,EAAMC,QAAO,SAACC,EAAOC,GAAY,OAAAD,EAAQC,EAAQC,SAAQ,OAGvDC,EAAgBN,WCDbO,EAAiCC,GAC7C,IAAIP,EAAsB,GAQ1B,OANAO,EAAUC,MAAK,SAACC,EAAOC,EAAQC,GAG3B,OAFAX,EAAQW,GAED,KAGJX,MAGEY,EAAmCN,WChBhCO,EAAkBC,EAAgBC,GAC9C,OAAI7B,KAAK8B,IAAID,GAAU7B,KAAK8B,IAAIF,GACrBC,EAAS,EAAI,MAAQ,SAGzBD,EAAS,EAAI,OAAS,YAGpBG,EAAuBJ,WCVpBK,EAAkBC,GAE9B,OACKA,aAAmBC,mBAAqBD,EAAQE,UAChDF,aAAmBG,sBAAwBH,EAAQE,UACpDF,EAAQI,sBAIHC,EAAuBN,WCTpBO,EAAS5B,GACrB,MAAwB,iBAAVA,MAGL6B,EAAcD,WCFXE,EAAgCC,GACxCA,aAAmBC,EAAAA,WACnBD,EAAQE,SAASC,SAAQ,SAAAC,GACrBL,EAAgCK,MAIpCJ,aAAmBK,EAAAA,WACnBC,OAAOC,OAAOP,EAAQE,UAAUC,SAAQ,SAAAC,GACpCL,EAAgCK,MAIxCJ,EAAQQ,gBACRR,EAAQS,6BAGCC,EAAqCX,WCXlCY,EACZC,EACAC,EACAC,GAEA,OAAU,OAANF,EACa,OAANC,EAGD,OAANA,GAIGC,EAAQF,EAAGC,OAGTE,EAAkBJ,WCxBfK,EACZ5C,EACA6C,GAEA,OAAOC,MAAMC,KACT/C,EACKC,QACG,SAAC+C,EAAKC,GAAS,OAACD,EAAIE,IAAID,EAAKJ,IAAQG,EAAMA,EAAIG,IAAIF,EAAKJ,GAAMI,KAC9D,IAAIG,KAEPjB,cAIAkB,EAAYT,wECTQ/C,EAA6ByD,GAC1D,OAAO1D,EAAUC,GAASA,EAAQyD,8FCNVL,GACxB,OAAOA","sourcesContent":["/**\n * @deprecated: use {@link tuiDistanceBetweenTouches} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function distanceBetweenTouches({touches}: TouchEvent): number {\n    return Math.hypot(\n        touches[0].clientX - touches[1].clientX,\n        touches[0].clientY - touches[1].clientY,\n    );\n}\n\nexport const tuiDistanceBetweenTouches = distanceBetweenTouches;\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\n/**\n * @deprecated: use {@link tuiEaseInOutQuad} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function easeInOutQuad(t: number): number {\n    tuiAssert.assert(\n        t >= 0 && t <= 1,\n        `Input must be between 0 and 1 inclusive but received `,\n        t,\n    );\n\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n\nexport const tuiEaseInOutQuad = easeInOutQuad;\n","/**\n * @deprecated: use {@link tuiIsPresent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isPresent<T>(value?: T | null): value is T {\n    return value !== null && value !== undefined;\n}\n\nexport const tuiIsPresent = isPresent;\n","/**\n * @deprecated: use {@link tuiFlatLength} instead\n * Flattens two-dimensional array and calculates resulting length\n *\n * @param array twi dimensional array\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function flatLength(array: ReadonlyArray<readonly unknown[]>): number {\n    return array.reduce((count, section) => count + section.length, 0);\n}\n\nexport const tuiFlatLength = flatLength;\n","import {QueryList} from '@angular/core';\n\n/**\n * @deprecated: use {@link tuiGetOriginalArrayFromQueryList} instead\n * Extracts original array from {@link QueryList} rather than\n * creating a copy like {@link QueryList.toArray} does.\n * @param queryList\n * @returns original array from {@link QueryList}.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getOriginalArrayFromQueryList<T>(queryList: QueryList<T>): readonly T[] {\n    let array: readonly T[] = [];\n\n    queryList.find((_item, _index, originalArray) => {\n        array = originalArray;\n\n        return true;\n    });\n\n    return array;\n}\n\nexport const tuiGetOriginalArrayFromQueryList = getOriginalArrayFromQueryList;\n","import {TuiSwipeDirection} from '@taiga-ui/cdk/interfaces';\n\n/**\n * @deprecated: use {@link tuiGetSwipeDirection} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getSwipeDirection(deltaX: number, deltaY: number): TuiSwipeDirection {\n    if (Math.abs(deltaY) > Math.abs(deltaX)) {\n        return deltaY > 0 ? `top` : `bottom`;\n    }\n\n    return deltaX > 0 ? `left` : `right`;\n}\n\nexport const tuiGetSwipeDirection = getSwipeDirection;\n","/**\n * @deprecated: use {@link tuiIsElementEditable} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isElementEditable(element: HTMLElement): boolean {\n    // TODO: iframe warning\n    return (\n        (element instanceof HTMLInputElement && !element.readOnly) ||\n        (element instanceof HTMLTextAreaElement && !element.readOnly) ||\n        element.isContentEditable\n    );\n}\n\nexport const tuiIsElementEditable = isElementEditable;\n","/**\n * @deprecated: use {@link tuiIsNumber} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNumber(value: unknown): value is number {\n    return typeof value === `number`;\n}\n\nexport const tuiIsNumber = isNumber;\n","import {AbstractControl, FormArray, FormGroup} from '@angular/forms';\n\n/**\n * @deprecated: use {@link tuiMarkControlAsTouchedAndValidate} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function markControlAsTouchedAndValidate(control: AbstractControl): void {\n    if (control instanceof FormArray) {\n        control.controls.forEach(nestedControl => {\n            markControlAsTouchedAndValidate(nestedControl);\n        });\n    }\n\n    if (control instanceof FormGroup) {\n        Object.values(control.controls).forEach(nestedControl => {\n            markControlAsTouchedAndValidate(nestedControl);\n        });\n    }\n\n    control.markAsTouched();\n    control.updateValueAndValidity();\n}\n\nexport const tuiMarkControlAsTouchedAndValidate = markControlAsTouchedAndValidate;\n","import {TuiIdentityMatcher} from '@taiga-ui/cdk/types';\n\n/**\n * @deprecated: use {@link tuiNullableSame} instead\n * Checks identity for nullable elements.\n *\n * @param a element a\n * @param b element b\n * @param handler called if both elements are not null\n * @return true if either both are null or they pass identity handler\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function nullableSame<T>(\n    a: T | null,\n    b: T | null,\n    handler: TuiIdentityMatcher<T>,\n): boolean {\n    if (a === null) {\n        return b === null;\n    }\n\n    if (b === null) {\n        return false;\n    }\n\n    return handler(a, b);\n}\n\nexport const tuiNullableSame = nullableSame;\n","/**\n * @deprecated: use {@link tuiUniqBy} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function uniqBy<T extends Record<string, any>>(\n    array: readonly T[],\n    key: keyof T,\n): readonly T[] {\n    return Array.from(\n        array\n            .reduce(\n                (map, item) => (map.has(item[key]) ? map : map.set(item[key], item)),\n                new Map<T[keyof T], T>(),\n            )\n            .values(),\n    );\n}\n\nexport const tuiUniqBy = uniqBy;\n","import {isPresent} from './is-present';\n\n/**\n * @deprecated use nullish coalescing operator\n * If the value is null or undefined, returns default value\n * @param value\n * @param fallback alternative fallback\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function fallbackValue<T>(value: T | null | undefined, fallback: T): T {\n    return isPresent(value) ? value : fallback;\n}\n","/**\n * @deprecated: use identity from rxjs\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function identity<T>(item: T): T {\n    return item;\n}\n"]}