{"version":3,"sources":["ng://@taiga-ui/cdk/constants/empty.ts","ng://@taiga-ui/cdk/constants/stringify.ts","ng://@taiga-ui/cdk/constants/parent-animation.ts","ng://@taiga-ui/cdk/constants/always-false-handler.ts","ng://@taiga-ui/cdk/constants/always-true-handler.ts","ng://@taiga-ui/cdk/constants/unicode-chars.ts","ng://@taiga-ui/cdk/constants/browser.ts","ng://@taiga-ui/cdk/constants/polling-time.ts","ng://@taiga-ui/cdk/constants/matcher.ts","ng://@taiga-ui/cdk/constants/version.ts","ng://@taiga-ui/cdk/constants/svg-node-filter.ts"],"names":["EMPTY_QUERY","QueryList","TUI_DEFAULT_STRINGIFY","item","String","TUI_PARENT_ANIMATION","trigger","transition","style","overflow","query","animateChild","optional","bottom","height","left","right","top","width","item1","item2","Array","isArray","length","bothEmpty","search","stringify","toLowerCase","includes","node","NodeFilter","FILTER_REJECT","FILTER_ACCEPT"],"mappings":"2bAQaA,EAAc,IAAIC,EAAAA,UCHlBC,EAAmD,SAAAC,GAAQ,OAAAC,OAAOD,QCHlEE,EAAuBC,EAAAA,QAAQ,qBAAsB,CAC9DC,EAAAA,WAAW,YAAa,CACpBC,EAAAA,MAAM,CAACC,SAAU,WACjBC,EAAAA,MAAM,aAAc,CAACC,EAAAA,gBAAiB,CAACC,UAAU,+BCFrB,WAAa,OAAA,yBCAd,WAAY,OAAA,iBCuDpB,yBAUO,oBALL,mBA1CD,mBATA,kBA4BD,iBAdD,iBAsBA,0BA7CS,gBAkDV,iBAtBC,4BA0CW,kCCzEM,iBNSZ,uBAIc,CACzCC,OAAQ,EACRC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,MAAO,oBAT6C,+CAEZ,WAAM,OAAA,qBOZtB,IAAO,kCCmCsC,SAACC,EAAOC,GAC7E,OAAAD,IAAUC,GAEd,SAAmBD,EAAgBC,GAC/B,OAAOC,MAAMC,QAAQH,IAAUE,MAAMC,QAAQF,KAAWD,EAAMI,SAAWH,EAAMG,OAH5DC,CAAUL,EAAOC,0BA1BL,SAC/BjB,EACAsB,EACAC,GACU,YADV,IAAAA,IAAAA,EAAAxB,GACUwB,EAAUvB,GAAMwB,cAAcC,SAASH,EAAOE,wFAQ1B,SAC9BxB,EACAsB,EACAC,GACU,YADV,IAAAA,IAAAA,EAAAxB,GACUwB,EAAUvB,GAAMwB,gBAAkBF,EAAOE,6BC1B5B,yBCED,SAAiBE,GACvC,MAAA,oBAAqBA,EACfC,WAAWC,cACXD,WAAWE","sourcesContent":["import {QueryList} from '@angular/core';\nimport {ValidatorFn} from '@angular/forms';\n\n/**\n * For type safety when using @ContentChildren and @ViewChildren\n *\n * NOTE: Be careful subscribing to 'changes'\n */\nexport const EMPTY_QUERY = new QueryList<any>();\nexport const EMPTY_ARRAY: [] = [];\nexport const EMPTY_FUNCTION: (...args: any[]) => void = () => {};\n/** @deprecated use Validators.nullValidator */\nexport const EMPTY_VALIDATOR: ValidatorFn = () => null;\nexport const EMPTY_CLIENT_RECT: ClientRect = {\n    bottom: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    width: 0,\n};\n","import {TuiStringHandler} from '@taiga-ui/cdk/types';\n\n/**\n * Default method to turn arbitrary object into string\n */\nexport const TUI_DEFAULT_STRINGIFY: TuiStringHandler<unknown> = item => String(item);\n","import {animateChild, query, style, transition, trigger} from '@angular/animations';\n\nexport const TUI_PARENT_ANIMATION = trigger(`tuiParentAnimation`, [\n    transition(`* => void`, [\n        style({overflow: `hidden`}),\n        query(`:scope > *`, [animateChild()], {optional: true}),\n    ]),\n]);\n","/**\n * Handler that always returns `false`.\n */\nexport const ALWAYS_FALSE_HANDLER = (): false => false;\n","/**\n * Handler that always returns `true`.\n */\nexport const ALWAYS_TRUE_HANDLER = (): true => true;\n","/**\n * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.\n */\nexport const CHAR_NO_BREAK_SPACE = `\\u00A0`;\n\n/**\n * {@link https://unicode-table.com/en/2013/ EN dash}\n * is used to indicate a range of numbers or a span of time.\n * @example 2006–2022\n * ___\n * Don't confuse with {@link CHAR_EM_DASH} or {@link CHAR_HYPHEN}!\n */\nexport const CHAR_EN_DASH = `\\u2013`;\n\n/**\n * {@link https://unicode-table.com/en/2014/ EM dash}\n * is used to mark a break in a sentence.\n * @example Taiga UI — powerful set of open source components for Angular\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!\n */\nexport const CHAR_EM_DASH = `\\u2014`;\n\n/**\n * {@link https://unicode-table.com/en/00AB/ Left-Pointing Double Angle Quotation Mark}\n */\nexport const CHAR_LAQUO = `\\u00AB`;\n\n/**\n * {@link https://unicode-table.com/en/00BB/ Right-Pointing Double Angle Quotation Mark}\n */\nexport const CHAR_RAQUO = `\\u00BB`;\n\n/**\n * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}\n * is used to combine words.\n * @example well-behaved\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!\n */\nexport const CHAR_HYPHEN = `\\u002D`;\n\n/**\n * {@link https://unicode-table.com/en/2212/ Minus}\n * is used as math operator symbol or before negative digits.\n * ---\n * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}\n */\nexport const CHAR_MINUS = `\\u2212`;\n\n/**\n * {@link https://unicode-table.com/en/002B/ Plus}\n */\nexport const CHAR_PLUS = `\\u002B`;\n\n/**\n * {@link https://unicode-table.com/en/2022/ Bullet}.\n */\nexport const CHAR_BULLET = `\\u2022`;\n\n/**\n * {@link https://unicode-table.com/en/2026/ Suspension points}.\n */\nexport const CHAR_ELLIPSIS = `\\u2026`;\n\n/**\n * {@link https://unicode-table.com/en/00A4/ Suspension points}.\n */\nexport const CHAR_CURRENCY_SIGN = `\\u00A4`;\n\n/**\n * {@link https://unicode-table.com/en/200b/ Suspension points}.\n */\nexport const CHAR_ZERO_WIDTH_SPACE = `\\u200B`;\n","export const CHROMIUM_EDGE_START_VERSION = 79;\n","export const POLLING_TIME = 1000 / 15;\n","import {TuiHandler, TuiIdentityMatcher} from '@taiga-ui/cdk/types';\n\nimport {TUI_DEFAULT_STRINGIFY} from './stringify';\n\n/**\n * Default handler for matching stringified version of an item and a search query\n * @param item arbitrary element to match with a string\n * @param search search query\n * @param stringify handler to turn item into a string\n */\nexport const TUI_DEFAULT_MATCHER = <T>(\n    item: T,\n    search: string,\n    stringify: TuiHandler<T, string> = TUI_DEFAULT_STRINGIFY,\n): boolean => stringify(item).toLowerCase().includes(search.toLowerCase());\n\n/**\n * Default handler for strict matching stringified version of an item and a search query\n * @param item arbitrary element to match with a string\n * @param search search query\n * @param stringify handler to turn item into a string\n */\nexport const TUI_STRICT_MATCHER = <T>(\n    item: T,\n    search: string,\n    stringify: TuiHandler<T, string> = TUI_DEFAULT_STRINGIFY,\n): boolean => stringify(item).toLowerCase() === search.toLowerCase();\n\n/**\n * Default handler to match equality of two elements\n * ATTENTION: considers two empty arrays equal\n *\n * @param item1 first element\n * @param item2 second element\n */\nexport const TUI_DEFAULT_IDENTITY_MATCHER: TuiIdentityMatcher<unknown> = (item1, item2) =>\n    item1 === item2 || bothEmpty(item1, item2);\n\nfunction bothEmpty(item1: unknown, item2: unknown): boolean {\n    return Array.isArray(item1) && Array.isArray(item2) && !item1.length && !item2.length;\n}\n","export const TUI_VERSION = `2.99.0`;\n","// Filtering SVGElements for TreeWalker\n// Filter must be a function in IE, other modern browsers are compliant to this format\nexport const svgNodeFilter: NodeFilter = ((node: Node) =>\n    `ownerSVGElement` in node\n        ? NodeFilter.FILTER_REJECT\n        : NodeFilter.FILTER_ACCEPT) as any;\n"]}