(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/utils/os', ['exports'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.utils = global['taiga-ui'].cdk.utils || {}, global['taiga-ui'].cdk.utils.os = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @deprecated: use {@link tuiIsApplePlatform} instead
     * @description:
     * All Chrome / Chromium-based browsers will return MacIntel on macOS,
     * no matter what the hardware architecture is. See the source code here:
     * https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/frame/navigator_id.cc;l=64;drc=703d3c472cf27470dad21a3f2c8972aca3732cd6
     * But maybe in future years, it will be changed to MacM1
     *
     * Documentation:
     * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function isApplePlatform(navigator) {
        return navigator.platform.indexOf("Mac") === 0 || navigator.platform === "iPhone";
    }
    var tuiIsApplePlatform = isApplePlatform;

    var IOS_REG_EXP = /ipad|iphone|ipod/;
    /**
     * @deprecated: use {@link tuiIsIos} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function isIos(navigator) {
        return (IOS_REG_EXP.test(navigator.userAgent.toLowerCase()) ||
            (isApplePlatform(navigator) && navigator.maxTouchPoints > 1));
    }
    var tuiIsIos = isIos;

    var SAFARI_REG_EXP = /^((?!chrome|android).)*safari/i;
    /**
     * @deprecated: use {@link tuiIsApple} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function isApple(navigator) {
        return isIos(navigator) || SAFARI_REG_EXP.test(navigator.userAgent.toLowerCase());
    }
    var tuiIsApple = isApple;

    exports.isApple = isApple;
    exports.isApplePlatform = isApplePlatform;
    exports.isIos = isIos;
    exports.tuiIsApple = tuiIsApple;
    exports.tuiIsApplePlatform = tuiIsApplePlatform;
    exports.tuiIsIos = tuiIsIos;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-utils-os.umd.js.map
