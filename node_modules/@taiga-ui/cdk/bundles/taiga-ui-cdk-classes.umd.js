(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk/constants')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/classes', ['exports', '@taiga-ui/cdk/constants'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.classes = {}), global['taiga-ui'].cdk.constants));
}(this, (function (exports, constants) { 'use strict';

    var tuiAssert = {
        enabled: false,
        get assert() {
            return this.enabled
                ? Function.prototype.bind.call(console.assert, console)
                : constants.EMPTY_FUNCTION;
        },
    };
    // TODO: replace `HTMLElement` to `Element` in v3.0
    // TS 3.8 Argument of type Argument of type 'TuiNativeFocusableElement | HTMLElement' is not assignable to parameter of type 'HTMLElement'.
    function tuiAssertIsHTMLElement(node) {
        var _a, _b;
        var defaultView = (_b = (_a = node) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
        var isElement = !!defaultView &&
            (node instanceof defaultView.Element || node instanceof defaultView.HTMLDocument);
        tuiAssert.assert(isElement, "Node is not an Element");
    }

    var TuiValidationError = /** @class */ (function () {
        function TuiValidationError(message, context) {
            if (context === void 0) { context = {}; }
            this.message = message;
            this.context = context;
        }
        return TuiValidationError;
    }());

    exports.TuiValidationError = TuiValidationError;
    exports.tuiAssert = tuiAssert;
    exports.tuiAssertIsHTMLElement = tuiAssertIsHTMLElement;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-classes.umd.js.map
