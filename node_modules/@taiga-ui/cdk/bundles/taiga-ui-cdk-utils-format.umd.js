(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk/classes')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/utils/format', ['exports', '@taiga-ui/cdk/classes'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.utils = global['taiga-ui'].cdk.utils || {}, global['taiga-ui'].cdk.utils.format = {}), global['taiga-ui'].cdk.classes));
}(this, (function (exports, classes) { 'use strict';

    /**
     * @deprecated use String.prototype.padStart in 3.0 (after Chrome 49 support is dropped)
     * Pads a string with symbols in the beginning
     *
     * @param sourceString
     * @param minResultLength
     * @param padString string to pad with
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function padStart(sourceString, minResultLength, padString) {
        if (padString === void 0) { padString = " "; }
        var padSize = minResultLength - sourceString.length;
        if (padSize <= 0) {
            return sourceString;
        }
        return padString.repeat(padSize / padString.length).slice(0, padSize) + sourceString;
    }

    /**
     * @deprecated: use {@link tuiPx} instead
     * Adds 'px' to the number and turns it into a string
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function px(value) {
        classes.tuiAssert.assert(Number.isFinite(value), "Value must be finite number");
        return value + "px";
    }
    var tuiPx = px;

    exports.padStart = padStart;
    exports.px = px;
    exports.tuiPx = tuiPx;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-utils-format.umd.js.map
