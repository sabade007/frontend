{"version":3,"sources":["ng://@taiga-ui/cdk/observables/typed-from-event.ts","ng://@taiga-ui/cdk/observables/mouse-drag-finish-from.ts","ng://@taiga-ui/cdk/observables/drag-and-drop-from.ts","ng://@taiga-ui/cdk/observables/focus-visible-observable.ts","ng://@taiga-ui/cdk/observables/is-alive.ts","ng://@taiga-ui/cdk/observables/items-query-list-observable.ts","ng://@taiga-ui/cdk/observables/must-be-present.ts","ng://@taiga-ui/cdk/observables/pressed-observable.ts","ng://@taiga-ui/cdk/observables/prevent-default.ts","ng://@taiga-ui/cdk/observables/stop-propagation.ts","ng://@taiga-ui/cdk/observables/watch.ts","ng://@taiga-ui/cdk/observables/zone-free.ts","ng://@taiga-ui/cdk/observables/is-observed.ts","ng://@taiga-ui/cdk/observables/replay-control-value-changes.ts","ng://@taiga-ui/cdk/observables/scroll-from.ts"],"names":["typedFromEvent","target","event","options","fromEvent","tuiTypedFromEvent","mouseDragFinishFrom","merge","TuiDragStage","tuiMouseDragFinishFrom","stage","this","dragAndDropFrom","element","ownerDocument","TuiOwnerDocumentException","concat","pipe","take","map","TuiDragState","endWith","takeWhile","isPresent","repeat","documentMouseUpIsAlive$","documentMouseDownIsAlive$","tuiDragAndDropFrom","tuiIsAlive","lifespan","switchMapTo","timer","mapTo","startWith","distinctUntilChanged","focusVisibleObservable","elementBlur$","capture","shareReplay","bufferSize","refCount","filter","isNativeFocused","ignoreElements","withLatestFrom","_event","elementActual","documentActual","isUserFocus","tuiFocusVisibleObservable","itemsQueryListObservable","queryList","changes","getOriginalArrayFromQueryList","tuiItemsQueryListObservable","mustBePresent","value","TuiValuePresentException","tuiMustBePresent","pressedObservable","_a","onlyTrusted","isTrusted","tuiPressedObservable","preventDefault","tap","tuiPreventDefault","stopPropagation","e","tuiStopPropagation","watch","changeDetectorRef","markForCheck","tuiWatch","tuiZonefull","ngZone","source","Observable","subscriber","subscribe","next","run","error","complete","tuiZonefree","runOutsideAngular","observable","observed","observers","length","control","valueChanges","TuiValueChangesException","documentElement"],"mappings":"8tBAuDgBA,EACZC,EACAC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOC,EAAAA,UAAUH,EAAQC,EAAOC,OAGvBE,EAAoBL,WCpDjBM,EAEdL,GACE,OAAOM,EAAAA,MAAMP,EAAeC,EAAQ,WAAYD,EAAeC,EAAQ,gBCNzDO,EDSLC,EAAyBH,GCTpBE,EAAAA,EAAAA,eAAAA,EAAAA,aAAY,KAC1BA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,IAAA,GAAA,YAIA,SAAqBE,EAA8BR,GAA9BS,KAAAD,MAAAA,EAA8BC,KAAAT,MAAAA,YAOvCU,EAAgBC,GACrB,IAAAC,EAAAD,EAAAC,cAEP,IAAKA,EACD,MAAM,IAAIC,EAAAA,0BAGd,OAAOC,EAAAA,OACHhB,EAAea,EAAS,aAAaI,KACjCC,EAAAA,KAAK,GACLC,EAAAA,KAAI,SAAAjB,GAAS,OAAA,IAAIkB,EAAY,EAAqBlB,OAEtDK,EAAAA,MACIP,EAAec,EAAe,aAAaG,KACvCE,EAAAA,KAAI,SAAAjB,GAAS,OAAA,IAAIkB,EAAY,EAAyBlB,OAE1DI,EAAoBQ,GAAeG,KAC/BC,EAAAA,KAAK,GACLC,EAAAA,KAAI,SAAAjB,GAAS,OAAA,IAAIkB,EAAY,EAAmBlB,MAChDmB,EAAAA,QAAQ,QAEdJ,KAAKK,EAAAA,UAAUC,EAAAA,aACnBN,KAAKO,EAAAA,cCzBPC,EACAC,ED2BSC,EAAqBf,WEzClBgB,EAAWC,GACvB,YADuB,IAAAA,IAAAA,EAAA,GAChBZ,EAAAA,KACHa,EAAAA,YAAYC,EAAAA,MAAMF,GAAUZ,KAAKe,EAAAA,OAAM,GAAQC,EAAAA,WAAU,KACzDC,EAAAA,iCDiBQC,EAAuBtB,GACnC,IAAMuB,EAAepC,EAAea,EAAS,QACtCC,EAAAD,EAAAC,cAEP,IAAKA,EACD,MAAM,IAAIC,EAAAA,0BAoBd,OAjBKW,GAA8BD,IAC/BA,EAA0BzB,EAAec,EAAe,UAAW,CAC/DuB,SAAS,IACVpB,KACCW,IACAK,EAAAA,WAAU,GACVK,EAAAA,YAAY,CAACC,WAAY,EAAGC,UAAU,KAE1Cd,EAA4B1B,EAAec,EAAe,YAAa,CACnEuB,SAAS,IACVpB,KACCW,IACAK,EAAAA,WAAU,GACVK,EAAAA,YAAY,CAACC,WAAY,EAAGC,UAAU,MAIvCjC,EAAAA,MAEHS,EAAAA,OACIhB,EAAea,EAAS,SAASI,KAAKC,EAAAA,KAAK,IAE3CkB,EAAanB,KACTwB,EAAAA,QAAO,WAAM,OAACC,EAAAA,gBAAgB7B,MAC9BK,EAAAA,KAAK,GACLyB,EAAAA,mBAEN1B,KACEO,EAAAA,SACAoB,EAAAA,eACIlB,EACAD,GACA,SAACoB,EAAQC,EAAeC,GACpB,OAAAD,GAAiBC,KAEzBN,EAAAA,QAAO,SAAAO,GAAe,OAACA,OAE7B/B,KACEa,EAAAA,YAAYM,EAAanB,KAAKe,EAAAA,OAAM,GAAQd,EAAAA,KAAK,GAAIe,EAAAA,WAAU,KAC/DC,EAAAA,4BAIKe,EAA4Bd,WEnEzBe,EACZC,GAEA,OAAOA,EAAUC,QAAQnC,KACrBE,EAAAA,KAAI,WAAM,OAAAkC,EAAAA,8BAA8BF,MACxClB,EAAAA,UAAUoB,EAAAA,8BAA8BF,SAInCG,EAA8BJ,WCV3BK,IACZ,OAAOpC,EAAAA,KAAI,SAAAqC,GACP,IAAKjC,EAAAA,UAAUiC,GACX,MAAM,IAAIC,EAAAA,yBAGd,OAAOD,SAIFE,EAAmBH,WCJhBI,EACZ9C,EACA+C,OAACC,QAAA,IAAAD,EAAA,CAAAC,aAAA,GAAAD,GAAAC,YAEM/C,EAAAD,EAAAC,cAEP,IAAKA,EACD,MAAM,IAAIC,EAAAA,0BAGd,OAAOf,EAAea,EAAS,aAAaI,KACxCwB,EAAAA,QAAO,SAACmB,GAAgB,OAAfA,EAAAE,YAA6BD,KACtC/B,EAAAA,YACIxB,EAAoBQ,GAAeG,KAC/Be,EAAAA,OAAM,GACNd,EAAAA,KAAK,GACLe,EAAAA,WAAU,UAMb8B,EAAuBJ,WC9BpBK,IACZ,OAAOC,EAAAA,KAAI,SAAA/D,GAAS,OAAAA,EAAM8D,wBAGjBE,EAAoBF,WCJjBG,IACZ,OAAOF,EAAAA,KAAI,SAAAG,GACPA,EAAED,yBAIGE,EAAqBF,WCLlBG,EACZC,GAEA,OAAON,EAAAA,KAAI,WACPM,EAAkBC,sBAIbC,EAAWH,WCbRI,EAAeC,GAC3B,OAAO,SAAAC,GACH,OAAA,IAAIC,EAAAA,YAAW,SAAAC,GACX,OAAAF,EAAOG,UAAU,CACbC,KAAM,SAAAxB,GAAS,OAAAmB,EAAOM,KAAI,WAAM,OAAAH,EAAWE,KAAKxB,OAChD0B,MAAO,SAACA,GAAmB,OAAAP,EAAOM,KAAI,WAAM,OAAAH,EAAWI,MAAMA,OAC7DC,SAAU,WAAM,OAAAR,EAAOM,KAAI,WAAM,OAAAH,EAAWK,8BAK5CC,EAAeT,GAC3B,OAAO,SAAAC,GACH,OAAA,IAAIC,EAAAA,YAAW,SAAAC,GACX,OAAAH,EAAOU,mBAAkB,WAAM,OAAAT,EAAOG,UAAUD,2SCZ3BQ,GAC7B,OAAQA,EAAmBC,YAAcD,EAAWE,UAAUC,8KCI9DC,GAEA,OAAO,IAAIb,EAAAA,YAAW,SAAAC,GAClB,IAAKY,EAAQC,aACT,MAAM,IAAIC,EAAAA,yBAGdF,EAAQC,aAAa1E,KAAKgB,EAAAA,UAAUyD,EAAQlC,QAAQuB,UAAUD,gCCVxCjE,SAC1B,OAAOR,EACHQ,KAAiC,QAA1B+C,EAAK/C,EAAQC,qBAAa,IAAA8C,OAAA,EAAAA,EAAEiC,iBAC7BhF,EAAQC,cACRD,EACN,iGHS4B8D,GAChC,OAAO1D,EAAAA,KAAKmE,EAAYT,GAASD,EAAYC","sourcesContent":["import {TuiEventWith, TuiTypedEventTarget} from '@taiga-ui/cdk/types';\nimport {fromEvent, Observable} from 'rxjs';\n\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<E extends keyof WindowEventMap>(\n    target: Window,\n    event: E,\n    options?: AddEventListenerOptions,\n): Observable<TuiEventWith<WindowEventMap[E], typeof target>>;\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<E extends keyof DocumentEventMap>(\n    target: Document,\n    event: E,\n    options?: AddEventListenerOptions,\n): Observable<TuiEventWith<DocumentEventMap[E], typeof target>>;\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<T extends Element, E extends keyof HTMLElementEventMap>(\n    target: T,\n    event: E,\n    options?: AddEventListenerOptions,\n): Observable<TuiEventWith<HTMLElementEventMap[E], typeof target>>;\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<\n    E extends Event,\n    T extends TuiTypedEventTarget<TuiEventWith<E, T>>,\n>(\n    target: T,\n    event: string,\n    options?: AddEventListenerOptions,\n): Observable<TuiEventWith<E, T>>;\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<E extends Event>(\n    target: TuiTypedEventTarget<E>,\n    event: string,\n    options?: AddEventListenerOptions,\n): Observable<E>;\n/**\n * @deprecated: use {@link tuiTypedFromEvent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function typedFromEvent<E extends Event>(\n    target: TuiTypedEventTarget<E>,\n    event: string,\n    options: AddEventListenerOptions = {},\n): Observable<E> {\n    return fromEvent(target, event, options);\n}\n\nexport const tuiTypedFromEvent = typedFromEvent;\n","import {TuiEventWith, TuiTypedEventTarget} from '@taiga-ui/cdk/types';\nimport {merge, Observable} from 'rxjs';\n\nimport {typedFromEvent} from './typed-from-event';\n\n/**\n * @deprecated: use {@link tuiMouseDragFinishFrom} instead\n * Letting go of the mouse after it was pressed\n * @param target\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function mouseDragFinishFrom<\n    T extends TuiTypedEventTarget<TuiEventWith<DragEvent, T>>,\n>(target: Exclude<T, null>): Observable<TuiEventWith<MouseEvent, T>> {\n    return merge(typedFromEvent(target, `mouseup`), typedFromEvent(target, `dragend`));\n}\n\nexport const tuiMouseDragFinishFrom = mouseDragFinishFrom;\n","import {TuiOwnerDocumentException} from '@taiga-ui/cdk/exceptions';\nimport {isPresent} from '@taiga-ui/cdk/utils/miscellaneous';\nimport {concat, merge, Observable} from 'rxjs';\nimport {endWith, map, repeat, take, takeWhile} from 'rxjs/operators';\n\nimport {mouseDragFinishFrom} from './mouse-drag-finish-from';\nimport {typedFromEvent} from './typed-from-event';\n\nexport const enum TuiDragStage {\n    Start,\n    Continues,\n    End,\n}\n\nexport class TuiDragState {\n    constructor(readonly stage: TuiDragStage, readonly event: MouseEvent) {}\n}\n\n/**\n * @deprecated: use {@link tuiDragAndDropFrom} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function dragAndDropFrom(element: Element): Observable<TuiDragState> {\n    const {ownerDocument} = element;\n\n    if (!ownerDocument) {\n        throw new TuiOwnerDocumentException();\n    }\n\n    return concat(\n        typedFromEvent(element, `mousedown`).pipe(\n            take(1),\n            map(event => new TuiDragState(TuiDragStage.Start, event)),\n        ),\n        merge(\n            typedFromEvent(ownerDocument, `mousemove`).pipe(\n                map(event => new TuiDragState(TuiDragStage.Continues, event)),\n            ),\n            mouseDragFinishFrom(ownerDocument).pipe(\n                take(1),\n                map(event => new TuiDragState(TuiDragStage.End, event)),\n                endWith(null),\n            ),\n        ).pipe(takeWhile(isPresent)),\n    ).pipe(repeat());\n}\n\nexport const tuiDragAndDropFrom = dragAndDropFrom;\n","import {TuiOwnerDocumentException} from '@taiga-ui/cdk/exceptions';\nimport {isNativeFocused} from '@taiga-ui/cdk/utils/focus';\nimport {concat, merge, Observable} from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    ignoreElements,\n    mapTo,\n    repeat,\n    shareReplay,\n    startWith,\n    switchMapTo,\n    take,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport {tuiIsAlive} from './is-alive';\nimport {typedFromEvent} from './typed-from-event';\n\nlet documentMouseUpIsAlive$: Observable<boolean>;\nlet documentMouseDownIsAlive$: Observable<boolean>;\n\n/**\n * @deprecated: use {@link tuiFocusVisibleObservable} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function focusVisibleObservable(element: Element): Observable<boolean> {\n    const elementBlur$ = typedFromEvent(element, `blur`);\n    const {ownerDocument} = element;\n\n    if (!ownerDocument) {\n        throw new TuiOwnerDocumentException();\n    }\n\n    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {\n        documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, `mouseup`, {\n            capture: true,\n        }).pipe(\n            tuiIsAlive(),\n            startWith(false),\n            shareReplay({bufferSize: 1, refCount: true}),\n        );\n        documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, `mousedown`, {\n            capture: true,\n        }).pipe(\n            tuiIsAlive(),\n            startWith(false),\n            shareReplay({bufferSize: 1, refCount: true}),\n        );\n    }\n\n    return merge(\n        // focus events excluding ones that came right after mouse action\n        concat(\n            typedFromEvent(element, `focus`).pipe(take(1)),\n            // filtering out blur events when element remains focused so that we ignore browser tab focus loss\n            elementBlur$.pipe(\n                filter(() => !isNativeFocused(element)),\n                take(1),\n                ignoreElements(),\n            ),\n        ).pipe(\n            repeat(),\n            withLatestFrom(\n                documentMouseDownIsAlive$,\n                documentMouseUpIsAlive$,\n                (_event, elementActual, documentActual) =>\n                    elementActual || documentActual,\n            ),\n            filter(isUserFocus => !isUserFocus),\n        ),\n    ).pipe(\n        switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))),\n        distinctUntilChanged(),\n    );\n}\n\nexport const tuiFocusVisibleObservable = focusVisibleObservable;\n","import {OperatorFunction, pipe, timer} from 'rxjs';\nimport {distinctUntilChanged, mapTo, startWith, switchMapTo} from 'rxjs/operators';\n\n/**\n * Operator to set lifespan after which current value is considered obsolete\n */\nexport function tuiIsAlive(lifespan: number = 0): OperatorFunction<unknown, boolean> {\n    return pipe(\n        switchMapTo(timer(lifespan).pipe(mapTo(false), startWith(true))),\n        distinctUntilChanged(),\n    );\n}\n","import {QueryList} from '@angular/core';\nimport {getOriginalArrayFromQueryList} from '@taiga-ui/cdk/utils/miscellaneous';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiItemsQueryListObservable} instead\n * Converts changes observable of a QueryList to an Observable of arrays\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function itemsQueryListObservable<T>(\n    queryList: QueryList<T>,\n): Observable<readonly T[]> {\n    return queryList.changes.pipe(\n        map(() => getOriginalArrayFromQueryList(queryList)),\n        startWith(getOriginalArrayFromQueryList(queryList)),\n    );\n}\n\nexport const tuiItemsQueryListObservable = itemsQueryListObservable;\n","import {TuiValuePresentException} from '@taiga-ui/cdk/exceptions';\nimport {isPresent} from '@taiga-ui/cdk/utils/miscellaneous';\nimport {OperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiMustBePresent} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function mustBePresent<T>(): OperatorFunction<T | null | undefined, T> {\n    return map(value => {\n        if (!isPresent(value)) {\n            throw new TuiValuePresentException();\n        }\n\n        return value;\n    });\n}\n\nexport const tuiMustBePresent = mustBePresent;\n","import {TuiOwnerDocumentException} from '@taiga-ui/cdk/exceptions';\nimport {Observable} from 'rxjs';\nimport {filter, mapTo, startWith, switchMapTo, take} from 'rxjs/operators';\n\nimport {mouseDragFinishFrom} from './mouse-drag-finish-from';\nimport {typedFromEvent} from './typed-from-event';\n\nexport interface TuiPressedObservableOptions {\n    onlyTrusted: boolean;\n}\n\n/**\n * @deprecated: use {@link tuiPressedObservable} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function pressedObservable(\n    element: Element,\n    {onlyTrusted}: TuiPressedObservableOptions = {onlyTrusted: true},\n): Observable<boolean> {\n    const {ownerDocument} = element;\n\n    if (!ownerDocument) {\n        throw new TuiOwnerDocumentException();\n    }\n\n    return typedFromEvent(element, `mousedown`).pipe(\n        filter(({isTrusted}) => isTrusted || !onlyTrusted),\n        switchMapTo(\n            mouseDragFinishFrom(ownerDocument).pipe(\n                mapTo(false),\n                take(1),\n                startWith(true),\n            ),\n        ),\n    );\n}\n\nexport const tuiPressedObservable = pressedObservable;\n","import {MonoTypeOperatorFunction} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiPreventDefault} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function preventDefault<T extends Event>(): MonoTypeOperatorFunction<T> {\n    return tap(event => event.preventDefault());\n}\n\nexport const tuiPreventDefault = preventDefault;\n","import {MonoTypeOperatorFunction} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiStopPropagation} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function stopPropagation<T extends Event>(): MonoTypeOperatorFunction<T> {\n    return tap(e => {\n        e.stopPropagation();\n    });\n}\n\nexport const tuiStopPropagation = stopPropagation;\n","import {ChangeDetectorRef} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\n/**\n * @deprecated: use {@link tuiWatch} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function watch<T>(\n    changeDetectorRef: ChangeDetectorRef,\n): MonoTypeOperatorFunction<T> {\n    return tap(() => {\n        changeDetectorRef.markForCheck();\n    });\n}\n\nexport const tuiWatch = watch;\n","import {NgZone} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable, pipe} from 'rxjs';\n\nexport function tuiZonefull<T>(ngZone: NgZone): MonoTypeOperatorFunction<T> {\n    return source =>\n        new Observable(subscriber =>\n            source.subscribe({\n                next: value => ngZone.run(() => subscriber.next(value)),\n                error: (error: unknown) => ngZone.run(() => subscriber.error(error)),\n                complete: () => ngZone.run(() => subscriber.complete()),\n            }),\n        );\n}\n\nexport function tuiZonefree<T>(ngZone: NgZone): MonoTypeOperatorFunction<T> {\n    return source =>\n        new Observable(subscriber =>\n            ngZone.runOutsideAngular(() => source.subscribe(subscriber)),\n        );\n}\n\nexport function tuiZoneOptimized<T>(ngZone: NgZone): MonoTypeOperatorFunction<T> {\n    return pipe(tuiZonefree(ngZone), tuiZonefull(ngZone));\n}\n","import {Subject} from 'rxjs';\n\n/**\n * In RxJS 8 `observers` will be removed, this util is for future safety\n */\nexport function tuiIsObserved<T>(observable: Subject<T>): boolean {\n    return (observable as any).observed || !!observable.observers.length;\n}\n","import {AbstractControl, AbstractControlDirective} from '@angular/forms';\nimport {TuiValueChangesException} from '@taiga-ui/cdk/exceptions';\nimport {Observable} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * Turns AbstractControl/Abstract-control-directive valueChanges into ReplaySubject(1)\n * TODO: 3.0 name should be shorter.\n */\nexport function tuiReplayedValueChangesFrom<T>(\n    control: AbstractControl | AbstractControlDirective,\n): Observable<T> {\n    return new Observable(subscriber => {\n        if (!control.valueChanges) {\n            throw new TuiValueChangesException();\n        }\n\n        control.valueChanges.pipe(startWith(control.value)).subscribe(subscriber);\n    });\n}\n","import {Observable} from 'rxjs';\n\nimport {tuiTypedFromEvent} from './typed-from-event';\n\n/**\n * Normalizes scroll event in case element is `html` (document.documentElement)\n */\nexport function tuiScrollFrom(element: Element): Observable<Event> {\n    return tuiTypedFromEvent(\n        element === element.ownerDocument?.documentElement\n            ? element.ownerDocument\n            : element,\n        `scroll`,\n    );\n}\n"]}