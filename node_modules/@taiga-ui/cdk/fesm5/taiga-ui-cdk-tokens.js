import { __read } from 'tslib';
import { DOCUMENT } from '@angular/common';
import { InjectionToken, inject, InjectFlags, RendererFactory2 } from '@angular/core';
import { WINDOW, NAVIGATOR, USER_AGENT } from '@ng-web-apis/common';
import { typedFromEvent } from '@taiga-ui/cdk/observables';
import { getActualTarget, getDocumentOrShadowRoot, isIos, isApple } from '@taiga-ui/cdk/utils';
import { BehaviorSubject, timer, merge, of } from 'rxjs';
import { switchMap, mapTo, startWith, share, takeUntil, repeatWhen, withLatestFrom, filter, map, take, distinctUntilChanged, shareReplay } from 'rxjs/operators';
import { ɵAnimationEngine } from '@angular/animations/browser';

var TUI_REMOVED_ELEMENT = new InjectionToken("Element currently being removed by AnimationEngine", {
    factory: function () {
        var _a;
        var stub = { onRemovalComplete: function () { } };
        var element$ = new BehaviorSubject(null);
        var engine = (_a = inject(ɵAnimationEngine, InjectFlags.Optional)) !== null && _a !== void 0 ? _a : stub;
        var _b = engine.onRemovalComplete, onRemovalComplete = _b === void 0 ? stub.onRemovalComplete : _b;
        engine.onRemovalComplete = function (element, context) {
            element$.next(element);
            onRemovalComplete(element, context);
        };
        return element$.pipe(switchMap(function (element) { return timer(0).pipe(mapTo(null), startWith(element)); }), share());
    },
});

var TUI_ACTIVE_ELEMENT = new InjectionToken("Active element on the document for ActiveZone", {
    factory: function () {
        var removedElement$ = inject(TUI_REMOVED_ELEMENT);
        var windowRef = inject(WINDOW);
        var documentRef = inject(DOCUMENT);
        var focusout$ = typedFromEvent(windowRef, "focusout");
        var focusin$ = typedFromEvent(windowRef, "focusin");
        var blur$ = typedFromEvent(windowRef, "blur");
        var mousedown$ = typedFromEvent(windowRef, "mousedown");
        var mouseup$ = typedFromEvent(windowRef, "mouseup");
        return merge(focusout$.pipe(
        // eslint-disable-next-line rxjs/no-unsafe-takeuntil
        takeUntil(mousedown$), 
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(function () { return mouseup$; }), withLatestFrom(removedElement$), filter(function (_a) {
            var _b = __read(_a, 2), event = _b[0], removedElement = _b[1];
            return isValidFocusout(getActualTarget(event), removedElement);
        }), map(function (_a) {
            var _b = __read(_a, 1), relatedTarget = _b[0].relatedTarget;
            return relatedTarget;
        })), blur$.pipe(map(function () { return documentRef.activeElement; }), filter(function (element) { return !!element && element.matches("iframe"); })), focusin$.pipe(switchMap(function (event) {
            var target = getActualTarget(event);
            var root = getDocumentOrShadowRoot(target);
            return root === documentRef
                ? of(target)
                : shadowRootActiveElement(root).pipe(startWith(target));
        })), mousedown$.pipe(switchMap(function (event) {
            return !documentRef.activeElement ||
                documentRef.activeElement === documentRef.body
                ? of(getActualTarget(event))
                : focusout$.pipe(take(1), mapTo(getActualTarget(event)), takeUntil(timer(0)));
        }))).pipe(distinctUntilChanged(), share());
    },
});
// Checks if focusout event should be considered leaving active zone
function isValidFocusout(target, removedElement) {
    if (removedElement === void 0) { removedElement = null; }
    return (
    // Not due to switching tabs/going to DevTools
    getDocumentOrShadowRoot(target).activeElement !== target &&
        // Not due to button/input becoming disabled
        !target.disabled &&
        // Not due to element being removed from DOM
        !(removedElement === null || removedElement === void 0 ? void 0 : removedElement.contains(target)));
}
function shadowRootActiveElement(root) {
    return merge(typedFromEvent(root, "focusin").pipe(map(function (_a) {
        var target = _a.target;
        return target;
    })), typedFromEvent(root, "focusout").pipe(filter(function (_a) {
        var target = _a.target, relatedTarget = _a.relatedTarget;
        return !!relatedTarget && isValidFocusout(target);
    }), map(function (_a) {
        var relatedTarget = _a.relatedTarget;
        return relatedTarget;
    })));
}

var TUI_ALERTS = new InjectionToken("A stream of alerts", {
    factory: function () { return []; },
});

// https://github.com/angular/angular/issues/17824#issuecomment-353239017
var TUI_DEFAULT_RENDERER = new InjectionToken("A Renderer2 for global services", {
    // @ts-ignore
    factory: function () { return inject(RendererFactory2).createRenderer(null, null); },
});

var TUI_DIALOGS = new InjectionToken("A stream of dialogs", {
    factory: function () { return []; },
});

var TUI_FOCUSABLE_ITEM_ACCESSOR = new InjectionToken("A component that can be focused");

var TUI_IS_IOS = new InjectionToken("iOS browser detection", {
    factory: function () { return isIos(inject(NAVIGATOR)); },
});

// https://stackoverflow.com/a/11381730/2706426 http://detectmobilebrowsers.com/
var firstRegex = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/;
var secondRegex = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/;
var TUI_IS_MOBILE = new InjectionToken("Mobile browser detection", {
    factory: function () {
        return firstRegex.test(inject(USER_AGENT).toLowerCase()) ||
            secondRegex.test(inject(USER_AGENT).slice(0, 4).toLowerCase());
    },
});

var TUI_IS_ANDROID = new InjectionToken("Mobile browser that is not iOS (technically includes Windows Phone, Blackberry etc.)", {
    factory: function () { return inject(TUI_IS_MOBILE) && !inject(TUI_IS_IOS); },
});

var TUI_IS_APPLE = new InjectionToken("Apple(safari/webkit) detection", { factory: function () { return isApple(inject(NAVIGATOR)); } });

var TUI_IS_CHROMIUM = new InjectionToken("Chromium browser engine detection", {
    factory: function () { return !!inject(WINDOW).chrome; },
});

/**
 * {@link https://docs.cypress.io/faq/questions/using-cypress-faq#Is-there-any-way-to-detect-if-my-app-is-running-under-Cypress Cypress docs}
 */
var TUI_IS_CYPRESS = new InjectionToken("Detect if app is running under Cypress", {
    factory: function () { return !!inject(WINDOW).Cypress; },
});

var TUI_IS_FIREFOX = new InjectionToken("Firefox browser engine detection", {
    factory: function () {
        var _a;
        return typeof ((_a = inject(WINDOW)) === null || _a === void 0 ? void 0 : _a.mozCancelFullScreen) !== "undefined";
    },
});

var TUI_IS_WEBKIT = new InjectionToken("Webkit browser engine detection", {
    factory: function () { return !!inject(WINDOW).webkitConvertPointFromNodeToPage; },
});

/* @deprecated export token from @taiga-ui/core package **/
var TUI_SANITIZER = new InjectionToken("A custom Sanitizer to sanitize source before inlining");

var TUI_SWIPE_OPTIONS = new InjectionToken("Swipe options", {
    factory: function () { return ({ timeout: 500, threshold: 30 }); },
});

/**
 * @description:
 * The isTrusted read-only property of the Event interface is a boolean value that is true
 * when the event was generated by a user action, and false when the event was created or
 * modified by a script or dispatched via EventTarget.dispatchEvent().
 */
var TUI_TAKE_ONLY_TRUSTED_EVENTS = new InjectionToken("This token need for override behavior the `pressedObservable` function", {
    factory: function () { return true; },
});

var TUI_TOUCH_SUPPORTED = new InjectionToken("Touch support detection", {
    factory: function () { return inject(WINDOW).matchMedia("(any-pointer: coarse)").matches; },
});

var TUI_WINDOW_HEIGHT = new InjectionToken("Window height accounting for disappearing address bar", {
    factory: function () {
        var windowRef = inject(WINDOW);
        return typedFromEvent(windowRef, "resize").pipe(startWith(null), map(function () { return windowRef.innerHeight; }), shareReplay({ bufferSize: 1, refCount: true }));
    },
});

var TUI_ZOOM_OPTIONS = new InjectionToken("Zoom options", {
    factory: function () { return ({
        wheelSensitivity: 0.01,
    }); },
});

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_ACTIVE_ELEMENT, TUI_ALERTS, TUI_DEFAULT_RENDERER, TUI_DIALOGS, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_ANDROID, TUI_IS_APPLE, TUI_IS_CHROMIUM, TUI_IS_CYPRESS, TUI_IS_FIREFOX, TUI_IS_IOS, TUI_IS_MOBILE, TUI_IS_WEBKIT, TUI_REMOVED_ELEMENT, TUI_SANITIZER, TUI_SWIPE_OPTIONS, TUI_TAKE_ONLY_TRUSTED_EVENTS, TUI_TOUCH_SUPPORTED, TUI_WINDOW_HEIGHT, TUI_ZOOM_OPTIONS };
//# sourceMappingURL=taiga-ui-cdk-tokens.js.map
