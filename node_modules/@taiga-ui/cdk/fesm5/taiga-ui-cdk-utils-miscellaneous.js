import { tuiAssert } from '@taiga-ui/cdk/classes';
import { FormArray, FormGroup } from '@angular/forms';

/**
 * @deprecated: use {@link tuiDistanceBetweenTouches} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function distanceBetweenTouches(_a) {
    var touches = _a.touches;
    return Math.hypot(touches[0].clientX - touches[1].clientX, touches[0].clientY - touches[1].clientY);
}
var tuiDistanceBetweenTouches = distanceBetweenTouches;

/**
 * @deprecated: use {@link tuiEaseInOutQuad} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function easeInOutQuad(t) {
    tuiAssert.assert(t >= 0 && t <= 1, "Input must be between 0 and 1 inclusive but received ", t);
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}
var tuiEaseInOutQuad = easeInOutQuad;

/**
 * @deprecated: use {@link tuiIsPresent} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isPresent(value) {
    return value !== null && value !== undefined;
}
var tuiIsPresent = isPresent;

/**
 * @deprecated use nullish coalescing operator
 * If the value is null or undefined, returns default value
 * @param value
 * @param fallback alternative fallback
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function fallbackValue(value, fallback) {
    return isPresent(value) ? value : fallback;
}

/**
 * @deprecated: use {@link tuiFlatLength} instead
 * Flattens two-dimensional array and calculates resulting length
 *
 * @param array twi dimensional array
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function flatLength(array) {
    return array.reduce(function (count, section) { return count + section.length; }, 0);
}
var tuiFlatLength = flatLength;

/**
 * @deprecated: use {@link tuiGetOriginalArrayFromQueryList} instead
 * Extracts original array from {@link QueryList} rather than
 * creating a copy like {@link QueryList.toArray} does.
 * @param queryList
 * @returns original array from {@link QueryList}.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getOriginalArrayFromQueryList(queryList) {
    var array = [];
    queryList.find(function (_item, _index, originalArray) {
        array = originalArray;
        return true;
    });
    return array;
}
var tuiGetOriginalArrayFromQueryList = getOriginalArrayFromQueryList;

/**
 * @deprecated: use {@link tuiGetSwipeDirection} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getSwipeDirection(deltaX, deltaY) {
    if (Math.abs(deltaY) > Math.abs(deltaX)) {
        return deltaY > 0 ? "top" : "bottom";
    }
    return deltaX > 0 ? "left" : "right";
}
var tuiGetSwipeDirection = getSwipeDirection;

/**
 * @deprecated: use identity from rxjs
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function identity(item) {
    return item;
}

/**
 * @deprecated: use {@link tuiIsElementEditable} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isElementEditable(element) {
    // TODO: iframe warning
    return ((element instanceof HTMLInputElement && !element.readOnly) ||
        (element instanceof HTMLTextAreaElement && !element.readOnly) ||
        element.isContentEditable);
}
var tuiIsElementEditable = isElementEditable;

/**
 * @deprecated: use {@link tuiIsNumber} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isNumber(value) {
    return typeof value === "number";
}
var tuiIsNumber = isNumber;

/**
 * @deprecated: use {@link tuiMarkControlAsTouchedAndValidate} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function markControlAsTouchedAndValidate(control) {
    if (control instanceof FormArray) {
        control.controls.forEach(function (nestedControl) {
            markControlAsTouchedAndValidate(nestedControl);
        });
    }
    if (control instanceof FormGroup) {
        Object.values(control.controls).forEach(function (nestedControl) {
            markControlAsTouchedAndValidate(nestedControl);
        });
    }
    control.markAsTouched();
    control.updateValueAndValidity();
}
var tuiMarkControlAsTouchedAndValidate = markControlAsTouchedAndValidate;

/**
 * @deprecated: use {@link tuiNullableSame} instead
 * Checks identity for nullable elements.
 *
 * @param a element a
 * @param b element b
 * @param handler called if both elements are not null
 * @return true if either both are null or they pass identity handler
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function nullableSame(a, b, handler) {
    if (a === null) {
        return b === null;
    }
    if (b === null) {
        return false;
    }
    return handler(a, b);
}
var tuiNullableSame = nullableSame;

/**
 * @deprecated: use {@link tuiUniqBy} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function uniqBy(array, key) {
    return Array.from(array
        .reduce(function (map, item) { return (map.has(item[key]) ? map : map.set(item[key], item)); }, new Map())
        .values());
}
var tuiUniqBy = uniqBy;

/**
 * Generated bundle index. Do not edit.
 */

export { distanceBetweenTouches, easeInOutQuad, fallbackValue, flatLength, getOriginalArrayFromQueryList, getSwipeDirection, identity, isElementEditable, isNumber, isPresent, markControlAsTouchedAndValidate, nullableSame, tuiDistanceBetweenTouches, tuiEaseInOutQuad, tuiFlatLength, tuiGetOriginalArrayFromQueryList, tuiGetSwipeDirection, tuiIsElementEditable, tuiIsNumber, tuiIsPresent, tuiMarkControlAsTouchedAndValidate, tuiNullableSame, tuiUniqBy, uniqBy };
//# sourceMappingURL=taiga-ui-cdk-utils-miscellaneous.js.map
