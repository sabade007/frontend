{"version":3,"file":"taiga-ui-cdk-directives-droppable.js","sources":["ng://@taiga-ui/cdk/directives/droppable/droppable.directive.ts","ng://@taiga-ui/cdk/directives/droppable/droppable.module.ts","ng://@taiga-ui/cdk/directives/droppable/taiga-ui-cdk-directives-droppable.ts"],"sourcesContent":["import {Directive, ElementRef, Inject, Output} from '@angular/core';\nimport {preventDefault, typedFromEvent} from '@taiga-ui/cdk/observables';\nimport {TuiDestroyService} from '@taiga-ui/cdk/services';\nimport {isPresent} from '@taiga-ui/cdk/utils/miscellaneous';\nimport {merge, Observable} from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    mapTo,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\n// @dynamic\n@Directive({\n    selector: '[tuiDroppableDropped], [tuiDroppableDragOverChange]',\n    providers: [TuiDestroyService],\n})\nexport class TuiDroppableDirective {\n    @Output()\n    readonly tuiDroppableDropped: Observable<DataTransfer>;\n\n    @Output()\n    readonly tuiDroppableDragOverChange: Observable<DataTransfer | null>;\n\n    constructor(\n        @Inject(ElementRef) {nativeElement}: ElementRef<HTMLElement>,\n        @Inject(TuiDestroyService) destroy$: Observable<void>,\n    ) {\n        this.tuiDroppableDropped = typedFromEvent(nativeElement, 'drop').pipe(\n            preventDefault(),\n            map(event => event.dataTransfer),\n            filter(isPresent),\n        );\n\n        this.tuiDroppableDragOverChange = typedFromEvent(nativeElement, 'dragenter').pipe(\n            switchMap(({target, dataTransfer}) =>\n                merge(\n                    typedFromEvent(nativeElement, 'dragleave').pipe(\n                        filter(event => event.target === target),\n                    ),\n                    typedFromEvent(nativeElement, 'drop'),\n                ).pipe(mapTo(null), startWith(dataTransfer)),\n            ),\n            distinctUntilChanged((a, b) => (!!a && !!b) || (!a && !b)),\n        );\n\n        // Required by Drag and Drop API to stop redirecting\n        typedFromEvent(nativeElement, 'dragover')\n            .pipe(preventDefault(), takeUntil(destroy$))\n            .subscribe();\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiDroppableDirective} from './droppable.directive';\n\n@NgModule({\n    declarations: [TuiDroppableDirective],\n    exports: [TuiDroppableDirective],\n})\nexport class TuiDroppableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;AAeA;;IAYI,+BACwB,EAAwC,EACjC,QAA0B;YADhC,gCAAa;QAGlC,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,IAAI,CACjE,cAAc,EAAE,EAChB,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,YAAY,GAAA,CAAC,EAChC,MAAM,CAAC,SAAS,CAAC,CACpB,CAAC;QAEF,IAAI,CAAC,0BAA0B,GAAG,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,IAAI,CAC7E,SAAS,CAAC,UAAC,EAAsB;gBAArB,kBAAM,EAAE,8BAAY;YAC5B,OAAA,KAAK,CACD,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,IAAI,CAC3C,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,KAAK,MAAM,GAAA,CAAC,CAC3C,EACD,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CACxC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;SAAA,CAC/C,EACD,oBAAoB,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,CAC7D,CAAC;;QAGF,cAAc,CAAC,aAAa,EAAE,UAAU,CAAC;aACpC,IAAI,CAAC,cAAc,EAAE,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;aAC3C,SAAS,EAAE,CAAC;KACpB;;gBAzBwC,UAAU,uBAA9C,MAAM,SAAC,UAAU;gBACmB,UAAU,uBAA9C,MAAM,SAAC,iBAAiB;;IAP7B;QADC,MAAM,EAAE;sEAC8C;IAGvD;QADC,MAAM,EAAE;6EAC4D;IAL5D,qBAAqB;QAJjC,SAAS,CAAC;YACP,QAAQ,EAAE,qDAAqD;YAC/D,SAAS,EAAE,CAAC,iBAAiB,CAAC;SACjC,CAAC;QASO,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;QAClB,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;OATrB,qBAAqB,CAkCjC;IAAD,4BAAC;CAlCD;;;ICZA;KAAkC;IAArB,kBAAkB;QAJ9B,QAAQ,CAAC;YACN,YAAY,EAAE,CAAC,qBAAqB,CAAC;YACrC,OAAO,EAAE,CAAC,qBAAqB,CAAC;SACnC,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAlC;;ACRA;;;;;;"}