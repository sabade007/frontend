import { svgNodeFilter } from '@taiga-ui/cdk/constants';

/**
 * @deprecated: use {@link tuiGetNativeFocused} instead
 * Returns current active element, including shadow dom
 *
 * @return element or null
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getNativeFocused(documentRef) {
    var _a;
    if (!((_a = documentRef.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot)) {
        return documentRef.activeElement;
    }
    var element = documentRef.activeElement.shadowRoot.activeElement;
    while (element === null || element === void 0 ? void 0 : element.shadowRoot) {
        element = element.shadowRoot.activeElement;
    }
    return element;
}
var tuiGetNativeFocused = getNativeFocused;

/**
 * @deprecated: use native element.focus()
 * TODO: remove in v3.0
 * Focuses or blurs and element
 *
 * @param element native element
 * @param focused boolean focused state
 * @param preventScroll optional flag to prevent native scroll to the element
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function setNativeFocused(element, focused, preventScroll) {
    if (focused === void 0) { focused = true; }
    if (preventScroll === void 0) { preventScroll = false; }
    if (focused) {
        element.focus({ preventScroll: preventScroll });
    }
    else {
        element.blur();
    }
}

/**
 * @deprecated: use {@link tuiBlurNativeFocused} instead
 * Finds and blurs current active element, including shadow DOM
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function blurNativeFocused(documentRef) {
    var activeElement = getNativeFocused(documentRef);
    // TODO: iframe warning
    if (activeElement instanceof HTMLElement) {
        setNativeFocused(activeElement, false);
    }
}
var tuiBlurNativeFocused = blurNativeFocused;

/**
 * @deprecated: use {@link tuiIsNativeKeyboardFocusable} instead
 * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to
 * only target natural focus order. Not checking the possibility of an element to
 * be focused, for example element can have display: none applied to it or any other
 * circumstances could prevent actual focus.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isNativeKeyboardFocusable(element) {
    if (element.hasAttribute("disabled") || element.getAttribute("tabIndex") === "-1") {
        return false;
    }
    // TODO: iframe warning
    if ((element instanceof HTMLElement && element.isContentEditable) ||
        element.getAttribute("tabIndex") === "0") {
        return true;
    }
    switch (element.tagName) {
        case "BUTTON":
        case "SELECT":
        case "TEXTAREA":
            return true;
        case "VIDEO":
        case "AUDIO":
            return element.hasAttribute("controls");
        case "INPUT":
            return element.getAttribute("type") !== "hidden";
        case "A":
        case "LINK":
            return element.hasAttribute("href");
        default:
            return false;
    }
}
var tuiIsNativeKeyboardFocusable = isNativeKeyboardFocusable;

/**
 * @deprecated: use {@link tuiIsNativeMouseFocusable} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isNativeMouseFocusable(element) {
    return (!element.hasAttribute("disabled") &&
        (element.getAttribute("tabIndex") === "-1" || isNativeKeyboardFocusable(element)));
}
var tuiIsNativeMouseFocusable = isNativeMouseFocusable;

/**
 * @deprecated: use {@link tuiGetClosestFocusable} instead
 * Finds the closest element that can be focused with a keyboard or mouse in theory
 *
 * @param initial current HTML element
 * @param prev should it look backwards instead (find item that will be focused with Shift + Tab)
 * @param root top Node limiting the search area
 * @param keyboard determine if only keyboard focus is of interest
 *
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getClosestFocusable(initial, prev, root, keyboard) {
    if (prev === void 0) { prev = false; }
    if (keyboard === void 0) { keyboard = true; }
    if (!root.ownerDocument) {
        return null;
    }
    var check = keyboard ? isNativeKeyboardFocusable : isNativeMouseFocusable;
    // Deprecated but ony this overload works in IE
    // Filter must be a function in IE, other modern browsers are compliant to this format
    var treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, svgNodeFilter, false);
    treeWalker.currentNode = initial;
    while (prev ? treeWalker.previousNode() : treeWalker.nextNode()) {
        // TODO: iframe warning
        if (treeWalker.currentNode instanceof HTMLElement) {
            initial = treeWalker.currentNode;
        }
        if (check(initial)) {
            return initial;
        }
    }
    return null;
}
/**
 * @deprecated: use {@link tuiGetClosestFocusable} instead
 */
var getClosestKeyboardFocusable = getClosestFocusable;
var tuiGetClosestFocusable = getClosestFocusable;

/**
 * @deprecated: use {@link tuiIsNativeFocused} instead
 * Checks if element is focused.
 *
 * Could return true even after blur since element remains focused if you switch away from a browser tab.
 *
 * @param node or null (as a common return value of DOM nodes walking)
 * @return true if focused
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isNativeFocused(node) {
    return (!!node && !!node.ownerDocument && getNativeFocused(node.ownerDocument) === node);
}
var tuiIsNativeFocused = isNativeFocused;

/**
 * @deprecated: use {@link tuiIsNativeFocusedIn} instead
 * Checks if focused element is within given element.
 *
 * @param node
 * @return true if focused node is contained within element
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isNativeFocusedIn(node) {
    // !node.contains - check for IE11
    if (!node.ownerDocument || !node.contains) {
        return false;
    }
    var nativeFocused = getNativeFocused(node.ownerDocument);
    return nativeFocused !== null && node.contains(nativeFocused);
}
var tuiIsNativeFocusedIn = isNativeFocusedIn;

/**
 * @deprecated: use {@link tuiMoveFocus} instead
 * Utility method for moving focus in a list of elements
 *
 * @param currentIndex currently focused index
 * @param elements array of focusable elements
 * @param step a step to move focus by, typically -1 or 1
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function moveFocus(currentIndex, elements, step) {
    currentIndex += step;
    while (currentIndex >= 0 && currentIndex < elements.length) {
        setNativeFocused(elements[currentIndex]);
        if (isNativeFocused(elements[currentIndex])) {
            return;
        }
        currentIndex += step;
    }
}
var tuiMoveFocus = moveFocus;

/**
 * @deprecated: use {@link tuiSetNativeMouseFocused} instead
 * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})
 *
 * @param element
 * @param focused desired focused state
 * @param preventScroll optionally prevent native browser scroll after focus
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function setNativeMouseFocused(element, focused, preventScroll) {
    if (focused === void 0) { focused = true; }
    if (preventScroll === void 0) { preventScroll = false; }
    if (!element.ownerDocument) {
        return;
    }
    if (typeof Event === "function") {
        element.dispatchEvent(new Event("mousedown", { bubbles: true, cancelable: true }));
    }
    else {
        var event_1 = element.ownerDocument.createEvent("Event");
        event_1.initEvent("mousedown", true, true);
        element.dispatchEvent(event_1);
    }
    setNativeFocused(element, focused, preventScroll);
}
var tuiSetNativeMouseFocused = setNativeMouseFocused;

/**
 * Generated bundle index. Do not edit.
 */

export { blurNativeFocused, getClosestFocusable, getClosestKeyboardFocusable, getNativeFocused, isNativeFocused, isNativeFocusedIn, isNativeKeyboardFocusable, isNativeMouseFocusable, moveFocus, setNativeFocused, setNativeMouseFocused, tuiBlurNativeFocused, tuiGetClosestFocusable, tuiGetNativeFocused, tuiIsNativeFocused, tuiIsNativeFocusedIn, tuiIsNativeKeyboardFocusable, tuiIsNativeMouseFocusable, tuiMoveFocus, tuiSetNativeMouseFocused };
//# sourceMappingURL=taiga-ui-cdk-utils-focus.js.map
