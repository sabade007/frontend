import { __decorate, __param } from 'tslib';
import { EventEmitter, ElementRef, Inject, Input, HostBinding, Output, HostListener, Directive, NgModule } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';

// eslint-disable-next-line @typescript-eslint/naming-convention
function nonNegativeFiniteAssertion(value) {
    return Number.isFinite(value) && value >= 0;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function volumeAssertion(volume) {
    return Number.isFinite(volume) && volume >= 0 && volume <= 1;
}
var TuiMediaDirective = /** @class */ (function () {
    function TuiMediaDirective(elementRef) {
        this.elementRef = elementRef;
        this.playbackRate = 1;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
    }
    Object.defineProperty(TuiMediaDirective.prototype, "playbackRateSetter", {
        set: function (playbackRate) {
            this.updatePlaybackRate(playbackRate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMediaDirective.prototype, "currentTime", {
        get: function () {
            return this.elementRef.nativeElement.currentTime;
        },
        set: function (currentTime) {
            if (Math.abs(currentTime - this.currentTime) > 0.05) {
                this.elementRef.nativeElement.currentTime = currentTime;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMediaDirective.prototype, "paused", {
        get: function () {
            return this.elementRef.nativeElement.paused;
        },
        set: function (paused) {
            if (paused) {
                this.elementRef.nativeElement.pause();
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.elementRef.nativeElement.play();
                this.updatePlaybackRate(this.playbackRate);
            }
        },
        enumerable: true,
        configurable: true
    });
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    TuiMediaDirective.prototype.onPausedChange = function (paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    };
    TuiMediaDirective.prototype.onVolumeChange = function () {
        this.volume = this.elementRef.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    };
    TuiMediaDirective.prototype.onCurrentTimeChange = function () {
        this.currentTimeChange.emit(this.currentTime);
    };
    TuiMediaDirective.prototype.changeDetectionTrigger = function () {
        // @bad TODO: consider if other events need to trigger CD
    };
    TuiMediaDirective.prototype.updatePlaybackRate = function (playbackRate) {
        this.playbackRate = playbackRate;
        this.elementRef.nativeElement.playbackRate = this.playbackRate;
    };
    TuiMediaDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('volume'),
        tuiDefaultProp(volumeAssertion)
    ], TuiMediaDirective.prototype, "volume", void 0);
    __decorate([
        Input('playbackRate'),
        tuiRequiredSetter(nonNegativeFiniteAssertion)
    ], TuiMediaDirective.prototype, "playbackRateSetter", null);
    __decorate([
        Input(),
        tuiRequiredSetter(nonNegativeFiniteAssertion)
    ], TuiMediaDirective.prototype, "currentTime", null);
    __decorate([
        Input()
    ], TuiMediaDirective.prototype, "paused", null);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "currentTimeChange", void 0);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "pausedChange", void 0);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "volumeChange", void 0);
    __decorate([
        HostListener('ended', ['true']),
        HostListener('pause', ['true']),
        HostListener('play', ['false'])
    ], TuiMediaDirective.prototype, "onPausedChange", null);
    __decorate([
        HostListener('volumechange')
    ], TuiMediaDirective.prototype, "onVolumeChange", null);
    __decorate([
        HostListener('timeupdate'),
        HostListener('seeking'),
        HostListener('seeked')
    ], TuiMediaDirective.prototype, "onCurrentTimeChange", null);
    __decorate([
        HostListener('durationchange')
    ], TuiMediaDirective.prototype, "changeDetectionTrigger", null);
    TuiMediaDirective = __decorate([
        Directive({
            selector: 'video[tuiMedia], audio[tuiMedia]',
            exportAs: 'tuiMedia',
        }),
        __param(0, Inject(ElementRef))
    ], TuiMediaDirective);
    return TuiMediaDirective;
}());

var TuiMediaModule = /** @class */ (function () {
    function TuiMediaModule() {
    }
    TuiMediaModule = __decorate([
        NgModule({
            declarations: [TuiMediaDirective],
            exports: [TuiMediaDirective],
        })
    ], TuiMediaModule);
    return TuiMediaModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiMediaDirective, TuiMediaModule, nonNegativeFiniteAssertion, volumeAssertion };
//# sourceMappingURL=taiga-ui-cdk-directives-media.js.map
