{"version":3,"file":"taiga-ui-cdk-directives-let.js","sources":["ng://@taiga-ui/cdk/directives/let/let-context.ts","ng://@taiga-ui/cdk/directives/let/let.directive.ts","ng://@taiga-ui/cdk/directives/let/let.module.ts","ng://@taiga-ui/cdk/directives/let/taiga-ui-cdk-directives-let.ts"],"sourcesContent":["import {TuiContextWithImplicit} from '@taiga-ui/cdk/interfaces';\n\nimport {TuiLetDirective} from './let.directive';\n\n/**\n * @internal\n */\nexport class TuiLetContext<T> implements TuiContextWithImplicit<T> {\n    constructor(private readonly internalDirectiveInstance: TuiLetDirective<T>) {}\n\n    get $implicit(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n\n    get tuiLet(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n}\n","import {Directive, Inject, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {TuiLetContext} from './let-context';\n\n/**\n * Works like *ngIf but does not have a condition â€” use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\n@Directive({\n    selector: '[tuiLet]',\n})\nexport class TuiLetDirective<T> {\n    @Input()\n    tuiLet!: T;\n\n    constructor(\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\n        @Inject(TemplateRef) templateRef: TemplateRef<TuiLetContext<T>>,\n    ) {\n        viewContainer.createEmbeddedView(templateRef, new TuiLetContext<T>(this));\n    }\n\n    /**\n     * Asserts the correct type of the context for the template that `TuiLet` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `TuiLet` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard<T>(\n        _dir: TuiLetDirective<T>,\n        _ctx: unknown,\n    ): _ctx is TuiLetDirective<Exclude<T, null | undefined>> {\n        return true;\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiLetDirective} from './let.directive';\n\n@NgModule({\n    declarations: [TuiLetDirective],\n    exports: [TuiLetDirective],\n})\nexport class TuiLetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;AAIA;;;;IAII,uBAA6B,yBAA6C;QAA7C,8BAAyB,GAAzB,yBAAyB,CAAoB;KAAI;IAE9E,sBAAI,oCAAS;aAAb;YACI,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;SAChD;;;OAAA;IAED,sBAAI,iCAAM;aAAV;YACI,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;SAChD;;;OAAA;IACL,oBAAC;AAAD,CAAC;;ACbD;;;;;IAWI,yBAC8B,aAA+B,EACpC,WAA0C;QAE/D,aAAa,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,aAAa,CAAI,IAAI,CAAC,CAAC,CAAC;KAC7E;;;;;;;IAQM,sCAAsB,GAA7B,UACI,IAAwB,EACxB,IAAa;QAEb,OAAO,IAAI,CAAC;KACf;;gBAjB4C,gBAAgB,uBAAxD,MAAM,SAAC,gBAAgB;gBACU,WAAW,uBAA5C,MAAM,SAAC,WAAW;;IAJvB;QADC,KAAK,EAAE;mDACG;IAFF,eAAe;QAH3B,SAAS,CAAC;YACP,QAAQ,EAAE,UAAU;SACvB,CAAC;QAMO,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;QACxB,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;OANf,eAAe,CAuB3B;IAAD,sBAAC;CAvBD;;;ICHA;KAA4B;IAAf,YAAY;QAJxB,QAAQ,CAAC;YACN,YAAY,EAAE,CAAC,eAAe,CAAC;YAC/B,OAAO,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC;OACW,YAAY,CAAG;IAAD,mBAAC;CAA5B;;ACRA;;;;;;"}