{"version":3,"file":"taiga-ui-cdk-abstract.js","sources":["ng://@taiga-ui/cdk/abstract/interactive.ts","ng://@taiga-ui/cdk/abstract/control.ts","ng://@taiga-ui/cdk/abstract/controller.ts","ng://@taiga-ui/cdk/abstract/dialog.service.ts","ng://@taiga-ui/cdk/abstract/dialog.directive.ts","ng://@taiga-ui/cdk/abstract/multiple-control.ts","ng://@taiga-ui/cdk/abstract/nullable-control.ts","ng://@taiga-ui/cdk/abstract/portal-service.ts","ng://@taiga-ui/cdk/abstract/portal-host.ts","ng://@taiga-ui/cdk/abstract/theme-switcher.ts","ng://@taiga-ui/cdk/abstract/taiga-ui-cdk-abstract.ts"],"sourcesContent":["import {Directive, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {tuiDefaultProp} from '@taiga-ui/cdk/decorators';\n\nconst TUI = `tui_interactive_`;\n\n/**\n * The most basic class for interactive components\n */\n@Directive()\nexport abstract class AbstractTuiInteractive {\n    private static autoId = 0;\n\n    abstract disabled: boolean;\n\n    abstract focused: boolean;\n\n    private readonly autoIdString: string;\n\n    @Input()\n    @tuiDefaultProp()\n    pseudoHovered: boolean | null = null;\n\n    @Input()\n    @tuiDefaultProp()\n    pseudoPressed: boolean | null = null;\n\n    @Input()\n    @tuiDefaultProp()\n    pseudoFocused: boolean | null = null;\n\n    /**\n     * Determines if component is focusable with keyboard.\n     */\n    @Input()\n    @tuiDefaultProp()\n    focusable = true;\n\n    @Input()\n    @tuiDefaultProp()\n    nativeId = ``;\n\n    /**\n     * Emits 'true' on focus and 'false' on blur.\n     */\n    @Output()\n    readonly focusedChange = new EventEmitter<boolean>();\n\n    /** @deprecated use `tuiPressedChange` directive */\n    @Output()\n    readonly pressedChange = new EventEmitter<boolean>();\n\n    /** @deprecated use `tuiHoveredChange` directive */\n    @Output()\n    readonly hoveredChange = new EventEmitter<boolean>();\n\n    @Output()\n    readonly focusVisibleChange = new EventEmitter<boolean>();\n\n    /** @deprecated use `tuiHoveredChange` directive */\n    hovered = false;\n\n    /** @deprecated use `tuiPressedChange` directive */\n    pressed = false;\n\n    focusVisible = false;\n\n    protected constructor() {\n        this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;\n    }\n\n    @HostBinding(`class._disabled`)\n    get computedDisabled(): boolean {\n        return this.disabled;\n    }\n\n    /** @deprecated */\n    @HostBinding(`class._hovered`)\n    get computedHovered(): boolean {\n        return !this.computedDisabled && (this.pseudoHovered ?? this.hovered);\n    }\n\n    /** @deprecated */\n    @HostBinding(`class._pressed`)\n    get computedPressed(): boolean {\n        return !this.computedDisabled && (this.pseudoPressed ?? this.pressed);\n    }\n\n    get computedFocusable(): boolean {\n        return !this.computedDisabled && (this.focusable || this.focused);\n    }\n\n    @HostBinding(`class._focused`)\n    get computedFocused(): boolean {\n        return !this.computedDisabled && (this.pseudoFocused ?? this.focused);\n    }\n\n    @HostBinding(`class._focus-visible`)\n    get computedFocusVisible(): boolean {\n        return !this.computedDisabled && (this.pseudoFocused ?? this.focusVisible);\n    }\n\n    // TODO: 3.0 Consider removing since native input is exposed\n    get id(): string {\n        return this.nativeId ? this.nativeId : this.autoIdString;\n    }\n\n    /** @deprecated */\n    protected updateHovered(hovered: boolean): void {\n        if (this.hovered === hovered) {\n            return;\n        }\n\n        this.hovered = hovered;\n        this.hoveredChange.emit(hovered);\n    }\n\n    /** @deprecated */\n    protected updatePressed(pressed: boolean): void {\n        if (this.pressed === pressed) {\n            return;\n        }\n\n        this.pressed = pressed;\n        this.pressedChange.emit(pressed);\n    }\n\n    protected updateFocused(focused: boolean): void {\n        this.focusedChange.emit(focused);\n    }\n\n    protected updateFocusVisible(focusVisible: boolean): void {\n        if (this.focusVisible === focusVisible) {\n            return;\n        }\n\n        this.focusVisible = focusVisible;\n        this.focusVisibleChange.emit(focusVisible);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport {AbstractControl, ControlValueAccessor, NgControl, NgModel} from '@angular/forms';\nimport {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {EMPTY_FUNCTION} from '@taiga-ui/cdk/constants';\nimport {tuiDefaultProp} from '@taiga-ui/cdk/decorators';\nimport {TuiControlValueTransformer} from '@taiga-ui/cdk/interfaces';\nimport {tuiIsPresent} from '@taiga-ui/cdk/utils';\nimport {merge, Subject} from 'rxjs';\nimport {\n    delay,\n    distinctUntilChanged,\n    filter,\n    map,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\nimport {AbstractTuiInteractive} from './interactive';\n\n/**\n * Basic ControlValueAccessor class to build form components upon\n */\n@Directive()\nexport abstract class AbstractTuiControl<T>\n    extends AbstractTuiInteractive\n    implements OnDestroy, OnInit, ControlValueAccessor\n{\n    private previousInternalValue?: T | null;\n    private readonly refresh$ = new Subject();\n\n    private onTouched = EMPTY_FUNCTION;\n\n    private onChange = EMPTY_FUNCTION;\n\n    protected readonly fallbackValue = this.getFallbackValue();\n\n    protected readonly destroy$ = new Subject<void>();\n\n    @Input()\n    @HostBinding(`class._readonly`)\n    @tuiDefaultProp()\n    readOnly = false;\n\n    @Input()\n    @tuiDefaultProp()\n    pseudoInvalid: boolean | null = null;\n\n    protected constructor(\n        private readonly ngControl: NgControl | null,\n        protected readonly changeDetectorRef: ChangeDetectorRef,\n        protected readonly valueTransformer?: TuiControlValueTransformer<T> | null,\n    ) {\n        super();\n\n        if (this.ngControl === null) {\n            tuiAssert.assert(\n                false,\n                `NgControl not injected in ${this.constructor.name}!\\n`,\n                `Use [(ngModel)] or [formControl] or formControlName for correct work.`,\n            );\n        } else {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    protected abstract getFallbackValue(): T;\n\n    @HostBinding(`class._invalid`)\n    get computedInvalid(): boolean {\n        return (\n            this.interactive &&\n            (this.pseudoInvalid !== null\n                ? this.pseudoInvalid\n                : this.touched && this.invalid)\n        );\n    }\n\n    get value(): T {\n        return this.previousInternalValue ?? this.fallbackValue;\n    }\n\n    get safeCurrentValue(): T {\n        return this.rawValue ?? this.fallbackValue;\n    }\n\n    get invalid(): boolean {\n        return this.safeNgControlData<boolean>(({invalid}) => invalid, false);\n    }\n\n    get valid(): boolean {\n        return this.safeNgControlData<boolean>(({valid}) => valid, false);\n    }\n\n    get touched(): boolean {\n        return this.safeNgControlData<boolean>(({touched}) => touched, false);\n    }\n\n    get disabled(): boolean {\n        return this.safeNgControlData<boolean>(({disabled}) => disabled, false);\n    }\n\n    get interactive(): boolean {\n        return !this.readOnly && !this.computedDisabled;\n    }\n\n    get control(): AbstractControl | null {\n        return this.safeNgControlData<AbstractControl | null>(\n            ({control}) => control,\n            null,\n        );\n    }\n\n    get computedName(): string | null {\n        return this.controlName?.toString() ?? null;\n    }\n\n    protected get controlName(): string | null {\n        return this.ngControl?.name?.toString() ?? null;\n    }\n\n    private get rawValue(): T | undefined {\n        const {ngControl} = this;\n\n        if (ngControl === null) {\n            return undefined;\n        }\n\n        const controlValue =\n            ngControl instanceof NgModel && this.previousInternalValue === undefined\n                ? ngControl.viewModel\n                : ngControl.value;\n\n        return this.fromControlValue(controlValue);\n    }\n\n    ngOnInit(): void {\n        this.refresh$\n            .pipe(\n                delay(0),\n                startWith(null),\n                map(() => this.ngControl?.control),\n                filter(tuiIsPresent),\n                distinctUntilChanged(),\n                switchMap(control => merge(control.valueChanges, control.statusChanges)),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => {\n                this.refreshLocalValue(this.safeCurrentValue);\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    checkControlUpdate(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    registerOnChange(onChange: (value: T | unknown) => void): void {\n        this.onChange = (componentValue: T) => {\n            onChange(this.toControlValue(componentValue));\n        };\n\n        this.refresh$.next();\n    }\n\n    registerOnTouched(onTouched: () => void): void {\n        this.onTouched = onTouched;\n    }\n\n    setDisabledState(): void {\n        this.checkControlUpdate();\n    }\n\n    writeValue(value: T | null): void {\n        const controlValue =\n            this.ngControl instanceof NgModel && this.previousInternalValue === undefined\n                ? this.ngControl.model\n                : value;\n\n        this.refreshLocalValue(this.fromControlValue(controlValue));\n    }\n\n    protected updateFocused(focused: boolean): void {\n        if (!focused) {\n            this.controlMarkAsTouched();\n        }\n\n        super.updateFocused(focused);\n    }\n\n    protected updateValue(value: T): void {\n        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {\n            return;\n        }\n\n        this.previousInternalValue = value;\n        this.controlSetValue(value);\n    }\n\n    protected valueIdenticalComparator(oldValue: T, newValue: T): boolean {\n        return oldValue === newValue;\n    }\n\n    private safeNgControlData<T>(\n        extractor: (ngControl: NgControl) => T | null | undefined,\n        defaultFieldValue: T,\n    ): T {\n        return (this.ngControl && extractor(this.ngControl)) ?? defaultFieldValue;\n    }\n\n    private controlMarkAsTouched(): void {\n        this.onTouched();\n        this.checkControlUpdate();\n    }\n\n    private controlSetValue(value: T): void {\n        this.onChange(value);\n        this.checkControlUpdate();\n    }\n\n    private refreshLocalValue(value: T | null): void {\n        this.previousInternalValue = value;\n        this.checkControlUpdate();\n    }\n\n    private fromControlValue(controlValue: unknown): T {\n        return this.valueTransformer\n            ? this.valueTransformer.fromControlValue(controlValue)\n            : (controlValue as T);\n    }\n\n    private toControlValue(componentValue: T): unknown {\n        return this.valueTransformer\n            ? this.valueTransformer.toControlValue(componentValue)\n            : componentValue;\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport {OnChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * @deprecated\n * TODO: 3.0 replace with {@link AbstractTuiController}\n */\nexport abstract class TuiController implements OnChanges {\n    readonly change$ = new Subject<void>();\n\n    ngOnChanges(): void {\n        this.change$.next();\n    }\n}\n\nexport abstract class AbstractTuiController extends TuiController {}\n","import {Inject, Injectable} from '@angular/core';\nimport {TuiBaseDialogContext} from '@taiga-ui/cdk/interfaces';\nimport {TuiIdService} from '@taiga-ui/cdk/services';\nimport {TuiDialog} from '@taiga-ui/cdk/types';\nimport {PolymorpheusComponent, PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\n@Injectable()\nexport abstract class AbstractTuiDialogService<T, K = void> extends Observable<\n    ReadonlyArray<TuiDialog<T, any>>\n> {\n    protected abstract readonly component: PolymorpheusComponent<any, TuiDialog<T, any>>;\n\n    protected abstract readonly defaultOptions: T;\n\n    protected readonly dialogs$ = new BehaviorSubject<ReadonlyArray<TuiDialog<T, any>>>(\n        [],\n    );\n\n    protected constructor(\n        @Inject(TuiIdService) private readonly idService: TuiIdService,\n    ) {\n        super(observer => this.dialogs$.subscribe(observer));\n    }\n\n    open<G = void>(\n        content: PolymorpheusContent<T & TuiBaseDialogContext<K extends void ? G : K>>,\n        options: Partial<T> = {},\n    ): Observable<K extends void ? G : K> {\n        return new Observable(observer => {\n            const completeWith = (result: K extends void ? G : K): void => {\n                observer.next(result);\n                observer.complete();\n            };\n            const dialog = {\n                ...this.defaultOptions,\n                ...options,\n                content,\n                completeWith,\n                $implicit: observer,\n                component: this.component,\n                createdAt: Date.now(),\n                id: this.idService.generate(),\n            };\n\n            this.dialogs$.next([...this.dialogs$.value, dialog]);\n\n            return () => {\n                this.dialogs$.next(this.dialogs$.value.filter(item => item !== dialog));\n            };\n        });\n    }\n}\n","import {ChangeDetectorRef, Directive, Inject, TemplateRef} from '@angular/core';\nimport {TuiDialog} from '@taiga-ui/cdk/types';\nimport {PolymorpheusTemplate} from '@tinkoff/ng-polymorpheus';\nimport {EMPTY, Subject} from 'rxjs';\nimport {endWith, ignoreElements, switchMap} from 'rxjs/operators';\n\nimport {AbstractTuiDialogService} from './dialog.service';\n\n@Directive()\nexport abstract class AbstractTuiDialogDirective<T> extends PolymorpheusTemplate<\n    TuiDialog<T, void>\n> {\n    private readonly open$ = new Subject<boolean>();\n\n    options: Partial<T> = {};\n\n    set open(open: boolean) {\n        this.open$.next(open);\n    }\n\n    openChange = this.open$.pipe(\n        switchMap(open =>\n            open\n                ? this.service\n                      .open(this, this.options)\n                      .pipe(ignoreElements(), endWith(false))\n                : EMPTY,\n        ),\n    );\n\n    constructor(\n        @Inject(TemplateRef)\n        templateRef: TemplateRef<TuiDialog<T, void>>,\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(AbstractTuiDialogService)\n        private readonly service: AbstractTuiDialogService<T>,\n    ) {\n        super(templateRef, changeDetectorRef);\n    }\n}\n","import {Directive} from '@angular/core';\n\nimport {AbstractTuiControl} from './control';\n\n@Directive()\nexport abstract class AbstractTuiMultipleControl<T> extends AbstractTuiControl<\n    readonly T[]\n> {\n    clear(): void {\n        this.updateValue([]);\n    }\n\n    protected getFallbackValue(): readonly T[] {\n        return [];\n    }\n}\n","import {Directive} from '@angular/core';\n\nimport {AbstractTuiControl} from './control';\n\n@Directive()\nexport abstract class AbstractTuiNullableControl<T> extends AbstractTuiControl<T | null> {\n    protected getFallbackValue(): T | null {\n        return null;\n    }\n}\n","import {\n    ComponentFactory,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injectable,\n    Injector,\n    TemplateRef,\n} from '@angular/core';\nimport {TuiNoHostException} from '@taiga-ui/cdk/exceptions';\n\nimport {AbstractTuiPortalHostComponent} from './portal-host';\n\n/**\n * Abstract service for displaying portals\n */\n@Injectable()\nexport abstract class AbstractTuiPortalService {\n    protected host?: AbstractTuiPortalHostComponent;\n\n    protected get safeHost(): AbstractTuiPortalHostComponent {\n        if (!this.host) {\n            throw new TuiNoHostException();\n        }\n\n        return this.host;\n    }\n\n    attach(host: AbstractTuiPortalHostComponent): void {\n        this.host = host;\n    }\n\n    add<C>(componentFactory: ComponentFactory<C>, injector: Injector): ComponentRef<C> {\n        return this.safeHost.addComponentChild(componentFactory, injector);\n    }\n\n    remove<C>({hostView}: ComponentRef<C>): void {\n        hostView.destroy();\n    }\n\n    addTemplate<C>(templateRef: TemplateRef<C>, context?: C): EmbeddedViewRef<C> {\n        return this.safeHost.addTemplateChild(templateRef, context);\n    }\n\n    removeTemplate<C>(viewRef: EmbeddedViewRef<C>): void {\n        viewRef.destroy();\n    }\n}\n","import {\n    ComponentFactory,\n    ComponentRef,\n    Directive,\n    ElementRef,\n    EmbeddedViewRef,\n    Inject,\n    Injector,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n} from '@angular/core';\n\nimport {AbstractTuiPortalService} from './portal-service';\n\n/**\n * Abstract class for host element for dynamically created portals.\n */\n@Directive()\nexport abstract class AbstractTuiPortalHostComponent {\n    @ViewChild(`viewContainer`, {read: ViewContainerRef})\n    viewContainerRef!: ViewContainerRef;\n\n    constructor(\n        @Inject(ElementRef)\n        readonly elementRef: ElementRef<HTMLElement>,\n        @Inject(AbstractTuiPortalService) portalService: AbstractTuiPortalService,\n    ) {\n        portalService.attach(this);\n    }\n\n    get clientRect(): ClientRect {\n        return this.elementRef.nativeElement.getBoundingClientRect();\n    }\n\n    addComponentChild<C>(\n        componentFactory: ComponentFactory<C>,\n        injector: Injector,\n    ): ComponentRef<C> {\n        return this.viewContainerRef.createComponent<C>(\n            componentFactory,\n            undefined,\n            Injector.create({\n                parent: injector,\n                providers: [\n                    {\n                        provide: AbstractTuiPortalHostComponent,\n                        useValue: this,\n                    },\n                ],\n            }),\n        );\n    }\n\n    addTemplateChild<C>(templateRef: TemplateRef<C>, context?: C): EmbeddedViewRef<C> {\n        return this.viewContainerRef.createEmbeddedView(templateRef, context);\n    }\n}\n","import {DOCUMENT} from '@angular/common';\nimport {Directive, Inject, OnDestroy} from '@angular/core';\n\n/**\n * Use this abstract class to create your own toggleable themes.\n * A component extending this class must have CSS variables definitions\n * and have ViewEncapsulation set to NONE. A boolean input allows to\n * switch theme on or off.\n * @dynamic\n */\n@Directive()\nexport abstract class AbstractTuiThemeSwitcher implements OnDestroy {\n    static style: HTMLStyleElement | null = null;\n\n    constructor(@Inject(DOCUMENT) private readonly documentRef: Document) {\n        if (this.style !== null) {\n            this.addTheme();\n\n            return;\n        }\n\n        const styles = this.documentRef.head.querySelectorAll(`style`);\n\n        (<typeof AbstractTuiThemeSwitcher>this.constructor).style =\n            styles[styles.length - 1];\n    }\n\n    get style(): HTMLStyleElement | null {\n        return (<typeof AbstractTuiThemeSwitcher>this.constructor).style;\n    }\n\n    ngOnDestroy(): void {\n        this.removeTheme();\n    }\n\n    private addTheme(): void {\n        if (this.style) {\n            this.documentRef.head.appendChild(this.style);\n        }\n    }\n\n    private removeTheme(): void {\n        if (this.style && this.documentRef.head.contains(this.style)) {\n            this.documentRef.head.removeChild(this.style);\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}