import { __decorate, __extends, __assign, __spread, __param } from 'tslib';
import { EventEmitter, Input, Output, HostBinding, Directive, ChangeDetectorRef, Inject, Injectable, TemplateRef, Injector, ElementRef, ViewChild, ViewContainerRef } from '@angular/core';
import { NgModel, NgControl } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiIsPresent } from '@taiga-ui/cdk/utils';
import { Subject, merge, BehaviorSubject, Observable, EMPTY } from 'rxjs';
import { delay, startWith, map, filter, distinctUntilChanged, switchMap, takeUntil, ignoreElements, endWith } from 'rxjs/operators';
import { PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { TuiNoHostException } from '@taiga-ui/cdk/exceptions';
import { DOCUMENT } from '@angular/common';

var TUI = "tui_interactive_";
/**
 * The most basic class for interactive components
 */
var AbstractTuiInteractive = /** @class */ (function () {
    function AbstractTuiInteractive() {
        this.pseudoHovered = null;
        this.pseudoPressed = null;
        this.pseudoFocused = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = "";
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        /** @deprecated use `tuiPressedChange` directive */
        this.pressedChange = new EventEmitter();
        /** @deprecated use `tuiHoveredChange` directive */
        this.hoveredChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        /** @deprecated use `tuiHoveredChange` directive */
        this.hovered = false;
        /** @deprecated use `tuiPressedChange` directive */
        this.pressed = false;
        this.focusVisible = false;
        this.autoIdString = "" + TUI + AbstractTuiInteractive_1.autoId++ + Date.now();
    }
    AbstractTuiInteractive_1 = AbstractTuiInteractive;
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedHovered", {
        /** @deprecated */
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoHovered) !== null && _a !== void 0 ? _a : this.hovered);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedPressed", {
        /** @deprecated */
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoPressed) !== null && _a !== void 0 ? _a : this.pressed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusable", {
        get: function () {
            return !this.computedDisabled && (this.focusable || this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocused", {
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoFocused) !== null && _a !== void 0 ? _a : this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusVisible", {
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoFocused) !== null && _a !== void 0 ? _a : this.focusVisible);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "id", {
        // TODO: 3.0 Consider removing since native input is exposed
        get: function () {
            return this.nativeId ? this.nativeId : this.autoIdString;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated */
    AbstractTuiInteractive.prototype.updateHovered = function (hovered) {
        if (this.hovered === hovered) {
            return;
        }
        this.hovered = hovered;
        this.hoveredChange.emit(hovered);
    };
    /** @deprecated */
    AbstractTuiInteractive.prototype.updatePressed = function (pressed) {
        if (this.pressed === pressed) {
            return;
        }
        this.pressed = pressed;
        this.pressedChange.emit(pressed);
    };
    AbstractTuiInteractive.prototype.updateFocused = function (focused) {
        this.focusedChange.emit(focused);
    };
    AbstractTuiInteractive.prototype.updateFocusVisible = function (focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    };
    var AbstractTuiInteractive_1;
    AbstractTuiInteractive.autoId = 0;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoHovered", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoPressed", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoFocused", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "focusable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "nativeId", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "pressedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "hoveredChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusVisibleChange", void 0);
    __decorate([
        HostBinding("class._disabled")
    ], AbstractTuiInteractive.prototype, "computedDisabled", null);
    __decorate([
        HostBinding("class._hovered")
    ], AbstractTuiInteractive.prototype, "computedHovered", null);
    __decorate([
        HostBinding("class._pressed")
    ], AbstractTuiInteractive.prototype, "computedPressed", null);
    __decorate([
        HostBinding("class._focused")
    ], AbstractTuiInteractive.prototype, "computedFocused", null);
    __decorate([
        HostBinding("class._focus-visible")
    ], AbstractTuiInteractive.prototype, "computedFocusVisible", null);
    AbstractTuiInteractive = AbstractTuiInteractive_1 = __decorate([
        Directive()
    ], AbstractTuiInteractive);
    return AbstractTuiInteractive;
}());

/**
 * Basic ControlValueAccessor class to build form components upon
 */
var AbstractTuiControl = /** @class */ (function (_super) {
    __extends(AbstractTuiControl, _super);
    function AbstractTuiControl(ngControl, changeDetectorRef, valueTransformer) {
        var _this = _super.call(this) || this;
        _this.ngControl = ngControl;
        _this.changeDetectorRef = changeDetectorRef;
        _this.valueTransformer = valueTransformer;
        _this.refresh$ = new Subject();
        _this.onTouched = EMPTY_FUNCTION;
        _this.onChange = EMPTY_FUNCTION;
        _this.fallbackValue = _this.getFallbackValue();
        _this.destroy$ = new Subject();
        _this.readOnly = false;
        _this.pseudoInvalid = null;
        if (_this.ngControl === null) {
            tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", "Use [(ngModel)] or [formControl] or formControlName for correct work.");
        }
        else {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
        get: function () {
            return (this.interactive &&
                (this.pseudoInvalid !== null
                    ? this.pseudoInvalid
                    : this.touched && this.invalid));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "value", {
        get: function () {
            var _a;
            return (_a = this.previousInternalValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
        get: function () {
            var _a;
            return (_a = this.rawValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var invalid = _a.invalid;
                return invalid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "valid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var valid = _a.valid;
                return valid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "touched", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var touched = _a.touched;
                return touched;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var disabled = _a.disabled;
                return disabled;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "interactive", {
        get: function () {
            return !this.readOnly && !this.computedDisabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "control", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var control = _a.control;
                return control;
            }, null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.controlName) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
        get: function () {
            var ngControl = this.ngControl;
            if (ngControl === null) {
                return undefined;
            }
            var controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined
                ? ngControl.viewModel
                : ngControl.value;
            return this.fromControlValue(controlValue);
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiControl.prototype.ngOnInit = function () {
        var _this = this;
        this.refresh$
            .pipe(delay(0), startWith(null), map(function () { var _a; return (_a = _this.ngControl) === null || _a === void 0 ? void 0 : _a.control; }), filter(tuiIsPresent), distinctUntilChanged(), switchMap(function (control) { return merge(control.valueChanges, control.statusChanges); }), takeUntil(this.destroy$))
            .subscribe(function () {
            _this.refreshLocalValue(_this.safeCurrentValue);
        });
    };
    AbstractTuiControl.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    AbstractTuiControl.prototype.checkControlUpdate = function () {
        this.changeDetectorRef.markForCheck();
    };
    AbstractTuiControl.prototype.registerOnChange = function (onChange) {
        var _this = this;
        this.onChange = function (componentValue) {
            onChange(_this.toControlValue(componentValue));
        };
        this.refresh$.next();
    };
    AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
        this.onTouched = onTouched;
    };
    AbstractTuiControl.prototype.setDisabledState = function () {
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.writeValue = function (value) {
        var controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value;
        this.refreshLocalValue(this.fromControlValue(controlValue));
    };
    AbstractTuiControl.prototype.updateFocused = function (focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        _super.prototype.updateFocused.call(this, focused);
    };
    AbstractTuiControl.prototype.updateValue = function (value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    };
    AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return oldValue === newValue;
    };
    AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
        var _a;
        return (_a = (this.ngControl && extractor(this.ngControl))) !== null && _a !== void 0 ? _a : defaultFieldValue;
    };
    AbstractTuiControl.prototype.controlMarkAsTouched = function () {
        this.onTouched();
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.controlSetValue = function (value) {
        this.onChange(value);
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.refreshLocalValue = function (value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.fromControlValue = function (controlValue) {
        return this.valueTransformer
            ? this.valueTransformer.fromControlValue(controlValue)
            : controlValue;
    };
    AbstractTuiControl.prototype.toControlValue = function (componentValue) {
        return this.valueTransformer
            ? this.valueTransformer.toControlValue(componentValue)
            : componentValue;
    };
    AbstractTuiControl.ctorParameters = function () { return [
        { type: NgControl },
        { type: ChangeDetectorRef },
        { type: undefined }
    ]; };
    __decorate([
        Input(),
        HostBinding("class._readonly"),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "readOnly", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
    __decorate([
        HostBinding("class._invalid")
    ], AbstractTuiControl.prototype, "computedInvalid", null);
    AbstractTuiControl = __decorate([
        Directive()
    ], AbstractTuiControl);
    return AbstractTuiControl;
}(AbstractTuiInteractive));

/**
 * @deprecated
 * TODO: 3.0 replace with {@link AbstractTuiController}
 */
var TuiController = /** @class */ (function () {
    function TuiController() {
        this.change$ = new Subject();
    }
    TuiController.prototype.ngOnChanges = function () {
        this.change$.next();
    };
    return TuiController;
}());
var AbstractTuiController = /** @class */ (function (_super) {
    __extends(AbstractTuiController, _super);
    function AbstractTuiController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AbstractTuiController;
}(TuiController));

var AbstractTuiDialogService = /** @class */ (function (_super) {
    __extends(AbstractTuiDialogService, _super);
    function AbstractTuiDialogService(idService) {
        var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
        _this.idService = idService;
        _this.dialogs$ = new BehaviorSubject([]);
        return _this;
    }
    AbstractTuiDialogService.prototype.open = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return new Observable(function (observer) {
            var completeWith = function (result) {
                observer.next(result);
                observer.complete();
            };
            var dialog = __assign(__assign(__assign({}, _this.defaultOptions), options), { content: content,
                completeWith: completeWith, $implicit: observer, component: _this.component, createdAt: Date.now(), id: _this.idService.generate() });
            _this.dialogs$.next(__spread(_this.dialogs$.value, [dialog]));
            return function () {
                _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
            };
        });
    };
    AbstractTuiDialogService.ctorParameters = function () { return [
        { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
    ]; };
    AbstractTuiDialogService = __decorate([
        Injectable(),
        __param(0, Inject(TuiIdService))
    ], AbstractTuiDialogService);
    return AbstractTuiDialogService;
}(Observable));

var AbstractTuiDialogDirective = /** @class */ (function (_super) {
    __extends(AbstractTuiDialogDirective, _super);
    function AbstractTuiDialogDirective(templateRef, changeDetectorRef, service) {
        var _this = _super.call(this, templateRef, changeDetectorRef) || this;
        _this.service = service;
        _this.open$ = new Subject();
        _this.options = {};
        _this.openChange = _this.open$.pipe(switchMap(function (open) {
            return open
                ? _this.service
                    .open(_this, _this.options)
                    .pipe(ignoreElements(), endWith(false))
                : EMPTY;
        }));
        return _this;
    }
    Object.defineProperty(AbstractTuiDialogDirective.prototype, "open", {
        set: function (open) {
            this.open$.next(open);
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiDialogDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: AbstractTuiDialogService, decorators: [{ type: Inject, args: [AbstractTuiDialogService,] }] }
    ]; };
    AbstractTuiDialogDirective = __decorate([
        Directive(),
        __param(0, Inject(TemplateRef)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(AbstractTuiDialogService))
    ], AbstractTuiDialogDirective);
    return AbstractTuiDialogDirective;
}(PolymorpheusTemplate));

var AbstractTuiMultipleControl = /** @class */ (function (_super) {
    __extends(AbstractTuiMultipleControl, _super);
    function AbstractTuiMultipleControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractTuiMultipleControl.prototype.clear = function () {
        this.updateValue([]);
    };
    AbstractTuiMultipleControl.prototype.getFallbackValue = function () {
        return [];
    };
    AbstractTuiMultipleControl = __decorate([
        Directive()
    ], AbstractTuiMultipleControl);
    return AbstractTuiMultipleControl;
}(AbstractTuiControl));

var AbstractTuiNullableControl = /** @class */ (function (_super) {
    __extends(AbstractTuiNullableControl, _super);
    function AbstractTuiNullableControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractTuiNullableControl.prototype.getFallbackValue = function () {
        return null;
    };
    AbstractTuiNullableControl = __decorate([
        Directive()
    ], AbstractTuiNullableControl);
    return AbstractTuiNullableControl;
}(AbstractTuiControl));

/**
 * Abstract service for displaying portals
 */
var AbstractTuiPortalService = /** @class */ (function () {
    function AbstractTuiPortalService() {
    }
    Object.defineProperty(AbstractTuiPortalService.prototype, "safeHost", {
        get: function () {
            if (!this.host) {
                throw new TuiNoHostException();
            }
            return this.host;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiPortalService.prototype.attach = function (host) {
        this.host = host;
    };
    AbstractTuiPortalService.prototype.add = function (componentFactory, injector) {
        return this.safeHost.addComponentChild(componentFactory, injector);
    };
    AbstractTuiPortalService.prototype.remove = function (_a) {
        var hostView = _a.hostView;
        hostView.destroy();
    };
    AbstractTuiPortalService.prototype.addTemplate = function (templateRef, context) {
        return this.safeHost.addTemplateChild(templateRef, context);
    };
    AbstractTuiPortalService.prototype.removeTemplate = function (viewRef) {
        viewRef.destroy();
    };
    AbstractTuiPortalService = __decorate([
        Injectable()
    ], AbstractTuiPortalService);
    return AbstractTuiPortalService;
}());

/**
 * Abstract class for host element for dynamically created portals.
 */
var AbstractTuiPortalHostComponent = /** @class */ (function () {
    function AbstractTuiPortalHostComponent(elementRef, portalService) {
        this.elementRef = elementRef;
        portalService.attach(this);
    }
    AbstractTuiPortalHostComponent_1 = AbstractTuiPortalHostComponent;
    Object.defineProperty(AbstractTuiPortalHostComponent.prototype, "clientRect", {
        get: function () {
            return this.elementRef.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiPortalHostComponent.prototype.addComponentChild = function (componentFactory, injector) {
        return this.viewContainerRef.createComponent(componentFactory, undefined, Injector.create({
            parent: injector,
            providers: [
                {
                    provide: AbstractTuiPortalHostComponent_1,
                    useValue: this,
                },
            ],
        }));
    };
    AbstractTuiPortalHostComponent.prototype.addTemplateChild = function (templateRef, context) {
        return this.viewContainerRef.createEmbeddedView(templateRef, context);
    };
    var AbstractTuiPortalHostComponent_1;
    AbstractTuiPortalHostComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: AbstractTuiPortalService, decorators: [{ type: Inject, args: [AbstractTuiPortalService,] }] }
    ]; };
    __decorate([
        ViewChild("viewContainer", { read: ViewContainerRef })
    ], AbstractTuiPortalHostComponent.prototype, "viewContainerRef", void 0);
    AbstractTuiPortalHostComponent = AbstractTuiPortalHostComponent_1 = __decorate([
        Directive(),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(AbstractTuiPortalService))
    ], AbstractTuiPortalHostComponent);
    return AbstractTuiPortalHostComponent;
}());

/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 * @dynamic
 */
var AbstractTuiThemeSwitcher = /** @class */ (function () {
    function AbstractTuiThemeSwitcher(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        var styles = this.documentRef.head.querySelectorAll("style");
        this.constructor.style =
            styles[styles.length - 1];
    }
    AbstractTuiThemeSwitcher_1 = AbstractTuiThemeSwitcher;
    Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
        get: function () {
            return this.constructor.style;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
        this.removeTheme();
    };
    AbstractTuiThemeSwitcher.prototype.addTheme = function () {
        if (this.style) {
            this.documentRef.head.appendChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    };
    var AbstractTuiThemeSwitcher_1;
    AbstractTuiThemeSwitcher.style = null;
    AbstractTuiThemeSwitcher.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher_1 = __decorate([
        Directive(),
        __param(0, Inject(DOCUMENT))
    ], AbstractTuiThemeSwitcher);
    return AbstractTuiThemeSwitcher;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiControl, AbstractTuiController, AbstractTuiDialogDirective, AbstractTuiDialogService, AbstractTuiInteractive, AbstractTuiMultipleControl, AbstractTuiNullableControl, AbstractTuiPortalHostComponent, AbstractTuiPortalService, AbstractTuiThemeSwitcher, TuiController };
//# sourceMappingURL=taiga-ui-cdk-abstract.js.map
