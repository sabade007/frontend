import { QueryList } from '@angular/core';
import { trigger, transition, style, query, animateChild } from '@angular/animations';

/**
 * Handler that always returns `false`.
 */
var ALWAYS_FALSE_HANDLER = function () { return false; };

/**
 * Handler that always returns `true`.
 */
var ALWAYS_TRUE_HANDLER = function () { return true; };

var CHROMIUM_EDGE_START_VERSION = 79;

/**
 * For type safety when using @ContentChildren and @ViewChildren
 *
 * NOTE: Be careful subscribing to 'changes'
 */
var EMPTY_QUERY = new QueryList();
var EMPTY_ARRAY = [];
var EMPTY_FUNCTION = function () { };
/** @deprecated use Validators.nullValidator */
var EMPTY_VALIDATOR = function () { return null; };
var EMPTY_CLIENT_RECT = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};

/**
 * Default method to turn arbitrary object into string
 */
var TUI_DEFAULT_STRINGIFY = function (item) { return String(item); };

/**
 * Default handler for matching stringified version of an item and a search query
 * @param item arbitrary element to match with a string
 * @param search search query
 * @param stringify handler to turn item into a string
 */
var TUI_DEFAULT_MATCHER = function (item, search, stringify) {
    if (stringify === void 0) { stringify = TUI_DEFAULT_STRINGIFY; }
    return stringify(item).toLowerCase().includes(search.toLowerCase());
};
/**
 * Default handler for strict matching stringified version of an item and a search query
 * @param item arbitrary element to match with a string
 * @param search search query
 * @param stringify handler to turn item into a string
 */
var TUI_STRICT_MATCHER = function (item, search, stringify) {
    if (stringify === void 0) { stringify = TUI_DEFAULT_STRINGIFY; }
    return stringify(item).toLowerCase() === search.toLowerCase();
};
/**
 * Default handler to match equality of two elements
 * ATTENTION: considers two empty arrays equal
 *
 * @param item1 first element
 * @param item2 second element
 */
var TUI_DEFAULT_IDENTITY_MATCHER = function (item1, item2) {
    return item1 === item2 || bothEmpty(item1, item2);
};
function bothEmpty(item1, item2) {
    return Array.isArray(item1) && Array.isArray(item2) && !item1.length && !item2.length;
}

var TUI_PARENT_ANIMATION = trigger("tuiParentAnimation", [
    transition("* => void", [
        style({ overflow: "hidden" }),
        query(":scope > *", [animateChild()], { optional: true }),
    ]),
]);

var POLLING_TIME = 1000 / 15;

// Filtering SVGElements for TreeWalker
// Filter must be a function in IE, other modern browsers are compliant to this format
var svgNodeFilter = (function (node) {
    return "ownerSVGElement" in node
        ? NodeFilter.FILTER_REJECT
        : NodeFilter.FILTER_ACCEPT;
});

/**
 * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.
 */
var CHAR_NO_BREAK_SPACE = "\u00A0";
/**
 * {@link https://unicode-table.com/en/2013/ EN dash}
 * is used to indicate a range of numbers or a span of time.
 * @example 2006–2022
 * ___
 * Don't confuse with {@link CHAR_EM_DASH} or {@link CHAR_HYPHEN}!
 */
var CHAR_EN_DASH = "\u2013";
/**
 * {@link https://unicode-table.com/en/2014/ EM dash}
 * is used to mark a break in a sentence.
 * @example Taiga UI — powerful set of open source components for Angular
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!
 */
var CHAR_EM_DASH = "\u2014";
/**
 * {@link https://unicode-table.com/en/00AB/ Left-Pointing Double Angle Quotation Mark}
 */
var CHAR_LAQUO = "\u00AB";
/**
 * {@link https://unicode-table.com/en/00BB/ Right-Pointing Double Angle Quotation Mark}
 */
var CHAR_RAQUO = "\u00BB";
/**
 * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}
 * is used to combine words.
 * @example well-behaved
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!
 */
var CHAR_HYPHEN = "-";
/**
 * {@link https://unicode-table.com/en/2212/ Minus}
 * is used as math operator symbol or before negative digits.
 * ---
 * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}
 */
var CHAR_MINUS = "\u2212";
/**
 * {@link https://unicode-table.com/en/002B/ Plus}
 */
var CHAR_PLUS = "+";
/**
 * {@link https://unicode-table.com/en/2022/ Bullet}.
 */
var CHAR_BULLET = "\u2022";
/**
 * {@link https://unicode-table.com/en/2026/ Suspension points}.
 */
var CHAR_ELLIPSIS = "\u2026";
/**
 * {@link https://unicode-table.com/en/00A4/ Suspension points}.
 */
var CHAR_CURRENCY_SIGN = "\u00A4";
/**
 * {@link https://unicode-table.com/en/200b/ Suspension points}.
 */
var CHAR_ZERO_WIDTH_SPACE = "\u200B";

var TUI_VERSION = "2.99.0";

/**
 * Generated bundle index. Do not edit.
 */

export { ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER, CHAR_BULLET, CHAR_CURRENCY_SIGN, CHAR_ELLIPSIS, CHAR_EM_DASH, CHAR_EN_DASH, CHAR_HYPHEN, CHAR_LAQUO, CHAR_MINUS, CHAR_NO_BREAK_SPACE, CHAR_PLUS, CHAR_RAQUO, CHAR_ZERO_WIDTH_SPACE, CHROMIUM_EDGE_START_VERSION, EMPTY_ARRAY, EMPTY_CLIENT_RECT, EMPTY_FUNCTION, EMPTY_QUERY, EMPTY_VALIDATOR, POLLING_TIME, TUI_DEFAULT_IDENTITY_MATCHER, TUI_DEFAULT_MATCHER, TUI_DEFAULT_STRINGIFY, TUI_PARENT_ANIMATION, TUI_STRICT_MATCHER, TUI_VERSION, svgNodeFilter };
//# sourceMappingURL=taiga-ui-cdk-constants.js.map
