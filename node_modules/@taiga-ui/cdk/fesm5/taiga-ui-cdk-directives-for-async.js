import { __read, __decorate, __param } from 'tslib';
import { ViewContainerRef, Inject, TemplateRef, Input, Directive, NgModule } from '@angular/core';
import { Subject, from, of } from 'rxjs';
import { concatMap, delay, takeUntil } from 'rxjs/operators';

var TuiForAsyncDirective = /** @class */ (function () {
    function TuiForAsyncDirective(view, template) {
        this.view = view;
        this.template = template;
        this.destroy$ = new Subject();
        this.tuiForAsyncTimeout = 10;
    }
    TuiForAsyncDirective.prototype.ngOnChanges = function () {
        this.clearViewForOldNodes();
        this.createAsyncViewForNewNodes();
    };
    TuiForAsyncDirective.prototype.ngOnDestroy = function () {
        this.clearViewForOldNodes();
        this.destroy$.complete();
    };
    TuiForAsyncDirective.prototype.createAsyncViewForNewNodes = function () {
        var _this = this;
        from((this.tuiForAsyncOf || []).entries())
            .pipe(concatMap(function (entry) { return of(entry).pipe(delay(_this.tuiForAsyncTimeout)); }), takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), index = _b[0], item = _b[1];
            return _this.view
                .createEmbeddedView(_this.template, { $implicit: item, index: index }, index)
                .detectChanges();
        });
    };
    TuiForAsyncDirective.prototype.clearViewForOldNodes = function () {
        this.destroy$.next();
        this.view.clear();
    };
    TuiForAsyncDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiForAsyncDirective.prototype, "tuiForAsyncOf", void 0);
    __decorate([
        Input()
    ], TuiForAsyncDirective.prototype, "tuiForAsyncTimeout", void 0);
    TuiForAsyncDirective = __decorate([
        Directive({ selector: '[tuiForAsync][tuiForAsyncOf]' }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(TemplateRef))
    ], TuiForAsyncDirective);
    return TuiForAsyncDirective;
}());

/**
 * @experimental
 */
var TuiForAsyncModule = /** @class */ (function () {
    function TuiForAsyncModule() {
    }
    TuiForAsyncModule = __decorate([
        NgModule({
            declarations: [TuiForAsyncDirective],
            exports: [TuiForAsyncDirective],
        })
    ], TuiForAsyncModule);
    return TuiForAsyncModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiForAsyncDirective, TuiForAsyncModule };
//# sourceMappingURL=taiga-ui-cdk-directives-for-async.js.map
