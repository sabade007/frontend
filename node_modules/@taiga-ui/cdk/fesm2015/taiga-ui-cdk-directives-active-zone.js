import { __decorate, __param } from 'tslib';
import { Inject, NgZone, ElementRef, Optional, SkipSelf, Input, Output, Directive, NgModule } from '@angular/core';
import { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk/decorators';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { TUI_ACTIVE_ELEMENT } from '@taiga-ui/cdk/tokens';
import { Observable } from 'rxjs';
import { map, startWith, distinctUntilChanged, skip } from 'rxjs/operators';

var TuiActiveZoneDirective_1;
let TuiActiveZoneDirective = TuiActiveZoneDirective_1 = class TuiActiveZoneDirective {
    constructor(active$, ngZone, elementRef, directParentActiveZone) {
        this.active$ = active$;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.directParentActiveZone = directParentActiveZone;
        this.subActiveZones = [];
        this.tuiActiveZoneParent = null;
        this.tuiActiveZoneChange = this.active$.pipe(map(element => !!element && this.contains(element)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.ngZone));
        if (this.directParentActiveZone) {
            this.directParentActiveZone.addSubActiveZone(this);
        }
    }
    set tuiActiveZoneParentSetter(zone) {
        this.setZone(zone);
    }
    ngOnDestroy() {
        if (this.directParentActiveZone) {
            this.directParentActiveZone.removeSubActiveZone(this);
        }
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
    }
    contains(node) {
        return (this.elementRef.nativeElement.contains(node) ||
            this.subActiveZones.some((item, index, array) => array.indexOf(item) === index && item.contains(node)));
    }
    setZone(zone) {
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
        if (zone) {
            zone.addSubActiveZone(this);
        }
        this.tuiActiveZoneParent = zone;
    }
    addSubActiveZone(activeZone) {
        this.subActiveZones = [...this.subActiveZones, activeZone];
    }
    removeSubActiveZone(activeZone) {
        const index = this.subActiveZones.findIndex(item => item === activeZone);
        this.subActiveZones = [
            ...this.subActiveZones.slice(0, index),
            ...this.subActiveZones.slice(index + 1),
        ];
    }
};
TuiActiveZoneDirective.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_ACTIVE_ELEMENT,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TuiActiveZoneDirective_1,] }] }
];
__decorate([
    Input('tuiActiveZoneParent'),
    tuiDefaultProp()
], TuiActiveZoneDirective.prototype, "tuiActiveZoneParentSetter", null);
__decorate([
    Output()
], TuiActiveZoneDirective.prototype, "tuiActiveZoneChange", void 0);
__decorate([
    tuiPure
], TuiActiveZoneDirective.prototype, "setZone", null);
TuiActiveZoneDirective = TuiActiveZoneDirective_1 = __decorate([
    Directive({
        selector: '[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)',
        exportAs: 'tuiActiveZone',
    }),
    __param(0, Inject(TUI_ACTIVE_ELEMENT)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(ElementRef)),
    __param(3, Optional()),
    __param(3, SkipSelf()),
    __param(3, Inject(TuiActiveZoneDirective_1))
], TuiActiveZoneDirective);

let TuiActiveZoneModule = class TuiActiveZoneModule {
};
TuiActiveZoneModule = __decorate([
    NgModule({
        declarations: [TuiActiveZoneDirective],
        exports: [TuiActiveZoneDirective],
    })
], TuiActiveZoneModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiActiveZoneDirective, TuiActiveZoneModule };
//# sourceMappingURL=taiga-ui-cdk-directives-active-zone.js.map
