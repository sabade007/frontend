import { __decorate, __param } from 'tslib';
import { Inject, Input, HostListener, Directive, NgModule } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiGetSelectedText } from '@taiga-ui/cdk/utils';
import { identity } from 'rxjs';

// @dynamic
let TuiCopyProcessorDirective = class TuiCopyProcessorDirective {
    constructor(windowRef) {
        this.windowRef = windowRef;
        this.tuiCopyProcessor = identity;
    }
    onCopy(event) {
        var _a;
        const text = tuiGetSelectedText(this.windowRef);
        if (text) {
            (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', this.tuiCopyProcessor(text));
        }
    }
};
TuiCopyProcessorDirective.ctorParameters = () => [
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCopyProcessorDirective.prototype, "tuiCopyProcessor", void 0);
__decorate([
    HostListener('copy.prevent', ['$event'])
], TuiCopyProcessorDirective.prototype, "onCopy", null);
TuiCopyProcessorDirective = __decorate([
    Directive({
        selector: '[tuiCopyProcessor]',
    }),
    __param(0, Inject(WINDOW))
], TuiCopyProcessorDirective);

let TuiCopyProcessorModule = class TuiCopyProcessorModule {
};
TuiCopyProcessorModule = __decorate([
    NgModule({
        declarations: [TuiCopyProcessorDirective],
        exports: [TuiCopyProcessorDirective],
    })
], TuiCopyProcessorModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCopyProcessorDirective, TuiCopyProcessorModule };
//# sourceMappingURL=taiga-ui-cdk-directives-copy-processor.js.map
