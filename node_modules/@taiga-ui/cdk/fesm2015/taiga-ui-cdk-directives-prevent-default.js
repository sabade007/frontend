import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, NgZone, Attribute, Directive, NgModule } from '@angular/core';
import { tuiZonefree, preventDefault } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { fromEvent, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

/**
 * Simple prevent default on event directive when you do not need anything
 * else on event and do not want to trigger change detection
 * @dynamic
 */
let TuiPreventDefaultDirective = class TuiPreventDefaultDirective {
    constructor({ nativeElement }, ngZone, destroy$, eventName) {
        fromEvent(nativeElement, eventName, { passive: false })
            .pipe(tuiZonefree(ngZone), preventDefault(), takeUntil(destroy$))
            .subscribe();
    }
};
TuiPreventDefaultDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['tuiPreventDefault',] }] }
];
TuiPreventDefaultDirective = __decorate([
    Directive({
        selector: '[tuiPreventDefault]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Attribute('tuiPreventDefault'))
], TuiPreventDefaultDirective);

let TuiPreventDefaultModule = class TuiPreventDefaultModule {
};
TuiPreventDefaultModule = __decorate([
    NgModule({
        declarations: [TuiPreventDefaultDirective],
        exports: [TuiPreventDefaultDirective],
    })
], TuiPreventDefaultModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPreventDefaultDirective, TuiPreventDefaultModule };
//# sourceMappingURL=taiga-ui-cdk-directives-prevent-default.js.map
