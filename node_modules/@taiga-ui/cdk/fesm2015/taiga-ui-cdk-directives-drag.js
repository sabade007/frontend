import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, Output, Directive, NgModule } from '@angular/core';
import { dragAndDropFrom } from '@taiga-ui/cdk/observables';
import { filter, map } from 'rxjs/operators';

let TuiDragDirective = class TuiDragDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.dragAndDropFrom$ = dragAndDropFrom(this.elementRef.nativeElement);
        this.start = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 0 /* Start */), map(({ event }) => event));
        this.continues = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 1 /* Continues */), map(({ event }) => event));
        this.end = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 2 /* End */), map(({ event }) => event));
    }
};
TuiDragDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Output('tuiDragStart')
], TuiDragDirective.prototype, "start", void 0);
__decorate([
    Output('tuiDragContinues')
], TuiDragDirective.prototype, "continues", void 0);
__decorate([
    Output('tuiDragEnd')
], TuiDragDirective.prototype, "end", void 0);
TuiDragDirective = __decorate([
    Directive({
        selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
    }),
    __param(0, Inject(ElementRef))
], TuiDragDirective);

let TuiDragModule = class TuiDragModule {
};
TuiDragModule = __decorate([
    NgModule({
        declarations: [TuiDragDirective],
        exports: [TuiDragDirective],
    })
], TuiDragModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDragDirective, TuiDragModule };
//# sourceMappingURL=taiga-ui-cdk-directives-drag.js.map
