import { __decorate, __param } from 'tslib';
import { ViewContainerRef, Inject, TemplateRef, Input, Directive, NgModule } from '@angular/core';

/**
 * @internal
 */
class TuiLetContext {
    constructor(internalDirectiveInstance) {
        this.internalDirectiveInstance = internalDirectiveInstance;
    }
    get $implicit() {
        return this.internalDirectiveInstance.tuiLet;
    }
    get tuiLet() {
        return this.internalDirectiveInstance.tuiLet;
    }
}

/**
 * Works like *ngIf but does not have a condition â€” use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
let TuiLetDirective = class TuiLetDirective {
    constructor(viewContainer, templateRef) {
        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
};
TuiLetDirective.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
];
__decorate([
    Input()
], TuiLetDirective.prototype, "tuiLet", void 0);
TuiLetDirective = __decorate([
    Directive({
        selector: '[tuiLet]',
    }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(TemplateRef))
], TuiLetDirective);

let TuiLetModule = class TuiLetModule {
};
TuiLetModule = __decorate([
    NgModule({
        declarations: [TuiLetDirective],
        exports: [TuiLetDirective],
    })
], TuiLetModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLetContext, TuiLetDirective, TuiLetModule };
//# sourceMappingURL=taiga-ui-cdk-directives-let.js.map
