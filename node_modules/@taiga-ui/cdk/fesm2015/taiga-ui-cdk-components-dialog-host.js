import { __decorate, __param } from 'tslib';
import { InjectionToken, Inject, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { HISTORY } from '@ng-web-apis/common';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk/constants';
import { TUI_DIALOGS } from '@taiga-ui/cdk/tokens';
import { of, combineLatest, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiLetModule } from '@taiga-ui/cdk/directives';
import { TuiFocusTrapModule } from '@taiga-ui/cdk/directives/focus-trap';
import { TuiOverscrollModule } from '@taiga-ui/cdk/directives/overscroll';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const TUI_DIALOG_CLOSES_ON_BACK = new InjectionToken('Is closing dialog on browser backward navigation enabled', {
    factory: () => of(false),
});
// TODO: 3.0 remove in ivy compilation
const FAKE_HISTORY_STATE = { label: 'ignoreMe' };
// TODO: 3.0 remove in ivy compilation
const isFakeHistoryState = (historyState) => (historyState === null || historyState === void 0 ? void 0 : historyState.label) === FAKE_HISTORY_STATE.label;
// @dynamic
let TuiDialogHostComponent = class TuiDialogHostComponent {
    constructor(isDialogClosesOnBack$, dialogsByType, historyRef, titleService) {
        this.isDialogClosesOnBack$ = isDialogClosesOnBack$;
        this.dialogsByType = dialogsByType;
        this.historyRef = historyRef;
        this.titleService = titleService;
        this.dialogs$ = combineLatest(this.dialogsByType).pipe(map(allTypesDialogs => new Array()
            .concat(...allTypesDialogs)
            .sort((a, b) => a.createdAt - b.createdAt)));
    }
    closeLast(dialogs, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack) {
            return;
        }
        const [last] = dialogs.slice(-1);
        if (!last) {
            return;
        }
        if (dialogs.length > 1) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        last.$implicit.complete();
    }
    onDialog({ propertyName }, popupOpened, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack || propertyName !== 'letter-spacing') {
            return;
        }
        if (popupOpened) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        else if (isFakeHistoryState(this.historyRef.state)) {
            this.historyRef.back();
        }
    }
};
TuiDialogHostComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DIALOG_CLOSES_ON_BACK,] }] },
    { type: Array, decorators: [{ type: Inject, args: [TUI_DIALOGS,] }] },
    { type: History, decorators: [{ type: Inject, args: [HISTORY,] }] },
    { type: Title, decorators: [{ type: Inject, args: [Title,] }] }
];
TuiDialogHostComponent = __decorate([
    Component({
        selector: 'tui-dialog-host',
        template: "<ng-container *ngIf=\"dialogs$ | async as dialogs\">\n    <section\n        *ngFor=\"let item of dialogs\"\n        polymorpheus-outlet\n        tuiFocusTrap\n        tuiScrollRef\n        tuiOverscroll=\"all\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        class=\"t-dialog\"\n        @tuiParentAnimation\n        [attr.aria-labelledby]=\"item.id\"\n        [content]=\"item.component\"\n        [context]=\"item\"\n    ></section>\n    <div\n        *tuiLet=\"isDialogClosesOnBack$ | async as isDialogClosesOnBack\"\n        class=\"t-overlay\"\n        [class.t-overlay_visible]=\"dialogs.length\"\n        (window:popstate)=\"closeLast(dialogs, isDialogClosesOnBack)\"\n        (transitionend)=\"onDialog($event, !!dialogs.length, isDialogClosesOnBack)\"\n    ></div>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [TUI_PARENT_ANIMATION],
        styles: [":host{position:fixed;left:0;bottom:0;width:100%;height:0}.t-dialog,.t-overlay{position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:flex-start;outline:0;overflow:auto;overflow:overlay}.t-dialog{bottom:auto;height:100%}.t-overlay{height:100%;pointer-events:none;touch-action:none;opacity:0;letter-spacing:normal;transition:opacity var(--tui-duration),letter-spacing 10ms;background:rgba(0,0,0,.75)}.t-overlay_visible{opacity:1;letter-spacing:1px}.t-dialog:last-of-type{z-index:1}"]
    }),
    __param(0, Inject(TUI_DIALOG_CLOSES_ON_BACK)),
    __param(1, Inject(TUI_DIALOGS)),
    __param(2, Inject(HISTORY)),
    __param(3, Inject(Title))
], TuiDialogHostComponent);

let TuiDialogHostModule = class TuiDialogHostModule {
};
TuiDialogHostModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiOverscrollModule,
            TuiFocusTrapModule,
            TuiLetModule,
        ],
        declarations: [TuiDialogHostComponent],
        exports: [TuiDialogHostComponent],
    })
], TuiDialogHostModule);

/**
 * Generated bundle index. Do not edit.
 */

export { FAKE_HISTORY_STATE, TUI_DIALOG_CLOSES_ON_BACK, TuiDialogHostComponent, TuiDialogHostModule, isFakeHistoryState };
//# sourceMappingURL=taiga-ui-cdk-components-dialog-host.js.map
