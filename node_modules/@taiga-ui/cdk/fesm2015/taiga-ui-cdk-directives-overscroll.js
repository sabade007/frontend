import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, NgZone, Input, HostBinding, Directive, NgModule } from '@angular/core';
import { typedFromEvent, tuiZonefree } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { getScrollParent, canScroll } from '@taiga-ui/cdk/utils/dom';
import { Observable } from 'rxjs';
import { filter, takeUntil, switchMap, tap } from 'rxjs/operators';

/**
 * Directive to isolate scrolling, i.e. prevent body scroll behind modal dialog
 * @dynamic
 */
let TuiOverscrollDirective = class TuiOverscrollDirective {
    constructor({ nativeElement }, ngZone, destroy$) {
        this.mode = 'scroll';
        typedFromEvent(nativeElement, 'wheel', { passive: false })
            .pipe(filter(() => this.enabled), tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(event => {
            this.processEvent(event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);
        });
        typedFromEvent(nativeElement, 'touchstart', { passive: true })
            .pipe(switchMap(({ touches }) => {
            let { clientX, clientY } = touches[0];
            let deltaX = 0;
            let deltaY = 0;
            let vertical;
            return typedFromEvent(nativeElement, 'touchmove', {
                passive: false,
            }).pipe(filter(() => this.enabled), tap(event => {
                // We have to have it in tap instead of subscribe due to variables in closure
                const changedTouch = event.changedTouches[0];
                deltaX = clientX - changedTouch.clientX;
                deltaY = clientY - changedTouch.clientY;
                clientX = changedTouch.clientX;
                clientY = changedTouch.clientY;
                if (vertical === undefined) {
                    vertical = Math.abs(deltaY) > Math.abs(deltaX);
                }
                this.processEvent(event, vertical, vertical ? deltaY < 0 : deltaX < 0);
            }));
        }), tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe();
    }
    get enabled() {
        return this.mode !== 'none';
    }
    get overscrollBehavior() {
        return this.enabled ? 'contain' : null;
    }
    processEvent(event, vertical, negative) {
        var _a;
        const { target, currentTarget, cancelable } = event;
        // TODO: iframe warning
        if (!cancelable ||
            !(target instanceof Element) ||
            ((_a = target) === null || _a === void 0 ? void 0 : _a.type) === 'range') {
            return;
        }
        // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior
        if (this.mode === 'all' &&
            ((vertical && !currentTarget.contains(getScrollParent(target))) ||
                (!vertical && !currentTarget.contains(getScrollParent(target, false))))) {
            event.preventDefault();
            return;
        }
        // This is Safari/IE/Edge fallback
        if (vertical &&
            ((negative && !canScroll(target, currentTarget, true, false)) ||
                (!negative && !canScroll(target, currentTarget, true, true)))) {
            event.preventDefault();
            return;
        }
        if (!vertical &&
            ((negative && !canScroll(target, currentTarget, false, false)) ||
                (!negative && !canScroll(target, currentTarget, false, true)))) {
            event.preventDefault();
        }
    }
};
TuiOverscrollDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Input('tuiOverscroll')
], TuiOverscrollDirective.prototype, "mode", void 0);
__decorate([
    HostBinding('style.overscrollBehavior')
], TuiOverscrollDirective.prototype, "overscrollBehavior", null);
TuiOverscrollDirective = __decorate([
    Directive({
        selector: '[tuiOverscroll]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService))
], TuiOverscrollDirective);

let TuiOverscrollModule = class TuiOverscrollModule {
};
TuiOverscrollModule = __decorate([
    NgModule({
        declarations: [TuiOverscrollDirective],
        exports: [TuiOverscrollDirective],
    })
], TuiOverscrollModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiOverscrollDirective, TuiOverscrollModule };
//# sourceMappingURL=taiga-ui-cdk-directives-overscroll.js.map
