/**
 * @deprecated: use {@link tuiSvgLinearGradientProcessor} instead
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function svgLinearGradientProcessor(svg, salt) {
    const uniqueIds = extractLinearGradientIdsFromSvg(svg);
    return uniqueIds.reduce((processed, previousId) => processed.replace(new RegExp(previousId, `g`), `${previousId}_${salt || makeRandomSalt()}`), svg);
}
function makeRandomSalt() {
    return Math.floor(Math.random() * Date.now());
}
function extractLinearGradientIdsFromSvg(svg) {
    const matchedIdsWithPrefix = svg.match(/url\(#(\w\w+)/g) || [];
    return [...new Set(matchedIdsWithPrefix)].map(matched => matched.slice(5));
}
const tuiSvgLinearGradientProcessor = svgLinearGradientProcessor;

/**
 * Generated bundle index. Do not edit.
 */

export { svgLinearGradientProcessor, tuiSvgLinearGradientProcessor };
//# sourceMappingURL=taiga-ui-cdk-utils-svg.js.map
