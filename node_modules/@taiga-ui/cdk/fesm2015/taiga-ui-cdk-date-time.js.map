{"version":3,"file":"taiga-ui-cdk-date-time.js","sources":["ng://@taiga-ui/cdk/date-time/date-time.ts","ng://@taiga-ui/cdk/date-time/date-fillers.ts","ng://@taiga-ui/cdk/date-time/date-format.ts","ng://@taiga-ui/cdk/date-time/date-separator.ts","ng://@taiga-ui/cdk/date-time/year.ts","ng://@taiga-ui/cdk/date-time/month.ts","ng://@taiga-ui/cdk/date-time/day.ts","ng://@taiga-ui/cdk/date-time/month-range.ts","ng://@taiga-ui/cdk/date-time/day-range.ts","ng://@taiga-ui/cdk/date-time/days.const.ts","ng://@taiga-ui/cdk/date-time/time.ts","ng://@taiga-ui/cdk/date-time/taiga-ui-cdk-date-time.ts"],"sourcesContent":["import {CHAR_EN_DASH, CHAR_NO_BREAK_SPACE} from '@taiga-ui/cdk/constants';\n\nexport const DAYS_IN_WEEK = 7;\n\nexport const DAYS_IN_NORMAL_YEAR = 365;\n\nexport const DAYS_IN_LEAP_YEAR = 366;\n\nexport const MONTHS_IN_YEAR = 12;\n\nexport const MIN_DAY = 1;\n\nexport const MIN_MONTH = 0;\n\nexport const MAX_MONTH = 11;\n\nexport const MIN_YEAR = 0;\n\nexport const MAX_YEAR = 9999;\n\nexport const RANGE_SEPARATOR_CHAR = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`;\n\nexport const MILLISECONDS_IN_SECOND = 1000;\n\nexport const SECONDS_IN_MINUTE = 60;\n\nexport const MINUTES_IN_HOUR = 60;\n\nexport const HOURS_IN_DAY = 24;\n\nexport const MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\n\nexport const MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;\n\nexport const MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\n\n/**\n * @deprecated dont use it. See {@link TUI_DATE_FORMAT}\n */\nexport const TUI_DATE_FILLER = new InjectionToken<string>(`date filler for Taiga UI`, {\n    factory: () => `dd.mm.yyyy`,\n});\n\n/**\n * @deprecated dont use it\n */\nexport const TUI_DATE_RANGE_FILLER = new InjectionToken<string>(\n    `date range filler for Taiga UI`,\n    {\n        factory: () => {\n            const dateFiller = inject(TUI_DATE_FILLER);\n\n            return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;\n        },\n    },\n);\n\n/**\n * @internal 'dd.mm.yyyy'.length\n * Used in:\n * - {@link TuiInputDateComponent}\n * - {@link TuiInputDateRangeComponent}\n * - {@link TuiInputDateTimeComponent}\n */\nexport const DATE_FILLER_LENGTH = 10;\n/**\n * @internal\n * Used in {@link TuiInputDateRangeComponent}\n */\nexport const DATE_RANGE_FILLER_LENGTH =\n    2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;\n","import {InjectionToken} from '@angular/core';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\n\nexport const TUI_DATE_FORMAT = new InjectionToken<TuiDateMode>(\n    `Active date format for Taiga UI`,\n    {\n        factory: () => `DMY`,\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const TUI_DATE_SEPARATOR = new InjectionToken<string>(\n    `Date separator for Taiga UI components`,\n    {\n        factory: () => `.`,\n    },\n);\n\nexport const changeDateSeparator = (\n    dateString: string,\n    newDateSeparator: string,\n): string => dateString.replace(/[^0-9A-Za-zА-Яа-я]/gi, newDateSeparator);\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiYearLike} from '@taiga-ui/cdk/interfaces';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {\n    DAYS_IN_LEAP_YEAR,\n    DAYS_IN_NORMAL_YEAR,\n    DAYS_IN_WEEK,\n    MAX_YEAR,\n    MIN_YEAR,\n} from './date-time';\n\n/**\n * Immutable year object\n * @nosideeffects\n */\nexport class TuiYear implements TuiYearLike {\n    constructor(readonly year: number) {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n    }\n\n    /**\n     * Checks year for validity\n     */\n    static isValidYear(year: number): boolean {\n        return Number.isInteger(year) && inRange(year, MIN_YEAR, MAX_YEAR + 1);\n    }\n\n    /**\n     * Check if passed year is a leap year\n     */\n    static isLeapYear(year: number): boolean {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n\n        return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n    }\n\n    /**\n     * Returns amount of leap years from year 0 to the passed one\n     */\n    static getAbsoluteLeapYears(year: number): number {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n\n        return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Returns day of week offset of the beginning of the passed year\n     *\n     * @param year\n     * @param absoluteLeapYears amount of leap years prior to the passed one\n     * @return offset in days\n     */\n    static getYearStartDaysOffset(year: number, absoluteLeapYears: number): number {\n        tuiAssert.assert(TuiYear.isValidYear(year));\n        tuiAssert.assert(Number.isInteger(absoluteLeapYears));\n        tuiAssert.assert(year >= absoluteLeapYears);\n        tuiAssert.assert(absoluteLeapYears >= 0);\n\n        return (\n            (absoluteLeapYears * DAYS_IN_LEAP_YEAR +\n                (year - absoluteLeapYears) * DAYS_IN_NORMAL_YEAR +\n                5) %\n            DAYS_IN_WEEK\n        );\n    }\n\n    static lengthBetween(from: TuiYear, to: TuiYear): number {\n        return to.year - from.year;\n    }\n\n    /**\n     * Normalizes year by clamping it between min and max years\n     */\n    protected static normalizeYearPart(year: number): number {\n        return normalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);\n    }\n\n    get formattedYear(): string {\n        return padStart(String(this.year), 4, `0`);\n    }\n\n    get isLeapYear(): boolean {\n        return TuiYear.isLeapYear(this.year);\n    }\n\n    /**\n     * Returns amount of leap years from year 0 to current\n     */\n    get absoluteLeapYears(): number {\n        return TuiYear.getAbsoluteLeapYears(this.year);\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Returns day of week offset of the beginning of the current year\n     */\n    get yearStartDaysOffset(): number {\n        return TuiYear.getYearStartDaysOffset(this.year, this.absoluteLeapYears);\n    }\n\n    /**\n     * Passed year is after current\n     */\n    yearBefore({year}: TuiYear): boolean {\n        return this.year < year;\n    }\n\n    /**\n     * Passed year is the same or after current\n     */\n    yearSameOrBefore({year}: TuiYear): boolean {\n        return this.year <= year;\n    }\n\n    /**\n     * Passed year is the same as current\n     */\n    yearSame({year}: TuiYear): boolean {\n        return this.year === year;\n    }\n\n    /**\n     * Passed year is either the same of before the current\n     */\n    yearSameOrAfter({year}: TuiYear): boolean {\n        return this.year >= year;\n    }\n\n    /**\n     * Passed year is before current\n     */\n    yearAfter({year}: TuiYear): boolean {\n        return this.year > year;\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably offsets year\n     */\n    append({year = 0}: TuiYearLike, backwards: boolean = false): TuiYear {\n        tuiAssert.assert(Number.isInteger(year));\n\n        if (backwards) {\n            year *= -1;\n        }\n\n        const resultYear = this.year + year;\n\n        tuiAssert.assert(TuiYear.isValidYear(resultYear));\n\n        return new TuiYear(resultYear);\n    }\n\n    toString(): string {\n        return this.formattedYear;\n    }\n\n    valueOf(): number {\n        return this.year;\n    }\n\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint: string): number | string {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n\n    toJSON(): string {\n        return this.formattedYear;\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiMonthNumber} from '@taiga-ui/cdk/enums';\nimport {TuiMonthLike} from '@taiga-ui/cdk/interfaces';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {DAYS_IN_WEEK, MAX_MONTH, MIN_MONTH, MONTHS_IN_YEAR} from './date-time';\nimport {TuiYear} from './year';\n\n/**\n * Immutable object consisting of year and month\n */\nexport class TuiMonth extends TuiYear implements TuiMonthLike {\n    /**\n     * @param year\n     * @param month (starting with 0)\n     */\n    constructor(year: number, readonly month: number) {\n        super(year);\n        tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n    }\n\n    /**\n     * Tests month and year for validity\n     */\n    static isValidMonth(year: number, month: number): boolean {\n        return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);\n    }\n\n    /**\n     * Returns number of days in a month\n     */\n    static getMonthDaysCount(month: number, isLeapYear: boolean): number {\n        tuiAssert.assert(TuiMonth.isValidMonthPart(month));\n\n        switch (month) {\n            case TuiMonthNumber.February:\n                return isLeapYear ? 29 : 28;\n            case TuiMonthNumber.April:\n            case TuiMonthNumber.June:\n            case TuiMonthNumber.September:\n            case TuiMonthNumber.November:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Returns current month and year based on local time zone\n     * @nosideeffects\n     */\n    static currentLocal(): TuiMonth {\n        const nativeDate = new Date();\n\n        return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());\n    }\n\n    /**\n     * Returns current month and year based on UTC\n     */\n    static currentUtc(): TuiMonth {\n        const nativeDate = new Date();\n\n        return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());\n    }\n\n    static lengthBetween(from: TuiMonth, to: TuiMonth): number {\n        const absoluteFrom = from.month + from.year * 12;\n        const absoluteTo = to.month + to.year * 12;\n\n        return absoluteTo - absoluteFrom;\n    }\n\n    /**\n     * Normalizes number by clamping it between min and max month\n     */\n    protected static normalizeMonthPart(month: number): number {\n        return normalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);\n    }\n\n    /**\n     * Tests month for validity\n     */\n    private static isValidMonthPart(month: number): boolean {\n        return Number.isInteger(month) && inRange(month, MIN_MONTH, MAX_MONTH + 1);\n    }\n\n    get formattedMonthPart(): string {\n        return padStart(String(this.month + 1), 2, `0`);\n    }\n\n    /**\n     * @deprecated\n     * Formatter month and year\n     */\n    get formattedMonth(): string {\n        return `${this.formattedMonthPart}.${this.formattedYear}`;\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Calculates number of weeks in a month (counting non-full weeks)\n     */\n    get weeksRowsCount(): number {\n        return Math.ceil((this.monthStartDaysOffset + this.daysCount) / DAYS_IN_WEEK);\n    }\n\n    /**\n     * Returns days in a month\n     */\n    get daysCount(): number {\n        return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Computes day of week offset of the beginning of the month\n     */\n    get monthStartDaysOffset(): number {\n        let result = this.yearStartDaysOffset;\n\n        for (let currentMonth = 0; currentMonth <= this.month - 1; currentMonth++) {\n            result += TuiMonth.getMonthDaysCount(currentMonth, this.isLeapYear);\n        }\n\n        return result % DAYS_IN_WEEK;\n    }\n\n    /**\n     * Passed month and year are after current\n     */\n    monthBefore(another: TuiMonth): boolean {\n        return (\n            this.yearBefore(another) ||\n            (this.yearSame(another) && this.month < another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are after or the same as current\n     */\n    monthSameOrBefore(another: TuiMonth): boolean {\n        return (\n            this.yearBefore(another) ||\n            (this.yearSame(another) && this.month <= another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are the same as current\n     */\n    monthSame(another: TuiMonth): boolean {\n        return this.yearSame(another) && this.month === another.month;\n    }\n\n    /**\n     * Passed month and year are either before or equal to current\n     */\n    monthSameOrAfter(another: TuiMonth): boolean {\n        return (\n            this.yearAfter(another) ||\n            (this.yearSame(another) && this.month >= another.month)\n        );\n    }\n\n    /**\n     * Passed month and year are before current\n     */\n    monthAfter(another: TuiMonth): boolean {\n        return (\n            this.yearAfter(another) ||\n            (this.yearSame(another) && this.month > another.month)\n        );\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably alters current month and year by passed offset\n     *\n     * @param offset\n     * @param backwards shift date backwards\n     * @return new month and year object as a result of offsetting current\n     */\n    append({year = 0, month = 0}: TuiMonthLike, backwards: boolean = false): TuiMonth {\n        if (backwards) {\n            year *= -1;\n            month *= -1;\n        }\n\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n\n        return new TuiMonth(\n            Math.floor(totalMonths / MONTHS_IN_YEAR),\n            totalMonths % MONTHS_IN_YEAR,\n        );\n    }\n\n    toString(): string {\n        return this.formattedMonth;\n    }\n\n    valueOf(): number {\n        return this.toLocalNativeDate().valueOf();\n    }\n\n    toJSON(): string {\n        return `${super.toJSON()}-${this.formattedMonthPart}`;\n    }\n\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate(): Date {\n        return new Date(this.year, this.month);\n    }\n\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate(): Date {\n        return new Date(Date.UTC(this.year, this.month));\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiDayOfWeek, TuiMonthNumber} from '@taiga-ui/cdk/enums';\nimport {\n    InvalidDayException,\n    InvalidMonthException,\n    InvalidYearException,\n} from '@taiga-ui/cdk/exceptions';\nimport {TuiDayLike} from '@taiga-ui/cdk/interfaces';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange, normalizeToIntNumber} from '@taiga-ui/cdk/utils/math';\n\nimport {DATE_FILLER_LENGTH} from './date-fillers';\nimport {DAYS_IN_WEEK, MIN_DAY, MONTHS_IN_YEAR} from './date-time';\nimport {TuiMonth} from './month';\nimport {TuiYear} from './year';\n\n// TODO: Localized formatting\n/**\n * Immutable date object, consisting of day, month and year\n */\nexport class TuiDay extends TuiMonth {\n    constructor(year: number, month: number, readonly day: number) {\n        super(year, month);\n        tuiAssert.assert(TuiDay.isValidDay(year, month, day));\n    }\n\n    /**\n     * Creates {@link TuiDay} from native {@link Date} based on local time zone\n     */\n    static fromLocalNativeDate(date: Date): TuiDay {\n        return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * Creates {@link TuiDay} from native {@link Date} using UTC\n     */\n    static fromUtcNativeDate(date: Date): TuiDay {\n        return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n    }\n\n    /**\n     * Check validity of year, month and day\n     *\n     * @param year\n     * @param month\n     * @param day\n     * @return boolean validity\n     */\n    static isValidDay(year: number, month: number, day: number): boolean {\n        return (\n            TuiMonth.isValidMonth(year, month) &&\n            Number.isInteger(day) &&\n            inRange(\n                day,\n                MIN_DAY,\n                TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1,\n            )\n        );\n    }\n\n    /**\n     * @deprecated DONT USE IT (will be deleted soon)\n     *\n     * Calculated day on a calendar grid\n     *\n     * @param month\n     * @param row row in a calendar\n     * @param col column in a calendar\n     * @return resulting day on these coordinates (could exceed passed month)\n     */\n    static getDayFromMonthRowCol(month: TuiMonth, row: number, col: number): TuiDay {\n        tuiAssert.assert(Number.isInteger(row));\n        tuiAssert.assert(inRange(row, 0, 6));\n        tuiAssert.assert(Number.isInteger(col));\n        tuiAssert.assert(inRange(col, 0, DAYS_IN_WEEK));\n\n        let day = row * DAYS_IN_WEEK + col - month.monthStartDaysOffset + 1;\n\n        if (day > month.daysCount) {\n            day -= month.daysCount;\n            month = month.append({month: 1});\n        }\n\n        if (day <= 0) {\n            month = month.append({month: -1});\n            day = month.daysCount + day;\n        }\n\n        return new TuiDay(month.year, month.month, day);\n    }\n\n    /**\n     * Current day based on local time zone\n     */\n    static currentLocal(): TuiDay {\n        const nativeDate = new Date();\n        const year = nativeDate.getFullYear();\n        const month = nativeDate.getMonth();\n        const day = nativeDate.getDate();\n\n        return new TuiDay(year, month, day);\n    }\n\n    /**\n     * Returns current day based on UTC\n     */\n    static currentUtc(): TuiDay {\n        const nativeDate = new Date();\n        const year = nativeDate.getUTCFullYear();\n        const month = nativeDate.getUTCMonth();\n        const day = nativeDate.getUTCDate();\n\n        return new TuiDay(year, month, day);\n    }\n\n    /**\n     * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.\n     *\n     * @param year any year value, including invalid\n     * @param month any month value, including invalid (months start with 0)\n     * @param day any day value, including invalid\n     * @return normalized date\n     */\n    static normalizeOf(year: number, month: number, day: number): TuiDay {\n        const normalizedYear = TuiYear.normalizeYearPart(year);\n        const normalizedMonth = TuiMonth.normalizeMonthPart(month);\n        const normalizedDay = TuiDay.normalizeDayPart(\n            day,\n            normalizedMonth,\n            normalizedYear,\n        );\n\n        return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);\n    }\n\n    static lengthBetween(from: TuiDay, to: TuiDay): number {\n        return Math.round(\n            (to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) /\n                (1000 * 60 * 60 * 24),\n        );\n    }\n\n    static parseRawDateString(\n        date: string,\n        dateMode: TuiDateMode = `DMY`,\n    ): {day: number; month: number; year: number} {\n        tuiAssert.assert(\n            date.length === DATE_FILLER_LENGTH,\n            `[parseRawDateString]: wrong date string length`,\n        );\n\n        switch (dateMode) {\n            case `YMD`:\n                return {\n                    day: parseInt(date.slice(8, 10), 10),\n                    month: parseInt(date.slice(5, 7), 10) - 1,\n                    year: parseInt(date.slice(0, 4), 10),\n                };\n\n            case `MDY`:\n                return {\n                    day: parseInt(date.slice(3, 5), 10),\n                    month: parseInt(date.slice(0, 2), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n\n            default:\n            case `DMY`:\n                return {\n                    day: parseInt(date.slice(0, 2), 10),\n                    month: parseInt(date.slice(3, 5), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n        }\n    }\n\n    // TODO: Move month and year related code corresponding classes\n    /**\n     * Parsing a string with date with normalization\n     *\n     * @param rawDate date string\n     * @param dateMode date format of the date string (DMY | MDY | YMD)\n     * @return normalized date\n     */\n    static normalizeParse(rawDate: string, dateMode: TuiDateMode = `DMY`): TuiDay {\n        const {day, month, year} = this.parseRawDateString(rawDate, dateMode);\n\n        return TuiDay.normalizeOf(year, month, day);\n    }\n\n    /**\n     * Parsing a date stringified in a toJSON format\n     * @param yearMonthDayString date string in format of YYYY-MM-DD\n     * @return date\n     * @throws exceptions if any part of the date is invalid\n     */\n    static jsonParse(yearMonthDayString: string): TuiDay {\n        const {day, month, year} = this.parseRawDateString(yearMonthDayString, `YMD`);\n\n        if (!TuiYear.isValidYear(year)) {\n            throw new InvalidYearException(year);\n        }\n\n        if (!TuiMonth.isValidMonth(year, month)) {\n            throw new InvalidMonthException(month);\n        }\n\n        if (\n            !Number.isInteger(day) ||\n            !inRange(\n                day,\n                MIN_DAY,\n                TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1,\n            )\n        ) {\n            throw new InvalidDayException(day);\n        }\n\n        return new TuiDay(year, month, day);\n    }\n\n    protected static normalizeDayPart(day: number, month: number, year: number): number {\n        tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n\n        const monthDaysCount = TuiMonth.getMonthDaysCount(\n            month,\n            TuiYear.isLeapYear(year),\n        );\n\n        return normalizeToIntNumber(day, 1, monthDaysCount);\n    }\n\n    get formattedDayPart(): string {\n        return padStart(String(this.day), 2, `0`);\n    }\n\n    /**\n     * @deprecated use {@link getFormattedDay} instead\n     * Formatted whole date\n     */\n    get formattedDay(): string {\n        return `${this.formattedDayPart}.${this.formattedMonth}`;\n    }\n\n    get isWeekend(): boolean {\n        const dayOfWeek = this.dayOfWeek(false);\n\n        return dayOfWeek === TuiDayOfWeek.Saturday || dayOfWeek === TuiDayOfWeek.Sunday;\n    }\n\n    /**\n     * Returns day of week\n     *\n     * @param startFromMonday whether week starts from Monday and not from Sunday\n     * @return day of week (from 0 to 6)\n     */\n    dayOfWeek(startFromMonday: boolean = true): number {\n        const dayOfWeek = startFromMonday\n            ? this.toLocalNativeDate().getDay() - 1\n            : this.toLocalNativeDate().getDay();\n\n        return dayOfWeek < 0 ? 6 : dayOfWeek;\n    }\n\n    /**\n     * Passed date is after current\n     */\n    dayBefore(another: TuiDay): boolean {\n        return (\n            this.monthBefore(another) ||\n            (this.monthSame(another) && this.day < another.day)\n        );\n    }\n\n    /**\n     * Passed date is after or equals to current\n     */\n    daySameOrBefore(another: TuiDay): boolean {\n        return (\n            this.monthBefore(another) ||\n            (this.monthSame(another) && this.day <= another.day)\n        );\n    }\n\n    /**\n     * Passed date is the same as current\n     */\n    daySame(another: TuiDay): boolean {\n        return this.monthSame(another) && this.day === another.day;\n    }\n\n    /**\n     * Passed date is either before or the same as current\n     */\n    daySameOrAfter(another: TuiDay): boolean {\n        return (\n            this.monthAfter(another) ||\n            (this.monthSame(another) && this.day >= another.day)\n        );\n    }\n\n    /**\n     * Passed date is before current\n     */\n    dayAfter(another: TuiDay): boolean {\n        return (\n            this.monthAfter(another) ||\n            (this.monthSame(another) && this.day > another.day)\n        );\n    }\n\n    /**\n     * Clamping date between two limits\n     *\n     * @param min\n     * @param max\n     * @return clamped date\n     */\n    dayLimit(min: TuiDay | null, max: TuiDay | null): TuiDay {\n        if (min !== null && this.dayBefore(min)) {\n            return min;\n        }\n\n        if (max !== null && this.dayAfter(max)) {\n            return max;\n        }\n\n        return this;\n    }\n\n    // TODO: 3.0 Consider removing `backwards` option\n    /**\n     * Immutably alters current day by passed offset\n     *\n     * If resulting month has more days than original one, date is rounded to the maximum day\n     * in the resulting month. Offset of days will be calculated based on the resulted year and month\n     * to not interfere with parent classes methods\n     *\n     * @param offset\n     * @param backwards shift date backwards\n     * @return new date object as a result of offsetting current\n     */\n    append(\n        {year = 0, month = 0, day = 0}: TuiDayLike,\n        backwards: boolean = false,\n    ): TuiDay {\n        if (backwards) {\n            year *= -1;\n            month *= -1;\n            day *= -1;\n        }\n\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n        let years = Math.floor(totalMonths / MONTHS_IN_YEAR);\n        let months = totalMonths % MONTHS_IN_YEAR;\n\n        let days =\n            Math.min(\n                this.day,\n                TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years)),\n            ) + day;\n\n        while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {\n            days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n\n            if (months === TuiMonthNumber.December) {\n                years++;\n                months = TuiMonthNumber.January;\n            } else {\n                months++;\n            }\n        }\n\n        while (days < MIN_DAY) {\n            if (months === TuiMonthNumber.January) {\n                years--;\n                months = TuiMonthNumber.December;\n            } else {\n                months--;\n            }\n\n            days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n        }\n\n        return new TuiDay(years, months, days);\n    }\n\n    /**\n     * Returns formatted whole date\n     */\n    getFormattedDay(dateFormat: TuiDateMode, separator: string): string {\n        tuiAssert.assert(\n            separator.length === 1,\n            `Separator should consist of only 1 symbol`,\n        );\n\n        const dd = this.formattedDayPart;\n        const mm = this.formattedMonthPart;\n        const yyyy = this.formattedYear;\n\n        switch (dateFormat) {\n            case `YMD`:\n                return `${yyyy}${separator}${mm}${separator}${dd}`;\n            case `MDY`:\n                return `${mm}${separator}${dd}${separator}${yyyy}`;\n            case `DMY`:\n            default:\n                return `${dd}${separator}${mm}${separator}${yyyy}`;\n        }\n    }\n\n    toString(dateFormat: TuiDateMode = `DMY`, separator: string = `.`): string {\n        return this.getFormattedDay(dateFormat, separator);\n    }\n\n    toJSON(): string {\n        return `${super.toJSON()}-${this.formattedDayPart}`;\n    }\n\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate(): Date {\n        return new Date(this.year, this.month, this.day);\n    }\n\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate(): Date {\n        return new Date(Date.UTC(this.year, this.month, this.day));\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\nimport {TuiMonth} from './month';\n\n/**\n * An immutable range of two {@link TuiMonth} objects\n */\nexport class TuiMonthRange {\n    constructor(readonly from: TuiMonth, readonly to: TuiMonth) {\n        tuiAssert.assert(from.monthSameOrBefore(to));\n    }\n\n    static sort(month1: TuiMonth, month2: TuiMonth): TuiMonthRange {\n        return month1.monthSameOrBefore(month2)\n            ? new TuiMonthRange(month1, month2)\n            : new TuiMonthRange(month2, month1);\n    }\n\n    get isSingleMonth(): boolean {\n        return this.from.monthSame(this.to);\n    }\n\n    /**\n     * @deprecated\n     */\n    get formattedMonthRange(): string {\n        return `${this.from.formattedMonth}${RANGE_SEPARATOR_CHAR}${this.to.formattedMonth}`;\n    }\n\n    monthSame(another: TuiMonthRange): boolean {\n        return this.from.monthSame(another.from) && this.to.monthSame(another.to);\n    }\n\n    toString(): string {\n        return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;\n    }\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiDateMode} from '@taiga-ui/cdk/types';\n\nimport {DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH} from './date-fillers';\nimport {RANGE_SEPARATOR_CHAR} from './date-time';\nimport {TuiDay} from './day';\nimport {TuiMonthRange} from './month-range';\n\n/**\n * Temporary type guard to satisfy ts-overloading of normalizeParse method\n * @deprecated\n */\nexport const isDateMode = (dateMode: string): dateMode is TuiDateMode =>\n    [`DMY`, `YMD`, `MDY`].includes(dateMode);\n\n/**\n * An immutable range of two {@link TuiDay} objects\n */\nexport class TuiDayRange extends TuiMonthRange {\n    constructor(readonly from: TuiDay, readonly to: TuiDay) {\n        super(from, to);\n\n        tuiAssert.assert(from.daySameOrBefore(to));\n    }\n\n    /**\n     * Creates range from two days after sorting them\n     *\n     * @param day1\n     * @param day2\n     * @return new range with sorted days\n     */\n    static sort(day1: TuiDay, day2: TuiDay): TuiDayRange {\n        return day1.daySameOrBefore(day2)\n            ? new TuiDayRange(day1, day2)\n            : new TuiDayRange(day2, day1);\n    }\n\n    /**\n     * @deprecated\n     */\n    static normalizeParse(\n        rangeString: string,\n        dateFiller: string,\n        dateRangeFiller: string,\n    ): TuiDayRange;\n    static normalizeParse(rangeString: string, dateMode?: TuiDateMode): TuiDayRange;\n\n    /**\n     * Parse and correct a day range in string format\n     *\n     * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy\n     * @param dateMode {@link TuiDateMode}\n     * @return normalized day range object\n     */\n    static normalizeParse(\n        rangeString: string,\n        dateMode: TuiDateMode | string = `DMY`,\n    ): TuiDayRange {\n        const dateFormat = isDateMode(dateMode) ? dateMode : `DMY`;\n\n        const leftDay = TuiDay.normalizeParse(\n            rangeString.slice(0, DATE_FILLER_LENGTH),\n            dateFormat,\n        );\n\n        if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {\n            return new TuiDayRange(leftDay, leftDay);\n        }\n\n        return TuiDayRange.sort(\n            leftDay,\n            TuiDay.normalizeParse(\n                rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length),\n                dateFormat,\n            ),\n        );\n    }\n\n    get isSingleDay(): boolean {\n        return this.from.daySame(this.to);\n    }\n\n    /**\n     * Human readable format.\n     * @deprecated use {@link getFormattedDayRange} instead\n     */\n    get formattedDayRange(): string {\n        const from = this.from.getFormattedDay(`DMY`, `.`);\n        const to = this.to.getFormattedDay(`DMY`, `.`);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n\n    /**\n     * Tests ranges for identity\n     *\n     * @param another second range to test against current\n     * @return `true` if days are identical\n     */\n    daySame(another: TuiDayRange): boolean {\n        return this.from.daySame(another.from) && this.to.daySame(another.to);\n    }\n\n    /**\n     * Locks range between two days included, or limits from one side if the other is null\n     *\n     * @param min\n     * @param max\n     * @return range — clamped range\n     */\n    dayLimit(min: TuiDay | null, max: TuiDay | null): TuiDayRange {\n        return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));\n    }\n\n    /**\n     * Human readable format.\n     */\n    getFormattedDayRange(dateFormat: TuiDateMode, dateSeparator: string): string {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n\n    toString(dateFormat: TuiDateMode = `DMY`, dateSeparator: string = `.`): string {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n}\n","import {MAX_MONTH, MAX_YEAR, MIN_DAY, MIN_MONTH, MIN_YEAR} from './date-time';\nimport {TuiDay} from './day';\n\nexport const TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);\n\nexport const TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\nimport {TuiTimeLike} from '@taiga-ui/cdk/interfaces';\nimport {TuiTimeMode} from '@taiga-ui/cdk/types';\nimport {padStart} from '@taiga-ui/cdk/utils/format';\nimport {inRange} from '@taiga-ui/cdk/utils/math';\n\nimport {\n    HOURS_IN_DAY,\n    MILLISECONDS_IN_DAY,\n    MILLISECONDS_IN_HOUR,\n    MILLISECONDS_IN_MINUTE,\n    MINUTES_IN_HOUR,\n    SECONDS_IN_MINUTE,\n} from './date-time';\n\n/**\n * Immutable time object with hours, minutes, seconds and ms\n */\nexport class TuiTime implements TuiTimeLike {\n    constructor(\n        readonly hours: number,\n        readonly minutes: number,\n        readonly seconds: number = 0,\n        readonly ms: number = 0,\n    ) {\n        tuiAssert.assert(\n            TuiTime.isValidTime(hours, minutes, seconds, ms),\n            `Time must be real, but got:`,\n            hours,\n            minutes,\n            seconds,\n            ms,\n        );\n    }\n\n    /**\n     * Checks if time is valid\n     */\n    static isValidTime(\n        hours: number,\n        minutes: number,\n        seconds: number = 0,\n        ms: number = 0,\n    ): boolean {\n        return (\n            Number.isInteger(hours) &&\n            inRange(hours, 0, HOURS_IN_DAY) &&\n            Number.isInteger(minutes) &&\n            inRange(minutes, 0, MINUTES_IN_HOUR) &&\n            Number.isInteger(seconds) &&\n            inRange(seconds, 0, SECONDS_IN_MINUTE) &&\n            Number.isInteger(ms) &&\n            inRange(ms, 0, 1000)\n        );\n    }\n\n    /**\n     * Current UTC time.\n     */\n    static current(): TuiTime {\n        return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);\n    }\n\n    /**\n     * Current time in local timezone\n     */\n    static currentLocal(): TuiTime {\n        const date = new Date();\n\n        return TuiTime.fromAbsoluteMilliseconds(\n            (Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) %\n                MILLISECONDS_IN_DAY,\n        );\n    }\n\n    /**\n     * Calculates TuiTime from milliseconds\n     */\n    static fromAbsoluteMilliseconds(milliseconds: number): TuiTime {\n        tuiAssert.assert(Number.isInteger(milliseconds));\n        tuiAssert.assert(\n            inRange(milliseconds, 0, MILLISECONDS_IN_DAY),\n            `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`,\n        );\n\n        const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);\n        const minutes = Math.floor(\n            (milliseconds % MILLISECONDS_IN_HOUR) / MILLISECONDS_IN_MINUTE,\n        );\n        const seconds =\n            Math.floor(\n                ((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) / 1000,\n            ) || 0;\n        const ms =\n            Math.floor(\n                ((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) % 1000,\n            ) || 0;\n\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n\n    /**\n     * Parses string into TuiTime object\n     */\n    static fromString(time: string): TuiTime {\n        const hours = Number(time.slice(0, 2));\n        const minutes = Number(time.slice(3, 5));\n        const seconds = Number(time.slice(6, 8)) || 0;\n        const ms = Number(time.slice(9, 12)) || 0;\n\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n\n    /**\n     * Converts Date object into TuiTime\n     * @param date\n     */\n    static fromLocalNativeDate(date: Date): TuiTime {\n        return new TuiTime(\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        );\n    }\n\n    /**\n     * Shifts time by hours and minutes\n     */\n    shift({hours = 0, minutes = 0, seconds = 0, ms = 0}: TuiTimeLike): TuiTime {\n        const newMs = (1000 + this.ms + (ms % 1000)) % 1000;\n\n        const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);\n        const secondsToAdd = secondsInMs + seconds;\n        const newSeconds = (60 + this.seconds + (secondsToAdd % 60)) % 60;\n\n        const minutesInSeconds =\n            secondsToAdd < 0\n                ? Math.ceil(secondsToAdd / 60)\n                : Math.floor(secondsToAdd / 60);\n        const minutesToAdd = minutesInSeconds + minutes;\n        const newMinutes = (60 + this.minutes + (minutesToAdd % 60)) % 60;\n\n        const hoursInMinutes =\n            minutesToAdd < 0\n                ? Math.ceil(minutesToAdd / 60)\n                : Math.floor(minutesToAdd / 60);\n        const hoursToAdd = hoursInMinutes + hours;\n        const newHours = (24 + this.hours + (hoursToAdd % 24)) % 24;\n\n        return new TuiTime(newHours, newMinutes, newSeconds, newMs);\n    }\n\n    /**\n     * Converts TuiTime to string\n     */\n    toString(mode?: TuiTimeMode): string {\n        const needAddMs = mode === `HH:MM:SS.MSS` || (!mode && this.ms > 0);\n        const needAddSeconds =\n            needAddMs || mode === `HH:MM:SS` || (!mode && this.seconds > 0);\n\n        return (\n            `${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}` +\n            `${needAddSeconds ? `:${this.formatTime(this.seconds)}` : ``}` +\n            `${needAddMs ? `.${this.formatTime(this.ms, 3)}` : ``}`\n        );\n    }\n\n    valueOf(): number {\n        return this.toAbsoluteMilliseconds();\n    }\n\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint: string): number | string {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n\n    /**\n     * Converts TuiTime to milliseconds\n     */\n    toAbsoluteMilliseconds(): number {\n        return (\n            this.hours * MILLISECONDS_IN_HOUR +\n            this.minutes * MILLISECONDS_IN_MINUTE +\n            this.seconds * 1000 +\n            this.ms\n        );\n    }\n\n    private formatTime(time: number, digits: number = 2): string {\n        return padStart(String(time), digits, `0`);\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;MAEa,YAAY,GAAG,EAAE;MAEjB,mBAAmB,GAAG,IAAI;MAE1B,iBAAiB,GAAG,IAAI;MAExB,cAAc,GAAG,GAAG;MAEpB,OAAO,GAAG,EAAE;MAEZ,SAAS,GAAG,EAAE;MAEd,SAAS,GAAG,GAAG;MAEf,QAAQ,GAAG,EAAE;MAEb,QAAQ,GAAG,KAAK;MAEhB,oBAAoB,GAAG,GAAG,mBAAmB,GAAG,YAAY,GAAG,mBAAmB,GAAG;MAErF,sBAAsB,GAAG,KAAK;MAE9B,iBAAiB,GAAG,GAAG;MAEvB,eAAe,GAAG,GAAG;MAErB,YAAY,GAAG,GAAG;MAElB,sBAAsB,GAAG,sBAAsB,GAAG,kBAAkB;MAEpE,oBAAoB,GAAG,sBAAsB,GAAG,gBAAgB;MAEhE,mBAAmB,GAAG,oBAAoB,GAAG;;AC9B1D;;;MAGa,eAAe,GAAG,IAAI,cAAc,CAAS,0BAA0B,EAAE;IAClF,OAAO,EAAE,MAAM,YAAY;CAC9B,EAAE;AAEH;;;MAGa,qBAAqB,GAAG,IAAI,cAAc,CACnD,gCAAgC,EAChC;IACI,OAAO,EAAE;QACL,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;QAE3C,OAAO,GAAG,UAAU,GAAG,oBAAoB,GAAG,UAAU,EAAE,CAAC;KAC9D;CACJ,EACH;AAEF;;;;;;;MAOa,kBAAkB,GAAG,GAAG;AACrC;;;;MAIa,wBAAwB,GACjC,CAAC,GAAG,kBAAkB,GAAG,oBAAoB,CAAC;;MCnCrC,eAAe,GAAG,IAAI,cAAc,CAC7C,iCAAiC,EACjC;IACI,OAAO,EAAE,MAAM,KAAK;CACvB;;MCLQ,kBAAkB,GAAG,IAAI,cAAc,CAChD,wCAAwC,EACxC;IACI,OAAO,EAAE,MAAM,GAAG;CACrB,EACH;MAEW,mBAAmB,GAAG,CAC/B,UAAkB,EAClB,gBAAwB,KACf,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,gBAAgB;;ACCxE;;;;MAIa,OAAO;IAChB,YAAqB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAC7B,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/C;;;;IAKD,OAAO,WAAW,CAAC,IAAY;QAC3B,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;KAC1E;;;;IAKD,OAAO,UAAU,CAAC,IAAY;QAC1B,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QAE5C,OAAO,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;KACnE;;;;IAKD,OAAO,oBAAoB,CAAC,IAAY;QACpC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;KAChF;;;;;;;;;;IAWD,OAAO,sBAAsB,CAAC,IAAY,EAAE,iBAAyB;QACjE,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtD,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,iBAAiB,CAAC,CAAC;QAC5C,SAAS,CAAC,MAAM,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC;QAEzC,QACI,CAAC,iBAAiB,GAAG,iBAAiB;YAClC,CAAC,IAAI,GAAG,iBAAiB,IAAI,mBAAmB;YAChD,CAAC;YACL,YAAY,EACd;KACL;IAED,OAAO,aAAa,CAAC,IAAa,EAAE,EAAW;QAC3C,OAAO,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KAC9B;;;;IAKS,OAAO,iBAAiB,CAAC,IAAY;QAC3C,OAAO,oBAAoB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KACzD;IAED,IAAI,aAAa;QACb,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;KAC9C;IAED,IAAI,UAAU;QACV,OAAO,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACxC;;;;IAKD,IAAI,iBAAiB;QACjB,OAAO,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClD;;;;;;IAOD,IAAI,mBAAmB;QACnB,OAAO,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;KAC5E;;;;IAKD,UAAU,CAAC,EAAC,IAAI,EAAU;QACtB,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAC3B;;;;IAKD,gBAAgB,CAAC,EAAC,IAAI,EAAU;QAC5B,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;KAC5B;;;;IAKD,QAAQ,CAAC,EAAC,IAAI,EAAU;QACpB,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;KAC7B;;;;IAKD,eAAe,CAAC,EAAC,IAAI,EAAU;QAC3B,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;KAC5B;;;;IAKD,SAAS,CAAC,EAAC,IAAI,EAAU;QACrB,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAC3B;;;;;IAMD,MAAM,CAAC,EAAC,IAAI,GAAG,CAAC,EAAc,EAAE,YAAqB,KAAK;QACtD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE;YACX,IAAI,IAAI,CAAC,CAAC,CAAC;SACd;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEpC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QAElD,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC;KAClC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;;;;;;IAOD,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAY;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC9D;IAED,MAAM;QACF,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;;;ACxKL;;;MAGa,QAAS,SAAQ,OAAO;;;;;IAKjC,YAAY,IAAY,EAAW,KAAa;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;QADmB,UAAK,GAAL,KAAK,CAAQ;QAE5C,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;KACxD;;;;IAKD,OAAO,YAAY,CAAC,IAAY,EAAE,KAAa;QAC3C,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;KACxE;;;;IAKD,OAAO,iBAAiB,CAAC,KAAa,EAAE,UAAmB;QACvD,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEnD,QAAQ,KAAK;YACT;gBACI,OAAO,UAAU,GAAG,EAAE,GAAG,EAAE,CAAC;YAChC,mBAA0B;YAC1B,kBAAyB;YACzB,uBAA8B;YAC9B;gBACI,OAAO,EAAE,CAAC;YACd;gBACI,OAAO,EAAE,CAAC;SACjB;KACJ;;;;;IAMD,OAAO,YAAY;QACf,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAE9B,OAAO,IAAI,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;KACxE;;;;IAKD,OAAO,UAAU;QACb,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAE9B,OAAO,IAAI,QAAQ,CAAC,UAAU,CAAC,cAAc,EAAE,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;KAC9E;IAED,OAAO,aAAa,CAAC,IAAc,EAAE,EAAY;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACjD,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC;QAE3C,OAAO,UAAU,GAAG,YAAY,CAAC;KACpC;;;;IAKS,OAAO,kBAAkB,CAAC,KAAa;QAC7C,OAAO,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC5D;;;;IAKO,OAAO,gBAAgB,CAAC,KAAa;QACzC,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;KAC9E;IAED,IAAI,kBAAkB;QAClB,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;KACnD;;;;;IAMD,IAAI,cAAc;QACd,OAAO,GAAG,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;KAC7D;;;;;;IAOD,IAAI,cAAc;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,IAAI,YAAY,CAAC,CAAC;KACjF;;;;IAKD,IAAI,SAAS;QACT,OAAO,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAClE;;;;;;IAOD,IAAI,oBAAoB;QACpB,IAAI,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAEtC,KAAK,IAAI,YAAY,GAAG,CAAC,EAAE,YAAY,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,YAAY,EAAE,EAAE;YACvE,MAAM,IAAI,QAAQ,CAAC,iBAAiB,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACvE;QAED,OAAO,MAAM,GAAG,YAAY,CAAC;KAChC;;;;IAKD,WAAW,CAAC,OAAiB;QACzB,QACI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;aACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,EACxD;KACL;;;;IAKD,iBAAiB,CAAC,OAAiB;QAC/B,QACI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;aACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,EACzD;KACL;;;;IAKD,SAAS,CAAC,OAAiB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;KACjE;;;;IAKD,gBAAgB,CAAC,OAAiB;QAC9B,QACI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aACtB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,EACzD;KACL;;;;IAKD,UAAU,CAAC,OAAiB;QACxB,QACI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aACtB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,EACxD;KACL;;;;;;;;;IAUD,MAAM,CAAC,EAAC,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAe,EAAE,YAAqB,KAAK;QAClE,IAAI,SAAS,EAAE;YACX,IAAI,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,IAAI,CAAC,CAAC,CAAC;SACf;QAED,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAE7E,OAAO,IAAI,QAAQ,CACf,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,cAAc,CAAC,EACxC,WAAW,GAAG,cAAc,CAC/B,CAAC;KACL;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,cAAc,CAAC;KAC9B;IAED,OAAO;QACH,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,CAAC;KAC7C;IAED,MAAM;QACF,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;KACzD;;;;IAKD,iBAAiB;QACb,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1C;;;;IAKD,eAAe;QACX,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACpD;;;AC/ML;AACA;;;MAGa,MAAO,SAAQ,QAAQ;IAChC,YAAY,IAAY,EAAE,KAAa,EAAW,GAAW;QACzD,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAD2B,QAAG,GAAH,GAAG,CAAQ;QAEzD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;KACzD;;;;IAKD,OAAO,mBAAmB,CAAC,IAAU;QACjC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KAC1E;;;;IAKD,OAAO,iBAAiB,CAAC,IAAU;QAC/B,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACnF;;;;;;;;;IAUD,OAAO,UAAU,CAAC,IAAY,EAAE,KAAa,EAAE,GAAW;QACtD,QACI,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC;YAClC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;YACrB,OAAO,CACH,GAAG,EACH,OAAO,EACP,QAAQ,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAClE,EACH;KACL;;;;;;;;;;;IAYD,OAAO,qBAAqB,CAAC,KAAe,EAAE,GAAW,EAAE,GAAW;QAClE,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACxC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACxC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;QAEhD,IAAI,GAAG,GAAG,GAAG,GAAG,YAAY,GAAG,GAAG,GAAG,KAAK,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAEpE,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE;YACvB,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC;YACvB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;SACpC;QAED,IAAI,GAAG,IAAI,CAAC,EAAE;YACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;YAClC,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC;SAC/B;QAED,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KACnD;;;;IAKD,OAAO,YAAY;QACf,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;QAEjC,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;KACvC;;;;IAKD,OAAO,UAAU;QACb,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,MAAM,IAAI,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;QACzC,MAAM,KAAK,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,GAAG,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;QAEpC,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;KACvC;;;;;;;;;IAUD,OAAO,WAAW,CAAC,IAAY,EAAE,KAAa,EAAE,GAAW;QACvD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,eAAe,GAAG,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC3D,MAAM,aAAa,GAAG,MAAM,CAAC,gBAAgB,CACzC,GAAG,EACH,eAAe,EACf,cAAc,CACjB,CAAC;QAEF,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;KACrE;IAED,OAAO,aAAa,CAAC,IAAY,EAAE,EAAU;QACzC,OAAO,IAAI,CAAC,KAAK,CACb,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE;aACjE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAC5B,CAAC;KACL;IAED,OAAO,kBAAkB,CACrB,IAAY,EACZ,WAAwB,KAAK;QAE7B,SAAS,CAAC,MAAM,CACZ,IAAI,CAAC,MAAM,KAAK,kBAAkB,EAClC,gDAAgD,CACnD,CAAC;QAEF,QAAQ,QAAQ;YACZ,KAAK,KAAK;gBACN,OAAO;oBACH,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;oBACpC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;oBACzC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;iBACvC,CAAC;YAEN,KAAK,KAAK;gBACN,OAAO;oBACH,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;oBACnC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;oBACzC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;iBACxC,CAAC;YAEN,QAAQ;YACR,KAAK,KAAK;gBACN,OAAO;oBACH,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;oBACnC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;oBACzC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;iBACxC,CAAC;SACT;KACJ;;;;;;;;;IAUD,OAAO,cAAc,CAAC,OAAe,EAAE,WAAwB,KAAK;QAChE,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEtE,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;KAC/C;;;;;;;IAQD,OAAO,SAAS,CAAC,kBAA0B;QACvC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAE9E,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YAC5B,MAAM,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;YACrC,MAAM,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;SAC1C;QAED,IACI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;YACtB,CAAC,OAAO,CACJ,GAAG,EACH,OAAO,EACP,QAAQ,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAClE,EACH;YACE,MAAM,IAAI,mBAAmB,CAAC,GAAG,CAAC,CAAC;SACtC;QAED,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;KACvC;IAES,OAAO,gBAAgB,CAAC,GAAW,EAAE,KAAa,EAAE,IAAY;QACtE,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAErD,MAAM,cAAc,GAAG,QAAQ,CAAC,iBAAiB,CAC7C,KAAK,EACL,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAC3B,CAAC;QAEF,OAAO,oBAAoB,CAAC,GAAG,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;KACvD;IAED,IAAI,gBAAgB;QAChB,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;KAC7C;;;;;IAMD,IAAI,YAAY;QACZ,OAAO,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;KAC5D;IAED,IAAI,SAAS;QACT,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAExC,OAAO,SAAS,yBAA8B,SAAS,oBAAyB;KACnF;;;;;;;IAQD,SAAS,CAAC,kBAA2B,IAAI;QACrC,MAAM,SAAS,GAAG,eAAe;cAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC;cACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC,MAAM,EAAE,CAAC;QAExC,OAAO,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;KACxC;;;;IAKD,SAAS,CAAC,OAAe;QACrB,QACI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;aACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,EACrD;KACL;;;;IAKD,eAAe,CAAC,OAAe;QAC3B,QACI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;aACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,EACtD;KACL;;;;IAKD,OAAO,CAAC,OAAe;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG,CAAC;KAC9D;;;;IAKD,cAAc,CAAC,OAAe;QAC1B,QACI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;aACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,EACtD;KACL;;;;IAKD,QAAQ,CAAC,OAAe;QACpB,QACI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;aACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,EACrD;KACL;;;;;;;;IASD,QAAQ,CAAC,GAAkB,EAAE,GAAkB;QAC3C,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACrC,OAAO,GAAG,CAAC;SACd;QAED,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpC,OAAO,GAAG,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;IAcD,MAAM,CACF,EAAC,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAa,EAC1C,YAAqB,KAAK;QAE1B,IAAI,SAAS,EAAE;YACX,IAAI,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,IAAI,CAAC,CAAC,CAAC;YACZ,GAAG,IAAI,CAAC,CAAC,CAAC;SACb;QAED,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7E,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC;QACrD,IAAI,MAAM,GAAG,WAAW,GAAG,cAAc,CAAC;QAE1C,IAAI,IAAI,GACJ,IAAI,CAAC,GAAG,CACJ,IAAI,CAAC,GAAG,EACR,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAChE,GAAG,GAAG,CAAC;QAEZ,OAAO,IAAI,GAAG,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;YACzE,IAAI,IAAI,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAEtE,IAAI,MAAM,wBAA8B;gBACpC,KAAK,EAAE,CAAC;gBACR,MAAM,mBAA0B;aACnC;iBAAM;gBACH,MAAM,EAAE,CAAC;aACZ;SACJ;QAED,OAAO,IAAI,GAAG,OAAO,EAAE;YACnB,IAAI,MAAM,sBAA6B;gBACnC,KAAK,EAAE,CAAC;gBACR,MAAM,qBAA2B;aACpC;iBAAM;gBACH,MAAM,EAAE,CAAC;aACZ;YAED,IAAI,IAAI,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SACzE;QAED,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;KAC1C;;;;IAKD,eAAe,CAAC,UAAuB,EAAE,SAAiB;QACtD,SAAS,CAAC,MAAM,CACZ,SAAS,CAAC,MAAM,KAAK,CAAC,EACtB,2CAA2C,CAC9C,CAAC;QAEF,MAAM,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACjC,MAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;QAEhC,QAAQ,UAAU;YACd,KAAK,KAAK;gBACN,OAAO,GAAG,IAAI,GAAG,SAAS,GAAG,EAAE,GAAG,SAAS,GAAG,EAAE,EAAE,CAAC;YACvD,KAAK,KAAK;gBACN,OAAO,GAAG,EAAE,GAAG,SAAS,GAAG,EAAE,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;YACvD,KAAK,KAAK,CAAC;YACX;gBACI,OAAO,GAAG,EAAE,GAAG,SAAS,GAAG,EAAE,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;SAC1D;KACJ;IAED,QAAQ,CAAC,aAA0B,KAAK,EAAE,YAAoB,GAAG;QAC7D,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;KACtD;IAED,MAAM;QACF,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACvD;;;;IAKD,iBAAiB;QACb,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACpD;;;;IAKD,eAAe;QACX,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KAC9D;;;AC3aL;;;MAGa,aAAa;IACtB,YAAqB,IAAc,EAAW,EAAY;QAArC,SAAI,GAAJ,IAAI,CAAU;QAAW,OAAE,GAAF,EAAE,CAAU;QACtD,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;KAChD;IAED,OAAO,IAAI,CAAC,MAAgB,EAAE,MAAgB;QAC1C,OAAO,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;cACjC,IAAI,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC;cACjC,IAAI,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC3C;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACvC;;;;IAKD,IAAI,mBAAmB;QACnB,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,oBAAoB,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;KACxF;IAED,SAAS,CAAC,OAAsB;QAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;KAC7E;IAED,QAAQ;QACJ,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;KAC1D;;;AC5BL;;;;MAIa,UAAU,GAAG,CAAC,QAAgB,KACvC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE;AAE7C;;;MAGa,WAAY,SAAQ,aAAa;IAC1C,YAAqB,IAAY,EAAW,EAAU;QAClD,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QADC,SAAI,GAAJ,IAAI,CAAQ;QAAW,OAAE,GAAF,EAAE,CAAQ;QAGlD,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;KAC9C;;;;;;;;IASD,OAAO,IAAI,CAAC,IAAY,EAAE,IAAY;QAClC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;cAC3B,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC;cAC3B,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACrC;;;;;;;;IAmBD,OAAO,cAAc,CACjB,WAAmB,EACnB,WAAiC,KAAK;QAEtC,MAAM,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,KAAK,CAAC;QAE3D,MAAM,OAAO,GAAG,MAAM,CAAC,cAAc,CACjC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,kBAAkB,CAAC,EACxC,UAAU,CACb,CAAC;QAEF,IAAI,WAAW,CAAC,MAAM,GAAG,wBAAwB,EAAE;YAC/C,OAAO,IAAI,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC5C;QAED,OAAO,WAAW,CAAC,IAAI,CACnB,OAAO,EACP,MAAM,CAAC,cAAc,CACjB,WAAW,CAAC,KAAK,CAAC,kBAAkB,GAAG,oBAAoB,CAAC,MAAM,CAAC,EACnE,UAAU,CACb,CACJ,CAAC;KACL;IAED,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACrC;;;;;IAMD,IAAI,iBAAiB;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACnD,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAE/C,OAAO,GAAG,IAAI,GAAG,oBAAoB,GAAG,EAAE,EAAE,CAAC;KAChD;;;;;;;IAQD,OAAO,CAAC,OAAoB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;KACzE;;;;;;;;IASD,QAAQ,CAAC,GAAkB,EAAE,GAAkB;QAC3C,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;KACpF;;;;IAKD,oBAAoB,CAAC,UAAuB,EAAE,aAAqB;QAC/D,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAE9D,OAAO,GAAG,IAAI,GAAG,oBAAoB,GAAG,EAAE,EAAE,CAAC;KAChD;IAED,QAAQ,CAAC,aAA0B,KAAK,EAAE,gBAAwB,GAAG;QACjE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAE9D,OAAO,GAAG,IAAI,GAAG,oBAAoB,GAAG,EAAE,EAAE,CAAC;KAChD;;;MC/HQ,aAAa,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE;MAEzD,YAAY,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE;;ACU9D;;;MAGa,OAAO;IAChB,YACa,KAAa,EACb,OAAe,EACf,UAAkB,CAAC,EACnB,KAAa,CAAC;QAHd,UAAK,GAAL,KAAK,CAAQ;QACb,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAY;QACnB,OAAE,GAAF,EAAE,CAAY;QAEvB,SAAS,CAAC,MAAM,CACZ,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAChD,6BAA6B,EAC7B,KAAK,EACL,OAAO,EACP,OAAO,EACP,EAAE,CACL,CAAC;KACL;;;;IAKD,OAAO,WAAW,CACd,KAAa,EACb,OAAe,EACf,UAAkB,CAAC,EACnB,KAAa,CAAC;QAEd,QACI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;YACvB,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC;YAC/B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YACzB,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,eAAe,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YACzB,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,iBAAiB,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YACpB,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EACtB;KACL;;;;IAKD,OAAO,OAAO;QACV,OAAO,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,CAAC,CAAC;KAC7E;;;;IAKD,OAAO,YAAY;QACf,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAExB,OAAO,OAAO,CAAC,wBAAwB,CACnC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,sBAAsB;YAC3D,mBAAmB,CAC1B,CAAC;KACL;;;;IAKD,OAAO,wBAAwB,CAAC,YAAoB;QAChD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QACjD,SAAS,CAAC,MAAM,CACZ,OAAO,CAAC,YAAY,EAAE,CAAC,EAAE,mBAAmB,CAAC,EAC7C,8BAA8B,mBAAmB,2BAA2B,CAC/E,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,oBAAoB,CAAC,CAAC;QAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CACtB,CAAC,YAAY,GAAG,oBAAoB,IAAI,sBAAsB,CACjE,CAAC;QACF,MAAM,OAAO,GACT,IAAI,CAAC,KAAK,CACN,CAAC,CAAC,YAAY,GAAG,oBAAoB,IAAI,sBAAsB,IAAI,IAAI,CAC1E,IAAI,CAAC,CAAC;QACX,MAAM,EAAE,GACJ,IAAI,CAAC,KAAK,CACN,CAAC,CAAC,YAAY,GAAG,oBAAoB,IAAI,sBAAsB,IAAI,IAAI,CAC1E,IAAI,CAAC,CAAC;QAEX,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;KACnD;;;;IAKD,OAAO,UAAU,CAAC,IAAY;QAC1B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAE1C,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;KACnD;;;;;IAMD,OAAO,mBAAmB,CAAC,IAAU;QACjC,OAAO,IAAI,OAAO,CACd,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,eAAe,EAAE,CACzB,CAAC;KACL;;;;IAKD,KAAK,CAAC,EAAC,KAAK,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAc;QAC5D,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;QAEpD,MAAM,WAAW,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1E,MAAM,YAAY,GAAG,WAAW,GAAG,OAAO,CAAC;QAC3C,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QAElE,MAAM,gBAAgB,GAClB,YAAY,GAAG,CAAC;cACV,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;cAC5B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC;QACxC,MAAM,YAAY,GAAG,gBAAgB,GAAG,OAAO,CAAC;QAChD,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QAElE,MAAM,cAAc,GAChB,YAAY,GAAG,CAAC;cACV,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;cAC5B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,cAAc,GAAG,KAAK,CAAC;QAC1C,MAAM,QAAQ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,IAAI,UAAU,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QAE5D,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;KAC/D;;;;IAKD,QAAQ,CAAC,IAAkB;QACvB,MAAM,SAAS,GAAG,IAAI,KAAK,cAAc,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACpE,MAAM,cAAc,GAChB,SAAS,IAAI,IAAI,KAAK,UAAU,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAEpE,QACI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACjE,GAAG,cAAc,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE;YAC9D,GAAG,SAAS,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EACzD;KACL;IAED,OAAO;QACH,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACxC;;;;;;IAOD,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAY;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC9D;;;;IAKD,sBAAsB;QAClB,QACI,IAAI,CAAC,KAAK,GAAG,oBAAoB;YACjC,IAAI,CAAC,OAAO,GAAG,sBAAsB;YACrC,IAAI,CAAC,OAAO,GAAG,IAAI;YACnB,IAAI,CAAC,EAAE,EACT;KACL;IAEO,UAAU,CAAC,IAAY,EAAE,SAAiB,CAAC;QAC/C,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;KAC9C;;;ACnML;;;;;;"}