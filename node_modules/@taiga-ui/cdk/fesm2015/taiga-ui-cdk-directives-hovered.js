import { __decorate } from 'tslib';
import { EventEmitter, Output, HostListener, Directive, NgModule } from '@angular/core';
import { tuiAssertIsHTMLElement } from '@taiga-ui/cdk/classes';
import { shouldCall } from '@tinkoff/ng-event-plugins';

// eslint-disable-next-line @typescript-eslint/naming-convention
function movedOut({ currentTarget, relatedTarget }) {
    if (!relatedTarget) {
        return true;
    }
    tuiAssertIsHTMLElement(currentTarget);
    tuiAssertIsHTMLElement(relatedTarget);
    return !currentTarget.contains(relatedTarget);
}
let TuiHoveredDirective = class TuiHoveredDirective {
    constructor() {
        this.tuiHoveredChange = new EventEmitter();
    }
    onHover() {
        this.tuiHoveredChange.emit(true);
    }
    onOut(_) {
        this.tuiHoveredChange.emit(false);
    }
};
__decorate([
    Output()
], TuiHoveredDirective.prototype, "tuiHoveredChange", void 0);
__decorate([
    HostListener('mouseenter')
], TuiHoveredDirective.prototype, "onHover", null);
__decorate([
    shouldCall(movedOut),
    HostListener('mouseout.init', ['$event']),
    HostListener('mouseout.silent', ['$event'])
], TuiHoveredDirective.prototype, "onOut", null);
TuiHoveredDirective = __decorate([
    Directive({
        selector: '[tuiHoveredChange]',
    })
], TuiHoveredDirective);

let TuiHoveredModule = class TuiHoveredModule {
};
TuiHoveredModule = __decorate([
    NgModule({
        declarations: [TuiHoveredDirective],
        exports: [TuiHoveredDirective],
    })
], TuiHoveredModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiHoveredDirective, TuiHoveredModule, movedOut };
//# sourceMappingURL=taiga-ui-cdk-directives-hovered.js.map
