import { __decorate, __param } from 'tslib';
import { EventEmitter, ElementRef, Inject, Renderer2, Input, Output, HostListener, Directive, NgModule } from '@angular/core';

let TuiCheckedDirective = class TuiCheckedDirective {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.tuiCheckedChange = new EventEmitter();
        this.updateProperty('checked', false);
    }
    set tuiChecked(checked) {
        this.updateProperty('checked', checked || false);
        this.updateProperty('indeterminate', checked === null);
    }
    onChange({ checked }) {
        this.updateProperty('indeterminate', false);
        this.tuiCheckedChange.emit(checked);
    }
    updateProperty(property, value) {
        this.renderer.setProperty(this.element.nativeElement, property, value);
    }
};
TuiCheckedDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
];
__decorate([
    Input()
], TuiCheckedDirective.prototype, "tuiChecked", null);
__decorate([
    Output()
], TuiCheckedDirective.prototype, "tuiCheckedChange", void 0);
__decorate([
    HostListener('change', ['$event.target'])
], TuiCheckedDirective.prototype, "onChange", null);
TuiCheckedDirective = __decorate([
    Directive({
        selector: 'input[tuiChecked], input[tuiCheckedChange]',
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(Renderer2))
], TuiCheckedDirective);

let TuiCheckedModule = class TuiCheckedModule {
};
TuiCheckedModule = __decorate([
    NgModule({
        declarations: [TuiCheckedDirective],
        exports: [TuiCheckedDirective],
    })
], TuiCheckedModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCheckedDirective, TuiCheckedModule };
//# sourceMappingURL=taiga-ui-cdk-directives-checked.js.map
