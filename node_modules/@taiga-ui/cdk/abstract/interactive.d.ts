import { EventEmitter } from '@angular/core';
/**
 * The most basic class for interactive components
 */
export declare abstract class AbstractTuiInteractive {
    private static autoId;
    abstract disabled: boolean;
    abstract focused: boolean;
    private readonly autoIdString;
    pseudoHovered: boolean | null;
    pseudoPressed: boolean | null;
    pseudoFocused: boolean | null;
    /**
     * Determines if component is focusable with keyboard.
     */
    focusable: boolean;
    nativeId: string;
    /**
     * Emits 'true' on focus and 'false' on blur.
     */
    readonly focusedChange: EventEmitter<boolean>;
    /** @deprecated use `tuiPressedChange` directive */
    readonly pressedChange: EventEmitter<boolean>;
    /** @deprecated use `tuiHoveredChange` directive */
    readonly hoveredChange: EventEmitter<boolean>;
    readonly focusVisibleChange: EventEmitter<boolean>;
    /** @deprecated use `tuiHoveredChange` directive */
    hovered: boolean;
    /** @deprecated use `tuiPressedChange` directive */
    pressed: boolean;
    focusVisible: boolean;
    protected constructor();
    get computedDisabled(): boolean;
    /** @deprecated */
    get computedHovered(): boolean;
    /** @deprecated */
    get computedPressed(): boolean;
    get computedFocusable(): boolean;
    get computedFocused(): boolean;
    get computedFocusVisible(): boolean;
    get id(): string;
    /** @deprecated */
    protected updateHovered(hovered: boolean): void;
    /** @deprecated */
    protected updatePressed(pressed: boolean): void;
    protected updateFocused(focused: boolean): void;
    protected updateFocusVisible(focusVisible: boolean): void;
}
