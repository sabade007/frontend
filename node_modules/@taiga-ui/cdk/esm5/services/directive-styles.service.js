import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Inject, Injectable, INJECTOR, Injector, Renderer2, Type, } from '@angular/core';
import { TUI_DEFAULT_RENDERER } from '@taiga-ui/cdk/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk/tokens";
/**
 * Service to use styles with directives
 * @dynamic
 */
var TuiDirectiveStylesService = /** @class */ (function () {
    function TuiDirectiveStylesService(resolver, injector, documentRef, renderer) {
        this.resolver = resolver;
        this.injector = injector;
        this.documentRef = documentRef;
        this.renderer = renderer;
        this.map = new Map();
    }
    TuiDirectiveStylesService.prototype.addComponent = function (component) {
        if (!this.map.has(component)) {
            this.map.set(component, this.resolver.resolveComponentFactory(component).create(this.injector));
        }
    };
    /** @deprecated use components approach
     * TODO: delete in v3.0
     */
    TuiDirectiveStylesService.prototype.addStyle = function (styles, attribute) {
        if (this.documentRef.head.querySelector("style[" + attribute + "]")) {
            return;
        }
        var style = this.renderer.createElement("style");
        this.renderer.setProperty(style, "textContent", styles);
        this.renderer.setAttribute(style, attribute, "");
        this.documentRef.head.appendChild(style);
    };
    TuiDirectiveStylesService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, decorators: [{ type: Inject, args: [ComponentFactoryResolver,] }] },
        { type: Injector, decorators: [{ type: Inject, args: [INJECTOR,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [TUI_DEFAULT_RENDERER,] }] }
    ]; };
    TuiDirectiveStylesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiDirectiveStylesService_Factory() { return new TuiDirectiveStylesService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.TUI_DEFAULT_RENDERER)); }, token: TuiDirectiveStylesService, providedIn: "root" });
    TuiDirectiveStylesService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Inject(ComponentFactoryResolver)),
        __param(1, Inject(INJECTOR)),
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(TUI_DEFAULT_RENDERER))
    ], TuiDirectiveStylesService);
    return TuiDirectiveStylesService;
}());
export { TuiDirectiveStylesService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLXN0eWxlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZS1zdHlsZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFDSCx3QkFBd0IsRUFDeEIsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxJQUFJLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFFMUQ7OztHQUdHO0FBSUg7SUFHSSxtQ0FFcUIsUUFBa0MsRUFDaEIsUUFBa0IsRUFDbEIsV0FBcUIsRUFDVCxRQUFtQjtRQUhqRCxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGdCQUFXLEdBQVgsV0FBVyxDQUFVO1FBQ1QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVByRCxRQUFHLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7SUFRdEQsQ0FBQztJQUVKLGdEQUFZLEdBQVosVUFBYSxTQUF3QjtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQ1IsU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDekUsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNENBQVEsR0FBUixVQUFTLE1BQWMsRUFBRSxTQUFpQjtRQUN0QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFTLFNBQVMsTUFBRyxDQUFDLEVBQUU7WUFDNUQsT0FBTztTQUNWO1FBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDOztnQkE1QjhCLHdCQUF3Qix1QkFEbEQsTUFBTSxTQUFDLHdCQUF3QjtnQkFFYSxRQUFRLHVCQUFwRCxNQUFNLFNBQUMsUUFBUTtnQkFDZ0MsUUFBUSx1QkFBdkQsTUFBTSxTQUFDLFFBQVE7Z0JBQ3lDLFNBQVMsdUJBQWpFLE1BQU0sU0FBQyxvQkFBb0I7OztJQVJ2Qix5QkFBeUI7UUFIckMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQUtPLFdBQUEsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUE7UUFFaEMsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEIsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEIsV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtPQVJ4Qix5QkFBeUIsQ0FrQ3JDO29DQXJERDtDQXFEQyxBQWxDRCxJQWtDQztTQWxDWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgSW5qZWN0LFxuICAgIEluamVjdGFibGUsXG4gICAgSU5KRUNUT1IsXG4gICAgSW5qZWN0b3IsXG4gICAgUmVuZGVyZXIyLFxuICAgIFR5cGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9SRU5ERVJFUn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gdXNlIHN0eWxlcyB3aXRoIGRpcmVjdGl2ZXNcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBgcm9vdGAsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFwID0gbmV3IE1hcDxUeXBlPHVua25vd24+LCB1bmtub3duPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgIEBJbmplY3QoSU5KRUNUT1IpIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChUVUlfREVGQVVMVF9SRU5ERVJFUikgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICkge31cblxuICAgIGFkZENvbXBvbmVudChjb21wb25lbnQ6IFR5cGU8dW5rbm93bj4pOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hcC5oYXMoY29tcG9uZW50KSkge1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgY29tcG9uZW50cyBhcHByb2FjaFxuICAgICAqIFRPRE86IGRlbGV0ZSBpbiB2My4wXG4gICAgICovXG4gICAgYWRkU3R5bGUoc3R5bGVzOiBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50UmVmLmhlYWQucXVlcnlTZWxlY3Rvcihgc3R5bGVbJHthdHRyaWJ1dGV9XWApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudChgc3R5bGVgKTtcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHN0eWxlLCBgdGV4dENvbnRlbnRgLCBzdHlsZXMpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShzdHlsZSwgYXR0cmlidXRlLCBgYCk7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRSZWYuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxufVxuIl19