import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, ElementRef, Inject, Injectable } from '@angular/core';
import { focusVisibleObservable, watch } from '@taiga-ui/cdk/observables';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
/**
 * Service to imitate :focus-visible
 * (https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible)
 * in browsers that do not support it
 * @dynamic
 */
var TuiFocusVisibleService = /** @class */ (function (_super) {
    __extends(TuiFocusVisibleService, _super);
    function TuiFocusVisibleService(_a, changeDetectorRef, destroy$) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (subscriber) { return _this.focusVisible$.subscribe(subscriber); }) || this;
        _this.focusVisible$ = focusVisibleObservable(nativeElement).pipe(watch(changeDetectorRef), takeUntil(destroy$));
        return _this;
    }
    TuiFocusVisibleService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiFocusVisibleService = __decorate([
        Injectable(),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TuiDestroyService))
    ], TuiFocusVisibleService);
    return TuiFocusVisibleService;
}(Observable));
export { TuiFocusVisibleService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImZvY3VzLXZpc2libGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDs7Ozs7R0FLRztBQUVIO0lBQTRDLDBDQUFtQjtJQUczRCxnQ0FDd0IsRUFBb0MsRUFDN0IsaUJBQW9DLEVBQ3BDLFFBQTBCO1lBRmhDLGdDQUFhO1FBRHRDLFlBS0ksa0JBQU0sVUFBQSxVQUFVLElBQUksT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQyxTQU1oRTtRQUpHLEtBQUksQ0FBQyxhQUFhLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUMzRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFDeEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QixDQUFDOztJQUNOLENBQUM7O2dCQVZ3QyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtnQkFDNEIsaUJBQWlCLHVCQUE5RCxNQUFNLFNBQUMsaUJBQWlCO2dCQUNZLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxpQkFBaUI7O0lBTnBCLHNCQUFzQjtRQURsQyxVQUFVLEVBQUU7UUFLSixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0FOckIsc0JBQXNCLENBZWxDO0lBQUQsNkJBQUM7Q0FBQSxBQWZELENBQTRDLFVBQVUsR0FlckQ7U0FmWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtmb2N1c1Zpc2libGVPYnNlcnZhYmxlLCB3YXRjaH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnLi9kZXN0cm95LnNlcnZpY2UnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gaW1pdGF0ZSA6Zm9jdXMtdmlzaWJsZVxuICogKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy86Zm9jdXMtdmlzaWJsZSlcbiAqIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXRcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmb2N1c1Zpc2libGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHZvaWQ+LFxuICAgICkge1xuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHRoaXMuZm9jdXNWaXNpYmxlJC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuXG4gICAgICAgIHRoaXMuZm9jdXNWaXNpYmxlJCA9IGZvY3VzVmlzaWJsZU9ic2VydmFibGUobmF0aXZlRWxlbWVudCkucGlwZShcbiAgICAgICAgICAgIHdhdGNoKGNoYW5nZURldGVjdG9yUmVmKSxcbiAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19