import { __decorate, __extends, __param, __read } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ElementRef, Inject, Injectable } from '@angular/core';
import { typedFromEvent } from '@taiga-ui/cdk/observables';
import { merge, Observable } from 'rxjs';
import { filter, map, pairwise, repeat, switchMapTo, takeUntil } from 'rxjs/operators';
/**
 * @dynamic
 */
var TuiPanService = /** @class */ (function (_super) {
    __extends(TuiPanService, _super);
    function TuiPanService(_a, documentRef) {
        var nativeElement = _a.nativeElement;
        return _super.call(this, function (subscriber) {
            merge(typedFromEvent(nativeElement, "touchstart", { passive: true }), typedFromEvent(nativeElement, "mousedown"))
                .pipe(switchMapTo(merge(typedFromEvent(documentRef, "touchmove", {
                passive: true,
            }).pipe(filter(function (_a) {
                var touches = _a.touches;
                return touches.length < 2;
            }), map(function (_a) {
                var touches = _a.touches;
                return touches[0];
            })), typedFromEvent(documentRef, "mousemove"))), pairwise(), map(function (_a) {
                var _b = __read(_a, 2), first = _b[0], second = _b[1];
                var deltaX = second.clientX - first.clientX;
                var deltaY = second.clientY - first.clientY;
                return [deltaX, deltaY];
            }), 
            // eslint-disable-next-line rxjs/no-unsafe-takeuntil
            takeUntil(merge(typedFromEvent(documentRef, "touchend"), typedFromEvent(documentRef, "mouseup"))), repeat())
                .subscribe(subscriber);
        }) || this;
    }
    TuiPanService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    TuiPanService = __decorate([
        Injectable(),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(DOCUMENT))
    ], TuiPanService);
    return TuiPanService;
}(Observable));
export { TuiPanService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsicGFuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXJGOztHQUVHO0FBRUg7SUFBbUMsaUNBQXFDO0lBQ3BFLHVCQUN3QixFQUFvQyxFQUN0QyxXQUFxQjtZQURsQixnQ0FBYTtlQUdsQyxrQkFBTSxVQUFBLFVBQVU7WUFDWixLQUFLLENBQ0QsY0FBYyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsRUFDNUQsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FDN0M7aUJBQ0ksSUFBSSxDQUNELFdBQVcsQ0FDUCxLQUFLLENBQ0QsY0FBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUU7Z0JBQ3JDLE9BQU8sRUFBRSxJQUFJO2FBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQ0gsTUFBTSxDQUFDLFVBQUMsRUFBUztvQkFBUixvQkFBTztnQkFBTSxPQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUFsQixDQUFrQixDQUFDLEVBQ3pDLEdBQUcsQ0FBQyxVQUFDLEVBQVM7b0JBQVIsb0JBQU87Z0JBQU0sT0FBQSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQVYsQ0FBVSxDQUFDLENBQ2pDLEVBQ0QsY0FBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FDM0MsQ0FDSixFQUNELFFBQVEsRUFBRSxFQUNWLEdBQUcsQ0FBQyxVQUFDLEVBQWU7b0JBQWYsa0JBQWUsRUFBZCxhQUFLLEVBQUUsY0FBTTtnQkFDZixJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQzlDLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztnQkFFOUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQXFCLENBQUM7WUFDaEQsQ0FBQyxDQUFDO1lBQ0Ysb0RBQW9EO1lBQ3BELFNBQVMsQ0FDTCxLQUFLLENBQ0QsY0FBYyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsRUFDdkMsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FDekMsQ0FDSixFQUNELE1BQU0sRUFBRSxDQUNYO2lCQUNBLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUM7SUFDTixDQUFDOztnQkF0Q3dDLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxVQUFVO2dCQUNhLFFBQVEsdUJBQXRDLE1BQU0sU0FBQyxRQUFROztJQUhYLGFBQWE7UUFEekIsVUFBVSxFQUFFO1FBR0osV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7T0FIWixhQUFhLENBeUN6QjtJQUFELG9CQUFDO0NBQUEsQUF6Q0QsQ0FBbUMsVUFBVSxHQXlDNUM7U0F6Q1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcCwgcGFpcndpc2UsIHJlcGVhdCwgc3dpdGNoTWFwVG8sIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlQYW5TZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxyZWFkb25seSBbbnVtYmVyLCBudW1iZXJdPiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4ge1xuICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgYHRvdWNoc3RhcnRgLCB7cGFzc2l2ZTogdHJ1ZX0pLFxuICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGBtb3VzZWRvd25gKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwVG8oXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgYHRvdWNobW92ZWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoKHt0b3VjaGVzfSkgPT4gdG91Y2hlcy5sZW5ndGggPCAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwKCh7dG91Y2hlc30pID0+IHRvdWNoZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsIGBtb3VzZW1vdmVgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHBhaXJ3aXNlKCksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoW2ZpcnN0LCBzZWNvbmRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVggPSBzZWNvbmQuY2xpZW50WCAtIGZpcnN0LmNsaWVudFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVkgPSBzZWNvbmQuY2xpZW50WSAtIGZpcnN0LmNsaWVudFk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZGVsdGFYLCBkZWx0YVldIGFzIFtudW1iZXIsIG51bWJlcl07XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcnhqcy9uby11bnNhZmUtdGFrZXVudGlsXG4gICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbChcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCBgdG91Y2hlbmRgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNldXBgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdCgpLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=