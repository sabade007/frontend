import { __decorate, __param, __read } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { ANIMATION_FRAME, PERFORMANCE } from '@ng-web-apis/common';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { tuiEaseInOutQuad } from '@taiga-ui/cdk/utils/miscellaneous';
import { defer, Observable, of, timer } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ng-web-apis/common";
var SCROLL_TIME = 300;
// @dynamic
var TuiScrollService = /** @class */ (function () {
    function TuiScrollService(performanceRef, animationFrame$) {
        this.performanceRef = performanceRef;
        this.animationFrame$ = animationFrame$;
    }
    TuiScrollService.prototype.scroll$ = function (elementOrWindow, scrollTop, scrollLeft, duration) {
        var _this = this;
        if (scrollLeft === void 0) { scrollLeft = getX(elementOrWindow); }
        if (duration === void 0) { duration = SCROLL_TIME; }
        tuiAssert.assert(duration >= 0, "Duration cannot be negative");
        tuiAssert.assert(scrollTop >= 0, "scrollTop cannot be negative");
        tuiAssert.assert(scrollLeft >= 0, "scrollLeft cannot be negative");
        var initialTop = getY(elementOrWindow);
        var initialLeft = getX(elementOrWindow);
        var deltaTop = scrollTop - initialTop;
        var deltaLeft = scrollLeft - initialLeft;
        var observable = !duration
            ? of([scrollTop, scrollLeft])
            : defer(function () { return of(_this.performanceRef.now()); }).pipe(switchMap(function (start) { return _this.animationFrame$.pipe(map(function (now) { return now - start; })); }), map(function (elapsed) { return tuiEaseInOutQuad(tuiClamp(elapsed / duration, 0, 1)); }), map(function (percent) {
                return [
                    initialTop + deltaTop * percent,
                    initialLeft + deltaLeft * percent,
                ];
            }), takeUntil(timer(duration)));
        return observable.pipe(tap(function (_a) {
            var _b = __read(_a, 2), scrollTop = _b[0], scrollLeft = _b[1];
            var _c;
            (_c = elementOrWindow.scrollTo) === null || _c === void 0 ? void 0 : _c.call(elementOrWindow, scrollLeft, scrollTop);
        }));
    };
    TuiScrollService.ctorParameters = function () { return [
        { type: Performance, decorators: [{ type: Inject, args: [PERFORMANCE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] }
    ]; };
    TuiScrollService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiScrollService_Factory() { return new TuiScrollService(i0.ɵɵinject(i1.PERFORMANCE), i0.ɵɵinject(i1.ANIMATION_FRAME)); }, token: TuiScrollService, providedIn: "root" });
    TuiScrollService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Inject(PERFORMANCE)),
        __param(1, Inject(ANIMATION_FRAME))
    ], TuiScrollService);
    return TuiScrollService;
}());
export { TuiScrollService };
function getX(elementOrWindow) {
    return "scrollX" in elementOrWindow
        ? elementOrWindow.scrollX
        : elementOrWindow.scrollLeft;
}
function getY(elementOrWindow) {
    return "scrollY" in elementOrWindow
        ? elementOrWindow.scrollY
        : elementOrWindow.scrollTop;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsic2Nyb2xsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUUsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRSxPQUFPLEVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRTlELElBQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUV4QixXQUFXO0FBSVg7SUFDSSwwQkFDMEMsY0FBMkIsRUFDdkIsZUFBbUM7UUFEdkMsbUJBQWMsR0FBZCxjQUFjLENBQWE7UUFDdkIsb0JBQWUsR0FBZixlQUFlLENBQW9CO0lBQzlFLENBQUM7SUFFSixrQ0FBTyxHQUFQLFVBQ0ksZUFBaUMsRUFDakMsU0FBaUIsRUFDakIsVUFBMEMsRUFDMUMsUUFBOEI7UUFKbEMsaUJBa0NDO1FBL0JHLDJCQUFBLEVBQUEsYUFBcUIsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUMxQyx5QkFBQSxFQUFBLHNCQUE4QjtRQUU5QixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsNkJBQTZCLENBQUMsQ0FBQztRQUMvRCxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLEVBQUUsOEJBQThCLENBQUMsQ0FBQztRQUNqRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUUsK0JBQStCLENBQUMsQ0FBQztRQUVuRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekMsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFDLElBQU0sUUFBUSxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7UUFDeEMsSUFBTSxTQUFTLEdBQUcsVUFBVSxHQUFHLFdBQVcsQ0FBQztRQUMzQyxJQUFNLFVBQVUsR0FBRyxDQUFDLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQXFCLENBQUM7WUFDakQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFNLE9BQUEsRUFBRSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLElBQUksQ0FDM0MsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxHQUFHLEtBQUssRUFBWCxDQUFXLENBQUMsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLEVBQ3RFLEdBQUcsQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFwRCxDQUFvRCxDQUFDLEVBQ3BFLEdBQUcsQ0FDQyxVQUFBLE9BQU87Z0JBQ0gsT0FBQTtvQkFDSSxVQUFVLEdBQUcsUUFBUSxHQUFHLE9BQU87b0JBQy9CLFdBQVcsR0FBRyxTQUFTLEdBQUcsT0FBTztpQkFDaEI7WUFIckIsQ0FHcUIsQ0FDNUIsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQzdCLENBQUM7UUFFUixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsQ0FBQyxVQUFDLEVBQXVCO2dCQUF2QixrQkFBdUIsRUFBdEIsaUJBQVMsRUFBRSxrQkFBVTs7WUFDdkIsTUFBQSxlQUFlLENBQUMsUUFBUSwrQ0FBeEIsZUFBZSxFQUFZLFVBQVUsRUFBRSxTQUFTLEVBQUU7UUFDdEQsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7O2dCQXRDeUQsV0FBVyx1QkFBaEUsTUFBTSxTQUFDLFdBQVc7Z0JBQ3dDLFVBQVUsdUJBQXBFLE1BQU0sU0FBQyxlQUFlOzs7SUFIbEIsZ0JBQWdCO1FBSDVCLFVBQVUsQ0FBQztZQUNSLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUM7UUFHTyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNuQixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtPQUhuQixnQkFBZ0IsQ0F5QzVCOzJCQXZERDtDQXVEQyxBQXpDRCxJQXlDQztTQXpDWSxnQkFBZ0I7QUEyQzdCLFNBQVMsSUFBSSxDQUFDLGVBQWlDO0lBQzNDLE9BQU8sU0FBUyxJQUFJLGVBQWU7UUFDL0IsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPO1FBQ3pCLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO0FBQ3JDLENBQUM7QUFFRCxTQUFTLElBQUksQ0FBQyxlQUFpQztJQUMzQyxPQUFPLFNBQVMsSUFBSSxlQUFlO1FBQy9CLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTztRQUN6QixDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUUsIFBFUkZPUk1BTkNFfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHt0dWlDbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcbmltcG9ydCB7dHVpRWFzZUluT3V0UXVhZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7ZGVmZXIsIE9ic2VydmFibGUsIG9mLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBTQ1JPTExfVElNRSA9IDMwMDtcblxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBgcm9vdGAsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNjcm9sbFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFBFUkZPUk1BTkNFKSBwcml2YXRlIHJlYWRvbmx5IHBlcmZvcm1hbmNlUmVmOiBQZXJmb3JtYW5jZSxcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uRnJhbWUkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgKSB7fVxuXG4gICAgc2Nyb2xsJChcbiAgICAgICAgZWxlbWVudE9yV2luZG93OiBFbGVtZW50IHwgV2luZG93LFxuICAgICAgICBzY3JvbGxUb3A6IG51bWJlcixcbiAgICAgICAgc2Nyb2xsTGVmdDogbnVtYmVyID0gZ2V0WChlbGVtZW50T3JXaW5kb3cpLFxuICAgICAgICBkdXJhdGlvbjogbnVtYmVyID0gU0NST0xMX1RJTUUsXG4gICAgKTogT2JzZXJ2YWJsZTxbbnVtYmVyLCBudW1iZXJdPiB7XG4gICAgICAgIHR1aUFzc2VydC5hc3NlcnQoZHVyYXRpb24gPj0gMCwgYER1cmF0aW9uIGNhbm5vdCBiZSBuZWdhdGl2ZWApO1xuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KHNjcm9sbFRvcCA+PSAwLCBgc2Nyb2xsVG9wIGNhbm5vdCBiZSBuZWdhdGl2ZWApO1xuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KHNjcm9sbExlZnQgPj0gMCwgYHNjcm9sbExlZnQgY2Fubm90IGJlIG5lZ2F0aXZlYCk7XG5cbiAgICAgICAgY29uc3QgaW5pdGlhbFRvcCA9IGdldFkoZWxlbWVudE9yV2luZG93KTtcbiAgICAgICAgY29uc3QgaW5pdGlhbExlZnQgPSBnZXRYKGVsZW1lbnRPcldpbmRvdyk7XG4gICAgICAgIGNvbnN0IGRlbHRhVG9wID0gc2Nyb2xsVG9wIC0gaW5pdGlhbFRvcDtcbiAgICAgICAgY29uc3QgZGVsdGFMZWZ0ID0gc2Nyb2xsTGVmdCAtIGluaXRpYWxMZWZ0O1xuICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gIWR1cmF0aW9uXG4gICAgICAgICAgICA/IG9mKFtzY3JvbGxUb3AsIHNjcm9sbExlZnRdIGFzIFtudW1iZXIsIG51bWJlcl0pXG4gICAgICAgICAgICA6IGRlZmVyKCgpID0+IG9mKHRoaXMucGVyZm9ybWFuY2VSZWYubm93KCkpKS5waXBlKFxuICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKHN0YXJ0ID0+IHRoaXMuYW5pbWF0aW9uRnJhbWUkLnBpcGUobWFwKG5vdyA9PiBub3cgLSBzdGFydCkpKSxcbiAgICAgICAgICAgICAgICAgIG1hcChlbGFwc2VkID0+IHR1aUVhc2VJbk91dFF1YWQodHVpQ2xhbXAoZWxhcHNlZCAvIGR1cmF0aW9uLCAwLCAxKSkpLFxuICAgICAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRvcCArIGRlbHRhVG9wICogcGVyY2VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxMZWZ0ICsgZGVsdGFMZWZ0ICogcGVyY2VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSBhcyBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aW1lcihkdXJhdGlvbikpLFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnBpcGUoXG4gICAgICAgICAgICB0YXAoKFtzY3JvbGxUb3AsIHNjcm9sbExlZnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudE9yV2luZG93LnNjcm9sbFRvPy4oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0WChlbGVtZW50T3JXaW5kb3c6IEVsZW1lbnQgfCBXaW5kb3cpOiBudW1iZXIge1xuICAgIHJldHVybiBgc2Nyb2xsWGAgaW4gZWxlbWVudE9yV2luZG93XG4gICAgICAgID8gZWxlbWVudE9yV2luZG93LnNjcm9sbFhcbiAgICAgICAgOiBlbGVtZW50T3JXaW5kb3cuc2Nyb2xsTGVmdDtcbn1cblxuZnVuY3Rpb24gZ2V0WShlbGVtZW50T3JXaW5kb3c6IEVsZW1lbnQgfCBXaW5kb3cpOiBudW1iZXIge1xuICAgIHJldHVybiBgc2Nyb2xsWWAgaW4gZWxlbWVudE9yV2luZG93XG4gICAgICAgID8gZWxlbWVudE9yV2luZG93LnNjcm9sbFlcbiAgICAgICAgOiBlbGVtZW50T3JXaW5kb3cuc2Nyb2xsVG9wO1xufVxuIl19