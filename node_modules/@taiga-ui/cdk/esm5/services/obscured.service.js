import { __decorate, __extends, __param } from "tslib";
import { ElementRef, Inject, Injectable, NgZone, Self } from '@angular/core';
import { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';
import { POLLING_TIME } from '@taiga-ui/cdk/constants';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { getElementObscurers } from '@taiga-ui/cdk/utils/dom';
import { fromEvent, merge, Observable } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, takeUntil, throttleTime, } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
import { TuiParentsScrollService } from './parents-scroll.service';
// @bad TODO: Consider Intersection Observer with fallback to current implementation
/**
 * Service that monitors element visibility by subscribing to scrolls
 * and polling with set interval, returns either null or an array
 * of elements that overlap given element edges
 */
// Ambient type cannot be used without dynamic https://github.com/angular/angular/issues/23395
// @dynamic
var TuiObscuredService = /** @class */ (function (_super) {
    __extends(TuiObscuredService, _super);
    function TuiObscuredService(parentsScroll$, _a, ngZone, windowRef, destroy$, animationFrame$) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (subscriber) { return _this.obscured$.subscribe(subscriber); }) || this;
        _this.obscured$ = merge(
        // delay is added so it will not interfere with other listeners
        merge(parentsScroll$, fromEvent(windowRef, "resize")).pipe(delay(0)), animationFrame$.pipe(throttleTime(POLLING_TIME))).pipe(map(function () { return getElementObscurers(nativeElement); }), startWith(null), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$));
        return _this;
    }
    TuiObscuredService.ctorParameters = function () { return [
        { type: TuiParentsScrollService, decorators: [{ type: Inject, args: [TuiParentsScrollService,] }, { type: Self }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] }
    ]; };
    TuiObscuredService = __decorate([
        Injectable(),
        __param(0, Inject(TuiParentsScrollService)),
        __param(0, Self()),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(NgZone)),
        __param(3, Inject(WINDOW)),
        __param(4, Inject(TuiDestroyService)),
        __param(5, Inject(ANIMATION_FRAME))
    ], TuiObscuredService);
    return TuiObscuredService;
}(Observable));
export { TuiObscuredService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvc2VydmljZXMvIiwic291cmNlcyI6WyJvYnNjdXJlZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsZUFBZSxFQUFFLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUNILEtBQUssRUFDTCxvQkFBb0IsRUFDcEIsR0FBRyxFQUNILFNBQVMsRUFDVCxTQUFTLEVBQ1QsWUFBWSxHQUNmLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFakUsb0ZBQW9GO0FBQ3BGOzs7O0dBSUc7QUFDSCw4RkFBOEY7QUFDOUYsV0FBVztBQUVYO0lBQXdDLHNDQUFxQztJQUd6RSw0QkFHSSxjQUF1QyxFQUNuQixFQUFvQyxFQUN4QyxNQUFjLEVBQ2QsU0FBaUIsRUFDTixRQUEwQixFQUM1QixlQUFtQztZQUp2QyxnQ0FBYTtRQUp0QyxZQVVJLGtCQUFNLFVBQUEsVUFBVSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQXBDLENBQW9DLENBQUMsU0FhNUQ7UUFYRyxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUs7UUFDbEIsK0RBQStEO1FBQy9ELEtBQUssQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEUsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDbkQsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxFQUM3QyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2Ysb0JBQW9CLEVBQUUsRUFDdEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQzs7SUFDTixDQUFDOztnQkFwQm1CLHVCQUF1Qix1QkFGdEMsTUFBTSxTQUFDLHVCQUF1QixjQUM5QixJQUFJO2dCQUVnQyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtnQkFDTSxNQUFNLHVCQUE3QixNQUFNLFNBQUMsTUFBTTtnQkFDYSxNQUFNLHVCQUFoQyxNQUFNLFNBQUMsTUFBTTtnQkFDdUIsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjtnQkFDaUIsVUFBVSx1QkFBbkQsTUFBTSxTQUFDLGVBQWU7O0lBWGxCLGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7UUFLSixXQUFBLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQy9CLFdBQUEsSUFBSSxFQUFFLENBQUE7UUFFTixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNkLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2QsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtPQVhuQixrQkFBa0IsQ0EyQjlCO0lBQUQseUJBQUM7Q0FBQSxBQTNCRCxDQUF3QyxVQUFVLEdBMkJqRDtTQTNCWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgTmdab25lLCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QU5JTUFUSU9OX0ZSQU1FLCBXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtQT0xMSU5HX1RJTUV9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7dHVpWm9uZU9wdGltaXplZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge2dldEVsZW1lbnRPYnNjdXJlcnN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7ZnJvbUV2ZW50LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRlbGF5LFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIG1hcCxcbiAgICBzdGFydFdpdGgsXG4gICAgdGFrZVVudGlsLFxuICAgIHRocm90dGxlVGltZSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICcuL2Rlc3Ryb3kuc2VydmljZSc7XG5pbXBvcnQge1R1aVBhcmVudHNTY3JvbGxTZXJ2aWNlfSBmcm9tICcuL3BhcmVudHMtc2Nyb2xsLnNlcnZpY2UnO1xuXG4vLyBAYmFkIFRPRE86IENvbnNpZGVyIEludGVyc2VjdGlvbiBPYnNlcnZlciB3aXRoIGZhbGxiYWNrIHRvIGN1cnJlbnQgaW1wbGVtZW50YXRpb25cbi8qKlxuICogU2VydmljZSB0aGF0IG1vbml0b3JzIGVsZW1lbnQgdmlzaWJpbGl0eSBieSBzdWJzY3JpYmluZyB0byBzY3JvbGxzXG4gKiBhbmQgcG9sbGluZyB3aXRoIHNldCBpbnRlcnZhbCwgcmV0dXJucyBlaXRoZXIgbnVsbCBvciBhbiBhcnJheVxuICogb2YgZWxlbWVudHMgdGhhdCBvdmVybGFwIGdpdmVuIGVsZW1lbnQgZWRnZXNcbiAqL1xuLy8gQW1iaWVudCB0eXBlIGNhbm5vdCBiZSB1c2VkIHdpdGhvdXQgZHluYW1pYyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMzM5NVxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlPYnNjdXJlZFNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPHJlYWRvbmx5IEVsZW1lbnRbXSB8IG51bGw+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9ic2N1cmVkJDogT2JzZXJ2YWJsZTxyZWFkb25seSBFbGVtZW50W10gfCBudWxsPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVBhcmVudHNTY3JvbGxTZXJ2aWNlKVxuICAgICAgICBAU2VsZigpXG4gICAgICAgIHBhcmVudHNTY3JvbGwkOiBUdWlQYXJlbnRzU2Nyb2xsU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChXSU5ET1cpIHdpbmRvd1JlZjogV2luZG93LFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIGFuaW1hdGlvbkZyYW1lJDogT2JzZXJ2YWJsZTxudW1iZXI+LFxuICAgICkge1xuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHRoaXMub2JzY3VyZWQkLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG5cbiAgICAgICAgdGhpcy5vYnNjdXJlZCQgPSBtZXJnZShcbiAgICAgICAgICAgIC8vIGRlbGF5IGlzIGFkZGVkIHNvIGl0IHdpbGwgbm90IGludGVyZmVyZSB3aXRoIG90aGVyIGxpc3RlbmVyc1xuICAgICAgICAgICAgbWVyZ2UocGFyZW50c1Njcm9sbCQsIGZyb21FdmVudCh3aW5kb3dSZWYsIGByZXNpemVgKSkucGlwZShkZWxheSgwKSksXG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZSQucGlwZSh0aHJvdHRsZVRpbWUoUE9MTElOR19USU1FKSksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIG1hcCgoKSA9PiBnZXRFbGVtZW50T2JzY3VyZXJzKG5hdGl2ZUVsZW1lbnQpKSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB0dWlab25lT3B0aW1pemVkKG5nWm9uZSksXG4gICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==