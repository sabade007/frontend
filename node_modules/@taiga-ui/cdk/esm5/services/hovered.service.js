import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, NgZone } from '@angular/core';
import { tuiZoneOptimized, typedFromEvent } from '@taiga-ui/cdk/observables';
import { getActualTarget } from '@taiga-ui/cdk/utils/dom';
import { merge } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMap, take, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/** @deprecated TODO remove in v3.0 */
// @dynamic
var TuiHoveredService = /** @class */ (function () {
    function TuiHoveredService(documentRef, ngZone) {
        this.ngZone = ngZone;
        this.documentEvents$ = merge(typedFromEvent(documentRef, "mousemove"), typedFromEvent(documentRef, "touchstart", { capture: true }));
    }
    TuiHoveredService.prototype.createHovered$ = function (target, options) {
        var _this = this;
        if (options === void 0) { options = { passive: true }; }
        return merge(typedFromEvent(target, "mouseenter", options), typedFromEvent(target, "touchstart", options)).pipe(switchMap(function () {
            return merge(typedFromEvent(target, "mouseleave", options), _this.documentEvents$.pipe(filter(function (event) { return !target.contains(getActualTarget(event)); }), tuiZoneOptimized(_this.ngZone), take(1))).pipe(mapTo(false), startWith(true));
        }), distinctUntilChanged());
    };
    TuiHoveredService.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
    ]; };
    TuiHoveredService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiHoveredService_Factory() { return new TuiHoveredService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone)); }, token: TuiHoveredService, providedIn: "root" });
    TuiHoveredService = __decorate([
        Injectable({
            providedIn: "root",
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(NgZone))
    ], TuiHoveredService);
    return TuiHoveredService;
}());
export { TuiHoveredService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXJlZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImhvdmVyZWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0UsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsSUFBSSxHQUNQLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV4QixzQ0FBc0M7QUFDdEMsV0FBVztBQUlYO0lBR0ksMkJBQ3NCLFdBQXFCLEVBQ04sTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQ3hCLGNBQWMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEVBQ3hDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQzdELENBQUM7SUFDTixDQUFDO0lBRUQsMENBQWMsR0FBZCxVQUNJLE1BQWUsRUFDZixPQUFrRDtRQUZ0RCxpQkFvQkM7UUFsQkcsd0JBQUEsRUFBQSxZQUFvQyxPQUFPLEVBQUUsSUFBSSxFQUFDO1FBRWxELE9BQU8sS0FBSyxDQUNSLGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxFQUM3QyxjQUFjLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FDaEQsQ0FBQyxJQUFJLENBQ0YsU0FBUyxDQUFDO1lBQ04sT0FBQSxLQUFLLENBQ0QsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQzdDLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUNyQixNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQXhDLENBQXdDLENBQUMsRUFDekQsZ0JBQWdCLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxFQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1YsQ0FDSixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBUHJDLENBT3FDLENBQ3hDLEVBQ0Qsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztJQUNOLENBQUM7O2dCQTdCa0MsUUFBUSx1QkFBdEMsTUFBTSxTQUFDLFFBQVE7Z0JBQ3lCLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxNQUFNOzs7SUFMVCxpQkFBaUI7UUFIN0IsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQUtPLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO09BTFYsaUJBQWlCLENBa0M3Qjs0QkFyREQ7Q0FxREMsQUFsQ0QsSUFrQ0M7U0FsQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlab25lT3B0aW1pemVkLCB0eXBlZEZyb21FdmVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge2dldEFjdHVhbFRhcmdldH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBtYXBUbyxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwLFxuICAgIHRha2UsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqIEBkZXByZWNhdGVkIFRPRE8gcmVtb3ZlIGluIHYzLjAgKi9cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlIb3ZlcmVkU2VydmljZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudEV2ZW50cyQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIHByaXZhdGUgcmVhZG9ubHkgbmdab25lOiBOZ1pvbmUsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRFdmVudHMkID0gbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNlbW92ZWApLFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsIGB0b3VjaHN0YXJ0YCwge2NhcHR1cmU6IHRydWV9KSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjcmVhdGVIb3ZlcmVkJChcbiAgICAgICAgdGFyZ2V0OiBFbGVtZW50LFxuICAgICAgICBvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyA9IHtwYXNzaXZlOiB0cnVlfSxcbiAgICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQodGFyZ2V0LCBgbW91c2VlbnRlcmAsIG9wdGlvbnMpLFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQodGFyZ2V0LCBgdG91Y2hzdGFydGAsIG9wdGlvbnMpLFxuICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT5cbiAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQodGFyZ2V0LCBgbW91c2VsZWF2ZWAsIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50RXZlbnRzJC5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKGV2ZW50ID0+ICF0YXJnZXQuY29udGFpbnMoZ2V0QWN0dWFsVGFyZ2V0KGV2ZW50KSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHVpWm9uZU9wdGltaXplZCh0aGlzLm5nWm9uZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICkucGlwZShtYXBUbyhmYWxzZSksIHN0YXJ0V2l0aCh0cnVlKSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=