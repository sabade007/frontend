import { __read } from "tslib";
import { DOCUMENT } from '@angular/common';
import { inject, InjectionToken } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { typedFromEvent } from '@taiga-ui/cdk/observables';
import { getActualTarget, getDocumentOrShadowRoot } from '@taiga-ui/cdk/utils';
import { merge, of, timer } from 'rxjs';
import { distinctUntilChanged, filter, map, mapTo, repeatWhen, share, startWith, switchMap, take, takeUntil, withLatestFrom, } from 'rxjs/operators';
import { TUI_REMOVED_ELEMENT } from './removed-element';
export var TUI_ACTIVE_ELEMENT = new InjectionToken("Active element on the document for ActiveZone", {
    factory: function () {
        var removedElement$ = inject(TUI_REMOVED_ELEMENT);
        var windowRef = inject(WINDOW);
        var documentRef = inject(DOCUMENT);
        var focusout$ = typedFromEvent(windowRef, "focusout");
        var focusin$ = typedFromEvent(windowRef, "focusin");
        var blur$ = typedFromEvent(windowRef, "blur");
        var mousedown$ = typedFromEvent(windowRef, "mousedown");
        var mouseup$ = typedFromEvent(windowRef, "mouseup");
        return merge(focusout$.pipe(
        // eslint-disable-next-line rxjs/no-unsafe-takeuntil
        takeUntil(mousedown$), 
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(function () { return mouseup$; }), withLatestFrom(removedElement$), filter(function (_a) {
            var _b = __read(_a, 2), event = _b[0], removedElement = _b[1];
            return isValidFocusout(getActualTarget(event), removedElement);
        }), map(function (_a) {
            var _b = __read(_a, 1), relatedTarget = _b[0].relatedTarget;
            return relatedTarget;
        })), blur$.pipe(map(function () { return documentRef.activeElement; }), filter(function (element) { return !!element && element.matches("iframe"); })), focusin$.pipe(switchMap(function (event) {
            var target = getActualTarget(event);
            var root = getDocumentOrShadowRoot(target);
            return root === documentRef
                ? of(target)
                : shadowRootActiveElement(root).pipe(startWith(target));
        })), mousedown$.pipe(switchMap(function (event) {
            return !documentRef.activeElement ||
                documentRef.activeElement === documentRef.body
                ? of(getActualTarget(event))
                : focusout$.pipe(take(1), mapTo(getActualTarget(event)), takeUntil(timer(0)));
        }))).pipe(distinctUntilChanged(), share());
    },
});
// Checks if focusout event should be considered leaving active zone
function isValidFocusout(target, removedElement) {
    if (removedElement === void 0) { removedElement = null; }
    return (
    // Not due to switching tabs/going to DevTools
    getDocumentOrShadowRoot(target).activeElement !== target &&
        // Not due to button/input becoming disabled
        !target.disabled &&
        // Not due to element being removed from DOM
        !(removedElement === null || removedElement === void 0 ? void 0 : removedElement.contains(target)));
}
function shadowRootActiveElement(root) {
    return merge(typedFromEvent(root, "focusin").pipe(map(function (_a) {
        var target = _a.target;
        return target;
    })), typedFromEvent(root, "focusout").pipe(filter(function (_a) {
        var target = _a.target, relatedTarget = _a.relatedTarget;
        return !!relatedTarget && isValidFocusout(target);
    }), map(function (_a) {
        var relatedTarget = _a.relatedTarget;
        return relatedTarget;
    })));
}
//# sourceMappingURL=data:application/json;base64,