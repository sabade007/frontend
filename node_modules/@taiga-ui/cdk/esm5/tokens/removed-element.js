import { ɵAnimationEngine } from '@angular/animations/browser';
import { inject, InjectFlags, InjectionToken } from '@angular/core';
import { BehaviorSubject, timer } from 'rxjs';
import { mapTo, share, startWith, switchMap } from 'rxjs/operators';
export var TUI_REMOVED_ELEMENT = new InjectionToken("Element currently being removed by AnimationEngine", {
    factory: function () {
        var _a;
        var stub = { onRemovalComplete: function () { } };
        var element$ = new BehaviorSubject(null);
        var engine = (_a = inject(ɵAnimationEngine, InjectFlags.Optional)) !== null && _a !== void 0 ? _a : stub;
        var _b = engine.onRemovalComplete, onRemovalComplete = _b === void 0 ? stub.onRemovalComplete : _b;
        engine.onRemovalComplete = function (element, context) {
            element$.next(element);
            onRemovalComplete(element, context);
        };
        return element$.pipe(switchMap(function (element) { return timer(0).pipe(mapTo(null), startWith(element)); }), share());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlZC1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay90b2tlbnMvIiwic291cmNlcyI6WyJyZW1vdmVkLWVsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBQyxlQUFlLEVBQWMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsb0RBQW9ELEVBQ3BEO0lBQ0ksT0FBTyxFQUFFOztRQUNMLElBQU0sSUFBSSxHQUFHLEVBQUMsaUJBQWlCLEVBQUUsY0FBTyxDQUFDLEVBQUMsQ0FBQztRQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsSUFBSSxDQUFDLENBQUM7UUFDM0QsSUFBTSxNQUFNLFNBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsbUNBQUksSUFBSSxDQUFDO1FBQy9ELElBQUEsNkJBQTBDLEVBQTFDLCtEQUEwQyxDQUFXO1FBRTVELE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxVQUFDLE9BQU8sRUFBRSxPQUFPO1lBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkIsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQztRQUVGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FDaEIsU0FBUyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQTlDLENBQThDLENBQUMsRUFDcEUsS0FBSyxFQUFFLENBQ1YsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge8m1QW5pbWF0aW9uRW5naW5lfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zL2Jyb3dzZXInO1xuaW1wb3J0IHtpbmplY3QsIEluamVjdEZsYWdzLCBJbmplY3Rpb25Ub2tlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXBUbywgc2hhcmUsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfUkVNT1ZFRF9FTEVNRU5UID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8RWxlbWVudCB8IG51bGw+PihcbiAgICBgRWxlbWVudCBjdXJyZW50bHkgYmVpbmcgcmVtb3ZlZCBieSBBbmltYXRpb25FbmdpbmVgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3R1YiA9IHtvblJlbW92YWxDb21wbGV0ZTogKCkgPT4ge319O1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IGluamVjdCjJtUFuaW1hdGlvbkVuZ2luZSwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpID8/IHN0dWI7XG4gICAgICAgICAgICBjb25zdCB7b25SZW1vdmFsQ29tcGxldGUgPSBzdHViLm9uUmVtb3ZhbENvbXBsZXRlfSA9IGVuZ2luZTtcblxuICAgICAgICAgICAgZW5naW5lLm9uUmVtb3ZhbENvbXBsZXRlID0gKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50JC5uZXh0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIG9uUmVtb3ZhbENvbXBsZXRlKGVsZW1lbnQsIGNvbnRleHQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQkLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKGVsZW1lbnQgPT4gdGltZXIoMCkucGlwZShtYXBUbyhudWxsKSwgc3RhcnRXaXRoKGVsZW1lbnQpKSksXG4gICAgICAgICAgICAgICAgc2hhcmUoKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgfSxcbik7XG4iXX0=