import { __decorate, __extends } from "tslib";
import { ChangeDetectorRef, Directive, HostBinding, Input, OnDestroy, OnInit, } from '@angular/core';
import { AbstractControl, ControlValueAccessor, NgControl, NgModel } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiIsPresent } from '@taiga-ui/cdk/utils';
import { merge, Subject } from 'rxjs';
import { delay, distinctUntilChanged, filter, map, startWith, switchMap, takeUntil, } from 'rxjs/operators';
import { AbstractTuiInteractive } from './interactive';
/**
 * Basic ControlValueAccessor class to build form components upon
 */
var AbstractTuiControl = /** @class */ (function (_super) {
    __extends(AbstractTuiControl, _super);
    function AbstractTuiControl(ngControl, changeDetectorRef, valueTransformer) {
        var _this = _super.call(this) || this;
        _this.ngControl = ngControl;
        _this.changeDetectorRef = changeDetectorRef;
        _this.valueTransformer = valueTransformer;
        _this.refresh$ = new Subject();
        _this.onTouched = EMPTY_FUNCTION;
        _this.onChange = EMPTY_FUNCTION;
        _this.fallbackValue = _this.getFallbackValue();
        _this.destroy$ = new Subject();
        _this.readOnly = false;
        _this.pseudoInvalid = null;
        if (_this.ngControl === null) {
            tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", "Use [(ngModel)] or [formControl] or formControlName for correct work.");
        }
        else {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
        get: function () {
            return (this.interactive &&
                (this.pseudoInvalid !== null
                    ? this.pseudoInvalid
                    : this.touched && this.invalid));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "value", {
        get: function () {
            var _a;
            return (_a = this.previousInternalValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
        get: function () {
            var _a;
            return (_a = this.rawValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var invalid = _a.invalid;
                return invalid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "valid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var valid = _a.valid;
                return valid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "touched", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var touched = _a.touched;
                return touched;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var disabled = _a.disabled;
                return disabled;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "interactive", {
        get: function () {
            return !this.readOnly && !this.computedDisabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "control", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var control = _a.control;
                return control;
            }, null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.controlName) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
        get: function () {
            var ngControl = this.ngControl;
            if (ngControl === null) {
                return undefined;
            }
            var controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined
                ? ngControl.viewModel
                : ngControl.value;
            return this.fromControlValue(controlValue);
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiControl.prototype.ngOnInit = function () {
        var _this = this;
        this.refresh$
            .pipe(delay(0), startWith(null), map(function () { var _a; return (_a = _this.ngControl) === null || _a === void 0 ? void 0 : _a.control; }), filter(tuiIsPresent), distinctUntilChanged(), switchMap(function (control) { return merge(control.valueChanges, control.statusChanges); }), takeUntil(this.destroy$))
            .subscribe(function () {
            _this.refreshLocalValue(_this.safeCurrentValue);
        });
    };
    AbstractTuiControl.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    AbstractTuiControl.prototype.checkControlUpdate = function () {
        this.changeDetectorRef.markForCheck();
    };
    AbstractTuiControl.prototype.registerOnChange = function (onChange) {
        var _this = this;
        this.onChange = function (componentValue) {
            onChange(_this.toControlValue(componentValue));
        };
        this.refresh$.next();
    };
    AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
        this.onTouched = onTouched;
    };
    AbstractTuiControl.prototype.setDisabledState = function () {
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.writeValue = function (value) {
        var controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value;
        this.refreshLocalValue(this.fromControlValue(controlValue));
    };
    AbstractTuiControl.prototype.updateFocused = function (focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        _super.prototype.updateFocused.call(this, focused);
    };
    AbstractTuiControl.prototype.updateValue = function (value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    };
    AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return oldValue === newValue;
    };
    AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
        var _a;
        return (_a = (this.ngControl && extractor(this.ngControl))) !== null && _a !== void 0 ? _a : defaultFieldValue;
    };
    AbstractTuiControl.prototype.controlMarkAsTouched = function () {
        this.onTouched();
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.controlSetValue = function (value) {
        this.onChange(value);
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.refreshLocalValue = function (value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.fromControlValue = function (controlValue) {
        return this.valueTransformer
            ? this.valueTransformer.fromControlValue(controlValue)
            : controlValue;
    };
    AbstractTuiControl.prototype.toControlValue = function (componentValue) {
        return this.valueTransformer
            ? this.valueTransformer.toControlValue(componentValue)
            : componentValue;
    };
    AbstractTuiControl.ctorParameters = function () { return [
        { type: NgControl },
        { type: ChangeDetectorRef },
        { type: undefined }
    ]; };
    __decorate([
        Input(),
        HostBinding("class._readonly"),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "readOnly", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
    __decorate([
        HostBinding("class._invalid")
    ], AbstractTuiControl.prototype, "computedInvalid", null);
    AbstractTuiControl = __decorate([
        Directive()
    ], AbstractTuiControl);
    return AbstractTuiControl;
}(AbstractTuiInteractive));
export { AbstractTuiControl };
//# sourceMappingURL=data:application/json;base64,