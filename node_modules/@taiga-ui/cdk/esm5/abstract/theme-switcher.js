import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, Inject } from '@angular/core';
/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 * @dynamic
 */
var AbstractTuiThemeSwitcher = /** @class */ (function () {
    function AbstractTuiThemeSwitcher(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        var styles = this.documentRef.head.querySelectorAll("style");
        this.constructor.style =
            styles[styles.length - 1];
    }
    AbstractTuiThemeSwitcher_1 = AbstractTuiThemeSwitcher;
    Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
        get: function () {
            return this.constructor.style;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
        this.removeTheme();
    };
    AbstractTuiThemeSwitcher.prototype.addTheme = function () {
        if (this.style) {
            this.documentRef.head.appendChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    };
    var AbstractTuiThemeSwitcher_1;
    AbstractTuiThemeSwitcher.style = null;
    AbstractTuiThemeSwitcher.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher_1 = __decorate([
        Directive(),
        __param(0, Inject(DOCUMENT))
    ], AbstractTuiThemeSwitcher);
    return AbstractTuiThemeSwitcher;
}());
export { AbstractTuiThemeSwitcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc3dpdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsidGhlbWUtc3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUUzRDs7Ozs7O0dBTUc7QUFFSDtJQUdJLGtDQUErQyxXQUFxQjtRQUFyQixnQkFBVyxHQUFYLFdBQVcsQ0FBVTtRQUNoRSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1NBQ1Y7UUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsV0FBWSxDQUFDLEtBQUs7WUFDckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztpQ0FkaUIsd0JBQXdCO0lBZ0IxQyxzQkFBSSwyQ0FBSzthQUFUO1lBQ0ksT0FBeUMsSUFBSSxDQUFDLFdBQVksQ0FBQyxLQUFLLENBQUM7UUFDckUsQ0FBQzs7O09BQUE7SUFFRCw4Q0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTywyQ0FBUSxHQUFoQjtRQUNJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDO0lBRU8sOENBQVcsR0FBbkI7UUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO0lBQ0wsQ0FBQzs7SUFqQ00sOEJBQUssR0FBNEIsSUFBSSxDQUFDOztnQkFFZSxRQUFRLHVCQUF2RCxNQUFNLFNBQUMsUUFBUTs7SUFIVix3QkFBd0I7UUFEN0MsU0FBUyxFQUFFO1FBSUssV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7T0FIWCx3QkFBd0IsQ0FtQzdDO0lBQUQsK0JBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQW5DcUIsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYWJzdHJhY3QgY2xhc3MgdG8gY3JlYXRlIHlvdXIgb3duIHRvZ2dsZWFibGUgdGhlbWVzLlxuICogQSBjb21wb25lbnQgZXh0ZW5kaW5nIHRoaXMgY2xhc3MgbXVzdCBoYXZlIENTUyB2YXJpYWJsZXMgZGVmaW5pdGlvbnNcbiAqIGFuZCBoYXZlIFZpZXdFbmNhcHN1bGF0aW9uIHNldCB0byBOT05FLiBBIGJvb2xlYW4gaW5wdXQgYWxsb3dzIHRvXG4gKiBzd2l0Y2ggdGhlbWUgb24gb3Igb2ZmLlxuICogQGR5bmFtaWNcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlUaGVtZVN3aXRjaGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBzdGF0aWMgc3R5bGU6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnRSZWY6IERvY3VtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRoZW1lKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuZG9jdW1lbnRSZWYuaGVhZC5xdWVyeVNlbGVjdG9yQWxsKGBzdHlsZWApO1xuXG4gICAgICAgICg8dHlwZW9mIEFic3RyYWN0VHVpVGhlbWVTd2l0Y2hlcj50aGlzLmNvbnN0cnVjdG9yKS5zdHlsZSA9XG4gICAgICAgICAgICBzdHlsZXNbc3R5bGVzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGdldCBzdHlsZSgpOiBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiAoPHR5cGVvZiBBYnN0cmFjdFR1aVRoZW1lU3dpdGNoZXI+dGhpcy5jb25zdHJ1Y3Rvcikuc3R5bGU7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlVGhlbWUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFRoZW1lKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmFwcGVuZENoaWxkKHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVUaGVtZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmNvbnRhaW5zKHRoaXMuc3R5bGUpKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVmLmhlYWQucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=