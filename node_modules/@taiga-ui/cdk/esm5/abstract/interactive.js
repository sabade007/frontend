import { __decorate } from "tslib";
import { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
var TUI = "tui_interactive_";
/**
 * The most basic class for interactive components
 */
var AbstractTuiInteractive = /** @class */ (function () {
    function AbstractTuiInteractive() {
        this.pseudoHovered = null;
        this.pseudoPressed = null;
        this.pseudoFocused = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = "";
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        /** @deprecated use `tuiPressedChange` directive */
        this.pressedChange = new EventEmitter();
        /** @deprecated use `tuiHoveredChange` directive */
        this.hoveredChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        /** @deprecated use `tuiHoveredChange` directive */
        this.hovered = false;
        /** @deprecated use `tuiPressedChange` directive */
        this.pressed = false;
        this.focusVisible = false;
        this.autoIdString = "" + TUI + AbstractTuiInteractive_1.autoId++ + Date.now();
    }
    AbstractTuiInteractive_1 = AbstractTuiInteractive;
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedHovered", {
        /** @deprecated */
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoHovered) !== null && _a !== void 0 ? _a : this.hovered);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedPressed", {
        /** @deprecated */
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoPressed) !== null && _a !== void 0 ? _a : this.pressed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusable", {
        get: function () {
            return !this.computedDisabled && (this.focusable || this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocused", {
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoFocused) !== null && _a !== void 0 ? _a : this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusVisible", {
        get: function () {
            var _a;
            return !this.computedDisabled && ((_a = this.pseudoFocused) !== null && _a !== void 0 ? _a : this.focusVisible);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "id", {
        // TODO: 3.0 Consider removing since native input is exposed
        get: function () {
            return this.nativeId ? this.nativeId : this.autoIdString;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated */
    AbstractTuiInteractive.prototype.updateHovered = function (hovered) {
        if (this.hovered === hovered) {
            return;
        }
        this.hovered = hovered;
        this.hoveredChange.emit(hovered);
    };
    /** @deprecated */
    AbstractTuiInteractive.prototype.updatePressed = function (pressed) {
        if (this.pressed === pressed) {
            return;
        }
        this.pressed = pressed;
        this.pressedChange.emit(pressed);
    };
    AbstractTuiInteractive.prototype.updateFocused = function (focused) {
        this.focusedChange.emit(focused);
    };
    AbstractTuiInteractive.prototype.updateFocusVisible = function (focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    };
    var AbstractTuiInteractive_1;
    AbstractTuiInteractive.autoId = 0;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoHovered", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoPressed", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoFocused", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "focusable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "nativeId", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "pressedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "hoveredChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusVisibleChange", void 0);
    __decorate([
        HostBinding("class._disabled")
    ], AbstractTuiInteractive.prototype, "computedDisabled", null);
    __decorate([
        HostBinding("class._hovered")
    ], AbstractTuiInteractive.prototype, "computedHovered", null);
    __decorate([
        HostBinding("class._pressed")
    ], AbstractTuiInteractive.prototype, "computedPressed", null);
    __decorate([
        HostBinding("class._focused")
    ], AbstractTuiInteractive.prototype, "computedFocused", null);
    __decorate([
        HostBinding("class._focus-visible")
    ], AbstractTuiInteractive.prototype, "computedFocusVisible", null);
    AbstractTuiInteractive = AbstractTuiInteractive_1 = __decorate([
        Directive()
    ], AbstractTuiInteractive);
    return AbstractTuiInteractive;
}());
export { AbstractTuiInteractive };
//# sourceMappingURL=data:application/json;base64,