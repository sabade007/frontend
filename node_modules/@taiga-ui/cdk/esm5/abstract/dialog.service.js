import { __assign, __decorate, __extends, __param, __read, __spread } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { BehaviorSubject, Observable } from 'rxjs';
var AbstractTuiDialogService = /** @class */ (function (_super) {
    __extends(AbstractTuiDialogService, _super);
    function AbstractTuiDialogService(idService) {
        var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
        _this.idService = idService;
        _this.dialogs$ = new BehaviorSubject([]);
        return _this;
    }
    AbstractTuiDialogService.prototype.open = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return new Observable(function (observer) {
            var completeWith = function (result) {
                observer.next(result);
                observer.complete();
            };
            var dialog = __assign(__assign(__assign({}, _this.defaultOptions), options), { content: content,
                completeWith: completeWith, $implicit: observer, component: _this.component, createdAt: Date.now(), id: _this.idService.generate() });
            _this.dialogs$.next(__spread(_this.dialogs$.value, [dialog]));
            return function () {
                _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
            };
        });
    };
    AbstractTuiDialogService.ctorParameters = function () { return [
        { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
    ]; };
    AbstractTuiDialogService = __decorate([
        Injectable(),
        __param(0, Inject(TuiIdService))
    ], AbstractTuiDialogService);
    return AbstractTuiDialogService;
}(Observable));
export { AbstractTuiDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUdwRCxPQUFPLEVBQUMsZUFBZSxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUdqRDtJQUFvRSw0Q0FFbkU7SUFTRyxrQ0FDMkMsU0FBdUI7UUFEbEUsWUFHSSxrQkFBTSxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFqQyxDQUFpQyxDQUFDLFNBQ3ZEO1FBSDBDLGVBQVMsR0FBVCxTQUFTLENBQWM7UUFML0MsY0FBUSxHQUFHLElBQUksZUFBZSxDQUM3QyxFQUFFLENBQ0wsQ0FBQzs7SUFNRixDQUFDO0lBRUQsdUNBQUksR0FBSixVQUNJLE9BQThFLEVBQzlFLE9BQXdCO1FBRjVCLGlCQTBCQztRQXhCRyx3QkFBQSxFQUFBLFlBQXdCO1FBRXhCLE9BQU8sSUFBSSxVQUFVLENBQUMsVUFBQSxRQUFRO1lBQzFCLElBQU0sWUFBWSxHQUFHLFVBQUMsTUFBOEI7Z0JBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFDRixJQUFNLE1BQU0sa0NBQ0wsS0FBSSxDQUFDLGNBQWMsR0FDbkIsT0FBTyxLQUNWLE9BQU8sU0FBQTtnQkFDUCxZQUFZLGNBQUEsRUFDWixTQUFTLEVBQUUsUUFBUSxFQUNuQixTQUFTLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFDekIsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDckIsRUFBRSxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQ2hDLENBQUM7WUFFRixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksVUFBSyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRSxNQUFNLEdBQUUsQ0FBQztZQUVyRCxPQUFPO2dCQUNILEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksS0FBSyxNQUFNLEVBQWYsQ0FBZSxDQUFDLENBQUMsQ0FBQztZQUM1RSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQS9CcUQsWUFBWSx1QkFBN0QsTUFBTSxTQUFDLFlBQVk7O0lBWk4sd0JBQXdCO1FBRDdDLFVBQVUsRUFBRTtRQWFKLFdBQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO09BWlAsd0JBQXdCLENBNEM3QztJQUFELCtCQUFDO0NBQUEsQUE1Q0QsQ0FBb0UsVUFBVSxHQTRDN0U7U0E1Q3FCLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQmFzZURpYWxvZ0NvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jZGsvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1R1aUlkU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1R1aURpYWxvZ30gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudCwgUG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0VHVpRGlhbG9nU2VydmljZTxULCBLID0gdm9pZD4gZXh0ZW5kcyBPYnNlcnZhYmxlPFxuICAgIFJlYWRvbmx5QXJyYXk8VHVpRGlhbG9nPFQsIGFueT4+XG4+IHtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZG9ubHkgY29tcG9uZW50OiBQb2x5bW9ycGhldXNDb21wb25lbnQ8YW55LCBUdWlEaWFsb2c8VCwgYW55Pj47XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZG9ubHkgZGVmYXVsdE9wdGlvbnM6IFQ7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGlhbG9ncyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlYWRvbmx5QXJyYXk8VHVpRGlhbG9nPFQsIGFueT4+PihcbiAgICAgICAgW10sXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlJZFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG9ic2VydmVyID0+IHRoaXMuZGlhbG9ncyQuc3Vic2NyaWJlKG9ic2VydmVyKSk7XG4gICAgfVxuXG4gICAgb3BlbjxHID0gdm9pZD4oXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VCAmIFR1aUJhc2VEaWFsb2dDb250ZXh0PEsgZXh0ZW5kcyB2b2lkID8gRyA6IEs+PixcbiAgICAgICAgb3B0aW9uczogUGFydGlhbDxUPiA9IHt9LFxuICAgICk6IE9ic2VydmFibGU8SyBleHRlbmRzIHZvaWQgPyBHIDogSz4ge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGVXaXRoID0gKHJlc3VsdDogSyBleHRlbmRzIHZvaWQgPyBHIDogSyk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZVdpdGgsXG4gICAgICAgICAgICAgICAgJGltcGxpY2l0OiBvYnNlcnZlcixcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5pZFNlcnZpY2UuZ2VuZXJhdGUoKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuZGlhbG9ncyQubmV4dChbLi4udGhpcy5kaWFsb2dzJC52YWx1ZSwgZGlhbG9nXSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dzJC5uZXh0KHRoaXMuZGlhbG9ncyQudmFsdWUuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gZGlhbG9nKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=