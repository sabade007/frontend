import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { concat, merge } from 'rxjs';
import { endWith, map, repeat, take, takeWhile } from 'rxjs/operators';
import { mouseDragFinishFrom } from './mouse-drag-finish-from';
import { typedFromEvent } from './typed-from-event';
export var TuiDragStage;
(function (TuiDragStage) {
    TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
    TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
    TuiDragStage[TuiDragStage["End"] = 2] = "End";
})(TuiDragStage || (TuiDragStage = {}));
var TuiDragState = /** @class */ (function () {
    function TuiDragState(stage, event) {
        this.stage = stage;
        this.event = event;
    }
    return TuiDragState;
}());
export { TuiDragState };
/**
 * @deprecated: use {@link tuiDragAndDropFrom} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function dragAndDropFrom(element) {
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    return concat(typedFromEvent(element, "mousedown").pipe(take(1), map(function (event) { return new TuiDragState(0 /* Start */, event); })), merge(typedFromEvent(ownerDocument, "mousemove").pipe(map(function (event) { return new TuiDragState(1 /* Continues */, event); })), mouseDragFinishFrom(ownerDocument).pipe(take(1), map(function (event) { return new TuiDragState(2 /* End */, event); }), endWith(null))).pipe(takeWhile(isPresent))).pipe(repeat());
}
export var tuiDragAndDropFrom = dragAndDropFrom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1mcm9tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImRyYWctYW5kLWRyb3AtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDNUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbEQsTUFBTSxDQUFOLElBQWtCLFlBSWpCO0FBSkQsV0FBa0IsWUFBWTtJQUMxQixpREFBSyxDQUFBO0lBQ0wseURBQVMsQ0FBQTtJQUNULDZDQUFHLENBQUE7QUFDUCxDQUFDLEVBSmlCLFlBQVksS0FBWixZQUFZLFFBSTdCO0FBRUQ7SUFDSSxzQkFBcUIsS0FBbUIsRUFBVyxLQUFpQjtRQUEvQyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQVcsVUFBSyxHQUFMLEtBQUssQ0FBWTtJQUFHLENBQUM7SUFDNUUsbUJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7QUFFRDs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQWdCO0lBQ3JDLElBQUEscUNBQWEsQ0FBWTtJQUVoQyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2hCLE1BQU0sSUFBSSx5QkFBeUIsRUFBRSxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxNQUFNLENBQ1QsY0FBYyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3JDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxJQUFJLFlBQVksZ0JBQXFCLEtBQUssQ0FBQyxFQUEzQyxDQUEyQyxDQUFDLENBQzVELEVBQ0QsS0FBSyxDQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUMzQyxHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxJQUFJLFlBQVksb0JBQXlCLEtBQUssQ0FBQyxFQUEvQyxDQUErQyxDQUFDLENBQ2hFLEVBQ0QsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsSUFBSSxZQUFZLGNBQW1CLEtBQUssQ0FBQyxFQUF6QyxDQUF5QyxDQUFDLEVBQ3ZELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDaEIsQ0FDSixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDL0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlPd25lckRvY3VtZW50RXhjZXB0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge2NvbmNhdCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtlbmRXaXRoLCBtYXAsIHJlcGVhdCwgdGFrZSwgdGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7bW91c2VEcmFnRmluaXNoRnJvbX0gZnJvbSAnLi9tb3VzZS1kcmFnLWZpbmlzaC1mcm9tJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFR1aURyYWdTdGFnZSB7XG4gICAgU3RhcnQsXG4gICAgQ29udGludWVzLFxuICAgIEVuZCxcbn1cblxuZXhwb3J0IGNsYXNzIFR1aURyYWdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgc3RhZ2U6IFR1aURyYWdTdGFnZSwgcmVhZG9ubHkgZXZlbnQ6IE1vdXNlRXZlbnQpIHt9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpRHJhZ0FuZERyb3BGcm9tfSBpbnN0ZWFkXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBkcmFnQW5kRHJvcEZyb20oZWxlbWVudDogRWxlbWVudCk6IE9ic2VydmFibGU8VHVpRHJhZ1N0YXRlPiB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBjb25jYXQoXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsIGBtb3VzZWRvd25gKS5waXBlKFxuICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgIG1hcChldmVudCA9PiBuZXcgVHVpRHJhZ1N0YXRlKFR1aURyYWdTdGFnZS5TdGFydCwgZXZlbnQpKSxcbiAgICAgICAgKSxcbiAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCBgbW91c2Vtb3ZlYCkucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuQ29udGludWVzLCBldmVudCkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG1vdXNlRHJhZ0ZpbmlzaEZyb20ob3duZXJEb2N1bWVudCkucGlwZShcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIG1hcChldmVudCA9PiBuZXcgVHVpRHJhZ1N0YXRlKFR1aURyYWdTdGFnZS5FbmQsIGV2ZW50KSksXG4gICAgICAgICAgICAgICAgZW5kV2l0aChudWxsKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZSh0YWtlV2hpbGUoaXNQcmVzZW50KSksXG4gICAgKS5waXBlKHJlcGVhdCgpKTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aURyYWdBbmREcm9wRnJvbSA9IGRyYWdBbmREcm9wRnJvbTtcbiJdfQ==