import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { filter, mapTo, startWith, switchMapTo, take } from 'rxjs/operators';
import { mouseDragFinishFrom } from './mouse-drag-finish-from';
import { typedFromEvent } from './typed-from-event';
/**
 * @deprecated: use {@link tuiPressedObservable} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function pressedObservable(element, _a) {
    var onlyTrusted = (_a === void 0 ? { onlyTrusted: true } : _a).onlyTrusted;
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    return typedFromEvent(element, "mousedown").pipe(filter(function (_a) {
        var isTrusted = _a.isTrusted;
        return isTrusted || !onlyTrusted;
    }), switchMapTo(mouseDragFinishFrom(ownerDocument).pipe(mapTo(false), take(1), startWith(true))));
}
export var tuiPressedObservable = pressedObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3NlZC1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbInByZXNzZWQtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVuRSxPQUFPLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQU1sRDs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsaUJBQWlCLENBQzdCLE9BQWdCLEVBQ2hCLEVBQWdFO1FBQS9ELHNFQUFXO0lBRUwsSUFBQSxxQ0FBYSxDQUFZO0lBRWhDLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsTUFBTSxJQUFJLHlCQUF5QixFQUFFLENBQUM7S0FDekM7SUFFRCxPQUFPLGNBQWMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM1QyxNQUFNLENBQUMsVUFBQyxFQUFXO1lBQVYsd0JBQVM7UUFBTSxPQUFBLFNBQVMsSUFBSSxDQUFDLFdBQVc7SUFBekIsQ0FBeUIsQ0FBQyxFQUNsRCxXQUFXLENBQ1AsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUNuQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ1osSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDbEIsQ0FDSixDQUNKLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQUcsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R1aU93bmVyRG9jdW1lbnRFeGNlcHRpb259IGZyb20gJ0B0YWlnYS11aS9jZGsvZXhjZXB0aW9ucyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcFRvLCBzdGFydFdpdGgsIHN3aXRjaE1hcFRvLCB0YWtlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7bW91c2VEcmFnRmluaXNoRnJvbX0gZnJvbSAnLi9tb3VzZS1kcmFnLWZpbmlzaC1mcm9tJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpUHJlc3NlZE9ic2VydmFibGVPcHRpb25zIHtcbiAgICBvbmx5VHJ1c3RlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlQcmVzc2VkT2JzZXJ2YWJsZX0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gcHJlc3NlZE9ic2VydmFibGUoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICB7b25seVRydXN0ZWR9OiBUdWlQcmVzc2VkT2JzZXJ2YWJsZU9wdGlvbnMgPSB7b25seVRydXN0ZWQ6IHRydWV9LFxuKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlZEZyb21FdmVudChlbGVtZW50LCBgbW91c2Vkb3duYCkucGlwZShcbiAgICAgICAgZmlsdGVyKCh7aXNUcnVzdGVkfSkgPT4gaXNUcnVzdGVkIHx8ICFvbmx5VHJ1c3RlZCksXG4gICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgbW91c2VEcmFnRmluaXNoRnJvbShvd25lckRvY3VtZW50KS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcFRvKGZhbHNlKSxcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCh0cnVlKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aVByZXNzZWRPYnNlcnZhYmxlID0gcHJlc3NlZE9ic2VydmFibGU7XG4iXX0=