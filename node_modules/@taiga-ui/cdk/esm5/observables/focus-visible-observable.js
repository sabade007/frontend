import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, mapTo, repeat, shareReplay, startWith, switchMapTo, take, withLatestFrom, } from 'rxjs/operators';
import { tuiIsAlive } from './is-alive';
import { typedFromEvent } from './typed-from-event';
var documentMouseUpIsAlive$;
var documentMouseDownIsAlive$;
/**
 * @deprecated: use {@link tuiFocusVisibleObservable} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function focusVisibleObservable(element) {
    var elementBlur$ = typedFromEvent(element, "blur");
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, "mouseup", {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
        documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, "mousedown", {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(typedFromEvent(element, "focus").pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(function () { return !isNativeFocused(element); }), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, function (_event, elementActual, documentActual) {
        return elementActual || documentActual;
    }), filter(function (isUserFocus) { return !isUserFocus; }))).pipe(switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))), distinctUntilChanged());
}
export var tuiFocusVisibleObservable = focusVisibleObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImZvY3VzLXZpc2libGUtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sY0FBYyxFQUNkLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxFQUNKLGNBQWMsR0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxJQUFJLHVCQUE0QyxDQUFDO0FBQ2pELElBQUkseUJBQThDLENBQUM7QUFFbkQ7O0dBRUc7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE9BQWdCO0lBQ25ELElBQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUMsSUFBQSxxQ0FBYSxDQUFZO0lBRWhDLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsTUFBTSxJQUFJLHlCQUF5QixFQUFFLENBQUM7S0FDekM7SUFFRCxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtRQUN4RCx1QkFBdUIsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRTtZQUMvRCxPQUFPLEVBQUUsSUFBSTtTQUNoQixDQUFDLENBQUMsSUFBSSxDQUNILFVBQVUsRUFBRSxFQUNaLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFDaEIsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FDL0MsQ0FBQztRQUNGLHlCQUF5QixHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFO1lBQ25FLE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQ0gsVUFBVSxFQUFFLEVBQ1osU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNoQixXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUMvQyxDQUFDO0tBQ0w7SUFFRCxPQUFPLEtBQUs7SUFDUixpRUFBaUU7SUFDakUsTUFBTSxDQUNGLGNBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxrR0FBa0c7SUFDbEcsWUFBWSxDQUFDLElBQUksQ0FDYixNQUFNLENBQUMsY0FBTSxPQUFBLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUF6QixDQUF5QixDQUFDLEVBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxjQUFjLEVBQUUsQ0FDbkIsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLEVBQUUsRUFDUixjQUFjLENBQ1YseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2QixVQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYztRQUNsQyxPQUFBLGFBQWEsSUFBSSxjQUFjO0lBQS9CLENBQStCLENBQ3RDLEVBQ0QsTUFBTSxDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsQ0FBQyxXQUFXLEVBQVosQ0FBWSxDQUFDLENBQ3RDLENBQ0osQ0FBQyxJQUFJLENBQ0YsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN0RSxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHLHNCQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlPd25lckRvY3VtZW50RXhjZXB0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHtpc05hdGl2ZUZvY3VzZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZm9jdXMnO1xuaW1wb3J0IHtjb25jYXQsIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgZmlsdGVyLFxuICAgIGlnbm9yZUVsZW1lbnRzLFxuICAgIG1hcFRvLFxuICAgIHJlcGVhdCxcbiAgICBzaGFyZVJlcGxheSxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwVG8sXG4gICAgdGFrZSxcbiAgICB3aXRoTGF0ZXN0RnJvbSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge3R1aUlzQWxpdmV9IGZyb20gJy4vaXMtYWxpdmUnO1xuaW1wb3J0IHt0eXBlZEZyb21FdmVudH0gZnJvbSAnLi90eXBlZC1mcm9tLWV2ZW50JztcblxubGV0IGRvY3VtZW50TW91c2VVcElzQWxpdmUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xubGV0IGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpRm9jdXNWaXNpYmxlT2JzZXJ2YWJsZX0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZm9jdXNWaXNpYmxlT2JzZXJ2YWJsZShlbGVtZW50OiBFbGVtZW50KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3QgZWxlbWVudEJsdXIkID0gdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgYGJsdXJgKTtcbiAgICBjb25zdCB7b3duZXJEb2N1bWVudH0gPSBlbGVtZW50O1xuXG4gICAgaWYgKCFvd25lckRvY3VtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBUdWlPd25lckRvY3VtZW50RXhjZXB0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKCFkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkIHx8ICFkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCkge1xuICAgICAgICBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCA9IHR5cGVkRnJvbUV2ZW50KG93bmVyRG9jdW1lbnQsIGBtb3VzZXVwYCwge1xuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgfSkucGlwZShcbiAgICAgICAgICAgIHR1aUlzQWxpdmUoKSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgICAgICBzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSxcbiAgICAgICAgKTtcbiAgICAgICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCA9IHR5cGVkRnJvbUV2ZW50KG93bmVyRG9jdW1lbnQsIGBtb3VzZWRvd25gLCB7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICB9KS5waXBlKFxuICAgICAgICAgICAgdHVpSXNBbGl2ZSgpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKGZhbHNlKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgLy8gZm9jdXMgZXZlbnRzIGV4Y2x1ZGluZyBvbmVzIHRoYXQgY2FtZSByaWdodCBhZnRlciBtb3VzZSBhY3Rpb25cbiAgICAgICAgY29uY2F0KFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgYGZvY3VzYCkucGlwZSh0YWtlKDEpKSxcbiAgICAgICAgICAgIC8vIGZpbHRlcmluZyBvdXQgYmx1ciBldmVudHMgd2hlbiBlbGVtZW50IHJlbWFpbnMgZm9jdXNlZCBzbyB0aGF0IHdlIGlnbm9yZSBicm93c2VyIHRhYiBmb2N1cyBsb3NzXG4gICAgICAgICAgICBlbGVtZW50Qmx1ciQucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKCkgPT4gIWlzTmF0aXZlRm9jdXNlZChlbGVtZW50KSksXG4gICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICBpZ25vcmVFbGVtZW50cygpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgcmVwZWF0KCksXG4gICAgICAgICAgICB3aXRoTGF0ZXN0RnJvbShcbiAgICAgICAgICAgICAgICBkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50TW91c2VVcElzQWxpdmUkLFxuICAgICAgICAgICAgICAgIChfZXZlbnQsIGVsZW1lbnRBY3R1YWwsIGRvY3VtZW50QWN0dWFsKSA9PlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50QWN0dWFsIHx8IGRvY3VtZW50QWN0dWFsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZpbHRlcihpc1VzZXJGb2N1cyA9PiAhaXNVc2VyRm9jdXMpLFxuICAgICAgICApLFxuICAgICkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwVG8oZWxlbWVudEJsdXIkLnBpcGUobWFwVG8oZmFsc2UpLCB0YWtlKDEpLCBzdGFydFdpdGgodHJ1ZSkpKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICApO1xufVxuXG5leHBvcnQgY29uc3QgdHVpRm9jdXNWaXNpYmxlT2JzZXJ2YWJsZSA9IGZvY3VzVmlzaWJsZU9ic2VydmFibGU7XG4iXX0=