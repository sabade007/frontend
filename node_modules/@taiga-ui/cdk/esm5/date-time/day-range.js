import { __extends } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH } from './date-fillers';
import { RANGE_SEPARATOR_CHAR } from './date-time';
import { TuiDay } from './day';
import { TuiMonthRange } from './month-range';
/**
 * Temporary type guard to satisfy ts-overloading of normalizeParse method
 * @deprecated
 */
export var isDateMode = function (dateMode) {
    return ["DMY", "YMD", "MDY"].includes(dateMode);
};
/**
 * An immutable range of two {@link TuiDay} objects
 */
var TuiDayRange = /** @class */ (function (_super) {
    __extends(TuiDayRange, _super);
    function TuiDayRange(from, to) {
        var _this = _super.call(this, from, to) || this;
        _this.from = from;
        _this.to = to;
        tuiAssert.assert(from.daySameOrBefore(to));
        return _this;
    }
    /**
     * Creates range from two days after sorting them
     *
     * @param day1
     * @param day2
     * @return new range with sorted days
     */
    TuiDayRange.sort = function (day1, day2) {
        return day1.daySameOrBefore(day2)
            ? new TuiDayRange(day1, day2)
            : new TuiDayRange(day2, day1);
    };
    /**
     * Parse and correct a day range in string format
     *
     * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy
     * @param dateMode {@link TuiDateMode}
     * @return normalized day range object
     */
    TuiDayRange.normalizeParse = function (rangeString, dateMode) {
        if (dateMode === void 0) { dateMode = "DMY"; }
        var dateFormat = isDateMode(dateMode) ? dateMode : "DMY";
        var leftDay = TuiDay.normalizeParse(rangeString.slice(0, DATE_FILLER_LENGTH), dateFormat);
        if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {
            return new TuiDayRange(leftDay, leftDay);
        }
        return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), dateFormat));
    };
    Object.defineProperty(TuiDayRange.prototype, "isSingleDay", {
        get: function () {
            return this.from.daySame(this.to);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDayRange.prototype, "formattedDayRange", {
        /**
         * Human readable format.
         * @deprecated use {@link getFormattedDayRange} instead
         */
        get: function () {
            var from = this.from.getFormattedDay("DMY", ".");
            var to = this.to.getFormattedDay("DMY", ".");
            return "" + from + RANGE_SEPARATOR_CHAR + to;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Tests ranges for identity
     *
     * @param another second range to test against current
     * @return `true` if days are identical
     */
    TuiDayRange.prototype.daySame = function (another) {
        return this.from.daySame(another.from) && this.to.daySame(another.to);
    };
    /**
     * Locks range between two days included, or limits from one side if the other is null
     *
     * @param min
     * @param max
     * @return range â€” clamped range
     */
    TuiDayRange.prototype.dayLimit = function (min, max) {
        return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));
    };
    /**
     * Human readable format.
     */
    TuiDayRange.prototype.getFormattedDayRange = function (dateFormat, dateSeparator) {
        var from = this.from.getFormattedDay(dateFormat, dateSeparator);
        var to = this.to.getFormattedDay(dateFormat, dateSeparator);
        return "" + from + RANGE_SEPARATOR_CHAR + to;
    };
    TuiDayRange.prototype.toString = function (dateFormat, dateSeparator) {
        if (dateFormat === void 0) { dateFormat = "DMY"; }
        if (dateSeparator === void 0) { dateSeparator = "."; }
        var from = this.from.getFormattedDay(dateFormat, dateSeparator);
        var to = this.to.getFormattedDay(dateFormat, dateSeparator);
        return "" + from + RANGE_SEPARATOR_CHAR + to;
    };
    return TuiDayRange;
}(TuiMonthRange));
export { TuiDayRange };
//# sourceMappingURL=data:application/json;base64,