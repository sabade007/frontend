import { tuiAssert } from '@taiga-ui/cdk/classes';
import { padStart } from '@taiga-ui/cdk/utils/format';
import { inRange } from '@taiga-ui/cdk/utils/math';
import { HOURS_IN_DAY, MILLISECONDS_IN_DAY, MILLISECONDS_IN_HOUR, MILLISECONDS_IN_MINUTE, MINUTES_IN_HOUR, SECONDS_IN_MINUTE, } from './date-time';
/**
 * Immutable time object with hours, minutes, seconds and ms
 */
var TuiTime = /** @class */ (function () {
    function TuiTime(hours, minutes, seconds, ms) {
        if (seconds === void 0) { seconds = 0; }
        if (ms === void 0) { ms = 0; }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.ms = ms;
        tuiAssert.assert(TuiTime.isValidTime(hours, minutes, seconds, ms), "Time must be real, but got:", hours, minutes, seconds, ms);
    }
    /**
     * Checks if time is valid
     */
    TuiTime.isValidTime = function (hours, minutes, seconds, ms) {
        if (seconds === void 0) { seconds = 0; }
        if (ms === void 0) { ms = 0; }
        return (Number.isInteger(hours) &&
            inRange(hours, 0, HOURS_IN_DAY) &&
            Number.isInteger(minutes) &&
            inRange(minutes, 0, MINUTES_IN_HOUR) &&
            Number.isInteger(seconds) &&
            inRange(seconds, 0, SECONDS_IN_MINUTE) &&
            Number.isInteger(ms) &&
            inRange(ms, 0, 1000));
    };
    /**
     * Current UTC time.
     */
    TuiTime.current = function () {
        return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);
    };
    /**
     * Current time in local timezone
     */
    TuiTime.currentLocal = function () {
        var date = new Date();
        return TuiTime.fromAbsoluteMilliseconds((Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) %
            MILLISECONDS_IN_DAY);
    };
    /**
     * Calculates TuiTime from milliseconds
     */
    TuiTime.fromAbsoluteMilliseconds = function (milliseconds) {
        tuiAssert.assert(Number.isInteger(milliseconds));
        tuiAssert.assert(inRange(milliseconds, 0, MILLISECONDS_IN_DAY), "Milliseconds must be below " + MILLISECONDS_IN_DAY + " (milliseconds in a day).");
        var hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);
        var minutes = Math.floor((milliseconds % MILLISECONDS_IN_HOUR) / MILLISECONDS_IN_MINUTE);
        var seconds = Math.floor(((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) / 1000) || 0;
        var ms = Math.floor(((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) % 1000) || 0;
        return new TuiTime(hours, minutes, seconds, ms);
    };
    /**
     * Parses string into TuiTime object
     */
    TuiTime.fromString = function (time) {
        var hours = Number(time.slice(0, 2));
        var minutes = Number(time.slice(3, 5));
        var seconds = Number(time.slice(6, 8)) || 0;
        var ms = Number(time.slice(9, 12)) || 0;
        return new TuiTime(hours, minutes, seconds, ms);
    };
    /**
     * Converts Date object into TuiTime
     * @param date
     */
    TuiTime.fromLocalNativeDate = function (date) {
        return new TuiTime(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    };
    /**
     * Shifts time by hours and minutes
     */
    TuiTime.prototype.shift = function (_a) {
        var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.ms, ms = _e === void 0 ? 0 : _e;
        var newMs = (1000 + this.ms + (ms % 1000)) % 1000;
        var secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);
        var secondsToAdd = secondsInMs + seconds;
        var newSeconds = (60 + this.seconds + (secondsToAdd % 60)) % 60;
        var minutesInSeconds = secondsToAdd < 0
            ? Math.ceil(secondsToAdd / 60)
            : Math.floor(secondsToAdd / 60);
        var minutesToAdd = minutesInSeconds + minutes;
        var newMinutes = (60 + this.minutes + (minutesToAdd % 60)) % 60;
        var hoursInMinutes = minutesToAdd < 0
            ? Math.ceil(minutesToAdd / 60)
            : Math.floor(minutesToAdd / 60);
        var hoursToAdd = hoursInMinutes + hours;
        var newHours = (24 + this.hours + (hoursToAdd % 24)) % 24;
        return new TuiTime(newHours, newMinutes, newSeconds, newMs);
    };
    /**
     * Converts TuiTime to string
     */
    TuiTime.prototype.toString = function (mode) {
        var needAddMs = mode === "HH:MM:SS.MSS" || (!mode && this.ms > 0);
        var needAddSeconds = needAddMs || mode === "HH:MM:SS" || (!mode && this.seconds > 0);
        return (this.formatTime(this.hours) + ":" + this.formatTime(this.minutes) +
            ("" + (needAddSeconds ? ":" + this.formatTime(this.seconds) : "")) +
            ("" + (needAddMs ? "." + this.formatTime(this.ms, 3) : "")));
    };
    TuiTime.prototype.valueOf = function () {
        return this.toAbsoluteMilliseconds();
    };
    /**
     * Returns the primitive value of the given Date object.
     * Depending on the argument, the method can return either a string or a number.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
     */
    TuiTime.prototype[Symbol.toPrimitive] = function (hint) {
        return Date.prototype[Symbol.toPrimitive].call(this, hint);
    };
    /**
     * Converts TuiTime to milliseconds
     */
    TuiTime.prototype.toAbsoluteMilliseconds = function () {
        return (this.hours * MILLISECONDS_IN_HOUR +
            this.minutes * MILLISECONDS_IN_MINUTE +
            this.seconds * 1000 +
            this.ms);
    };
    TuiTime.prototype.formatTime = function (time, digits) {
        if (digits === void 0) { digits = 2; }
        return padStart(String(time), digits, "0");
    };
    return TuiTime;
}());
export { TuiTime };
//# sourceMappingURL=data:application/json;base64,