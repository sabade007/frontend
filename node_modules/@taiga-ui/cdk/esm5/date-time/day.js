import { __extends } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { InvalidDayException, InvalidMonthException, InvalidYearException, } from '@taiga-ui/cdk/exceptions';
import { padStart } from '@taiga-ui/cdk/utils/format';
import { inRange, normalizeToIntNumber } from '@taiga-ui/cdk/utils/math';
import { DATE_FILLER_LENGTH } from './date-fillers';
import { DAYS_IN_WEEK, MIN_DAY, MONTHS_IN_YEAR } from './date-time';
import { TuiMonth } from './month';
import { TuiYear } from './year';
// TODO: Localized formatting
/**
 * Immutable date object, consisting of day, month and year
 */
var TuiDay = /** @class */ (function (_super) {
    __extends(TuiDay, _super);
    function TuiDay(year, month, day) {
        var _this = _super.call(this, year, month) || this;
        _this.day = day;
        tuiAssert.assert(TuiDay.isValidDay(year, month, day));
        return _this;
    }
    /**
     * Creates {@link TuiDay} from native {@link Date} based on local time zone
     */
    TuiDay.fromLocalNativeDate = function (date) {
        return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());
    };
    /**
     * Creates {@link TuiDay} from native {@link Date} using UTC
     */
    TuiDay.fromUtcNativeDate = function (date) {
        return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    };
    /**
     * Check validity of year, month and day
     *
     * @param year
     * @param month
     * @param day
     * @return boolean validity
     */
    TuiDay.isValidDay = function (year, month, day) {
        return (TuiMonth.isValidMonth(year, month) &&
            Number.isInteger(day) &&
            inRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1));
    };
    /**
     * @deprecated DONT USE IT (will be deleted soon)
     *
     * Calculated day on a calendar grid
     *
     * @param month
     * @param row row in a calendar
     * @param col column in a calendar
     * @return resulting day on these coordinates (could exceed passed month)
     */
    TuiDay.getDayFromMonthRowCol = function (month, row, col) {
        tuiAssert.assert(Number.isInteger(row));
        tuiAssert.assert(inRange(row, 0, 6));
        tuiAssert.assert(Number.isInteger(col));
        tuiAssert.assert(inRange(col, 0, DAYS_IN_WEEK));
        var day = row * DAYS_IN_WEEK + col - month.monthStartDaysOffset + 1;
        if (day > month.daysCount) {
            day -= month.daysCount;
            month = month.append({ month: 1 });
        }
        if (day <= 0) {
            month = month.append({ month: -1 });
            day = month.daysCount + day;
        }
        return new TuiDay(month.year, month.month, day);
    };
    /**
     * Current day based on local time zone
     */
    TuiDay.currentLocal = function () {
        var nativeDate = new Date();
        var year = nativeDate.getFullYear();
        var month = nativeDate.getMonth();
        var day = nativeDate.getDate();
        return new TuiDay(year, month, day);
    };
    /**
     * Returns current day based on UTC
     */
    TuiDay.currentUtc = function () {
        var nativeDate = new Date();
        var year = nativeDate.getUTCFullYear();
        var month = nativeDate.getUTCMonth();
        var day = nativeDate.getUTCDate();
        return new TuiDay(year, month, day);
    };
    /**
     * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.
     *
     * @param year any year value, including invalid
     * @param month any month value, including invalid (months start with 0)
     * @param day any day value, including invalid
     * @return normalized date
     */
    TuiDay.normalizeOf = function (year, month, day) {
        var normalizedYear = TuiYear.normalizeYearPart(year);
        var normalizedMonth = TuiMonth.normalizeMonthPart(month);
        var normalizedDay = TuiDay.normalizeDayPart(day, normalizedMonth, normalizedYear);
        return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);
    };
    TuiDay.lengthBetween = function (from, to) {
        return Math.round((to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) /
            (1000 * 60 * 60 * 24));
    };
    TuiDay.parseRawDateString = function (date, dateMode) {
        if (dateMode === void 0) { dateMode = "DMY"; }
        tuiAssert.assert(date.length === DATE_FILLER_LENGTH, "[parseRawDateString]: wrong date string length");
        switch (dateMode) {
            case "YMD":
                return {
                    day: parseInt(date.slice(8, 10), 10),
                    month: parseInt(date.slice(5, 7), 10) - 1,
                    year: parseInt(date.slice(0, 4), 10),
                };
            case "MDY":
                return {
                    day: parseInt(date.slice(3, 5), 10),
                    month: parseInt(date.slice(0, 2), 10) - 1,
                    year: parseInt(date.slice(6, 10), 10),
                };
            default:
            case "DMY":
                return {
                    day: parseInt(date.slice(0, 2), 10),
                    month: parseInt(date.slice(3, 5), 10) - 1,
                    year: parseInt(date.slice(6, 10), 10),
                };
        }
    };
    // TODO: Move month and year related code corresponding classes
    /**
     * Parsing a string with date with normalization
     *
     * @param rawDate date string
     * @param dateMode date format of the date string (DMY | MDY | YMD)
     * @return normalized date
     */
    TuiDay.normalizeParse = function (rawDate, dateMode) {
        if (dateMode === void 0) { dateMode = "DMY"; }
        var _a = this.parseRawDateString(rawDate, dateMode), day = _a.day, month = _a.month, year = _a.year;
        return TuiDay.normalizeOf(year, month, day);
    };
    /**
     * Parsing a date stringified in a toJSON format
     * @param yearMonthDayString date string in format of YYYY-MM-DD
     * @return date
     * @throws exceptions if any part of the date is invalid
     */
    TuiDay.jsonParse = function (yearMonthDayString) {
        var _a = this.parseRawDateString(yearMonthDayString, "YMD"), day = _a.day, month = _a.month, year = _a.year;
        if (!TuiYear.isValidYear(year)) {
            throw new InvalidYearException(year);
        }
        if (!TuiMonth.isValidMonth(year, month)) {
            throw new InvalidMonthException(month);
        }
        if (!Number.isInteger(day) ||
            !inRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1)) {
            throw new InvalidDayException(day);
        }
        return new TuiDay(year, month, day);
    };
    TuiDay.normalizeDayPart = function (day, month, year) {
        tuiAssert.assert(TuiMonth.isValidMonth(year, month));
        var monthDaysCount = TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year));
        return normalizeToIntNumber(day, 1, monthDaysCount);
    };
    Object.defineProperty(TuiDay.prototype, "formattedDayPart", {
        get: function () {
            return padStart(String(this.day), 2, "0");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDay.prototype, "formattedDay", {
        /**
         * @deprecated use {@link getFormattedDay} instead
         * Formatted whole date
         */
        get: function () {
            return this.formattedDayPart + "." + this.formattedMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDay.prototype, "isWeekend", {
        get: function () {
            var dayOfWeek = this.dayOfWeek(false);
            return dayOfWeek === 6 /* Saturday */ || dayOfWeek === 0 /* Sunday */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns day of week
     *
     * @param startFromMonday whether week starts from Monday and not from Sunday
     * @return day of week (from 0 to 6)
     */
    TuiDay.prototype.dayOfWeek = function (startFromMonday) {
        if (startFromMonday === void 0) { startFromMonday = true; }
        var dayOfWeek = startFromMonday
            ? this.toLocalNativeDate().getDay() - 1
            : this.toLocalNativeDate().getDay();
        return dayOfWeek < 0 ? 6 : dayOfWeek;
    };
    /**
     * Passed date is after current
     */
    TuiDay.prototype.dayBefore = function (another) {
        return (this.monthBefore(another) ||
            (this.monthSame(another) && this.day < another.day));
    };
    /**
     * Passed date is after or equals to current
     */
    TuiDay.prototype.daySameOrBefore = function (another) {
        return (this.monthBefore(another) ||
            (this.monthSame(another) && this.day <= another.day));
    };
    /**
     * Passed date is the same as current
     */
    TuiDay.prototype.daySame = function (another) {
        return this.monthSame(another) && this.day === another.day;
    };
    /**
     * Passed date is either before or the same as current
     */
    TuiDay.prototype.daySameOrAfter = function (another) {
        return (this.monthAfter(another) ||
            (this.monthSame(another) && this.day >= another.day));
    };
    /**
     * Passed date is before current
     */
    TuiDay.prototype.dayAfter = function (another) {
        return (this.monthAfter(another) ||
            (this.monthSame(another) && this.day > another.day));
    };
    /**
     * Clamping date between two limits
     *
     * @param min
     * @param max
     * @return clamped date
     */
    TuiDay.prototype.dayLimit = function (min, max) {
        if (min !== null && this.dayBefore(min)) {
            return min;
        }
        if (max !== null && this.dayAfter(max)) {
            return max;
        }
        return this;
    };
    // TODO: 3.0 Consider removing `backwards` option
    /**
     * Immutably alters current day by passed offset
     *
     * If resulting month has more days than original one, date is rounded to the maximum day
     * in the resulting month. Offset of days will be calculated based on the resulted year and month
     * to not interfere with parent classes methods
     *
     * @param offset
     * @param backwards shift date backwards
     * @return new date object as a result of offsetting current
     */
    TuiDay.prototype.append = function (_a, backwards) {
        var _b = _a.year, year = _b === void 0 ? 0 : _b, _c = _a.month, month = _c === void 0 ? 0 : _c, _d = _a.day, day = _d === void 0 ? 0 : _d;
        if (backwards === void 0) { backwards = false; }
        if (backwards) {
            year *= -1;
            month *= -1;
            day *= -1;
        }
        var totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;
        var years = Math.floor(totalMonths / MONTHS_IN_YEAR);
        var months = totalMonths % MONTHS_IN_YEAR;
        var days = Math.min(this.day, TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) + day;
        while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {
            days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));
            if (months === 11 /* December */) {
                years++;
                months = 0 /* January */;
            }
            else {
                months++;
            }
        }
        while (days < MIN_DAY) {
            if (months === 0 /* January */) {
                years--;
                months = 11 /* December */;
            }
            else {
                months--;
            }
            days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));
        }
        return new TuiDay(years, months, days);
    };
    /**
     * Returns formatted whole date
     */
    TuiDay.prototype.getFormattedDay = function (dateFormat, separator) {
        tuiAssert.assert(separator.length === 1, "Separator should consist of only 1 symbol");
        var dd = this.formattedDayPart;
        var mm = this.formattedMonthPart;
        var yyyy = this.formattedYear;
        switch (dateFormat) {
            case "YMD":
                return "" + yyyy + separator + mm + separator + dd;
            case "MDY":
                return "" + mm + separator + dd + separator + yyyy;
            case "DMY":
            default:
                return "" + dd + separator + mm + separator + yyyy;
        }
    };
    TuiDay.prototype.toString = function (dateFormat, separator) {
        if (dateFormat === void 0) { dateFormat = "DMY"; }
        if (separator === void 0) { separator = "."; }
        return this.getFormattedDay(dateFormat, separator);
    };
    TuiDay.prototype.toJSON = function () {
        return _super.prototype.toJSON.call(this) + "-" + this.formattedDayPart;
    };
    /**
     * Returns native {@link Date} based on local time zone
     */
    TuiDay.prototype.toLocalNativeDate = function () {
        return new Date(this.year, this.month, this.day);
    };
    /**
     * Returns native {@link Date} based on UTC
     */
    TuiDay.prototype.toUtcNativeDate = function () {
        return new Date(Date.UTC(this.year, this.month, this.day));
    };
    return TuiDay;
}(TuiMonth));
export { TuiDay };
//# sourceMappingURL=data:application/json;base64,