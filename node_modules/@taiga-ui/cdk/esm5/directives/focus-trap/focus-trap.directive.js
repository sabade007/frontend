import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, OnDestroy, Renderer2, } from '@angular/core';
import { containsOrAfter } from '@taiga-ui/cdk/utils/dom';
import { blurNativeFocused, getClosestFocusable, getNativeFocused, setNativeFocused, } from '@taiga-ui/cdk/utils/focus';
// @dynamic
var TuiFocusTrapDirective = /** @class */ (function () {
    function TuiFocusTrapDirective(documentRef, elementRef, renderer) {
        var _this = this;
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.activeElement = getNativeFocused(this.documentRef);
        /**
         * This would cause currently focused element to lose focus,
         * but it might cause ExpressionChanged error due to potential HostBinding.
         * Microtask keeps it in the same frame but allows change detection to run
         */
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(function () {
            setNativeFocused(_this.elementRef.nativeElement);
        });
    }
    TuiFocusTrapDirective.prototype.onBlur = function () {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'tabIndex');
    };
    TuiFocusTrapDirective.prototype.onFocusIn = function (node) {
        if (containsOrAfter(this.elementRef.nativeElement, node)) {
            return;
        }
        var focusable = getClosestFocusable(this.elementRef.nativeElement, false, this.elementRef.nativeElement);
        if (focusable) {
            setNativeFocused(focusable);
        }
    };
    TuiFocusTrapDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        blurNativeFocused(this.documentRef);
        /**
         * HostListeners are triggered even after ngOnDestroy
         * {@link https://github.com/angular/angular/issues/38100}
         * so we need to delay it but stay in the same sync cycle,
         * therefore using Promise instead of setTimeout
         */
        // eslint-disable-next-line
        Promise.resolve().then(function () {
            // TODO: iframe warning
            if (_this.activeElement instanceof HTMLElement) {
                setNativeFocused(_this.activeElement);
            }
        });
    };
    TuiFocusTrapDirective.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
    ]; };
    __decorate([
        HostListener('blur')
    ], TuiFocusTrapDirective.prototype, "onBlur", null);
    __decorate([
        HostListener('window:focusin.silent', ['$event.target'])
    ], TuiFocusTrapDirective.prototype, "onFocusIn", null);
    TuiFocusTrapDirective = __decorate([
        Directive({
            selector: '[tuiFocusTrap]',
            host: {
                tabIndex: '0',
            },
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(Renderer2))
    ], TuiFocusTrapDirective);
    return TuiFocusTrapDirective;
}());
export { TuiFocusTrapDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdHJhcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZm9jdXMtdHJhcC8iLCJzb3VyY2VzIjpbImZvY3VzLXRyYXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLG1CQUFtQixFQUNuQixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEdBQ25CLE1BQU0sMkJBQTJCLENBQUM7QUFFbkMsV0FBVztBQU9YO0lBR0ksK0JBQ3VDLFdBQXFCLEVBRXZDLFVBQW1DLEVBQ2hCLFFBQW1CO1FBSjNELGlCQWVDO1FBZHNDLGdCQUFXLEdBQVgsV0FBVyxDQUFVO1FBRXZDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFOMUMsa0JBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFRaEU7Ozs7V0FJRztRQUNILG1FQUFtRTtRQUNuRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ25CLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBR0Qsc0NBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFHRCx5Q0FBUyxHQUFULFVBQVUsSUFBVTtRQUNoQixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUN0RCxPQUFPO1NBQ1Y7UUFFRCxJQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLEtBQUssRUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FDaEMsQ0FBQztRQUVGLElBQUksU0FBUyxFQUFFO1lBQ1gsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRUQsMkNBQVcsR0FBWDtRQUFBLGlCQWdCQztRQWZHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVwQzs7Ozs7V0FLRztRQUNILDJCQUEyQjtRQUMzQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ25CLHVCQUF1QjtZQUN2QixJQUFJLEtBQUksQ0FBQyxhQUFhLFlBQVksV0FBVyxFQUFFO2dCQUMzQyxnQkFBZ0IsQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDeEM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQXREbUQsUUFBUSx1QkFBdkQsTUFBTSxTQUFDLFFBQVE7Z0JBRWEsVUFBVSx1QkFEdEMsTUFBTSxTQUFDLFVBQVU7Z0JBRTRCLFNBQVMsdUJBQXRELE1BQU0sU0FBQyxTQUFTOztJQWNyQjtRQURDLFlBQVksQ0FBQyxNQUFNLENBQUM7dURBR3BCO0lBR0Q7UUFEQyxZQUFZLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQzswREFleEQ7SUF4Q1EscUJBQXFCO1FBTmpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsSUFBSSxFQUFFO2dCQUNGLFFBQVEsRUFBRSxHQUFHO2FBQ2hCO1NBQ0osQ0FBQztRQUtPLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWxCLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO09BUGIscUJBQXFCLENBMkRqQztJQUFELDRCQUFDO0NBQUEsQUEzREQsSUEyREM7U0EzRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Y29udGFpbnNPckFmdGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge1xuICAgIGJsdXJOYXRpdmVGb2N1c2VkLFxuICAgIGdldENsb3Nlc3RGb2N1c2FibGUsXG4gICAgZ2V0TmF0aXZlRm9jdXNlZCxcbiAgICBzZXROYXRpdmVGb2N1c2VkLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcblxuLy8gQGR5bmFtaWNcbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUZvY3VzVHJhcF0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgdGFiSW5kZXg6ICcwJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGb2N1c1RyYXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlRWxlbWVudCA9IGdldE5hdGl2ZUZvY3VzZWQodGhpcy5kb2N1bWVudFJlZik7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChSZW5kZXJlcjIpIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICApIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd291bGQgY2F1c2UgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudCB0byBsb3NlIGZvY3VzLFxuICAgICAgICAgKiBidXQgaXQgbWlnaHQgY2F1c2UgRXhwcmVzc2lvbkNoYW5nZWQgZXJyb3IgZHVlIHRvIHBvdGVudGlhbCBIb3N0QmluZGluZy5cbiAgICAgICAgICogTWljcm90YXNrIGtlZXBzIGl0IGluIHRoZSBzYW1lIGZyYW1lIGJ1dCBhbGxvd3MgY2hhbmdlIGRldGVjdGlvbiB0byBydW5cbiAgICAgICAgICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBzZXROYXRpdmVGb2N1c2VkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignYmx1cicpXG4gICAgb25CbHVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RhYkluZGV4Jyk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignd2luZG93OmZvY3VzaW4uc2lsZW50JywgWyckZXZlbnQudGFyZ2V0J10pXG4gICAgb25Gb2N1c0luKG5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zT3JBZnRlcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgbm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGdldENsb3Nlc3RGb2N1c2FibGUoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGZvY3VzYWJsZSkge1xuICAgICAgICAgICAgc2V0TmF0aXZlRm9jdXNlZChmb2N1c2FibGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGJsdXJOYXRpdmVGb2N1c2VkKHRoaXMuZG9jdW1lbnRSZWYpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0TGlzdGVuZXJzIGFyZSB0cmlnZ2VyZWQgZXZlbiBhZnRlciBuZ09uRGVzdHJveVxuICAgICAgICAgKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzgxMDB9XG4gICAgICAgICAqIHNvIHdlIG5lZWQgdG8gZGVsYXkgaXQgYnV0IHN0YXkgaW4gdGhlIHNhbWUgc3luYyBjeWNsZSxcbiAgICAgICAgICogdGhlcmVmb3JlIHVzaW5nIFByb21pc2UgaW5zdGVhZCBvZiBzZXRUaW1lb3V0XG4gICAgICAgICAqL1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBpZnJhbWUgd2FybmluZ1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2V0TmF0aXZlRm9jdXNlZCh0aGlzLmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=