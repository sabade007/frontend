import { __decorate, __param, __read, __spread } from "tslib";
import { Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional, Output, SkipSelf, } from '@angular/core';
import { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk/decorators';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { TUI_ACTIVE_ELEMENT } from '@taiga-ui/cdk/tokens';
import { Observable } from 'rxjs';
import { distinctUntilChanged, map, skip, startWith } from 'rxjs/operators';
var TuiActiveZoneDirective = /** @class */ (function () {
    function TuiActiveZoneDirective(active$, ngZone, elementRef, directParentActiveZone) {
        var _this = this;
        this.active$ = active$;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.directParentActiveZone = directParentActiveZone;
        this.subActiveZones = [];
        this.tuiActiveZoneParent = null;
        this.tuiActiveZoneChange = this.active$.pipe(map(function (element) { return !!element && _this.contains(element); }), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.ngZone));
        if (this.directParentActiveZone) {
            this.directParentActiveZone.addSubActiveZone(this);
        }
    }
    TuiActiveZoneDirective_1 = TuiActiveZoneDirective;
    Object.defineProperty(TuiActiveZoneDirective.prototype, "tuiActiveZoneParentSetter", {
        set: function (zone) {
            this.setZone(zone);
        },
        enumerable: true,
        configurable: true
    });
    TuiActiveZoneDirective.prototype.ngOnDestroy = function () {
        if (this.directParentActiveZone) {
            this.directParentActiveZone.removeSubActiveZone(this);
        }
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
    };
    TuiActiveZoneDirective.prototype.contains = function (node) {
        return (this.elementRef.nativeElement.contains(node) ||
            this.subActiveZones.some(function (item, index, array) {
                return array.indexOf(item) === index && item.contains(node);
            }));
    };
    TuiActiveZoneDirective.prototype.setZone = function (zone) {
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
        if (zone) {
            zone.addSubActiveZone(this);
        }
        this.tuiActiveZoneParent = zone;
    };
    TuiActiveZoneDirective.prototype.addSubActiveZone = function (activeZone) {
        this.subActiveZones = __spread(this.subActiveZones, [activeZone]);
    };
    TuiActiveZoneDirective.prototype.removeSubActiveZone = function (activeZone) {
        var index = this.subActiveZones.findIndex(function (item) { return item === activeZone; });
        this.subActiveZones = __spread(this.subActiveZones.slice(0, index), this.subActiveZones.slice(index + 1));
    };
    var TuiActiveZoneDirective_1;
    TuiActiveZoneDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_ACTIVE_ELEMENT,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiActiveZoneDirective, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TuiActiveZoneDirective_1,] }] }
    ]; };
    __decorate([
        Input('tuiActiveZoneParent'),
        tuiDefaultProp()
    ], TuiActiveZoneDirective.prototype, "tuiActiveZoneParentSetter", null);
    __decorate([
        Output()
    ], TuiActiveZoneDirective.prototype, "tuiActiveZoneChange", void 0);
    __decorate([
        tuiPure
    ], TuiActiveZoneDirective.prototype, "setZone", null);
    TuiActiveZoneDirective = TuiActiveZoneDirective_1 = __decorate([
        Directive({
            selector: '[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)',
            exportAs: 'tuiActiveZone',
        }),
        __param(0, Inject(TUI_ACTIVE_ELEMENT)),
        __param(1, Inject(NgZone)),
        __param(2, Inject(ElementRef)),
        __param(3, Optional()),
        __param(3, SkipSelf()),
        __param(3, Inject(TuiActiveZoneDirective_1))
    ], TuiActiveZoneDirective);
    return TuiActiveZoneDirective;
}());
export { TuiActiveZoneDirective };
//# sourceMappingURL=data:application/json;base64,