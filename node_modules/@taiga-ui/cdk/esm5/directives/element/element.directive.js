import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject } from '@angular/core';
var TuiElementDirective = /** @class */ (function () {
    function TuiElementDirective(_a) {
        var nativeElement = _a.nativeElement;
        /**
         * @note:
         * Typically, when your constructor is invoked with new,
         * an object is created, its constructor is assigned to
         * the invoked constructor and the object is then assigned
         * to this before executing any operations specified
         * in your constructor method.
         *
         * ERROR TypeError: Class constructor ElementRef cannot be invoked without 'new'
         * https://github.com/Tinkoff/taiga-ui/issues/3072
         *
         * This way we can instantiate object creation
         * without additional prototype chain for possible fix bug.
         */
        return new ElementRef(nativeElement);
    }
    TuiElementDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    TuiElementDirective = __decorate([
        Directive({
            selector: '[tuiElement]',
            exportAs: 'elementRef',
        }),
        __param(0, Inject(ElementRef))
    ], TuiElementDirective);
    return TuiElementDirective;
}());
export { TuiElementDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZWxlbWVudC8iLCJzb3VyY2VzIjpbImVsZW1lbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFNNUQ7SUFLSSw2QkFBZ0MsRUFBOEI7WUFBN0IsZ0NBQWE7UUFDMUM7Ozs7Ozs7Ozs7Ozs7V0FhRztRQUNILE9BQU8sSUFBSSxVQUFVLENBQUksYUFBYSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Z0JBaEJnRCxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTs7SUFMckIsbUJBQW1CO1FBSi9CLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFFBQVEsRUFBRSxZQUFZO1NBQ3pCLENBQUM7UUFNZSxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQUx0QixtQkFBbUIsQ0FzQi9CO0lBQUQsMEJBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQXRCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpRWxlbWVudF0nLFxuICAgIGV4cG9ydEFzOiAnZWxlbWVudFJlZicsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUVsZW1lbnREaXJlY3RpdmU8VCBleHRlbmRzIEVsZW1lbnQgPSBIVE1MRWxlbWVudD5cbiAgICBpbXBsZW1lbnRzIEVsZW1lbnRSZWY8VD5cbntcbiAgICBuYXRpdmVFbGVtZW50ITogVDtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPFQ+KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbm90ZTpcbiAgICAgICAgICogVHlwaWNhbGx5LCB3aGVuIHlvdXIgY29uc3RydWN0b3IgaXMgaW52b2tlZCB3aXRoIG5ldyxcbiAgICAgICAgICogYW4gb2JqZWN0IGlzIGNyZWF0ZWQsIGl0cyBjb25zdHJ1Y3RvciBpcyBhc3NpZ25lZCB0b1xuICAgICAgICAgKiB0aGUgaW52b2tlZCBjb25zdHJ1Y3RvciBhbmQgdGhlIG9iamVjdCBpcyB0aGVuIGFzc2lnbmVkXG4gICAgICAgICAqIHRvIHRoaXMgYmVmb3JlIGV4ZWN1dGluZyBhbnkgb3BlcmF0aW9ucyBzcGVjaWZpZWRcbiAgICAgICAgICogaW4geW91ciBjb25zdHJ1Y3RvciBtZXRob2QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEVSUk9SIFR5cGVFcnJvcjogQ2xhc3MgY29uc3RydWN0b3IgRWxlbWVudFJlZiBjYW5ub3QgYmUgaW52b2tlZCB3aXRob3V0ICduZXcnXG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9UaW5rb2ZmL3RhaWdhLXVpL2lzc3Vlcy8zMDcyXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgd2F5IHdlIGNhbiBpbnN0YW50aWF0ZSBvYmplY3QgY3JlYXRpb25cbiAgICAgICAgICogd2l0aG91dCBhZGRpdGlvbmFsIHByb3RvdHlwZSBjaGFpbiBmb3IgcG9zc2libGUgZml4IGJ1Zy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBuZXcgRWxlbWVudFJlZjxUPihuYXRpdmVFbGVtZW50KTtcbiAgICB9XG59XG4iXX0=