import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { preventDefault, typedFromEvent } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { merge, Observable } from 'rxjs';
import { distinctUntilChanged, filter, map, mapTo, startWith, switchMap, takeUntil, } from 'rxjs/operators';
// @dynamic
var TuiDroppableDirective = /** @class */ (function () {
    function TuiDroppableDirective(_a, destroy$) {
        var nativeElement = _a.nativeElement;
        this.tuiDroppableDropped = typedFromEvent(nativeElement, 'drop').pipe(preventDefault(), map(function (event) { return event.dataTransfer; }), filter(isPresent));
        this.tuiDroppableDragOverChange = typedFromEvent(nativeElement, 'dragenter').pipe(switchMap(function (_a) {
            var target = _a.target, dataTransfer = _a.dataTransfer;
            return merge(typedFromEvent(nativeElement, 'dragleave').pipe(filter(function (event) { return event.target === target; })), typedFromEvent(nativeElement, 'drop')).pipe(mapTo(null), startWith(dataTransfer));
        }), distinctUntilChanged(function (a, b) { return (!!a && !!b) || (!a && !b); }));
        // Required by Drag and Drop API to stop redirecting
        typedFromEvent(nativeElement, 'dragover')
            .pipe(preventDefault(), takeUntil(destroy$))
            .subscribe();
    }
    TuiDroppableDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiDroppableDirective.prototype, "tuiDroppableDropped", void 0);
    __decorate([
        Output()
    ], TuiDroppableDirective.prototype, "tuiDroppableDragOverChange", void 0);
    TuiDroppableDirective = __decorate([
        Directive({
            selector: '[tuiDroppableDropped], [tuiDroppableDragOverChange]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiDestroyService))
    ], TuiDroppableDirective);
    return TuiDroppableDirective;
}());
export { TuiDroppableDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcHBhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9kcm9wcGFibGUvIiwic291cmNlcyI6WyJkcm9wcGFibGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxjQUFjLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDekUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEdBQ1osTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixXQUFXO0FBS1g7SUFPSSwrQkFDd0IsRUFBd0MsRUFDakMsUUFBMEI7WUFEaEMsZ0NBQWE7UUFHbEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNqRSxjQUFjLEVBQUUsRUFDaEIsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFlBQVksRUFBbEIsQ0FBa0IsQ0FBQyxFQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQ3BCLENBQUM7UUFFRixJQUFJLENBQUMsMEJBQTBCLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQzdFLFNBQVMsQ0FBQyxVQUFDLEVBQXNCO2dCQUFyQixrQkFBTSxFQUFFLDhCQUFZO1lBQzVCLE9BQUEsS0FBSyxDQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUMzQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBdkIsQ0FBdUIsQ0FBQyxDQUMzQyxFQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQ3hDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFMNUMsQ0FLNEMsQ0FDL0MsRUFDRCxvQkFBb0IsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUM3RCxDQUFDO1FBRUYsb0RBQW9EO1FBQ3BELGNBQWMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDO2FBQ3BDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDM0MsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Z0JBekJ3QyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtnQkFDbUIsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjs7SUFQN0I7UUFEQyxNQUFNLEVBQUU7c0VBQzhDO0lBR3ZEO1FBREMsTUFBTSxFQUFFOzZFQUM0RDtJQUw1RCxxQkFBcUI7UUFKakMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHFEQUFxRDtZQUMvRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUNqQyxDQUFDO1FBU08sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtPQVRyQixxQkFBcUIsQ0FrQ2pDO0lBQUQsNEJBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQWxDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtwcmV2ZW50RGVmYXVsdCwgdHlwZWRGcm9tRXZlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge2lzUHJlc2VudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwLFxuICAgIG1hcFRvLFxuICAgIHN0YXJ0V2l0aCxcbiAgICBzd2l0Y2hNYXAsXG4gICAgdGFrZVVudGlsLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEcm9wcGFibGVEcm9wcGVkXSwgW3R1aURyb3BwYWJsZURyYWdPdmVyQ2hhbmdlXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlEcm9wcGFibGVEaXJlY3RpdmUge1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aURyb3BwYWJsZURyb3BwZWQ6IE9ic2VydmFibGU8RGF0YVRyYW5zZmVyPjtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aURyb3BwYWJsZURyYWdPdmVyQ2hhbmdlOiBPYnNlcnZhYmxlPERhdGFUcmFuc2ZlciB8IG51bGw+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgKSB7XG4gICAgICAgIHRoaXMudHVpRHJvcHBhYmxlRHJvcHBlZCA9IHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdkcm9wJykucGlwZShcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICBtYXAoZXZlbnQgPT4gZXZlbnQuZGF0YVRyYW5zZmVyKSxcbiAgICAgICAgICAgIGZpbHRlcihpc1ByZXNlbnQpLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMudHVpRHJvcHBhYmxlRHJhZ092ZXJDaGFuZ2UgPSB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnZHJhZ2VudGVyJykucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoe3RhcmdldCwgZGF0YVRyYW5zZmVyfSkgPT5cbiAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2RyYWdsZWF2ZScpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gZXZlbnQudGFyZ2V0ID09PSB0YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnZHJvcCcpLFxuICAgICAgICAgICAgICAgICkucGlwZShtYXBUbyhudWxsKSwgc3RhcnRXaXRoKGRhdGFUcmFuc2ZlcikpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKChhLCBiKSA9PiAoISFhICYmICEhYikgfHwgKCFhICYmICFiKSksXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gUmVxdWlyZWQgYnkgRHJhZyBhbmQgRHJvcCBBUEkgdG8gc3RvcCByZWRpcmVjdGluZ1xuICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnZHJhZ292ZXInKVxuICAgICAgICAgICAgLnBpcGUocHJldmVudERlZmF1bHQoKSwgdGFrZVVudGlsKGRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iXX0=