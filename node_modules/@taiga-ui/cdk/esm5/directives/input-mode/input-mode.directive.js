import { __decorate, __param } from "tslib";
import { Attribute, Directive, HostBinding, Inject, Input } from '@angular/core';
import { TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
/**
 * Abstraction over `inputMode` attribute
 */
var TuiInputModeDirective = /** @class */ (function () {
    function TuiInputModeDirective(pattern, isIOS) {
        this.pattern = pattern;
        this.isIOS = isIOS;
        this.mode = 'text';
    }
    Object.defineProperty(TuiInputModeDirective.prototype, "patternAttribute", {
        get: function () {
            return this.mode === 'numeric' && this.isIOS && !this.pattern
                ? '[0-9]*'
                : this.pattern;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputModeDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['pattern',] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] }
    ]; };
    __decorate([
        Input('tuiInputMode'),
        HostBinding('attr.inputmode'),
        HostBinding('attr.x-inputmode')
    ], TuiInputModeDirective.prototype, "mode", void 0);
    __decorate([
        HostBinding('attr.pattern')
    ], TuiInputModeDirective.prototype, "patternAttribute", null);
    TuiInputModeDirective = __decorate([
        Directive({
            selector: 'input[tuiInputMode]',
        }),
        __param(0, Attribute('pattern')),
        __param(1, Inject(TUI_IS_IOS))
    ], TuiInputModeDirective);
    return TuiInputModeDirective;
}());
export { TuiInputModeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9kZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvaW5wdXQtbW9kZS8iLCJzb3VyY2VzIjpbImlucHV0LW1vZGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFHaEQ7O0dBRUc7QUFJSDtJQU1JLCtCQUMyQyxPQUFzQixFQUN4QixLQUFjO1FBRFosWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUN4QixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBSnZELFNBQUksR0FBa0IsTUFBTSxDQUFDO0lBSzFCLENBQUM7SUFHSixzQkFBSSxtREFBZ0I7YUFBcEI7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztnQkFDekQsQ0FBQyxDQUFDLFFBQVE7Z0JBQ1YsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7OzZDQVRJLFNBQVMsU0FBQyxTQUFTOzhDQUNuQixNQUFNLFNBQUMsVUFBVTs7SUFKdEI7UUFIQyxLQUFLLENBQUMsY0FBYyxDQUFDO1FBQ3JCLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QixXQUFXLENBQUMsa0JBQWtCLENBQUM7dURBQ0g7SUFRN0I7UUFEQyxXQUFXLENBQUMsY0FBYyxDQUFDO2lFQUszQjtJQWhCUSxxQkFBcUI7UUFIakMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHFCQUFxQjtTQUNsQyxDQUFDO1FBUU8sV0FBQSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDcEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7T0FSZCxxQkFBcUIsQ0FpQmpDO0lBQUQsNEJBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWpCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F0dHJpYnV0ZSwgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RVSV9JU19JT1N9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcbmltcG9ydCB7VHVpSW5wdXRNb2RlVH0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5cbi8qKlxuICogQWJzdHJhY3Rpb24gb3ZlciBgaW5wdXRNb2RlYCBhdHRyaWJ1dGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dFt0dWlJbnB1dE1vZGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSW5wdXRNb2RlRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoJ3R1aUlucHV0TW9kZScpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlucHV0bW9kZScpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLngtaW5wdXRtb2RlJylcbiAgICBtb2RlOiBUdWlJbnB1dE1vZGVUID0gJ3RleHQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3BhdHRlcm4nKSBwcml2YXRlIHJlYWRvbmx5IHBhdHRlcm46IHN0cmluZyB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoVFVJX0lTX0lPUykgcHJpdmF0ZSByZWFkb25seSBpc0lPUzogYm9vbGVhbixcbiAgICApIHt9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucGF0dGVybicpXG4gICAgZ2V0IHBhdHRlcm5BdHRyaWJ1dGUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09ICdudW1lcmljJyAmJiB0aGlzLmlzSU9TICYmICF0aGlzLnBhdHRlcm5cbiAgICAgICAgICAgID8gJ1swLTldKidcbiAgICAgICAgICAgIDogdGhpcy5wYXR0ZXJuO1xuICAgIH1cbn1cbiJdfQ==