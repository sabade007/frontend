import { __decorate, __param } from "tslib";
import { Directive, EventEmitter, HostBinding, HostListener, Inject, Output, } from '@angular/core';
import { TuiDirectiveStylesService } from '@taiga-ui/cdk/services';
import { TuiAutofilledStyleComponent } from './autofilled-style.component';
var TuiAutofilledDirective = /** @class */ (function () {
    function TuiAutofilledDirective(directiveStyles) {
        this.autofilled = false;
        this.tuiAutofilledChange = new EventEmitter();
        directiveStyles.addComponent(TuiAutofilledStyleComponent);
    }
    TuiAutofilledDirective.prototype.transitionStartHandler = function (_a) {
        var propertyName = _a.propertyName, target = _a.target;
        var _b;
        var matchedAutofill = propertyName.includes('box-shadow') && ((_b = target) === null || _b === void 0 ? void 0 : _b.matches('input'));
        if (matchedAutofill) {
            this.autofilled = !this.autofilled;
            this.tuiAutofilledChange.emit(this.autofilled);
        }
    };
    TuiAutofilledDirective.ctorParameters = function () { return [
        { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] }
    ]; };
    __decorate([
        HostBinding('class._autofilled')
    ], TuiAutofilledDirective.prototype, "autofilled", void 0);
    __decorate([
        Output()
    ], TuiAutofilledDirective.prototype, "tuiAutofilledChange", void 0);
    __decorate([
        HostListener('transitionstart', ['$event'])
    ], TuiAutofilledDirective.prototype, "transitionStartHandler", null);
    TuiAutofilledDirective = __decorate([
        Directive({
            selector: '[tuiAutofilledChange]',
            host: { class: 'tui-autofill' },
        }),
        __param(0, Inject(TuiDirectiveStylesService))
    ], TuiAutofilledDirective);
    return TuiAutofilledDirective;
}());
export { TuiAutofilledDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZpbGxlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYXV0b2ZpbGxlZC8iLCJzb3VyY2VzIjpbImF1dG9maWxsZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFakUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFNekU7SUFPSSxnQ0FDdUMsZUFBMEM7UUFOakYsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUdWLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFLdkQsZUFBZSxDQUFDLFlBQVksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFHRCx1REFBc0IsR0FBdEIsVUFBdUIsRUFBdUM7WUFBdEMsOEJBQVksRUFBRSxrQkFBTTs7UUFDeEMsSUFBTSxlQUFlLEdBQ2pCLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFdBQUssTUFBa0IsMENBQUUsT0FBTyxDQUFDLE9BQU8sRUFBQyxDQUFDO1FBRWpGLElBQUksZUFBZSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ25DLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQzs7Z0JBZHVELHlCQUF5Qix1QkFBNUUsTUFBTSxTQUFDLHlCQUF5Qjs7SUFOckM7UUFEQyxXQUFXLENBQUMsbUJBQW1CLENBQUM7OERBQ2Q7SUFHbkI7UUFEQyxNQUFNLEVBQUU7dUVBQ2tEO0lBUzNEO1FBREMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7d0VBUzNDO0lBdEJRLHNCQUFzQjtRQUpsQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxjQUFjLEVBQUM7U0FDaEMsQ0FBQztRQVNPLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7T0FSN0Isc0JBQXNCLENBdUJsQztJQUFELDZCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F2Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5cbmltcG9ydCB7VHVpQXV0b2ZpbGxlZFN0eWxlQ29tcG9uZW50fSBmcm9tICcuL2F1dG9maWxsZWQtc3R5bGUuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpQXV0b2ZpbGxlZENoYW5nZV0nLFxuICAgIGhvc3Q6IHtjbGFzczogJ3R1aS1hdXRvZmlsbCd9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBdXRvZmlsbGVkRGlyZWN0aXZlIHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9hdXRvZmlsbGVkJylcbiAgICBhdXRvZmlsbGVkID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlBdXRvZmlsbGVkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZSkgZGlyZWN0aXZlU3R5bGVzOiBUdWlEaXJlY3RpdmVTdHlsZXNTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBkaXJlY3RpdmVTdHlsZXMuYWRkQ29tcG9uZW50KFR1aUF1dG9maWxsZWRTdHlsZUNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigndHJhbnNpdGlvbnN0YXJ0JywgWyckZXZlbnQnXSlcbiAgICB0cmFuc2l0aW9uU3RhcnRIYW5kbGVyKHtwcm9wZXJ0eU5hbWUsIHRhcmdldH06IFRyYW5zaXRpb25FdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBtYXRjaGVkQXV0b2ZpbGwgPVxuICAgICAgICAgICAgcHJvcGVydHlOYW1lLmluY2x1ZGVzKCdib3gtc2hhZG93JykgJiYgKHRhcmdldCBhcyBFbGVtZW50KT8ubWF0Y2hlcygnaW5wdXQnKTtcblxuICAgICAgICBpZiAobWF0Y2hlZEF1dG9maWxsKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9maWxsZWQgPSAhdGhpcy5hdXRvZmlsbGVkO1xuICAgICAgICAgICAgdGhpcy50dWlBdXRvZmlsbGVkQ2hhbmdlLmVtaXQodGhpcy5hdXRvZmlsbGVkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==