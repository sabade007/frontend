import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
import { clamp } from '@taiga-ui/cdk/utils/math';
var MAX_VALUE = 0x10000;
var TuiRepeatTimesContext = /** @class */ (function () {
    function TuiRepeatTimesContext($implicit) {
        this.$implicit = $implicit;
    }
    return TuiRepeatTimesContext;
}());
export { TuiRepeatTimesContext };
/**
 * Directive similar to ngFor but using a number of repetitions rather than an array
 *
 * {@link TuiRepeatTimesDirective.tuiRepeatTimesOf requested number of times}.
 * {@link TuiRepeatTimesContext context} for every instance of the template inherits outer context and stores
 * {@link TuiRepeatTimesContext.$implicit index} of a template instance.
 */
var TuiRepeatTimesDirective = /** @class */ (function () {
    function TuiRepeatTimesDirective(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    Object.defineProperty(TuiRepeatTimesDirective.prototype, "tuiRepeatTimesOf", {
        set: function (count) {
            var safeCount = Math.floor(clamp(count, 0, MAX_VALUE));
            var length = this.viewContainer.length;
            if (count < length) {
                this.removeContainers(length - count);
            }
            else {
                this.addContainers(safeCount);
            }
        },
        enumerable: true,
        configurable: true
    });
    TuiRepeatTimesDirective.prototype.addContainers = function (count) {
        for (var index = this.viewContainer.length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, new TuiRepeatTimesContext(index));
        }
    };
    TuiRepeatTimesDirective.prototype.removeContainers = function (amount) {
        for (var index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    };
    TuiRepeatTimesDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
    ]; };
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiRepeatTimesDirective.prototype, "tuiRepeatTimesOf", null);
    TuiRepeatTimesDirective = __decorate([
        Directive({
            selector: '[tuiRepeatTimes][tuiRepeatTimesOf]',
        }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(TemplateRef))
    ], TuiRepeatTimesDirective);
    return TuiRepeatTimesDirective;
}());
export { TuiRepeatTimesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LXRpbWVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9yZXBlYXQtdGltZXMvIiwic291cmNlcyI6WyJyZXBlYXQtdGltZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRTNELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUvQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFFMUI7SUFDSSwrQkFBcUIsU0FBaUI7UUFBakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUFHLENBQUM7SUFDOUMsNEJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7QUFFRDs7Ozs7O0dBTUc7QUFJSDtJQWVJLGlDQUVxQixhQUErQixFQUUvQixXQUErQztRQUYvQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFFL0IsZ0JBQVcsR0FBWCxXQUFXLENBQW9DO0lBQ2pFLENBQUM7SUFqQkosc0JBQUkscURBQWdCO2FBQXBCLFVBQXFCLEtBQWE7WUFDOUIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBRWxELElBQUEsa0NBQU0sQ0FBdUI7WUFFcEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFO2dCQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNO2dCQUNILElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDakM7UUFDTCxDQUFDOzs7T0FBQTtJQVNPLCtDQUFhLEdBQXJCLFVBQXNCLEtBQWE7UUFDL0IsS0FBSyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2hFLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUkscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQ25DLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFTyxrREFBZ0IsR0FBeEIsVUFBeUIsTUFBYztRQUNuQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0I7SUFDTCxDQUFDOztnQkFsQm1DLGdCQUFnQix1QkFEL0MsTUFBTSxTQUFDLGdCQUFnQjtnQkFHTSxXQUFXLHVCQUR4QyxNQUFNLFNBQUMsV0FBVzs7SUFmdkI7UUFGQyxLQUFLLEVBQUU7UUFDUCxpQkFBaUIsRUFBRTttRUFXbkI7SUFiUSx1QkFBdUI7UUFIbkMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9DQUFvQztTQUNqRCxDQUFDO1FBaUJPLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFFeEIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7T0FsQmYsdUJBQXVCLENBb0NuQztJQUFELDhCQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FwQ1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpUmVxdWlyZWRTZXR0ZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGVjb3JhdG9ycyc7XG5pbXBvcnQge1R1aUNvbnRleHRXaXRoSW1wbGljaXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvaW50ZXJmYWNlcyc7XG5pbXBvcnQge2NsYW1wfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgnO1xuXG5jb25zdCBNQVhfVkFMVUUgPSAweDEwMDAwO1xuXG5leHBvcnQgY2xhc3MgVHVpUmVwZWF0VGltZXNDb250ZXh0IGltcGxlbWVudHMgVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxudW1iZXI+IHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSAkaW1wbGljaXQ6IG51bWJlcikge31cbn1cblxuLyoqXG4gKiBEaXJlY3RpdmUgc2ltaWxhciB0byBuZ0ZvciBidXQgdXNpbmcgYSBudW1iZXIgb2YgcmVwZXRpdGlvbnMgcmF0aGVyIHRoYW4gYW4gYXJyYXlcbiAqXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNEaXJlY3RpdmUudHVpUmVwZWF0VGltZXNPZiByZXF1ZXN0ZWQgbnVtYmVyIG9mIHRpbWVzfS5cbiAqIHtAbGluayBUdWlSZXBlYXRUaW1lc0NvbnRleHQgY29udGV4dH0gZm9yIGV2ZXJ5IGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBpbmhlcml0cyBvdXRlciBjb250ZXh0IGFuZCBzdG9yZXNcbiAqIHtAbGluayBUdWlSZXBlYXRUaW1lc0NvbnRleHQuJGltcGxpY2l0IGluZGV4fSBvZiBhIHRlbXBsYXRlIGluc3RhbmNlLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlSZXBlYXRUaW1lc11bdHVpUmVwZWF0VGltZXNPZl0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlSZXBlYXRUaW1lc0RpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBAdHVpUmVxdWlyZWRTZXR0ZXIoKVxuICAgIHNldCB0dWlSZXBlYXRUaW1lc09mKGNvdW50OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc2FmZUNvdW50ID0gTWF0aC5mbG9vcihjbGFtcChjb3VudCwgMCwgTUFYX1ZBTFVFKSk7XG5cbiAgICAgICAgY29uc3Qge2xlbmd0aH0gPSB0aGlzLnZpZXdDb250YWluZXI7XG5cbiAgICAgICAgaWYgKGNvdW50IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNvbnRhaW5lcnMobGVuZ3RoIC0gY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRDb250YWluZXJzKHNhZmVDb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFR1aVJlcGVhdFRpbWVzQ29udGV4dD4sXG4gICAgKSB7fVxuXG4gICAgcHJpdmF0ZSBhZGRDb250YWluZXJzKGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLnZpZXdDb250YWluZXIubGVuZ3RoOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3PFR1aVJlcGVhdFRpbWVzQ29udGV4dD4oXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICBuZXcgVHVpUmVwZWF0VGltZXNDb250ZXh0KGluZGV4KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUNvbnRhaW5lcnMoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFtb3VudDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19