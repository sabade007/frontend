import { __decorate } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { tuiAssertIsHTMLElement } from '@taiga-ui/cdk/classes';
import { shouldCall } from '@tinkoff/ng-event-plugins';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function movedOut(_a) {
    var currentTarget = _a.currentTarget, relatedTarget = _a.relatedTarget;
    if (!relatedTarget) {
        return true;
    }
    tuiAssertIsHTMLElement(currentTarget);
    tuiAssertIsHTMLElement(relatedTarget);
    return !currentTarget.contains(relatedTarget);
}
var TuiHoveredDirective = /** @class */ (function () {
    function TuiHoveredDirective() {
        this.tuiHoveredChange = new EventEmitter();
    }
    TuiHoveredDirective.prototype.onHover = function () {
        this.tuiHoveredChange.emit(true);
    };
    TuiHoveredDirective.prototype.onOut = function (_) {
        this.tuiHoveredChange.emit(false);
    };
    __decorate([
        Output()
    ], TuiHoveredDirective.prototype, "tuiHoveredChange", void 0);
    __decorate([
        HostListener('mouseenter')
    ], TuiHoveredDirective.prototype, "onHover", null);
    __decorate([
        shouldCall(movedOut),
        HostListener('mouseout.init', ['$event']),
        HostListener('mouseout.silent', ['$event'])
    ], TuiHoveredDirective.prototype, "onOut", null);
    TuiHoveredDirective = __decorate([
        Directive({
            selector: '[tuiHoveredChange]',
        })
    ], TuiHoveredDirective);
    return TuiHoveredDirective;
}());
export { TuiHoveredDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXJlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvaG92ZXJlZC8iLCJzb3VyY2VzIjpbImhvdmVyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLFFBQVEsQ0FBQyxFQUEwQztRQUF6QyxnQ0FBYSxFQUFFLGdDQUFhO0lBQ2xELElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXRDLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFLRDtJQUFBO1FBRWEscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQWE1RCxDQUFDO0lBVkcscUNBQU8sR0FBUDtRQUNJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUtELG1DQUFLLEdBQUwsVUFBTSxDQUFhO1FBQ2YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBWkQ7UUFEQyxNQUFNLEVBQUU7aUVBQytDO0lBR3hEO1FBREMsWUFBWSxDQUFDLFlBQVksQ0FBQztzREFHMUI7SUFLRDtRQUhDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDcEIsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29EQUczQztJQWRRLG1CQUFtQjtRQUgvQixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsb0JBQW9CO1NBQ2pDLENBQUM7T0FDVyxtQkFBbUIsQ0FlL0I7SUFBRCwwQkFBQztDQUFBLEFBZkQsSUFlQztTQWZZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpQXNzZXJ0SXNIVE1MRWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcbmltcG9ydCB7c2hvdWxkQ2FsbH0gZnJvbSAnQHRpbmtvZmYvbmctZXZlbnQtcGx1Z2lucyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlZE91dCh7Y3VycmVudFRhcmdldCwgcmVsYXRlZFRhcmdldH06IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcbiAgICBpZiAoIXJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdHVpQXNzZXJ0SXNIVE1MRWxlbWVudChjdXJyZW50VGFyZ2V0KTtcbiAgICB0dWlBc3NlcnRJc0hUTUxFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgcmV0dXJuICFjdXJyZW50VGFyZ2V0LmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlIb3ZlcmVkQ2hhbmdlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhvdmVyZWREaXJlY3RpdmUge1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aUhvdmVyZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgICBvbkhvdmVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnR1aUhvdmVyZWRDaGFuZ2UuZW1pdCh0cnVlKTtcbiAgICB9XG5cbiAgICBAc2hvdWxkQ2FsbChtb3ZlZE91dClcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZW91dC5pbml0JywgWyckZXZlbnQnXSlcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZW91dC5zaWxlbnQnLCBbJyRldmVudCddKVxuICAgIG9uT3V0KF86IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50dWlIb3ZlcmVkQ2hhbmdlLmVtaXQoZmFsc2UpO1xuICAgIH1cbn1cbiJdfQ==