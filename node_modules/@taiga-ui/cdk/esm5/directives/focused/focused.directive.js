import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, NgZone, Output } from '@angular/core';
import { tuiZoneOptimized, typedFromEvent } from '@taiga-ui/cdk/observables';
import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { merge } from 'rxjs';
import { distinctUntilChanged, map, skip, startWith } from 'rxjs/operators';
/**
 * Directive to monitor focus/blur status, works with focusIn/focus-out
 * instead of focus/blur to sync events order with Internet Explorer and
 * other focus related directives that require bubbling
 */
var TuiFocusedDirective = /** @class */ (function () {
    function TuiFocusedDirective(_a, ngZone) {
        var nativeElement = _a.nativeElement;
        this.tuiFocusedChange = merge(typedFromEvent(nativeElement, 'focusin'), typedFromEvent(nativeElement, 'focusout')).pipe(map(function () { return isNativeFocused(nativeElement); }), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(ngZone));
    }
    TuiFocusedDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiFocusedDirective.prototype, "tuiFocusedChange", void 0);
    TuiFocusedDirective = __decorate([
        Directive({
            selector: '[tuiFocusedChange]',
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(NgZone))
    ], TuiFocusedDirective);
    return TuiFocusedDirective;
}());
export { TuiFocusedDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXNlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZm9jdXNlZC8iLCJzb3VyY2VzIjpbImZvY3VzZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0UsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUU7Ozs7R0FJRztBQUlIO0lBSUksNkJBRUksRUFBd0MsRUFDeEIsTUFBYztZQUQ3QixnQ0FBYTtRQUdkLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQ3pCLGNBQWMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQ3hDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQzVDLENBQUMsSUFBSSxDQUNGLEdBQUcsQ0FBQyxjQUFNLE9BQUEsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUE5QixDQUE4QixDQUFDLEVBQ3pDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFDaEIsb0JBQW9CLEVBQUUsRUFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUMzQixDQUFDO0lBQ04sQ0FBQzs7Z0JBYm9CLFVBQVUsdUJBRDFCLE1BQU0sU0FBQyxVQUFVO2dCQUVNLE1BQU0sdUJBQTdCLE1BQU0sU0FBQyxNQUFNOztJQUxsQjtRQURDLE1BQU0sRUFBRTtpRUFDc0M7SUFGdEMsbUJBQW1CO1FBSC9CLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvQkFBb0I7U0FDakMsQ0FBQztRQU1PLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWxCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO09BUFYsbUJBQW1CLENBb0IvQjtJQUFELDBCQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FwQlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgTmdab25lLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlab25lT3B0aW1pemVkLCB0eXBlZEZyb21FdmVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge2lzTmF0aXZlRm9jdXNlZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9mb2N1cyc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc2tpcCwgc3RhcnRXaXRofSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRvIG1vbml0b3IgZm9jdXMvYmx1ciBzdGF0dXMsIHdvcmtzIHdpdGggZm9jdXNJbi9mb2N1cy1vdXRcbiAqIGluc3RlYWQgb2YgZm9jdXMvYmx1ciB0byBzeW5jIGV2ZW50cyBvcmRlciB3aXRoIEludGVybmV0IEV4cGxvcmVyIGFuZFxuICogb3RoZXIgZm9jdXMgcmVsYXRlZCBkaXJlY3RpdmVzIHRoYXQgcmVxdWlyZSBidWJibGluZ1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlGb2N1c2VkQ2hhbmdlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUZvY3VzZWREaXJlY3RpdmUge1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aUZvY3VzZWRDaGFuZ2U6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgbmdab25lOiBOZ1pvbmUsXG4gICAgKSB7XG4gICAgICAgIHRoaXMudHVpRm9jdXNlZENoYW5nZSA9IG1lcmdlKFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2ZvY3VzaW4nKSxcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdmb2N1c291dCcpLFxuICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICBtYXAoKCkgPT4gaXNOYXRpdmVGb2N1c2VkKG5hdGl2ZUVsZW1lbnQpKSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgICAgc2tpcCgxKSxcbiAgICAgICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQobmdab25lKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=