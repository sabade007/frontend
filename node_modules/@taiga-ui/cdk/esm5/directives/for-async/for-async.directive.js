import { __decorate, __param, __read } from "tslib";
import { Directive, Inject, Input, OnChanges, OnDestroy, TemplateRef, ViewContainerRef, } from '@angular/core';
import { from, of, Subject } from 'rxjs';
import { concatMap, delay, takeUntil } from 'rxjs/operators';
var TuiForAsyncDirective = /** @class */ (function () {
    function TuiForAsyncDirective(view, template) {
        this.view = view;
        this.template = template;
        this.destroy$ = new Subject();
        this.tuiForAsyncTimeout = 10;
    }
    TuiForAsyncDirective.prototype.ngOnChanges = function () {
        this.clearViewForOldNodes();
        this.createAsyncViewForNewNodes();
    };
    TuiForAsyncDirective.prototype.ngOnDestroy = function () {
        this.clearViewForOldNodes();
        this.destroy$.complete();
    };
    TuiForAsyncDirective.prototype.createAsyncViewForNewNodes = function () {
        var _this = this;
        from((this.tuiForAsyncOf || []).entries())
            .pipe(concatMap(function (entry) { return of(entry).pipe(delay(_this.tuiForAsyncTimeout)); }), takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), index = _b[0], item = _b[1];
            return _this.view
                .createEmbeddedView(_this.template, { $implicit: item, index: index }, index)
                .detectChanges();
        });
    };
    TuiForAsyncDirective.prototype.clearViewForOldNodes = function () {
        this.destroy$.next();
        this.view.clear();
    };
    TuiForAsyncDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiForAsyncDirective.prototype, "tuiForAsyncOf", void 0);
    __decorate([
        Input()
    ], TuiForAsyncDirective.prototype, "tuiForAsyncTimeout", void 0);
    TuiForAsyncDirective = __decorate([
        Directive({ selector: '[tuiForAsync][tuiForAsyncOf]' }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(TemplateRef))
    ], TuiForAsyncDirective);
    return TuiForAsyncDirective;
}());
export { TuiForAsyncDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWFzeW5jLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9mb3ItYXN5bmMvIiwic291cmNlcyI6WyJmb3ItYXN5bmMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUczRDtJQVNJLDhCQUMrQyxJQUFzQixFQUMzQixRQUE4QjtRQUR6QixTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQVZ2RCxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU1oRCx1QkFBa0IsR0FBRyxFQUFFLENBQUM7SUFLckIsQ0FBQztJQUVKLDBDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsMENBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLHlEQUEwQixHQUFsQztRQUFBLGlCQVdDO1FBVkcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNyQyxJQUFJLENBQ0QsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQyxFQUNsRSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMzQjthQUNBLFNBQVMsQ0FBQyxVQUFDLEVBQWE7Z0JBQWIsa0JBQWEsRUFBWixhQUFLLEVBQUUsWUFBSTtZQUNwQixPQUFBLEtBQUksQ0FBQyxJQUFJO2lCQUNKLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssT0FBQSxFQUFDLEVBQUUsS0FBSyxDQUFDO2lCQUNsRSxhQUFhLEVBQUU7UUFGcEIsQ0FFb0IsQ0FDdkIsQ0FBQztJQUNWLENBQUM7SUFFTyxtREFBb0IsR0FBNUI7UUFDSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Z0JBOUJvRCxnQkFBZ0IsdUJBQWhFLE1BQU0sU0FBQyxnQkFBZ0I7Z0JBQ3dCLFdBQVcsdUJBQTFELE1BQU0sU0FBQyxXQUFXOztJQVB2QjtRQURDLEtBQUssRUFBRTsrREFDdUM7SUFHL0M7UUFEQyxLQUFLLEVBQUU7b0VBQ2dCO0lBUGYsb0JBQW9CO1FBRGhDLFNBQVMsQ0FBQyxFQUFDLFFBQVEsRUFBRSw4QkFBOEIsRUFBQyxDQUFDO1FBVzdDLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDeEIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7T0FYZixvQkFBb0IsQ0F5Q2hDO0lBQUQsMkJBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXpDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZnJvbSwgb2YsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjb25jYXRNYXAsIGRlbGF5LCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbdHVpRm9yQXN5bmNdW3R1aUZvckFzeW5jT2ZdJ30pXG5leHBvcnQgY2xhc3MgVHVpRm9yQXN5bmNEaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHR1aUZvckFzeW5jT2Y6IHJlYWRvbmx5IFRbXSB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHR1aUZvckFzeW5jVGltZW91dCA9IDEwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVmlld0NvbnRhaW5lclJlZikgcHJpdmF0ZSByZWFkb25seSB2aWV3OiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBASW5qZWN0KFRlbXBsYXRlUmVmKSBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx1bmtub3duPixcbiAgICApIHt9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGVhclZpZXdGb3JPbGROb2RlcygpO1xuICAgICAgICB0aGlzLmNyZWF0ZUFzeW5jVmlld0Zvck5ld05vZGVzKCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xlYXJWaWV3Rm9yT2xkTm9kZXMoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlQXN5bmNWaWV3Rm9yTmV3Tm9kZXMoKTogdm9pZCB7XG4gICAgICAgIGZyb20oKHRoaXMudHVpRm9yQXN5bmNPZiB8fCBbXSkuZW50cmllcygpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY29uY2F0TWFwKGVudHJ5ID0+IG9mKGVudHJ5KS5waXBlKGRlbGF5KHRoaXMudHVpRm9yQXN5bmNUaW1lb3V0KSkpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKFtpbmRleCwgaXRlbV0pID0+XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3XG4gICAgICAgICAgICAgICAgICAgIC5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZSwgeyRpbXBsaWNpdDogaXRlbSwgaW5kZXh9LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgLmRldGVjdENoYW5nZXMoKSxcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhclZpZXdGb3JPbGROb2RlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgICAgIHRoaXMudmlldy5jbGVhcigpO1xuICAgIH1cbn1cbiJdfQ==