import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { dragAndDropFrom } from '@taiga-ui/cdk/observables';
import { filter, map } from 'rxjs/operators';
var TuiDragDirective = /** @class */ (function () {
    function TuiDragDirective(elementRef) {
        this.elementRef = elementRef;
        this.dragAndDropFrom$ = dragAndDropFrom(this.elementRef.nativeElement);
        this.start = this.dragAndDropFrom$.pipe(filter(function (_a) {
            var stage = _a.stage;
            return stage === 0 /* Start */;
        }), map(function (_a) {
            var event = _a.event;
            return event;
        }));
        this.continues = this.dragAndDropFrom$.pipe(filter(function (_a) {
            var stage = _a.stage;
            return stage === 1 /* Continues */;
        }), map(function (_a) {
            var event = _a.event;
            return event;
        }));
        this.end = this.dragAndDropFrom$.pipe(filter(function (_a) {
            var stage = _a.stage;
            return stage === 2 /* End */;
        }), map(function (_a) {
            var event = _a.event;
            return event;
        }));
    }
    TuiDragDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Output('tuiDragStart')
    ], TuiDragDirective.prototype, "start", void 0);
    __decorate([
        Output('tuiDragContinues')
    ], TuiDragDirective.prototype, "continues", void 0);
    __decorate([
        Output('tuiDragEnd')
    ], TuiDragDirective.prototype, "end", void 0);
    TuiDragDirective = __decorate([
        Directive({
            selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
        }),
        __param(0, Inject(ElementRef))
    ], TuiDragDirective);
    return TuiDragDirective;
}());
export { TuiDragDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZHJhZy8iLCJzb3VyY2VzIjpbImRyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxlQUFlLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxPQUFPLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBSzNDO0lBcUJJLDBCQUVxQixVQUErQjtRQUEvQixlQUFVLEdBQVYsVUFBVSxDQUFxQjtRQXRCbkMscUJBQWdCLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFHMUUsVUFBSyxHQUEyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUMvRCxNQUFNLENBQUMsVUFBQyxFQUFPO2dCQUFOLGdCQUFLO1lBQU0sT0FBQSxLQUFLLGtCQUF1QjtRQUE1QixDQUE0QixDQUFDLEVBQ2pELEdBQUcsQ0FBQyxVQUFDLEVBQU87Z0JBQU4sZ0JBQUs7WUFBTSxPQUFBLEtBQUs7UUFBTCxDQUFLLENBQUMsQ0FDMUIsQ0FBQztRQUdPLGNBQVMsR0FBMkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDbkUsTUFBTSxDQUFDLFVBQUMsRUFBTztnQkFBTixnQkFBSztZQUFNLE9BQUEsS0FBSyxzQkFBMkI7UUFBaEMsQ0FBZ0MsQ0FBQyxFQUNyRCxHQUFHLENBQUMsVUFBQyxFQUFPO2dCQUFOLGdCQUFLO1lBQU0sT0FBQSxLQUFLO1FBQUwsQ0FBSyxDQUFDLENBQzFCLENBQUM7UUFHTyxRQUFHLEdBQTJCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQzdELE1BQU0sQ0FBQyxVQUFDLEVBQU87Z0JBQU4sZ0JBQUs7WUFBTSxPQUFBLEtBQUssZ0JBQXFCO1FBQTFCLENBQTBCLENBQUMsRUFDL0MsR0FBRyxDQUFDLFVBQUMsRUFBTztnQkFBTixnQkFBSztZQUFNLE9BQUEsS0FBSztRQUFMLENBQUssQ0FBQyxDQUMxQixDQUFDO0lBS0MsQ0FBQzs7Z0JBRDZCLFVBQVUsdUJBRHRDLE1BQU0sU0FBQyxVQUFVOztJQWxCdEI7UUFEQyxNQUFNLENBQUMsY0FBYyxDQUFDO21EQUlyQjtJQUdGO1FBREMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO3VEQUl6QjtJQUdGO1FBREMsTUFBTSxDQUFDLFlBQVksQ0FBQztpREFJbkI7SUFuQk8sZ0JBQWdCO1FBSDVCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrREFBa0Q7U0FDL0QsQ0FBQztRQXVCTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQXRCZCxnQkFBZ0IsQ0F5QjVCO0lBQUQsdUJBQUM7Q0FBQSxBQXpCRCxJQXlCQztTQXpCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtkcmFnQW5kRHJvcEZyb20sIFR1aURyYWdTdGFnZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEcmFnU3RhcnRdLCBbdHVpRHJhZ0NvbnRpbnVlc10sIFt0dWlEcmFnRW5kXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURyYWdEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhZ0FuZERyb3BGcm9tJCA9IGRyYWdBbmREcm9wRnJvbSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnU3RhcnQnKVxuICAgIHJlYWRvbmx5IHN0YXJ0OiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5kcmFnQW5kRHJvcEZyb20kLnBpcGUoXG4gICAgICAgIGZpbHRlcigoe3N0YWdlfSkgPT4gc3RhZ2UgPT09IFR1aURyYWdTdGFnZS5TdGFydCksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnQ29udGludWVzJylcbiAgICByZWFkb25seSBjb250aW51ZXM6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmRyYWdBbmREcm9wRnJvbSQucGlwZShcbiAgICAgICAgZmlsdGVyKCh7c3RhZ2V9KSA9PiBzdGFnZSA9PT0gVHVpRHJhZ1N0YWdlLkNvbnRpbnVlcyksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnRW5kJylcbiAgICByZWFkb25seSBlbmQ6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmRyYWdBbmREcm9wRnJvbSQucGlwZShcbiAgICAgICAgZmlsdGVyKCh7c3RhZ2V9KSA9PiBzdGFnZSA9PT0gVHVpRHJhZ1N0YWdlLkVuZCksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgKSB7fVxufVxuIl19