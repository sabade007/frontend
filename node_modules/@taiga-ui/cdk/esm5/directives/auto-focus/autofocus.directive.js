import { __decorate, __param } from "tslib";
import { Directive, Inject, Input } from '@angular/core';
import { TUI_AUTOFOCUS_HANDLER, TUI_AUTOFOCUS_PROVIDERS, } from './autofocus.options';
// TODO: 3.0 change input name to tuiAutoFocus and handle empty string
var TuiAutoFocusDirective = /** @class */ (function () {
    function TuiAutoFocusDirective(handler) {
        this.handler = handler;
        this.autoFocus = true;
    }
    TuiAutoFocusDirective.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    TuiAutoFocusDirective.prototype.focus = function () {
        var _this = this;
        void Promise.resolve().then(function () { return _this.handler.setFocus(); });
    };
    TuiAutoFocusDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_AUTOFOCUS_HANDLER,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiAutoFocusDirective.prototype, "autoFocus", void 0);
    TuiAutoFocusDirective = __decorate([
        Directive({
            selector: '[tuiAutoFocus]',
            providers: TUI_AUTOFOCUS_PROVIDERS,
        }),
        __param(0, Inject(TUI_AUTOFOCUS_HANDLER))
    ], TuiAutoFocusDirective);
    return TuiAutoFocusDirective;
}());
export { TuiAutoFocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9hdXRvLWZvY3VzLyIsInNvdXJjZXMiOlsiYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFnQixTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHVCQUF1QixHQUUxQixNQUFNLHFCQUFxQixDQUFDO0FBRTdCLHNFQUFzRTtBQUt0RTtJQUlJLCtCQUVxQixPQUE0QjtRQUE1QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUpqRCxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBS2QsQ0FBQztJQUVKLCtDQUFlLEdBQWY7UUFDSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVELHFDQUFLLEdBQUw7UUFBQSxpQkFFQztRQURHLEtBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0lBQy9ELENBQUM7O2dEQVpJLE1BQU0sU0FBQyxxQkFBcUI7O0lBSGpDO1FBREMsS0FBSyxFQUFFOzREQUNTO0lBRlIscUJBQXFCO1FBSmpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsU0FBUyxFQUFFLHVCQUF1QjtTQUNyQyxDQUFDO1FBTU8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtPQUx6QixxQkFBcUIsQ0FrQmpDO0lBQUQsNEJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWxCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gICAgVFVJX0FVVE9GT0NVU19IQU5ETEVSLFxuICAgIFRVSV9BVVRPRk9DVVNfUFJPVklERVJTLFxuICAgIFR1aUF1dG9mb2N1c0hhbmRsZXIsXG59IGZyb20gJy4vYXV0b2ZvY3VzLm9wdGlvbnMnO1xuXG4vLyBUT0RPOiAzLjAgY2hhbmdlIGlucHV0IG5hbWUgdG8gdHVpQXV0b0ZvY3VzIGFuZCBoYW5kbGUgZW1wdHkgc3RyaW5nXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlBdXRvRm9jdXNdJyxcbiAgICBwcm92aWRlcnM6IFRVSV9BVVRPRk9DVVNfUFJPVklERVJTLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBdXRvRm9jdXNEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGF1dG9Gb2N1cyA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQVVUT0ZPQ1VTX0hBTkRMRVIpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcjogVHVpQXV0b2ZvY3VzSGFuZGxlcixcbiAgICApIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmF1dG9Gb2N1cykge1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9jdXMoKTogdm9pZCB7XG4gICAgICAgIHZvaWQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB0aGlzLmhhbmRsZXIuc2V0Rm9jdXMoKSk7XG4gICAgfVxufVxuIl19