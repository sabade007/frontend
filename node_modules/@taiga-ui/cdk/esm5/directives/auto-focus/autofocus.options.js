import { ElementRef, InjectionToken, NgZone, Optional, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { TuiDefaultAutofocusHandler } from './handlers/default.handler';
import { TuiIosAutofocusHandler } from './handlers/ios.handler';
export var TUI_AUTOFOCUS_HANDLER = new InjectionToken("Autofocusing handler");
// TODO: 3.0 remove in ivy compilation
export function tuiAutofocusHandlerFactory(tuiFocusableComponent, elementRef, animationFrame$, renderer, ngZone, windowRef, isIos) {
    return isIos
        ? new TuiIosAutofocusHandler(tuiFocusableComponent, elementRef, renderer, ngZone, windowRef)
        : new TuiDefaultAutofocusHandler(tuiFocusableComponent, elementRef, animationFrame$);
}
export var TUI_AUTOFOCUS_PROVIDERS = [
    {
        provide: TUI_AUTOFOCUS_HANDLER,
        // TODO: replace to useClass in v3.0
        useFactory: tuiAutofocusHandlerFactory,
        deps: [
            [new Optional(), new Self(), TUI_FOCUSABLE_ITEM_ACCESSOR],
            ElementRef,
            ANIMATION_FRAME,
            Renderer2,
            NgZone,
            WINDOW,
            TUI_IS_IOS,
        ],
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLm9wdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYXV0by1mb2N1cy8iLCJzb3VyY2VzIjpbImF1dG9mb2N1cy5vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxVQUFVLEVBQ1YsY0FBYyxFQUNkLE1BQU0sRUFDTixRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFFLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRTVELE9BQU8sRUFBQywyQkFBMkIsRUFBRSxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUc3RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQU05RCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FDbkQsc0JBQXNCLENBQ3pCLENBQUM7QUFFRixzQ0FBc0M7QUFDdEMsTUFBTSxVQUFVLDBCQUEwQixDQUN0QyxxQkFBeUQsRUFDekQsVUFBbUMsRUFDbkMsZUFBbUMsRUFDbkMsUUFBbUIsRUFDbkIsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLEtBQWM7SUFFZCxPQUFPLEtBQUs7UUFDUixDQUFDLENBQUMsSUFBSSxzQkFBc0IsQ0FDdEIscUJBQXFCLEVBQ3JCLFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUNOLFNBQVMsQ0FDWjtRQUNILENBQUMsQ0FBQyxJQUFJLDBCQUEwQixDQUMxQixxQkFBcUIsRUFDckIsVUFBVSxFQUNWLGVBQWUsQ0FDbEIsQ0FBQztBQUNaLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRztJQUNuQztRQUNJLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsb0NBQW9DO1FBQ3BDLFVBQVUsRUFBRSwwQkFBMEI7UUFDdEMsSUFBSSxFQUFFO1lBQ0YsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsMkJBQTJCLENBQUM7WUFDekQsVUFBVTtZQUNWLGVBQWU7WUFDZixTQUFTO1lBQ1QsTUFBTTtZQUNOLE1BQU07WUFDTixVQUFVO1NBQ2I7S0FDSjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5qZWN0aW9uVG9rZW4sXG4gICAgTmdab25lLFxuICAgIE9wdGlvbmFsLFxuICAgIFJlbmRlcmVyMixcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QU5JTUFUSU9OX0ZSQU1FLCBXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3J9IGZyb20gJ0B0YWlnYS11aS9jZGsvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUiwgVFVJX0lTX0lPU30gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlEZWZhdWx0QXV0b2ZvY3VzSGFuZGxlcn0gZnJvbSAnLi9oYW5kbGVycy9kZWZhdWx0LmhhbmRsZXInO1xuaW1wb3J0IHtUdWlJb3NBdXRvZm9jdXNIYW5kbGVyfSBmcm9tICcuL2hhbmRsZXJzL2lvcy5oYW5kbGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBUdWlBdXRvZm9jdXNIYW5kbGVyIHtcbiAgICBzZXRGb2N1cygpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0FVVE9GT0NVU19IQU5ETEVSID0gbmV3IEluamVjdGlvblRva2VuPFR1aUF1dG9mb2N1c0hhbmRsZXI+KFxuICAgIGBBdXRvZm9jdXNpbmcgaGFuZGxlcmAsXG4pO1xuXG4vLyBUT0RPOiAzLjAgcmVtb3ZlIGluIGl2eSBjb21waWxhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUF1dG9mb2N1c0hhbmRsZXJGYWN0b3J5KFxuICAgIHR1aUZvY3VzYWJsZUNvbXBvbmVudDogVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yIHwgbnVsbCxcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBhbmltYXRpb25GcmFtZSQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIG5nWm9uZTogTmdab25lLFxuICAgIHdpbmRvd1JlZjogV2luZG93LFxuICAgIGlzSW9zOiBib29sZWFuLFxuKTogVHVpQXV0b2ZvY3VzSGFuZGxlciB7XG4gICAgcmV0dXJuIGlzSW9zXG4gICAgICAgID8gbmV3IFR1aUlvc0F1dG9mb2N1c0hhbmRsZXIoXG4gICAgICAgICAgICAgIHR1aUZvY3VzYWJsZUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgZWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcmVuZGVyZXIsXG4gICAgICAgICAgICAgIG5nWm9uZSxcbiAgICAgICAgICAgICAgd2luZG93UmVmLFxuICAgICAgICAgIClcbiAgICAgICAgOiBuZXcgVHVpRGVmYXVsdEF1dG9mb2N1c0hhbmRsZXIoXG4gICAgICAgICAgICAgIHR1aUZvY3VzYWJsZUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgZWxlbWVudFJlZixcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWUkLFxuICAgICAgICAgICk7XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfQVVUT0ZPQ1VTX1BST1ZJREVSUyA9IFtcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9BVVRPRk9DVVNfSEFORExFUixcbiAgICAgICAgLy8gVE9ETzogcmVwbGFjZSB0byB1c2VDbGFzcyBpbiB2My4wXG4gICAgICAgIHVzZUZhY3Rvcnk6IHR1aUF1dG9mb2N1c0hhbmRsZXJGYWN0b3J5LFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIG5ldyBTZWxmKCksIFRVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUl0sXG4gICAgICAgICAgICBFbGVtZW50UmVmLFxuICAgICAgICAgICAgQU5JTUFUSU9OX0ZSQU1FLFxuICAgICAgICAgICAgUmVuZGVyZXIyLFxuICAgICAgICAgICAgTmdab25lLFxuICAgICAgICAgICAgV0lORE9XLFxuICAgICAgICAgICAgVFVJX0lTX0lPUyxcbiAgICAgICAgXSxcbiAgICB9LFxuXTtcbiJdfQ==