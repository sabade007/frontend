import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { TuiLetContext } from './let-context';
/**
 * Works like *ngIf but does not have a condition â€” use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
var TuiLetDirective = /** @class */ (function () {
    function TuiLetDirective(viewContainer, templateRef) {
        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    TuiLetDirective.ngTemplateContextGuard = function (_dir, _ctx) {
        return true;
    };
    TuiLetDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiLetDirective.prototype, "tuiLet", void 0);
    TuiLetDirective = __decorate([
        Directive({
            selector: '[tuiLet]',
        }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(TemplateRef))
    ], TuiLetDirective);
    return TuiLetDirective;
}());
export { TuiLetDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQvIiwic291cmNlcyI6WyJsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXRGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUM7OztHQUdHO0FBSUg7SUFJSSx5QkFDOEIsYUFBK0IsRUFDcEMsV0FBMEM7UUFFL0QsYUFBYSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxJQUFJLGFBQWEsQ0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHNDQUFzQixHQUE3QixVQUNJLElBQXdCLEVBQ3hCLElBQWE7UUFFYixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOztnQkFqQjRDLGdCQUFnQix1QkFBeEQsTUFBTSxTQUFDLGdCQUFnQjtnQkFDVSxXQUFXLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7SUFKdkI7UUFEQyxLQUFLLEVBQUU7bURBQ0c7SUFGRixlQUFlO1FBSDNCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7UUFNTyxXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1FBQ3hCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BTmYsZUFBZSxDQXVCM0I7SUFBRCxzQkFBQztDQUFBLEFBdkJELElBdUJDO1NBdkJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1R1aUxldENvbnRleHR9IGZyb20gJy4vbGV0LWNvbnRleHQnO1xuXG4vKipcbiAqIFdvcmtzIGxpa2UgKm5nSWYgYnV0IGRvZXMgbm90IGhhdmUgYSBjb25kaXRpb24g4oCUIHVzZSBpdCB0byBkZWNsYXJlXG4gKiB0aGUgcmVzdWx0IG9mIHBpcGVzIGNhbGN1bGF0aW9uIChpLmUuIGFzeW5jIHBpcGUpXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUxldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlMZXREaXJlY3RpdmU8VD4ge1xuICAgIEBJbnB1dCgpXG4gICAgdHVpTGV0ITogVDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFZpZXdDb250YWluZXJSZWYpIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxUdWlMZXRDb250ZXh0PFQ+PixcbiAgICApIHtcbiAgICAgICAgdmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGVSZWYsIG5ldyBUdWlMZXRDb250ZXh0PFQ+KHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NlcnRzIHRoZSBjb3JyZWN0IHR5cGUgb2YgdGhlIGNvbnRleHQgZm9yIHRoZSB0ZW1wbGF0ZSB0aGF0IGBUdWlMZXRgIHdpbGwgcmVuZGVyLlxuICAgICAqXG4gICAgICogVGhlIHByZXNlbmNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgc2lnbmFsIHRvIHRoZSBJdnkgdGVtcGxhdGUgdHlwZS1jaGVjayBjb21waWxlciB0aGF0IHRoZVxuICAgICAqIGBUdWlMZXRgIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHJlbmRlcnMgaXRzIHRlbXBsYXRlIHdpdGggYSBzcGVjaWZpYyBjb250ZXh0IHR5cGUuXG4gICAgICovXG4gICAgc3RhdGljIG5nVGVtcGxhdGVDb250ZXh0R3VhcmQ8VD4oXG4gICAgICAgIF9kaXI6IFR1aUxldERpcmVjdGl2ZTxUPixcbiAgICAgICAgX2N0eDogdW5rbm93bixcbiAgICApOiBfY3R4IGlzIFR1aUxldERpcmVjdGl2ZTxFeGNsdWRlPFQsIG51bGwgfCB1bmRlZmluZWQ+PiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiJdfQ==