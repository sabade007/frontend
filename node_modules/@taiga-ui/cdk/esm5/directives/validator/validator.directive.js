import { __decorate } from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS, Validators, } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
var TuiValidatorDirective = /** @class */ (function () {
    function TuiValidatorDirective() {
        this.onChange = EMPTY_FUNCTION;
        this.tuiValidator = Validators.nullValidator;
    }
    TuiValidatorDirective_1 = TuiValidatorDirective;
    TuiValidatorDirective.prototype.validate = function (control) {
        return this.tuiValidator(control);
    };
    TuiValidatorDirective.prototype.registerOnValidatorChange = function (onChange) {
        this.onChange = onChange;
    };
    TuiValidatorDirective.prototype.ngOnChanges = function () {
        this.onChange();
    };
    TuiValidatorDirective.prototype.ngOnDestroy = function () {
        this.tuiValidator = Validators.nullValidator;
        this.onChange();
    };
    var TuiValidatorDirective_1;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiValidatorDirective.prototype, "tuiValidator", void 0);
    TuiValidatorDirective = TuiValidatorDirective_1 = __decorate([
        Directive({
            selector: '[tuiValidator]',
            providers: [
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return TuiValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], TuiValidatorDirective);
    return TuiValidatorDirective;
}());
export { TuiValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy92YWxpZGF0b3IvIiwic291cmNlcyI6WyJ2YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFFSCxhQUFhLEVBSWIsVUFBVSxHQUNiLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQVl4RDtJQUFBO1FBQ1ksYUFBUSxHQUFHLGNBQWMsQ0FBQztRQUlsQyxpQkFBWSxHQUFnQixVQUFVLENBQUMsYUFBYSxDQUFDO0lBa0J6RCxDQUFDOzhCQXZCWSxxQkFBcUI7SUFPOUIsd0NBQVEsR0FBUixVQUFTLE9BQXdCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQseURBQXlCLEdBQXpCLFVBQTBCLFFBQWtDO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDOztJQWpCRDtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTsrREFDb0M7SUFMNUMscUJBQXFCO1FBVmpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx1QkFBcUIsRUFBckIsQ0FBcUIsQ0FBQztvQkFDcEQsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7YUFDSjtTQUNKLENBQUM7T0FDVyxxQkFBcUIsQ0F1QmpDO0lBQUQsNEJBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQXZCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWJzdHJhY3RDb250cm9sLFxuICAgIE5HX1ZBTElEQVRPUlMsXG4gICAgVmFsaWRhdGlvbkVycm9ycyxcbiAgICBWYWxpZGF0b3IsXG4gICAgVmFsaWRhdG9yRm4sXG4gICAgVmFsaWRhdG9ycyxcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtFTVBUWV9GVU5DVElPTn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpVmFsaWRhdG9yXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZSA9IEVNUFRZX0ZVTkNUSU9OO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHR1aVZhbGlkYXRvcjogVmFsaWRhdG9yRm4gPSBWYWxpZGF0b3JzLm51bGxWYWxpZGF0b3I7XG5cbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnR1aVZhbGlkYXRvcihjb250cm9sKTtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKG9uQ2hhbmdlOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMudHVpVmFsaWRhdG9yID0gVmFsaWRhdG9ycy5udWxsVmFsaWRhdG9yO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxufVxuIl19