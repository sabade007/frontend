import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, INJECTOR, Injector, ViewEncapsulation, } from '@angular/core';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk/constants';
import { TUI_ALERTS } from '@taiga-ui/cdk/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
var TuiAlertHostComponent = /** @class */ (function () {
    function TuiAlertHostComponent(alerts, injector) {
        var _this = this;
        this.alerts = alerts;
        this.injector = injector;
        this.mapper = function (useValue) {
            return Injector.create({
                providers: [
                    {
                        provide: POLYMORPHEUS_CONTEXT,
                        useValue: useValue,
                    },
                ],
                parent: _this.injector,
            });
        };
    }
    TuiAlertHostComponent.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [TUI_ALERTS,] }] },
        { type: Injector, decorators: [{ type: Inject, args: [INJECTOR,] }] }
    ]; };
    TuiAlertHostComponent = __decorate([
        Component({
            selector: 'tui-alert-host',
            template: "<div\n    *ngFor=\"let alert$ of alerts\"\n    class=\"t-notifications-wrapper\"\n    @tuiParentAnimation\n>\n    <ng-container\n        *ngFor=\"let item of alert$ | async\"\n        [ngComponentOutlet]=\"item.component.component\"\n        [ngComponentOutletInjector]=\"item | tuiMapper: mapper\"\n    ></ng-container>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [TUI_PARENT_ANIMATION],
            encapsulation: ViewEncapsulation.None,
            styles: ["tui-alert-host>.t-notifications-wrapper{position:fixed;top:0;left:0;display:flex;width:100%;height:100%;flex-direction:column;pointer-events:none}tui-alert-host>.t-notifications-wrapper>*{pointer-events:auto}"]
        }),
        __param(0, Inject(TUI_ALERTS)),
        __param(1, Inject(INJECTOR))
    ], TuiAlertHostComponent);
    return TuiAlertHostComponent;
}());
export { TuiAlertHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2NvbXBvbmVudHMvYWxlcnQtaG9zdC8iLCJzb3VyY2VzIjpbImFsZXJ0LWhvc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBQ04sUUFBUSxFQUNSLFFBQVEsRUFDUixpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBVzlEO0lBQ0ksK0JBQ2lDLE1BQXVDLEVBQ2pDLFFBQWtCO1FBRnpELGlCQUdJO1FBRjZCLFdBQU0sR0FBTixNQUFNLENBQWlDO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFHaEQsV0FBTSxHQUFpQyxVQUFBLFFBQVE7WUFDcEQsT0FBQSxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUNaLFNBQVMsRUFBRTtvQkFDUDt3QkFDSSxPQUFPLEVBQUUsb0JBQW9CO3dCQUM3QixRQUFRLFVBQUE7cUJBQ1g7aUJBQ0o7Z0JBQ0QsTUFBTSxFQUFFLEtBQUksQ0FBQyxRQUFRO2FBQ3hCLENBQUM7UUFSRixDQVFFLENBQUM7SUFYSixDQUFDOztnQkFGcUMsS0FBSyx1QkFBekMsTUFBTSxTQUFDLFVBQVU7Z0JBQzJCLFFBQVEsdUJBQXBELE1BQU0sU0FBQyxRQUFROztJQUhYLHFCQUFxQjtRQVJqQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLHNWQUF5QztZQUV6QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztZQUNsQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7U0FDeEMsQ0FBQztRQUdPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO09BSFoscUJBQXFCLENBZ0JqQztJQUFELDRCQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FoQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0LFxuICAgIElOSkVDVE9SLFxuICAgIEluamVjdG9yLFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX1BBUkVOVF9BTklNQVRJT059IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7VFVJX0FMRVJUU30gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHtUdWlEaWFsb2csIFR1aU1hcHBlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhUfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktYWxlcnQtaG9zdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FsZXJ0LWhvc3QudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWxlcnQtaG9zdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgYW5pbWF0aW9uczogW1RVSV9QQVJFTlRfQU5JTUFUSU9OXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBbGVydEhvc3RDb21wb25lbnQ8VCBleHRlbmRzIFR1aURpYWxvZzx1bmtub3duLCB1bmtub3duPj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9BTEVSVFMpIHJlYWRvbmx5IGFsZXJ0czogQXJyYXk8T2JzZXJ2YWJsZTxyZWFkb25seSBUW10+PixcbiAgICAgICAgQEluamVjdChJTkpFQ1RPUikgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgKSB7fVxuXG4gICAgcmVhZG9ubHkgbWFwcGVyOiBUdWlNYXBwZXI8dW5rbm93biwgSW5qZWN0b3I+ID0gdXNlVmFsdWUgPT5cbiAgICAgICAgSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogUE9MWU1PUlBIRVVTX0NPTlRFWFQsXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcGFyZW50OiB0aGlzLmluamVjdG9yLFxuICAgICAgICB9KTtcbn1cbiJdfQ==