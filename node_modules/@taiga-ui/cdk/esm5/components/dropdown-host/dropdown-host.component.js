import { __decorate, __extends } from "tslib";
import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import { AbstractTuiPortalHostComponent, AbstractTuiPortalService, } from '@taiga-ui/cdk/abstract';
import { TuiPortalService } from '@taiga-ui/cdk/components/portal-host';
import { EMPTY_CLIENT_RECT } from '@taiga-ui/cdk/constants';
/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
var TuiDropdownHostComponent = /** @class */ (function (_super) {
    __extends(TuiDropdownHostComponent, _super);
    function TuiDropdownHostComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiDropdownHostComponent.prototype.fixedPositionOffset = function () {
        var _a;
        return (((_a = this.positionFixedOffsetRef) === null || _a === void 0 ? void 0 : _a.nativeElement.getBoundingClientRect()) ||
            EMPTY_CLIENT_RECT);
    };
    __decorate([
        ViewChild('positionFixedOffset')
    ], TuiDropdownHostComponent.prototype, "positionFixedOffsetRef", void 0);
    TuiDropdownHostComponent = __decorate([
        Component({
            selector: 'tui-dropdown-host',
            template: "<div\n    #positionFixedOffset\n    class=\"t-position-fixed-offset\"\n></div>\n<ng-content></ng-content>\n<ng-container #viewContainer></ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [{ provide: AbstractTuiPortalService, useExisting: TuiPortalService }],
            styles: [":host{position:relative;z-index:0;display:block;height:100%}:host:before{content:'';display:block;overflow:hidden}.t-position-fixed-offset{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"]
        })
    ], TuiDropdownHostComponent);
    return TuiDropdownHostComponent;
}(AbstractTuiPortalHostComponent));
export { TuiDropdownHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2NvbXBvbmVudHMvZHJvcGRvd24taG9zdC8iLCJzb3VyY2VzIjpbImRyb3Bkb3duLWhvc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFjLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQ0gsOEJBQThCLEVBQzlCLHdCQUF3QixHQUMzQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRTFEOztHQUVHO0FBUUg7SUFBOEMsNENBQThCO0lBQTVFOztJQVVBLENBQUM7SUFORyxzREFBbUIsR0FBbkI7O1FBQ0ksT0FBTyxDQUNILE9BQUEsSUFBSSxDQUFDLHNCQUFzQiwwQ0FBRSxhQUFhLENBQUMscUJBQXFCO1lBQ2hFLGlCQUFpQixDQUNwQixDQUFDO0lBQ04sQ0FBQztJQVBEO1FBREMsU0FBUyxDQUFDLHFCQUFxQixDQUFDOzRFQUNvQztJQUY1RCx3QkFBd0I7UUFQcEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixxS0FBNEM7WUFFNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLENBQUM7O1NBQ2xGLENBQUM7T0FDVyx3QkFBd0IsQ0FVcEM7SUFBRCwrQkFBQztDQUFBLEFBVkQsQ0FBOEMsOEJBQThCLEdBVTNFO1NBVlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aVBvcnRhbEhvc3RDb21wb25lbnQsXG4gICAgQWJzdHJhY3RUdWlQb3J0YWxTZXJ2aWNlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2Fic3RyYWN0JztcbmltcG9ydCB7VHVpUG9ydGFsU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb21wb25lbnRzL3BvcnRhbC1ob3N0JztcbmltcG9ydCB7RU1QVFlfQ0xJRU5UX1JFQ1R9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcblxuLyoqXG4gKiBIb3N0IGVsZW1lbnQgZm9yIGR5bmFtaWNhbGx5IGNyZWF0ZWQgcG9ydGFscywgZm9yIGV4YW1wbGUgdXNpbmcge0BsaW5rIFR1aURyb3Bkb3duRGlyZWN0aXZlfS5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZHJvcGRvd24taG9zdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Ryb3Bkb3duLWhvc3QudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZHJvcGRvd24taG9zdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEFic3RyYWN0VHVpUG9ydGFsU2VydmljZSwgdXNlRXhpc3Rpbmc6IFR1aVBvcnRhbFNlcnZpY2V9XSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcGRvd25Ib3N0Q29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RUdWlQb3J0YWxIb3N0Q29tcG9uZW50IHtcbiAgICBAVmlld0NoaWxkKCdwb3NpdGlvbkZpeGVkT2Zmc2V0JylcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvc2l0aW9uRml4ZWRPZmZzZXRSZWY/OiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcblxuICAgIGZpeGVkUG9zaXRpb25PZmZzZXQoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uRml4ZWRPZmZzZXRSZWY/Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfHxcbiAgICAgICAgICAgIEVNUFRZX0NMSUVOVF9SRUNUXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19