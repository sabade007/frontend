import { tuiAssert } from '@taiga-ui/cdk/classes';
var MAX_PRECISION = 292;
/**
 * @deprecated: use {@link tuiRound} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function round(value, precision) {
    if (precision === void 0) { precision = 0; }
    return calculate(value, precision, Math.round);
}
/**
 * @deprecated: use {@link tuiCeil} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function ceil(value, precision) {
    if (precision === void 0) { precision = 0; }
    return calculate(value, precision, Math.ceil);
}
/**
 * @deprecated: use {@link tuiFloor} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function floor(value, precision) {
    if (precision === void 0) { precision = 0; }
    return calculate(value, precision, Math.floor);
}
export var tuiRound = round;
export var tuiCeil = ceil;
export var tuiFloor = floor;
/**
 * Rounding number to the set precision
 *
 * @param value
 * @param precision number of digits in a float part
 * @param func rounding function (round, floor, ceil)
 */
function calculate(value, precision, func) {
    if (value === Infinity) {
        return value;
    }
    tuiAssert.assert(!Number.isNaN(value), "Value must be number");
    tuiAssert.assert(Number.isInteger(precision), "Precision must be integer");
    precision = Math.min(precision, MAX_PRECISION);
    var pair = (value + "e").split("e");
    var tempValue = func(Number(pair[0] + "e" + (Number(pair[1]) + precision)));
    var processedPair = (tempValue + "e").split("e");
    return Number(processedPair[0] + "e" + (Number(processedPair[1]) - precision));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgvIiwic291cmNlcyI6WyJyb3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFaEQsSUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBRTFCOztHQUVHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxLQUFLLENBQUMsS0FBYSxFQUFFLFNBQXFCO0lBQXJCLDBCQUFBLEVBQUEsYUFBcUI7SUFDdEQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxJQUFJLENBQUMsS0FBYSxFQUFFLFNBQXFCO0lBQXJCLDBCQUFBLEVBQUEsYUFBcUI7SUFDckQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxLQUFLLENBQUMsS0FBYSxFQUFFLFNBQXFCO0lBQXJCLDBCQUFBLEVBQUEsYUFBcUI7SUFDdEQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDOUIsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztBQUM1QixNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBRTlCOzs7Ozs7R0FNRztBQUNILFNBQVMsU0FBUyxDQUNkLEtBQWEsRUFDYixTQUFpQixFQUNqQixJQUEyQjtJQUUzQixJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQy9ELFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBRTNFLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUUvQyxJQUFNLElBQUksR0FBRyxDQUFHLEtBQUssTUFBRyxDQUFBLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUUsSUFBTSxhQUFhLEdBQUcsQ0FBRyxTQUFTLE1BQUcsQ0FBQSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVqRCxPQUFPLE1BQU0sQ0FBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLFVBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBRSxDQUFDLENBQUM7QUFDakYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuXG5jb25zdCBNQVhfUFJFQ0lTSU9OID0gMjkyO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aVJvdW5kfSBpbnN0ZWFkXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiByb3VuZCh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC5yb3VuZCk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgdHVpQ2VpbH0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gY2VpbCh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC5jZWlsKTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlGbG9vcn0gaW5zdGVhZFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZmxvb3IodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gY2FsY3VsYXRlKHZhbHVlLCBwcmVjaXNpb24sIE1hdGguZmxvb3IpO1xufVxuXG5leHBvcnQgY29uc3QgdHVpUm91bmQgPSByb3VuZDtcbmV4cG9ydCBjb25zdCB0dWlDZWlsID0gY2VpbDtcbmV4cG9ydCBjb25zdCB0dWlGbG9vciA9IGZsb29yO1xuXG4vKipcbiAqIFJvdW5kaW5nIG51bWJlciB0byB0aGUgc2V0IHByZWNpc2lvblxuICpcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHByZWNpc2lvbiBudW1iZXIgb2YgZGlnaXRzIGluIGEgZmxvYXQgcGFydFxuICogQHBhcmFtIGZ1bmMgcm91bmRpbmcgZnVuY3Rpb24gKHJvdW5kLCBmbG9vciwgY2VpbClcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlKFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgcHJlY2lzaW9uOiBudW1iZXIsXG4gICAgZnVuYzogKHg6IG51bWJlcikgPT4gbnVtYmVyLFxuKTogbnVtYmVyIHtcbiAgICBpZiAodmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB0dWlBc3NlcnQuYXNzZXJ0KCFOdW1iZXIuaXNOYU4odmFsdWUpLCBgVmFsdWUgbXVzdCBiZSBudW1iZXJgKTtcbiAgICB0dWlBc3NlcnQuYXNzZXJ0KE51bWJlci5pc0ludGVnZXIocHJlY2lzaW9uKSwgYFByZWNpc2lvbiBtdXN0IGJlIGludGVnZXJgKTtcblxuICAgIHByZWNpc2lvbiA9IE1hdGgubWluKHByZWNpc2lvbiwgTUFYX1BSRUNJU0lPTik7XG5cbiAgICBjb25zdCBwYWlyID0gYCR7dmFsdWV9ZWAuc3BsaXQoYGVgKTtcbiAgICBjb25zdCB0ZW1wVmFsdWUgPSBmdW5jKE51bWJlcihgJHtwYWlyWzBdfWUke051bWJlcihwYWlyWzFdKSArIHByZWNpc2lvbn1gKSk7XG4gICAgY29uc3QgcHJvY2Vzc2VkUGFpciA9IGAke3RlbXBWYWx1ZX1lYC5zcGxpdChgZWApO1xuXG4gICAgcmV0dXJuIE51bWJlcihgJHtwcm9jZXNzZWRQYWlyWzBdfWUke051bWJlcihwcm9jZXNzZWRQYWlyWzFdKSAtIHByZWNpc2lvbn1gKTtcbn1cbiJdfQ==