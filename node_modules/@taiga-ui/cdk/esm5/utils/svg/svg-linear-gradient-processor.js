import { __read, __spread } from "tslib";
/**
 * @deprecated: use {@link tuiSvgLinearGradientProcessor} instead
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function svgLinearGradientProcessor(svg, salt) {
    var uniqueIds = extractLinearGradientIdsFromSvg(svg);
    return uniqueIds.reduce(function (processed, previousId) {
        return processed.replace(new RegExp(previousId, "g"), previousId + "_" + (salt || makeRandomSalt()));
    }, svg);
}
function makeRandomSalt() {
    return Math.floor(Math.random() * Date.now());
}
function extractLinearGradientIdsFromSvg(svg) {
    var matchedIdsWithPrefix = svg.match(/url\(#(\w\w+)/g) || [];
    return __spread(new Set(matchedIdsWithPrefix)).map(function (matched) { return matched.slice(5); });
}
export var tuiSvgLinearGradientProcessor = svgLinearGradientProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWxpbmVhci1ncmFkaWVudC1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3V0aWxzL3N2Zy8iLCJzb3VyY2VzIjpbInN2Zy1saW5lYXItZ3JhZGllbnQtcHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsMEJBQTBCLENBQUMsR0FBVyxFQUFFLElBQXNCO0lBQzFFLElBQU0sU0FBUyxHQUFHLCtCQUErQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FDbkIsVUFBQyxTQUFTLEVBQUUsVUFBVTtRQUNsQixPQUFBLFNBQVMsQ0FBQyxPQUFPLENBQ2IsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUN4QixVQUFVLFVBQUksSUFBSSxJQUFJLGNBQWMsRUFBRSxDQUFFLENBQzlDO0lBSEQsQ0FHQyxFQUNMLEdBQUcsQ0FDTixDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsY0FBYztJQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxTQUFTLCtCQUErQixDQUFDLEdBQVc7SUFDaEQsSUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBRS9ELE9BQU8sU0FBSSxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEdBQUcsQ0FDekMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFoQixDQUFnQixDQUM5QixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLDBCQUEwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlTdmdMaW5lYXJHcmFkaWVudFByb2Nlc3Nvcn0gaW5zdGVhZFxuICogQGRlc2NyaXB0aW9uOlxuICogQW55IOKAmGxpbmVhckdyYWRpZW504oCZIGF0dHJpYnV0ZXMgd2hpY2ggYXJlIGRlZmluZWQgb24gdGhlIHJlZmVyZW5jZWRcbiAqIGVsZW1lbnQgd2hpY2ggYXJlIG5vdCBkZWZpbmVkIG9uIHRoaXMgZWxlbWVudCBhcmUgaW5oZXJpdGVkIGJ5IHRoaXMgZWxlbWVudC5cbiAqIElmIHRoaXMgZWxlbWVudCBoYXMgbm8gZGVmaW5lZCBncmFkaWVudCBzdG9wcywgYW5kIHRoZSByZWZlcmVuY2VkIGVsZW1lbnQgZG9lc1xuICogKHBvc3NpYmx5IGR1ZSB0byBpdHMgb3duIOKAmHhsaW5rOmhyZWbigJkgYXR0cmlidXRlKSwgdGhlbiB0aGlzIGVsZW1lbnQgaW5oZXJpdHNcbiAqIHRoZSBncmFkaWVudCBzdG9wIGZyb20gdGhlIHJlZmVyZW5jZWQgZWxlbWVudC4gSW5oZXJpdGFuY2UgY2FuIGJlIGluZGlyZWN0XG4gKiB0byBhbiBhcmJpdHJhcnkgbGV2ZWw7IHRodXMsIGlmIHRoZSByZWZlcmVuY2VkIGVsZW1lbnQgaW5oZXJpdHMgYXR0cmlidXRlXG4gKiBvciBncmFkaWVudCBzdG9wcyBkdWUgdG8gaXRzIG93biDigJh4bGluazpocmVm4oCZIGF0dHJpYnV0ZSwgdGhlbiB0aGUgY3VycmVudFxuICogZWxlbWVudCBjYW4gaW5oZXJpdCB0aG9zZSBhdHRyaWJ1dGVzIG9yIGdyYWRpZW50IHN0b3BzLlxuICpcbiAqIERvY3VtZW50YXRpb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9wc2VydmVycy5odG1sXG4gKlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gc3ZnTGluZWFyR3JhZGllbnRQcm9jZXNzb3Ioc3ZnOiBzdHJpbmcsIHNhbHQ/OiBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVuaXF1ZUlkcyA9IGV4dHJhY3RMaW5lYXJHcmFkaWVudElkc0Zyb21Tdmcoc3ZnKTtcblxuICAgIHJldHVybiB1bmlxdWVJZHMucmVkdWNlKFxuICAgICAgICAocHJvY2Vzc2VkLCBwcmV2aW91c0lkKSA9PlxuICAgICAgICAgICAgcHJvY2Vzc2VkLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChwcmV2aW91c0lkLCBgZ2ApLFxuICAgICAgICAgICAgICAgIGAke3ByZXZpb3VzSWR9XyR7c2FsdCB8fCBtYWtlUmFuZG9tU2FsdCgpfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICBzdmcsXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gbWFrZVJhbmRvbVNhbHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRGF0ZS5ub3coKSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMaW5lYXJHcmFkaWVudElkc0Zyb21Tdmcoc3ZnOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgbWF0Y2hlZElkc1dpdGhQcmVmaXggPSBzdmcubWF0Y2goL3VybFxcKCMoXFx3XFx3KykvZykgfHwgW107XG5cbiAgICByZXR1cm4gWy4uLm5ldyBTZXQobWF0Y2hlZElkc1dpdGhQcmVmaXgpXS5tYXAoXG4gICAgICAgIG1hdGNoZWQgPT4gbWF0Y2hlZC5zbGljZSg1KSwgLy8gcmVtb3ZlIHByZWZpeCBgdXJsKCNgXG4gICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aVN2Z0xpbmVhckdyYWRpZW50UHJvY2Vzc29yID0gc3ZnTGluZWFyR3JhZGllbnRQcm9jZXNzb3I7XG4iXX0=