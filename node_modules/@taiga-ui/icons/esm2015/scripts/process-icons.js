import fs from 'fs';
import { parse } from 'path';
const START = `<svg`;
const WIDTH_SEARCH = `width="`;
const HEIGHT_SEARCH = `height="`;
export function processIcons(files, interceptor) {
    for (const file of files) {
        const baseContent = String(fs.readFileSync(file));
        const src = interceptor ? interceptor(baseContent) : baseContent;
        const name = parse(file).base.replace(`.svg`, ``);
        if (src.includes(`id="${name}"`)) {
            console.info(`\x1B[33m%s\x1B[0m`, `[skip]:`, file);
            continue;
        }
        const wrapped = wrapIcon(src, name);
        const final = typeof wrapped === `string`
            ? `${wrapped.replace(START, `<svg xmlns="http://www.w3.org/2000/svg"><g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg`)}</g></svg>`
            : `<svg xmlns="http://www.w3.org/2000/svg" width="${wrapped.width}" height="${wrapped.height}">${wrapped.src}</svg>`;
        fs.writeFileSync(file, final);
        console.info(`\x1B[32m%s\x1B[0m`, `[preprocessed]:`, file);
    }
}
function wrapIcon(source, name) {
    const src = source.slice(Math.max(0, source.indexOf(START)));
    const attributes = src.slice(0, Math.max(0, src.indexOf(`>`)));
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
        return src;
    }
    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    const widthString = attributes.slice(widthOffset, attributes.indexOf(`"`, widthOffset));
    const heightString = attributes.slice(heightOffset, attributes.indexOf(`"`, heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes(`%`) ||
        heightString.includes(`%`)) {
        return src.replace(START, `<svg id="${name}"`);
    }
    const width = parseInt(widthString, 10);
    const height = parseInt(heightString, 10);
    const emWidth = width / 16;
    const emHeight = height / 16;
    return {
        width: `${emWidth}em`,
        height: `${emHeight}em`,
        src: `
        <g id="${name}" xmlns="http://www.w3.org/2000/svg">
            <svg x="50%" y="50%" width="${emWidth}em" height="${emHeight}em" overflow="visible" viewBox="0 0 ${width} ${height}">
                <svg x="${-width / 2}" y="${-height / 2}">${src}</svg>
            </svg>
        </g>`.trim(),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pY29ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9pY29ucy9zY3JpcHRzLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1pY29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUUzQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckIsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBQy9CLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQztBQVVqQyxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQWUsRUFBRSxXQUFnQztJQUMxRSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN0QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFFakUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkQsU0FBUztTQUNaO1FBRUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQyxNQUFNLEtBQUssR0FDUCxPQUFPLE9BQU8sS0FBSyxRQUFRO1lBQ3ZCLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQ2QsS0FBSyxFQUNMLGtEQUFrRCxJQUFJLDJDQUEyQyxDQUNwRyxZQUFZO1lBQ2YsQ0FBQyxDQUFDLGtEQUFrRCxPQUFPLENBQUMsS0FBSyxhQUFhLE9BQU8sQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBRTdILEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDOUQ7QUFDTCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsTUFBYyxFQUFFLElBQVk7SUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvRCxJQUFJLEVBQUMsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLFFBQVEsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDNUUsT0FBTyxHQUFHLENBQUM7S0FDZDtJQUVELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEQsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxNQUFNLFdBQVcsR0FBRyxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxhQUFhLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUMxRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUNoQyxXQUFXLEVBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQ3ZDLENBQUM7SUFDRixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUNqQyxZQUFZLEVBQ1osVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQ3hDLENBQUM7SUFFRixJQUNJLENBQUMsWUFBWTtRQUNiLENBQUMsV0FBVztRQUNaLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ3pCLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQzVCO1FBQ0UsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLElBQUksR0FBRyxDQUFDLENBQUM7S0FDbEQ7SUFFRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUMzQixNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRTdCLE9BQU87UUFDSCxLQUFLLEVBQUUsR0FBRyxPQUFPLElBQUk7UUFDckIsTUFBTSxFQUFFLEdBQUcsUUFBUSxJQUFJO1FBQ3ZCLEdBQUcsRUFBRTtpQkFDSSxJQUFJOzBDQUNxQixPQUFPLGVBQWUsUUFBUSx1Q0FBdUMsS0FBSyxJQUFJLE1BQU07MEJBQ3BHLENBQUMsS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssR0FBRzs7YUFFbEQsQ0FBQyxJQUFJLEVBQUU7S0FDZixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQge3BhcnNlfSBmcm9tICdwYXRoJztcblxuY29uc3QgU1RBUlQgPSBgPHN2Z2A7XG5jb25zdCBXSURUSF9TRUFSQ0ggPSBgd2lkdGg9XCJgO1xuY29uc3QgSEVJR0hUX1NFQVJDSCA9IGBoZWlnaHQ9XCJgO1xuXG5pbnRlcmZhY2UgV3JhcHBlZENvbnRlbnQge1xuICAgIGhlaWdodDogc3RyaW5nO1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgc3JjOiBzdHJpbmc7XG59XG5cbnR5cGUgQ29udGVudEludGVyY2VwdG9yID0gKHNyYzogc3RyaW5nKSA9PiBzdHJpbmc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzSWNvbnMoZmlsZXM6IHN0cmluZ1tdLCBpbnRlcmNlcHRvcj86IENvbnRlbnRJbnRlcmNlcHRvcik6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBjb25zdCBiYXNlQ29udGVudCA9IFN0cmluZyhmcy5yZWFkRmlsZVN5bmMoZmlsZSkpO1xuICAgICAgICBjb25zdCBzcmMgPSBpbnRlcmNlcHRvciA/IGludGVyY2VwdG9yKGJhc2VDb250ZW50KSA6IGJhc2VDb250ZW50O1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBwYXJzZShmaWxlKS5iYXNlLnJlcGxhY2UoYC5zdmdgLCBgYCk7XG5cbiAgICAgICAgaWYgKHNyYy5pbmNsdWRlcyhgaWQ9XCIke25hbWV9XCJgKSkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszM20lc1xceDFCWzBtYCwgYFtza2lwXTpgLCBmaWxlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IHdyYXBJY29uKHNyYywgbmFtZSk7XG5cbiAgICAgICAgY29uc3QgZmluYWwgPVxuICAgICAgICAgICAgdHlwZW9mIHdyYXBwZWQgPT09IGBzdHJpbmdgXG4gICAgICAgICAgICAgICAgPyBgJHt3cmFwcGVkLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgU1RBUlQsXG4gICAgICAgICAgICAgICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxnIGlkPVwiJHtuYW1lfVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48c3ZnYCxcbiAgICAgICAgICAgICAgICAgICl9PC9nPjwvc3ZnPmBcbiAgICAgICAgICAgICAgICA6IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIiR7d3JhcHBlZC53aWR0aH1cIiBoZWlnaHQ9XCIke3dyYXBwZWQuaGVpZ2h0fVwiPiR7d3JhcHBlZC5zcmN9PC9zdmc+YDtcblxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGUsIGZpbmFsKTtcblxuICAgICAgICBjb25zb2xlLmluZm8oYFxceDFCWzMybSVzXFx4MUJbMG1gLCBgW3ByZXByb2Nlc3NlZF06YCwgZmlsZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB3cmFwSWNvbihzb3VyY2U6IHN0cmluZywgbmFtZTogc3RyaW5nKTogV3JhcHBlZENvbnRlbnQgfCBzdHJpbmcge1xuICAgIGNvbnN0IHNyYyA9IHNvdXJjZS5zbGljZShNYXRoLm1heCgwLCBzb3VyY2UuaW5kZXhPZihTVEFSVCkpKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3JjLnNsaWNlKDAsIE1hdGgubWF4KDAsIHNyYy5pbmRleE9mKGA+YCkpKTtcblxuICAgIGlmICghYXR0cmlidXRlcz8uaW5jbHVkZXMoV0lEVEhfU0VBUkNIKSB8fCAhYXR0cmlidXRlcy5pbmNsdWRlcyhIRUlHSFRfU0VBUkNIKSkge1xuICAgICAgICByZXR1cm4gc3JjO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4T2ZXaWR0aCA9IGF0dHJpYnV0ZXMuaW5kZXhPZihXSURUSF9TRUFSQ0gpO1xuICAgIGNvbnN0IGluZGV4T2ZIZWlnaHQgPSBhdHRyaWJ1dGVzLmluZGV4T2YoSEVJR0hUX1NFQVJDSCk7XG4gICAgY29uc3Qgd2lkdGhPZmZzZXQgPSBpbmRleE9mV2lkdGggKyBXSURUSF9TRUFSQ0gubGVuZ3RoO1xuICAgIGNvbnN0IGhlaWdodE9mZnNldCA9IGluZGV4T2ZIZWlnaHQgKyBIRUlHSFRfU0VBUkNILmxlbmd0aDtcbiAgICBjb25zdCB3aWR0aFN0cmluZyA9IGF0dHJpYnV0ZXMuc2xpY2UoXG4gICAgICAgIHdpZHRoT2Zmc2V0LFxuICAgICAgICBhdHRyaWJ1dGVzLmluZGV4T2YoYFwiYCwgd2lkdGhPZmZzZXQpLFxuICAgICk7XG4gICAgY29uc3QgaGVpZ2h0U3RyaW5nID0gYXR0cmlidXRlcy5zbGljZShcbiAgICAgICAgaGVpZ2h0T2Zmc2V0LFxuICAgICAgICBhdHRyaWJ1dGVzLmluZGV4T2YoYFwiYCwgaGVpZ2h0T2Zmc2V0KSxcbiAgICApO1xuXG4gICAgaWYgKFxuICAgICAgICAhaGVpZ2h0U3RyaW5nIHx8XG4gICAgICAgICF3aWR0aFN0cmluZyB8fFxuICAgICAgICB3aWR0aFN0cmluZy5pbmNsdWRlcyhgJWApIHx8XG4gICAgICAgIGhlaWdodFN0cmluZy5pbmNsdWRlcyhgJWApXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzcmMucmVwbGFjZShTVEFSVCwgYDxzdmcgaWQ9XCIke25hbWV9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHdpZHRoU3RyaW5nLCAxMCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0U3RyaW5nLCAxMCk7XG4gICAgY29uc3QgZW1XaWR0aCA9IHdpZHRoIC8gMTY7XG4gICAgY29uc3QgZW1IZWlnaHQgPSBoZWlnaHQgLyAxNjtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBgJHtlbVdpZHRofWVtYCxcbiAgICAgICAgaGVpZ2h0OiBgJHtlbUhlaWdodH1lbWAsXG4gICAgICAgIHNyYzogYFxuICAgICAgICA8ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgICAgICA8c3ZnIHg9XCI1MCVcIiB5PVwiNTAlXCIgd2lkdGg9XCIke2VtV2lkdGh9ZW1cIiBoZWlnaHQ9XCIke2VtSGVpZ2h0fWVtXCIgb3ZlcmZsb3c9XCJ2aXNpYmxlXCIgdmlld0JveD1cIjAgMCAke3dpZHRofSAke2hlaWdodH1cIj5cbiAgICAgICAgICAgICAgICA8c3ZnIHg9XCIkey13aWR0aCAvIDJ9XCIgeT1cIiR7LWhlaWdodCAvIDJ9XCI+JHtzcmN9PC9zdmc+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9nPmAudHJpbSgpLFxuICAgIH07XG59XG4iXX0=