import { __awaiter, __generator } from "tslib";
import { rollup } from 'rollup';
import typescript from 'rollup-plugin-typescript2';
import { rollupSvgo } from './rollup-svgo';
var banner = "\n/**\n * @description:\n * DO NOT CHANGE THIS FILE. AUTOGENERATED\n */\n";
export function convertAllCompileFileToAllFile(config) {
    return __awaiter(this, void 0, void 0, function () {
        var from, to, prt2Options, inputOptions, bundle;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    from = config.from, to = config.to, prt2Options = config.prt2Options;
                    inputOptions = {
                        input: from,
                        output: { preferConst: true },
                        plugins: [
                            typescript(prt2Options !== null && prt2Options !== void 0 ? prt2Options : {
                                cacheRoot: "node_modules/.cache/.rpt2_cache",
                            }),
                            rollupSvgo({
                                include: "**/*.svg",
                                options: {
                                    plugins: [
                                        {
                                            name: "preset-default",
                                            params: {
                                                overrides: {
                                                    removeViewBox: false,
                                                    collapseGroups: false,
                                                    cleanupIDs: false,
                                                    removeUnknownsAndDefaults: false,
                                                },
                                            },
                                        },
                                    ],
                                },
                            }),
                        ],
                    };
                    return [4 /*yield*/, rollup(inputOptions)];
                case 1:
                    bundle = _a.sent();
                    return [4 /*yield*/, bundle.write({
                            banner: banner,
                            file: to,
                            format: "es",
                            preferConst: true,
                        })];
                case 2:
                    _a.sent();
                    /**
                     * @note:
                     * The rollup bundle must be closed once `write` is finished to let plugins clean up their external
                     * processes or services via the `closeBundle` hook, otherwise it can lead to memory leaks.
                     */
                    return [4 /*yield*/, bundle.close()];
                case 3:
                    /**
                     * @note:
                     * The rollup bundle must be closed once `write` is finished to let plugins clean up their external
                     * processes or services via the `closeBundle` hook, otherwise it can lead to memory leaks.
                     */
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC1hbGwtY29tcGlsZS1maWxlLXRvLWFsbC1maWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2ljb25zL3NjcmlwdHMvIiwic291cmNlcyI6WyJjb252ZXJ0LWFsbC1jb21waWxlLWZpbGUtdG8tYWxsLWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBUyxNQUFNLEVBQWdCLE1BQU0sUUFBUSxDQUFDO0FBQ3JELE9BQU8sVUFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLElBQU0sTUFBTSxHQUFHLDJFQUtkLENBQUM7QUFRRixNQUFNLFVBQWdCLDhCQUE4QixDQUFDLE1BQWU7Ozs7OztvQkFDekQsSUFBSSxHQUFxQixNQUFNLEtBQTNCLEVBQUUsRUFBRSxHQUFpQixNQUFNLEdBQXZCLEVBQUUsV0FBVyxHQUFJLE1BQU0sWUFBVixDQUFXO29CQUVqQyxZQUFZLEdBQWtCO3dCQUNoQyxLQUFLLEVBQUUsSUFBSTt3QkFDWCxNQUFNLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDO3dCQUMzQixPQUFPLEVBQUU7NEJBQ0wsVUFBVSxDQUNOLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJO2dDQUNYLFNBQVMsRUFBRSxpQ0FBaUM7NkJBQy9DLENBQ007NEJBQ1gsVUFBVSxDQUFDO2dDQUNQLE9BQU8sRUFBRSxVQUFVO2dDQUNuQixPQUFPLEVBQUU7b0NBQ0wsT0FBTyxFQUFFO3dDQUNMOzRDQUNJLElBQUksRUFBRSxnQkFBZ0I7NENBQ3RCLE1BQU0sRUFBRTtnREFDSixTQUFTLEVBQUU7b0RBQ1AsYUFBYSxFQUFFLEtBQUs7b0RBQ3BCLGNBQWMsRUFBRSxLQUFLO29EQUNyQixVQUFVLEVBQUUsS0FBSztvREFDakIseUJBQXlCLEVBQUUsS0FBSztpREFDbkM7NkNBQ0o7eUNBQ0o7cUNBQ0o7aUNBQ0o7NkJBQ0osQ0FBQzt5QkFDTDtxQkFDSixDQUFDO29CQUVhLHFCQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBQTs7b0JBQW5DLE1BQU0sR0FBRyxTQUEwQjtvQkFFekMscUJBQU0sTUFBTSxDQUFDLEtBQUssQ0FBQzs0QkFDZixNQUFNLFFBQUE7NEJBQ04sSUFBSSxFQUFFLEVBQUU7NEJBQ1IsTUFBTSxFQUFFLElBQUk7NEJBQ1osV0FBVyxFQUFFLElBQUk7eUJBQ3BCLENBQUMsRUFBQTs7b0JBTEYsU0FLRSxDQUFDO29CQUVIOzs7O3VCQUlHO29CQUNILHFCQUFNLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBQTs7b0JBTHBCOzs7O3VCQUlHO29CQUNILFNBQW9CLENBQUM7Ozs7O0NBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbHVnaW4sIHJvbGx1cCwgUm9sbHVwT3B0aW9uc30gZnJvbSAncm9sbHVwJztcbmltcG9ydCB0eXBlc2NyaXB0LCB7UlBUMk9wdGlvbnN9IGZyb20gJ3JvbGx1cC1wbHVnaW4tdHlwZXNjcmlwdDInO1xuXG5pbXBvcnQge3JvbGx1cFN2Z299IGZyb20gJy4vcm9sbHVwLXN2Z28nO1xuXG5jb25zdCBiYW5uZXIgPSBgXG4vKipcbiAqIEBkZXNjcmlwdGlvbjpcbiAqIERPIE5PVCBDSEFOR0UgVEhJUyBGSUxFLiBBVVRPR0VORVJBVEVEXG4gKi9cbmA7XG5cbmludGVyZmFjZSBPcHRpb25zIHtcbiAgICBwcnQyT3B0aW9ucz86IFJQVDJPcHRpb25zO1xuICAgIGZyb206IHN0cmluZztcbiAgICB0bzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udmVydEFsbENvbXBpbGVGaWxlVG9BbGxGaWxlKGNvbmZpZzogT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHtmcm9tLCB0bywgcHJ0Mk9wdGlvbnN9ID0gY29uZmlnO1xuXG4gICAgY29uc3QgaW5wdXRPcHRpb25zOiBSb2xsdXBPcHRpb25zID0ge1xuICAgICAgICBpbnB1dDogZnJvbSxcbiAgICAgICAgb3V0cHV0OiB7cHJlZmVyQ29uc3Q6IHRydWV9LFxuICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICB0eXBlc2NyaXB0KFxuICAgICAgICAgICAgICAgIHBydDJPcHRpb25zID8/IHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVSb290OiBgbm9kZV9tb2R1bGVzLy5jYWNoZS8ucnB0Ml9jYWNoZWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICkgYXMgUGx1Z2luLFxuICAgICAgICAgICAgcm9sbHVwU3Znbyh7XG4gICAgICAgICAgICAgICAgaW5jbHVkZTogYCoqLyouc3ZnYCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBgcHJlc2V0LWRlZmF1bHRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVZpZXdCb3g6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VHcm91cHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cElEczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVVbmtub3duc0FuZERlZmF1bHRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgfTtcblxuICAgIGNvbnN0IGJ1bmRsZSA9IGF3YWl0IHJvbGx1cChpbnB1dE9wdGlvbnMpO1xuXG4gICAgYXdhaXQgYnVuZGxlLndyaXRlKHtcbiAgICAgICAgYmFubmVyLFxuICAgICAgICBmaWxlOiB0byxcbiAgICAgICAgZm9ybWF0OiBgZXNgLFxuICAgICAgICBwcmVmZXJDb25zdDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBub3RlOlxuICAgICAqIFRoZSByb2xsdXAgYnVuZGxlIG11c3QgYmUgY2xvc2VkIG9uY2UgYHdyaXRlYCBpcyBmaW5pc2hlZCB0byBsZXQgcGx1Z2lucyBjbGVhbiB1cCB0aGVpciBleHRlcm5hbFxuICAgICAqIHByb2Nlc3NlcyBvciBzZXJ2aWNlcyB2aWEgdGhlIGBjbG9zZUJ1bmRsZWAgaG9vaywgb3RoZXJ3aXNlIGl0IGNhbiBsZWFkIHRvIG1lbW9yeSBsZWFrcy5cbiAgICAgKi9cbiAgICBhd2FpdCBidW5kbGUuY2xvc2UoKTtcbn1cbiJdfQ==