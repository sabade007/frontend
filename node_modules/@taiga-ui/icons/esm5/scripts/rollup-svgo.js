import { __assign } from "tslib";
import { createFilter } from '@rollup/pluginutils';
import { optimize } from 'svgo';
export function rollupSvgo(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.include, include = _c === void 0 ? "**/*.svg" : _c, exclude = _b.exclude, options = _b.options;
    var filter = createFilter(include, exclude);
    return {
        name: "rollupSvgo",
        transform: function (svgString, path) {
            var _a;
            var skip = !filter(path);
            if (skip) {
                console.info("\u001B[33m%s\u001B[0m", "[skip]", path);
                return;
            }
            var data;
            var errorMessage;
            try {
                var result = optimize(svgString, __assign({ path: path }, options));
                data = ((_a = result) === null || _a === void 0 ? void 0 : _a.data) || {};
                errorMessage = result.error;
            }
            catch (err) {
                errorMessage = err.message;
            }
            if (errorMessage) {
                console.error("\u001B[31m%s\u001B[0m", "[error]", path, "\n" + svgString, "\n" + errorMessage);
                process.exit(1);
            }
            console.info("\u001B[32m%s\u001B[0m", "[success]", path);
            return {
                code: "export default " + JSON.stringify(data),
                map: { mappings: "" },
            };
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXN2Z28uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvaWNvbnMvc2NyaXB0cy8iLCJzb3VyY2VzIjpbInJvbGx1cC1zdmdvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFakQsT0FBTyxFQUFDLFFBQVEsRUFBZ0QsTUFBTSxNQUFNLENBQUM7QUFZN0UsTUFBTSxVQUFVLFVBQVUsQ0FBQyxFQUlBO1FBSkEsNEJBSUEsRUFIdkIsZUFBb0IsRUFBcEIseUNBQW9CLEVBQ3BCLG9CQUFPLEVBQ1Asb0JBQU87SUFFUCxJQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTlDLE9BQU87UUFDSCxJQUFJLEVBQUUsWUFBWTtRQUNsQixTQUFTLEVBQVQsVUFBVSxTQUFpQixFQUFFLElBQVk7O1lBQ3JDLElBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTNCLElBQUksSUFBSSxFQUFFO2dCQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQW1CLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUVsRCxPQUFPO2FBQ1Y7WUFFRCxJQUFJLElBQWEsQ0FBQztZQUNsQixJQUFJLFlBQW9CLENBQUM7WUFFekIsSUFBSTtnQkFDQSxJQUFNLE1BQU0sR0FBZSxRQUFRLENBQUMsU0FBUyxhQUFHLElBQUksTUFBQSxJQUFLLE9BQU8sRUFBRSxDQUFDO2dCQUVuRSxJQUFJLEdBQUcsT0FBQyxNQUF1QiwwQ0FBRSxJQUFJLEtBQUksRUFBRSxDQUFDO2dCQUM1QyxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQTBCLENBQUM7YUFDcEQ7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQzthQUM5QjtZQUVELElBQUksWUFBWSxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxLQUFLLENBQ1QsdUJBQW1CLEVBQ25CLFNBQVMsRUFDVCxJQUFJLEVBQ0osT0FBSyxTQUFXLEVBQ2hCLE9BQUssWUFBYyxDQUN0QixDQUFDO2dCQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUFtQixFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVyRCxPQUFPO2dCQUNILElBQUksRUFBRSxvQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUc7Z0JBQzlDLEdBQUcsRUFBRSxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUM7YUFDdEIsQ0FBQztRQUNOLENBQUM7S0FDSixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRmlsdGVyfSBmcm9tICdAcm9sbHVwL3BsdWdpbnV0aWxzJztcbmltcG9ydCB7UGx1Z2luLCBUcmFuc2Zvcm1SZXN1bHR9IGZyb20gJ3JvbGx1cCc7XG5pbXBvcnQge29wdGltaXplLCBPcHRpbWl6ZWRFcnJvciwgT3B0aW1pemVkU3ZnLCBPcHRpbWl6ZU9wdGlvbnN9IGZyb20gJ3N2Z28nO1xuXG50eXBlIFN2Z29SZXN1bHQgPSBPcHRpbWl6ZWRFcnJvciB8IE9wdGltaXplZFN2ZztcblxuZXhwb3J0IGludGVyZmFjZSBUdWlSb2xsdXBTdmdvQ29uZmlnIHtcbiAgICByZWFkb25seSBpbmNsdWRlPzogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgZXhjbHVkZT86IHN0cmluZztcblxuICAgIHJlYWRvbmx5IG9wdGlvbnM/OiBPcHRpbWl6ZU9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb2xsdXBTdmdvKHtcbiAgICBpbmNsdWRlID0gYCoqLyouc3ZnYCxcbiAgICBleGNsdWRlLFxuICAgIG9wdGlvbnMsXG59OiBUdWlSb2xsdXBTdmdvQ29uZmlnID0ge30pOiBQbHVnaW4ge1xuICAgIGNvbnN0IGZpbHRlciA9IGNyZWF0ZUZpbHRlcihpbmNsdWRlLCBleGNsdWRlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGByb2xsdXBTdmdvYCxcbiAgICAgICAgdHJhbnNmb3JtKHN2Z1N0cmluZzogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBUcmFuc2Zvcm1SZXN1bHQge1xuICAgICAgICAgICAgY29uc3Qgc2tpcCA9ICFmaWx0ZXIocGF0aCk7XG5cbiAgICAgICAgICAgIGlmIChza2lwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszM20lc1xceDFCWzBtYCwgYFtza2lwXWAsIHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGF0YTogdW5rbm93bjtcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2U6IHN0cmluZztcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQ6IFN2Z29SZXN1bHQgPSBvcHRpbWl6ZShzdmdTdHJpbmcsIHtwYXRoLCAuLi5vcHRpb25zfSk7XG5cbiAgICAgICAgICAgICAgICBkYXRhID0gKHJlc3VsdCBhcyBPcHRpbWl6ZWRTdmcpPy5kYXRhIHx8IHt9O1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHJlc3VsdC5lcnJvciBhcyB1bmtub3duIGFzIHN0cmluZztcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFxceDFCWzMxbSVzXFx4MUJbMG1gLFxuICAgICAgICAgICAgICAgICAgICBgW2Vycm9yXWAsXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGBcXG4ke3N2Z1N0cmluZ31gLFxuICAgICAgICAgICAgICAgICAgICBgXFxuJHtlcnJvck1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszMm0lc1xceDFCWzBtYCwgYFtzdWNjZXNzXWAsIHBhdGgpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvZGU6IGBleHBvcnQgZGVmYXVsdCAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWAsXG4gICAgICAgICAgICAgICAgbWFwOiB7bWFwcGluZ3M6IGBgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdfQ==