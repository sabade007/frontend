import { __values } from "tslib";
import fs from 'fs';
import { parse } from 'path';
var START = "<svg";
var WIDTH_SEARCH = "width=\"";
var HEIGHT_SEARCH = "height=\"";
export function processIcons(files, interceptor) {
    var e_1, _a;
    try {
        for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
            var file = files_1_1.value;
            var baseContent = String(fs.readFileSync(file));
            var src = interceptor ? interceptor(baseContent) : baseContent;
            var name_1 = parse(file).base.replace(".svg", "");
            if (src.includes("id=\"" + name_1 + "\"")) {
                console.info("\u001B[33m%s\u001B[0m", "[skip]:", file);
                continue;
            }
            var wrapped = wrapIcon(src, name_1);
            var final = typeof wrapped === "string"
                ? wrapped.replace(START, "<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"" + name_1 + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg") + "</g></svg>"
                : "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"" + wrapped.width + "\" height=\"" + wrapped.height + "\">" + wrapped.src + "</svg>";
            fs.writeFileSync(file, final);
            console.info("\u001B[32m%s\u001B[0m", "[preprocessed]:", file);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
function wrapIcon(source, name) {
    var src = source.slice(Math.max(0, source.indexOf(START)));
    var attributes = src.slice(0, Math.max(0, src.indexOf(">")));
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
        return src;
    }
    var indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    var indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    var widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    var heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    var widthString = attributes.slice(widthOffset, attributes.indexOf("\"", widthOffset));
    var heightString = attributes.slice(heightOffset, attributes.indexOf("\"", heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes("%") ||
        heightString.includes("%")) {
        return src.replace(START, "<svg id=\"" + name + "\"");
    }
    var width = parseInt(widthString, 10);
    var height = parseInt(heightString, 10);
    var emWidth = width / 16;
    var emHeight = height / 16;
    return {
        width: emWidth + "em",
        height: emHeight + "em",
        src: ("\n        <g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\">\n            <svg x=\"50%\" y=\"50%\" width=\"" + emWidth + "em\" height=\"" + emHeight + "em\" overflow=\"visible\" viewBox=\"0 0 " + width + " " + height + "\">\n                <svg x=\"" + -width / 2 + "\" y=\"" + -height / 2 + "\">" + src + "</svg>\n            </svg>\n        </g>").trim(),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pY29ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9pY29ucy9zY3JpcHRzLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1pY29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFM0IsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQU0sWUFBWSxHQUFHLFVBQVMsQ0FBQztBQUMvQixJQUFNLGFBQWEsR0FBRyxXQUFVLENBQUM7QUFVakMsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFlLEVBQUUsV0FBZ0M7OztRQUMxRSxLQUFtQixJQUFBLFVBQUEsU0FBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7WUFBckIsSUFBTSxJQUFJLGtCQUFBO1lBQ1gsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxJQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1lBRWpFLElBQU0sTUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVsRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBTyxNQUFJLE9BQUcsQ0FBQyxFQUFFO2dCQUM5QixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUFtQixFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbkQsU0FBUzthQUNaO1lBRUQsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFJLENBQUMsQ0FBQztZQUVwQyxJQUFNLEtBQUssR0FDUCxPQUFPLE9BQU8sS0FBSyxRQUFRO2dC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O1xuaW1wb3J0IHtwYXJzZX0gZnJvbSAncGF0aCc7XG5cbmNvbnN0IFNUQVJUID0gYDxzdmdgO1xuY29uc3QgV0lEVEhfU0VBUkNIID0gYHdpZHRoPVwiYDtcbmNvbnN0IEhFSUdIVF9TRUFSQ0ggPSBgaGVpZ2h0PVwiYDtcblxuaW50ZXJmYWNlIFdyYXBwZWRDb250ZW50IHtcbiAgICBoZWlnaHQ6IHN0cmluZztcbiAgICB3aWR0aDogc3RyaW5nO1xuICAgIHNyYzogc3RyaW5nO1xufVxuXG50eXBlIENvbnRlbnRJbnRlcmNlcHRvciA9IChzcmM6IHN0cmluZykgPT4gc3RyaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ljb25zKGZpbGVzOiBzdHJpbmdbXSwgaW50ZXJjZXB0b3I/OiBDb250ZW50SW50ZXJjZXB0b3IpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgY29uc3QgYmFzZUNvbnRlbnQgPSBTdHJpbmcoZnMucmVhZEZpbGVTeW5jKGZpbGUpKTtcbiAgICAgICAgY29uc3Qgc3JjID0gaW50ZXJjZXB0b3IgPyBpbnRlcmNlcHRvcihiYXNlQ29udGVudCkgOiBiYXNlQ29udGVudDtcblxuICAgICAgICBjb25zdCBuYW1lID0gcGFyc2UoZmlsZSkuYmFzZS5yZXBsYWNlKGAuc3ZnYCwgYGApO1xuXG4gICAgICAgIGlmIChzcmMuaW5jbHVkZXMoYGlkPVwiJHtuYW1lfVwiYCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgXFx4MUJbMzNtJXNcXHgxQlswbWAsIGBbc2tpcF06YCwgZmlsZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHdyYXBwZWQgPSB3cmFwSWNvbihzcmMsIG5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGZpbmFsID1cbiAgICAgICAgICAgIHR5cGVvZiB3cmFwcGVkID09PSBgc3RyaW5nYFxuICAgICAgICAgICAgICAgID8gYCR7d3JhcHBlZC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgIFNUQVJULFxuICAgICAgICAgICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHN2Z2AsXG4gICAgICAgICAgICAgICAgICApfTwvZz48L3N2Zz5gXG4gICAgICAgICAgICAgICAgOiBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIke3dyYXBwZWQud2lkdGh9XCIgaGVpZ2h0PVwiJHt3cmFwcGVkLmhlaWdodH1cIj4ke3dyYXBwZWQuc3JjfTwvc3ZnPmA7XG5cbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlLCBmaW5hbCk7XG5cbiAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszMm0lc1xceDFCWzBtYCwgYFtwcmVwcm9jZXNzZWRdOmAsIGZpbGUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd3JhcEljb24oc291cmNlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFdyYXBwZWRDb250ZW50IHwgc3RyaW5nIHtcbiAgICBjb25zdCBzcmMgPSBzb3VyY2Uuc2xpY2UoTWF0aC5tYXgoMCwgc291cmNlLmluZGV4T2YoU1RBUlQpKSk7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHNyYy5zbGljZSgwLCBNYXRoLm1heCgwLCBzcmMuaW5kZXhPZihgPmApKSk7XG5cbiAgICBpZiAoIWF0dHJpYnV0ZXM/LmluY2x1ZGVzKFdJRFRIX1NFQVJDSCkgfHwgIWF0dHJpYnV0ZXMuaW5jbHVkZXMoSEVJR0hUX1NFQVJDSCkpIHtcbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleE9mV2lkdGggPSBhdHRyaWJ1dGVzLmluZGV4T2YoV0lEVEhfU0VBUkNIKTtcbiAgICBjb25zdCBpbmRleE9mSGVpZ2h0ID0gYXR0cmlidXRlcy5pbmRleE9mKEhFSUdIVF9TRUFSQ0gpO1xuICAgIGNvbnN0IHdpZHRoT2Zmc2V0ID0gaW5kZXhPZldpZHRoICsgV0lEVEhfU0VBUkNILmxlbmd0aDtcbiAgICBjb25zdCBoZWlnaHRPZmZzZXQgPSBpbmRleE9mSGVpZ2h0ICsgSEVJR0hUX1NFQVJDSC5sZW5ndGg7XG4gICAgY29uc3Qgd2lkdGhTdHJpbmcgPSBhdHRyaWJ1dGVzLnNsaWNlKFxuICAgICAgICB3aWR0aE9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlcy5pbmRleE9mKGBcImAsIHdpZHRoT2Zmc2V0KSxcbiAgICApO1xuICAgIGNvbnN0IGhlaWdodFN0cmluZyA9IGF0dHJpYnV0ZXMuc2xpY2UoXG4gICAgICAgIGhlaWdodE9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlcy5pbmRleE9mKGBcImAsIGhlaWdodE9mZnNldCksXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgICAgIWhlaWdodFN0cmluZyB8fFxuICAgICAgICAhd2lkdGhTdHJpbmcgfHxcbiAgICAgICAgd2lkdGhTdHJpbmcuaW5jbHVkZXMoYCVgKSB8fFxuICAgICAgICBoZWlnaHRTdHJpbmcuaW5jbHVkZXMoYCVgKVxuICAgICkge1xuICAgICAgICByZXR1cm4gc3JjLnJlcGxhY2UoU1RBUlQsIGA8c3ZnIGlkPVwiJHtuYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBwYXJzZUludCh3aWR0aFN0cmluZywgMTApO1xuICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KGhlaWdodFN0cmluZywgMTApO1xuICAgIGNvbnN0IGVtV2lkdGggPSB3aWR0aCAvIDE2O1xuICAgIGNvbnN0IGVtSGVpZ2h0ID0gaGVpZ2h0IC8gMTY7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogYCR7ZW1XaWR0aH1lbWAsXG4gICAgICAgIGhlaWdodDogYCR7ZW1IZWlnaHR9ZW1gLFxuICAgICAgICBzcmM6IGBcbiAgICAgICAgPGcgaWQ9XCIke25hbWV9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgPHN2ZyB4PVwiNTAlXCIgeT1cIjUwJVwiIHdpZHRoPVwiJHtlbVdpZHRofWVtXCIgaGVpZ2h0PVwiJHtlbUhlaWdodH1lbVwiIG92ZXJmbG93PVwidmlzaWJsZVwiIHZpZXdCb3g9XCIwIDAgJHt3aWR0aH0gJHtoZWlnaHR9XCI+XG4gICAgICAgICAgICAgICAgPHN2ZyB4PVwiJHstd2lkdGggLyAyfVwiIHk9XCIkey1oZWlnaHQgLyAyfVwiPiR7c3JjfTwvc3ZnPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvZz5gLnRyaW0oKSxcbiAgICB9O1xufVxuIl19