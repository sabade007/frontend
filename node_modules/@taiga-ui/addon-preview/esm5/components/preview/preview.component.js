import { __decorate, __param, __read } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, } from '@angular/core';
import { TUI_PREVIEW_TEXTS } from '@taiga-ui/addon-preview/tokens';
import { clamp, dragAndDropFrom, px, round, tuiDefaultProp, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiSlideInTop } from '@taiga-ui/core';
import { BehaviorSubject, combineLatest, merge, Observable } from 'rxjs';
import { map, mapTo, startWith } from 'rxjs/operators';
var INITIAL_SCALE_COEF = 0.8;
var EMPTY_COORDINATES = [0, 0];
var ROTATION_ANGLE = 90;
var TuiPreviewComponent = /** @class */ (function () {
    function TuiPreviewComponent(elementRef, destroy$, texts$) {
        this.elementRef = elementRef;
        this.destroy$ = destroy$;
        this.texts$ = texts$;
        this.zoomable = true;
        this.rotatable = false;
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(dragAndDropFrom(this.elementRef.nativeElement).pipe(map(function (_a) {
            var stage = _a.stage;
            return stage !== 1 /* Continues */;
        })), typedFromEvent(this.elementRef.nativeElement, 'touchmove', { passive: true }).pipe(mapTo(false)), typedFromEvent(this.elementRef.nativeElement, 'wheel', { passive: true }).pipe(mapTo(false)));
        this.cursor$ = dragAndDropFrom(this.elementRef.nativeElement).pipe(map(function (_a) {
            var stage = _a.stage;
            return (stage === 1 /* Continues */ ? 'grabbing' : 'initial');
        }), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(function (_a) {
                var _b = __read(_a, 2), x = _b[0], y = _b[1];
                return px(x) + ", " + px(y);
            })),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 3), translate = _b[0], zoom = _b[1], rotation = _b[2];
            return "translate(" + translate + ") scale(" + zoom + ") rotate(" + rotation + "deg)";
        }));
    }
    TuiPreviewComponent.prototype.rotate = function () {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    };
    TuiPreviewComponent.prototype.onPan = function (delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    };
    TuiPreviewComponent.prototype.onMutation = function (contentWrapper) {
        var clientWidth = contentWrapper.clientWidth, clientHeight = contentWrapper.clientHeight;
        this.refresh(clientWidth, clientHeight);
    };
    TuiPreviewComponent.prototype.onZoom = function (_a) {
        var clientX = _a.clientX, clientY = _a.clientY, delta = _a.delta;
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    };
    TuiPreviewComponent.prototype.onResize = function (contentResizeEntries) {
        if (contentResizeEntries.length === 0) {
            return;
        }
        var _a = contentResizeEntries[0].contentRect, width = _a.width, height = _a.height;
        this.refresh(width, height);
    };
    TuiPreviewComponent.prototype.reset = function () {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    };
    Object.defineProperty(TuiPreviewComponent.prototype, "offsets", {
        get: function () {
            var offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
            var offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
            return { offsetX: offsetX, offsetY: offsetY };
        },
        enumerable: true,
        configurable: true
    });
    TuiPreviewComponent.prototype.calculateMinZoom = function (contentHeight, contentWidth, boxHeight, boxWidth) {
        var bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        var _a = this.elementRef.nativeElement, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        return bigSize
            ? round(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    };
    TuiPreviewComponent.prototype.refresh = function (width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.elementRef.nativeElement.clientHeight, this.elementRef.nativeElement.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    };
    TuiPreviewComponent.prototype.processZoom = function (clientX, clientY, delta) {
        var oldScale = this.zoom$.value;
        var newScale = clamp(oldScale + delta, this.minZoom, 2);
        var center = this.getScaleCenter({ clientX: clientX, clientY: clientY }, this.coordinates$.value, this.zoom$.value);
        var moveX = center[0] * oldScale - center[0] * newScale;
        var moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    };
    TuiPreviewComponent.prototype.getGuardedCoordinates = function (x, y) {
        var _a = this.offsets, offsetX = _a.offsetX, offsetY = _a.offsetY;
        return [clamp(x, -offsetX, offsetX), clamp(y, -offsetY, offsetY)];
    };
    TuiPreviewComponent.prototype.getScaleCenter = function (_a, _b, scale) {
        var clientX = _a.clientX, clientY = _a.clientY;
        var _c = __read(_b, 2), x = _c[0], y = _c[1];
        return [
            (clientX - x - this.elementRef.nativeElement.offsetWidth / 2) / scale,
            (clientY - y - this.elementRef.nativeElement.offsetHeight / 2) / scale,
        ];
    };
    TuiPreviewComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewComponent.prototype, "zoomable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewComponent.prototype, "rotatable", void 0);
    TuiPreviewComponent = __decorate([
        Component({
            selector: 'tui-preview',
            template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        subtree\n        childList\n        characterData\n        attributeFilter=\"src\"\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (tuiResize)=\"onResize($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n    >\n        <ng-content></ng-content>\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\"></ng-content>\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\"></ng-content>\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\"></ng-content>\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconRotate\"\n            tuiHintId=\"Rotate\"\n            tuiHintDirection=\"top-right\"\n            tuiHintMode=\"onDark\"\n            class=\"t-rotate-button\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (valueChange)=\"zoom$.next($event)\"\n            (reset)=\"reset()\"\n        ></tui-preview-zoom>\n    </footer>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [tuiSlideInTop],
            providers: [TuiDestroyService],
            styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiDestroyService)),
        __param(2, Inject(TUI_PREVIEW_TEXTS))
    ], TuiPreviewComponent);
    return TuiPreviewComponent;
}());
export { TuiPreviewComponent };
//# sourceMappingURL=data:application/json;base64,