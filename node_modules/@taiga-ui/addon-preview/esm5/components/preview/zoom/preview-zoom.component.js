import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { TUI_PREVIEW_ZOOM_TEXTS } from '@taiga-ui/addon-preview/tokens';
import { clamp, tuiDefaultProp } from '@taiga-ui/cdk';
import { merge, Observable, of, timer } from 'rxjs';
import { mapTo, startWith, switchMap } from 'rxjs/operators';
var STEP = 0.5;
var TuiPreviewZoomComponent = /** @class */ (function () {
    function TuiPreviewZoomComponent(zoomTexts$) {
        this.zoomTexts$ = zoomTexts$;
        this.min = 0.5;
        this.max = 2;
        this.value = 1;
        this.valueChange = new EventEmitter();
        this.reset = new EventEmitter();
        this.hintShow$ = this.valueChange.pipe(switchMap(function () { return merge(of(true), timer(1000).pipe(mapTo(false))); }), startWith(false));
    }
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "leftButtonDisabled", {
        get: function () {
            return this.value === this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "rightButtonDisabled", {
        get: function () {
            return this.value === this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "collapseVisible", {
        get: function () {
            return this.value > this.min;
        },
        enumerable: true,
        configurable: true
    });
    TuiPreviewZoomComponent.prototype.onModelChange = function (value) {
        var clamped = clamp(value, this.min, this.max);
        if (clamped === this.value) {
            return;
        }
        this.value = clamped;
        this.valueChange.emit(clamped);
    };
    TuiPreviewZoomComponent.prototype.onReset = function () {
        this.reset.emit();
    };
    TuiPreviewZoomComponent.prototype.onMinus = function () {
        this.onModelChange(this.value - STEP);
    };
    TuiPreviewZoomComponent.prototype.onPlus = function () {
        this.onModelChange(this.value < 1 ? 1 : this.value + STEP);
    };
    TuiPreviewZoomComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_ZOOM_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "value", void 0);
    __decorate([
        Output()
    ], TuiPreviewZoomComponent.prototype, "valueChange", void 0);
    __decorate([
        Output()
    ], TuiPreviewZoomComponent.prototype, "reset", void 0);
    TuiPreviewZoomComponent = __decorate([
        Component({
            selector: 'tui-preview-zoom',
            template: "<ng-container *ngIf=\"zoomTexts$ | async as texts\">\n    <section class=\"t-zoom\">\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconMinus\"\n            class=\"t-sign_minus\"\n            [title]=\"texts.zoomOut\"\n            [disabled]=\"leftButtonDisabled\"\n            (click)=\"onMinus()\"\n        ></button>\n        <label tuiSliderThumbLabel>\n            <div\n                tuiHintMode=\"onDark\"\n                tuiHintDirection=\"top-right\"\n                [tuiManualHint]=\"hint\"\n                [tuiManualHintShow]=\"!!(hintShow$ | async)\"\n            ></div>\n\n            <ng-template #hint>\n                {{ (valueChange | async) || value | percent }}\n            </ng-template>\n\n            <input\n                tuiSlider\n                type=\"range\"\n                step=\"any\"\n                class=\"t-slider\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [ngModel]=\"value\"\n                (ngModelChange)=\"onModelChange($event)\"\n            />\n        </label>\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconPlus\"\n            class=\"t-sign_plus\"\n            [title]=\"texts.zoomIn\"\n            [disabled]=\"rightButtonDisabled\"\n            (click)=\"onPlus()\"\n        ></button>\n    </section>\n\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        icon=\"tuiIconCollapse\"\n        tuiHintId=\"Collapse\"\n        tuiHintDirection=\"top-right\"\n        tuiHintMode=\"onDark\"\n        class=\"t-reset-button\"\n        [tuiHint]=\"texts.reset\"\n        [class.t-invisible]=\"!collapseVisible\"\n        (click)=\"onReset()\"\n    ></button>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:flex}.t-zoom{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:12rem}.t-slider{width:7.5rem}.t-sign_minus{border-top-right-radius:0;border-bottom-right-radius:0}.t-sign_plus{border-top-left-radius:0;border-bottom-left-radius:0}.t-invisible{visibility:hidden}.t-reset-button{margin-left:.3125rem}"]
        }),
        __param(0, Inject(TUI_PREVIEW_ZOOM_TEXTS))
    ], TuiPreviewZoomComponent);
    return TuiPreviewZoomComponent;
}());
export { TuiPreviewZoomComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy16b29tLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9hZGRvbi1wcmV2aWV3L2NvbXBvbmVudHMvcHJldmlldy8iLCJzb3VyY2VzIjpbInpvb20vcHJldmlldy16b29tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxLQUFLLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBUWpCO0lBd0JJLGlDQUVhLFVBQW9EO1FBQXBELGVBQVUsR0FBVixVQUFVLENBQTBDO1FBdkJqRSxRQUFHLEdBQUcsR0FBRyxDQUFDO1FBSVYsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUlSLFVBQUssR0FBRyxDQUFDLENBQUM7UUFHRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFakMsY0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUN0QyxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUEvQyxDQUErQyxDQUFDLEVBQ2hFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FDbkIsQ0FBQztJQUtDLENBQUM7SUFFSixzQkFBSSx1REFBa0I7YUFBdEI7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdEQUFtQjthQUF2QjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBRUQsc0JBQUksb0RBQWU7YUFBbkI7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNqQyxDQUFDOzs7T0FBQTtJQUVELCtDQUFhLEdBQWIsVUFBYyxLQUFhO1FBQ3ZCLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakQsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQseUNBQU8sR0FBUDtRQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELHlDQUFPLEdBQVA7UUFDSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELHdDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Z0JBcEN3QixVQUFVLHVCQUQ5QixNQUFNLFNBQUMsc0JBQXNCOztJQXRCbEM7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7d0RBQ1A7SUFJVjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTt3REFDVDtJQUlSO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFOzBEQUNQO0lBR1Y7UUFEQyxNQUFNLEVBQUU7Z0VBQ3lDO0lBR2xEO1FBREMsTUFBTSxFQUFFOzBEQUNpQztJQWpCakMsdUJBQXVCO1FBTm5DLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsMndEQUEyQztZQUUzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7U0FDbEQsQ0FBQztRQTBCTyxXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO09BekIxQix1QkFBdUIsQ0ErRG5DO0lBQUQsOEJBQUM7Q0FBQSxBQS9ERCxJQStEQztTQS9EWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RVSV9QUkVWSUVXX1pPT01fVEVYVFN9IGZyb20gJ0B0YWlnYS11aS9hZGRvbi1wcmV2aWV3L3Rva2Vucyc7XG5pbXBvcnQge2NsYW1wLCB0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0xhbmd1YWdlUHJldmlld30gZnJvbSAnQHRhaWdhLXVpL2kxOG4nO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZSwgb2YsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwVG8sIHN0YXJ0V2l0aCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IFNURVAgPSAwLjU7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXByZXZpZXctem9vbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ByZXZpZXctem9vbS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wcmV2aWV3LXpvb20uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmV2aWV3Wm9vbUNvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1pbiA9IDAuNTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtYXggPSAyO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHZhbHVlID0gMTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSByZXNldCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIHJlYWRvbmx5IGhpbnRTaG93JCA9IHRoaXMudmFsdWVDaGFuZ2UucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IG1lcmdlKG9mKHRydWUpLCB0aW1lcigxMDAwKS5waXBlKG1hcFRvKGZhbHNlKSkpKSxcbiAgICAgICAgc3RhcnRXaXRoKGZhbHNlKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX1BSRVZJRVdfWk9PTV9URVhUUylcbiAgICAgICAgcmVhZG9ubHkgem9vbVRleHRzJDogT2JzZXJ2YWJsZTxMYW5ndWFnZVByZXZpZXdbJ3pvb21UZXh0cyddPixcbiAgICApIHt9XG5cbiAgICBnZXQgbGVmdEJ1dHRvbkRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gdGhpcy5taW47XG4gICAgfVxuXG4gICAgZ2V0IHJpZ2h0QnV0dG9uRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB0aGlzLm1heDtcbiAgICB9XG5cbiAgICBnZXQgY29sbGFwc2VWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA+IHRoaXMubWluO1xuICAgIH1cblxuICAgIG9uTW9kZWxDaGFuZ2UodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBjbGFtcGVkID0gY2xhbXAodmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCk7XG5cbiAgICAgICAgaWYgKGNsYW1wZWQgPT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWUgPSBjbGFtcGVkO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQoY2xhbXBlZCk7XG4gICAgfVxuXG4gICAgb25SZXNldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldC5lbWl0KCk7XG4gICAgfVxuXG4gICAgb25NaW51cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMudmFsdWUgLSBTVEVQKTtcbiAgICB9XG5cbiAgICBvblBsdXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLnZhbHVlIDwgMSA/IDEgOiB0aGlzLnZhbHVlICsgU1RFUCk7XG4gICAgfVxufVxuIl19