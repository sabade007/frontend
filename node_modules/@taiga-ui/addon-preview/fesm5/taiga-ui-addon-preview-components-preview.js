import { __decorate, __param, __read } from 'tslib';
import { EventEmitter, Inject, Input, Output, HostListener, Component, ChangeDetectionStrategy, ElementRef, Directive, NgModule } from '@angular/core';
import { clamp, tuiDefaultProp, dragAndDropFrom, typedFromEvent, px, round, TuiDestroyService, TuiDragModule, TuiResizeModule, TuiPanModule, TuiZoomModule } from '@taiga-ui/cdk';
import { TUI_PAGINATION_TEXTS, TuiSliderModule } from '@taiga-ui/kit';
import { Observable, BehaviorSubject, merge, combineLatest, of, timer } from 'rxjs';
import { TUI_PREVIEW_TEXTS, TUI_PREVIEW_ZOOM_TEXTS } from '@taiga-ui/addon-preview/tokens';
import { tuiSlideInTop, TUI_BUTTON_OPTIONS, TuiButtonModule, TuiHintModule, TuiManualHintModule, TuiSvgModule, TuiLoaderModule } from '@taiga-ui/core';
import { map, mapTo, startWith, switchMap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MutationObserverModule } from '@ng-web-apis/mutation-observer';
import { PREVIEW_DIALOG_PROVIDER } from '@taiga-ui/addon-preview/components/preview-dialog';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

var TuiPreviewPaginationComponent = /** @class */ (function () {
    function TuiPreviewPaginationComponent(texts$) {
        this.texts$ = texts$;
        this.length = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
    }
    Object.defineProperty(TuiPreviewPaginationComponent.prototype, "leftButtonDisabled", {
        get: function () {
            return this.index === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPreviewPaginationComponent.prototype, "rightButtonDisabled", {
        get: function () {
            return this.index === this.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    TuiPreviewPaginationComponent.prototype.onArrowClick = function (step) {
        this.updateIndex(clamp(this.index + step, 0, this.length - 1));
    };
    TuiPreviewPaginationComponent.prototype.updateIndex = function (index) {
        if (this.index === index) {
            return;
        }
        this.index = index;
        this.indexChange.emit(index);
    };
    TuiPreviewPaginationComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PAGINATION_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewPaginationComponent.prototype, "length", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewPaginationComponent.prototype, "index", void 0);
    __decorate([
        Output()
    ], TuiPreviewPaginationComponent.prototype, "indexChange", void 0);
    __decorate([
        HostListener('document:keydown.arrowRight.prevent', ['1']),
        HostListener('document:keydown.arrowLeft.prevent', ['-1'])
    ], TuiPreviewPaginationComponent.prototype, "onArrowClick", null);
    TuiPreviewPaginationComponent = __decorate([
        Component({
            selector: 'tui-preview-pagination',
            template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        icon=\"tuiIconArrowLeft\"\n        class=\"t-arrow_left\"\n        [title]=\"texts[0]\"\n        [disabled]=\"leftButtonDisabled\"\n        (click)=\"onArrowClick(-1)\"\n    ></button>\n    {{ index + 1 }}/{{ length }}\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        icon=\"tuiIconArrowRight\"\n        class=\"t-arrow_right\"\n        [title]=\"texts[1]\"\n        [disabled]=\"rightButtonDisabled\"\n        (click)=\"onArrowClick(1)\"\n    ></button>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:6.25rem}.t-arrow_left{border-top-right-radius:0;border-bottom-right-radius:0}.t-arrow_right{border-top-left-radius:0;border-bottom-left-radius:0}"]
        }),
        __param(0, Inject(TUI_PAGINATION_TEXTS))
    ], TuiPreviewPaginationComponent);
    return TuiPreviewPaginationComponent;
}());

var INITIAL_SCALE_COEF = 0.8;
var EMPTY_COORDINATES = [0, 0];
var ROTATION_ANGLE = 90;
var TuiPreviewComponent = /** @class */ (function () {
    function TuiPreviewComponent(elementRef, destroy$, texts$) {
        this.elementRef = elementRef;
        this.destroy$ = destroy$;
        this.texts$ = texts$;
        this.zoomable = true;
        this.rotatable = false;
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(dragAndDropFrom(this.elementRef.nativeElement).pipe(map(function (_a) {
            var stage = _a.stage;
            return stage !== 1 /* Continues */;
        })), typedFromEvent(this.elementRef.nativeElement, 'touchmove', { passive: true }).pipe(mapTo(false)), typedFromEvent(this.elementRef.nativeElement, 'wheel', { passive: true }).pipe(mapTo(false)));
        this.cursor$ = dragAndDropFrom(this.elementRef.nativeElement).pipe(map(function (_a) {
            var stage = _a.stage;
            return (stage === 1 /* Continues */ ? 'grabbing' : 'initial');
        }), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(function (_a) {
                var _b = __read(_a, 2), x = _b[0], y = _b[1];
                return px(x) + ", " + px(y);
            })),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 3), translate = _b[0], zoom = _b[1], rotation = _b[2];
            return "translate(" + translate + ") scale(" + zoom + ") rotate(" + rotation + "deg)";
        }));
    }
    TuiPreviewComponent.prototype.rotate = function () {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    };
    TuiPreviewComponent.prototype.onPan = function (delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    };
    TuiPreviewComponent.prototype.onMutation = function (contentWrapper) {
        var clientWidth = contentWrapper.clientWidth, clientHeight = contentWrapper.clientHeight;
        this.refresh(clientWidth, clientHeight);
    };
    TuiPreviewComponent.prototype.onZoom = function (_a) {
        var clientX = _a.clientX, clientY = _a.clientY, delta = _a.delta;
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    };
    TuiPreviewComponent.prototype.onResize = function (contentResizeEntries) {
        if (contentResizeEntries.length === 0) {
            return;
        }
        var _a = contentResizeEntries[0].contentRect, width = _a.width, height = _a.height;
        this.refresh(width, height);
    };
    TuiPreviewComponent.prototype.reset = function () {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    };
    Object.defineProperty(TuiPreviewComponent.prototype, "offsets", {
        get: function () {
            var offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
            var offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
            return { offsetX: offsetX, offsetY: offsetY };
        },
        enumerable: true,
        configurable: true
    });
    TuiPreviewComponent.prototype.calculateMinZoom = function (contentHeight, contentWidth, boxHeight, boxWidth) {
        var bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        var _a = this.elementRef.nativeElement, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        return bigSize
            ? round(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    };
    TuiPreviewComponent.prototype.refresh = function (width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.elementRef.nativeElement.clientHeight, this.elementRef.nativeElement.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    };
    TuiPreviewComponent.prototype.processZoom = function (clientX, clientY, delta) {
        var oldScale = this.zoom$.value;
        var newScale = clamp(oldScale + delta, this.minZoom, 2);
        var center = this.getScaleCenter({ clientX: clientX, clientY: clientY }, this.coordinates$.value, this.zoom$.value);
        var moveX = center[0] * oldScale - center[0] * newScale;
        var moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    };
    TuiPreviewComponent.prototype.getGuardedCoordinates = function (x, y) {
        var _a = this.offsets, offsetX = _a.offsetX, offsetY = _a.offsetY;
        return [clamp(x, -offsetX, offsetX), clamp(y, -offsetY, offsetY)];
    };
    TuiPreviewComponent.prototype.getScaleCenter = function (_a, _b, scale) {
        var clientX = _a.clientX, clientY = _a.clientY;
        var _c = __read(_b, 2), x = _c[0], y = _c[1];
        return [
            (clientX - x - this.elementRef.nativeElement.offsetWidth / 2) / scale,
            (clientY - y - this.elementRef.nativeElement.offsetHeight / 2) / scale,
        ];
    };
    TuiPreviewComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewComponent.prototype, "zoomable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewComponent.prototype, "rotatable", void 0);
    TuiPreviewComponent = __decorate([
        Component({
            selector: 'tui-preview',
            template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        subtree\n        childList\n        characterData\n        attributeFilter=\"src\"\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (tuiResize)=\"onResize($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n    >\n        <ng-content></ng-content>\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\"></ng-content>\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\"></ng-content>\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\"></ng-content>\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconRotate\"\n            tuiHintId=\"Rotate\"\n            tuiHintDirection=\"top-right\"\n            tuiHintMode=\"onDark\"\n            class=\"t-rotate-button\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (valueChange)=\"zoom$.next($event)\"\n            (reset)=\"reset()\"\n        ></tui-preview-zoom>\n    </footer>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [tuiSlideInTop],
            providers: [TuiDestroyService],
            styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiDestroyService)),
        __param(2, Inject(TUI_PREVIEW_TEXTS))
    ], TuiPreviewComponent);
    return TuiPreviewComponent;
}());

// TODO: 3.0 remove in ivy compilation
var PREVIEW_ACTION_OPTIONS = {
    appearance: 'preview-action',
    shape: 'rounded',
    size: 's',
};
var TuiPreviewActionDirective = /** @class */ (function () {
    function TuiPreviewActionDirective() {
    }
    TuiPreviewActionDirective = __decorate([
        Directive({
            selector: '[tuiPreviewAction]',
            providers: [
                {
                    provide: TUI_BUTTON_OPTIONS,
                    useValue: PREVIEW_ACTION_OPTIONS,
                },
            ],
        })
    ], TuiPreviewActionDirective);
    return TuiPreviewActionDirective;
}());

var TuiPreviewActionModule = /** @class */ (function () {
    function TuiPreviewActionModule() {
    }
    TuiPreviewActionModule = __decorate([
        NgModule({
            declarations: [TuiPreviewActionDirective],
            exports: [TuiPreviewActionDirective],
        })
    ], TuiPreviewActionModule);
    return TuiPreviewActionModule;
}());

var TuiPreviewTitleComponent = /** @class */ (function () {
    function TuiPreviewTitleComponent() {
    }
    TuiPreviewTitleComponent = __decorate([
        Component({
            selector: 'tui-preview-title',
            template: "\n        <ng-content></ng-content>\n    ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:inline-block;padding:.375rem .75rem}"]
        })
    ], TuiPreviewTitleComponent);
    return TuiPreviewTitleComponent;
}());

var STEP = 0.5;
var TuiPreviewZoomComponent = /** @class */ (function () {
    function TuiPreviewZoomComponent(zoomTexts$) {
        this.zoomTexts$ = zoomTexts$;
        this.min = 0.5;
        this.max = 2;
        this.value = 1;
        this.valueChange = new EventEmitter();
        this.reset = new EventEmitter();
        this.hintShow$ = this.valueChange.pipe(switchMap(function () { return merge(of(true), timer(1000).pipe(mapTo(false))); }), startWith(false));
    }
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "leftButtonDisabled", {
        get: function () {
            return this.value === this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "rightButtonDisabled", {
        get: function () {
            return this.value === this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPreviewZoomComponent.prototype, "collapseVisible", {
        get: function () {
            return this.value > this.min;
        },
        enumerable: true,
        configurable: true
    });
    TuiPreviewZoomComponent.prototype.onModelChange = function (value) {
        var clamped = clamp(value, this.min, this.max);
        if (clamped === this.value) {
            return;
        }
        this.value = clamped;
        this.valueChange.emit(clamped);
    };
    TuiPreviewZoomComponent.prototype.onReset = function () {
        this.reset.emit();
    };
    TuiPreviewZoomComponent.prototype.onMinus = function () {
        this.onModelChange(this.value - STEP);
    };
    TuiPreviewZoomComponent.prototype.onPlus = function () {
        this.onModelChange(this.value < 1 ? 1 : this.value + STEP);
    };
    TuiPreviewZoomComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_ZOOM_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPreviewZoomComponent.prototype, "value", void 0);
    __decorate([
        Output()
    ], TuiPreviewZoomComponent.prototype, "valueChange", void 0);
    __decorate([
        Output()
    ], TuiPreviewZoomComponent.prototype, "reset", void 0);
    TuiPreviewZoomComponent = __decorate([
        Component({
            selector: 'tui-preview-zoom',
            template: "<ng-container *ngIf=\"zoomTexts$ | async as texts\">\n    <section class=\"t-zoom\">\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconMinus\"\n            class=\"t-sign_minus\"\n            [title]=\"texts.zoomOut\"\n            [disabled]=\"leftButtonDisabled\"\n            (click)=\"onMinus()\"\n        ></button>\n        <label tuiSliderThumbLabel>\n            <div\n                tuiHintMode=\"onDark\"\n                tuiHintDirection=\"top-right\"\n                [tuiManualHint]=\"hint\"\n                [tuiManualHintShow]=\"!!(hintShow$ | async)\"\n            ></div>\n\n            <ng-template #hint>\n                {{ (valueChange | async) || value | percent }}\n            </ng-template>\n\n            <input\n                tuiSlider\n                type=\"range\"\n                step=\"any\"\n                class=\"t-slider\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [ngModel]=\"value\"\n                (ngModelChange)=\"onModelChange($event)\"\n            />\n        </label>\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconPlus\"\n            class=\"t-sign_plus\"\n            [title]=\"texts.zoomIn\"\n            [disabled]=\"rightButtonDisabled\"\n            (click)=\"onPlus()\"\n        ></button>\n    </section>\n\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        icon=\"tuiIconCollapse\"\n        tuiHintId=\"Collapse\"\n        tuiHintDirection=\"top-right\"\n        tuiHintMode=\"onDark\"\n        class=\"t-reset-button\"\n        [tuiHint]=\"texts.reset\"\n        [class.t-invisible]=\"!collapseVisible\"\n        (click)=\"onReset()\"\n    ></button>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:flex}.t-zoom{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:12rem}.t-slider{width:7.5rem}.t-sign_minus{border-top-right-radius:0;border-bottom-right-radius:0}.t-sign_plus{border-top-left-radius:0;border-bottom-left-radius:0}.t-invisible{visibility:hidden}.t-reset-button{margin-left:.3125rem}"]
        }),
        __param(0, Inject(TUI_PREVIEW_ZOOM_TEXTS))
    ], TuiPreviewZoomComponent);
    return TuiPreviewZoomComponent;
}());

var TuiPreviewModule = /** @class */ (function () {
    function TuiPreviewModule() {
    }
    TuiPreviewModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                PolymorpheusModule,
                MutationObserverModule,
                TuiButtonModule,
                FormsModule,
                TuiSliderModule,
                TuiHintModule,
                TuiDragModule,
                TuiManualHintModule,
                TuiResizeModule,
                TuiSvgModule,
                TuiLoaderModule,
                TuiPanModule,
                TuiZoomModule,
                TuiPreviewActionModule,
            ],
            declarations: [
                TuiPreviewComponent,
                TuiPreviewTitleComponent,
                TuiPreviewPaginationComponent,
                TuiPreviewZoomComponent,
            ],
            exports: [
                TuiPreviewComponent,
                TuiPreviewActionDirective,
                TuiPreviewTitleComponent,
                TuiPreviewPaginationComponent,
                TuiPreviewZoomComponent,
            ],
            providers: [PREVIEW_DIALOG_PROVIDER],
        })
    ], TuiPreviewModule);
    return TuiPreviewModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { PREVIEW_ACTION_OPTIONS, TuiPreviewActionDirective, TuiPreviewActionModule, TuiPreviewComponent, TuiPreviewModule, TuiPreviewPaginationComponent, TuiPreviewTitleComponent, TuiPreviewZoomComponent };
//# sourceMappingURL=taiga-ui-addon-preview-components-preview.js.map
