import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, } from '@angular/core';
import { TUI_PREVIEW_TEXTS } from '@taiga-ui/addon-preview/tokens';
import { clamp, dragAndDropFrom, px, round, tuiDefaultProp, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiSlideInTop } from '@taiga-ui/core';
import { BehaviorSubject, combineLatest, merge, Observable } from 'rxjs';
import { map, mapTo, startWith } from 'rxjs/operators';
const INITIAL_SCALE_COEF = 0.8;
const EMPTY_COORDINATES = [0, 0];
const ROTATION_ANGLE = 90;
let TuiPreviewComponent = class TuiPreviewComponent {
    constructor(elementRef, destroy$, texts$) {
        this.elementRef = elementRef;
        this.destroy$ = destroy$;
        this.texts$ = texts$;
        this.zoomable = true;
        this.rotatable = false;
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(dragAndDropFrom(this.elementRef.nativeElement).pipe(map(({ stage }) => stage !== 1 /* Continues */)), typedFromEvent(this.elementRef.nativeElement, 'touchmove', { passive: true }).pipe(mapTo(false)), typedFromEvent(this.elementRef.nativeElement, 'wheel', { passive: true }).pipe(mapTo(false)));
        this.cursor$ = dragAndDropFrom(this.elementRef.nativeElement).pipe(map(({ stage }) => (stage === 1 /* Continues */ ? 'grabbing' : 'initial')), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(([x, y]) => `${px(x)}, ${px(y)}`)),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(([translate, zoom, rotation]) => `translate(${translate}) scale(${zoom}) rotate(${rotation}deg)`));
    }
    rotate() {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    }
    onPan(delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    }
    onMutation(contentWrapper) {
        const { clientWidth, clientHeight } = contentWrapper;
        this.refresh(clientWidth, clientHeight);
    }
    onZoom({ clientX, clientY, delta }) {
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    }
    onResize(contentResizeEntries) {
        if (contentResizeEntries.length === 0) {
            return;
        }
        const { width, height } = contentResizeEntries[0].contentRect;
        this.refresh(width, height);
    }
    reset() {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    }
    get offsets() {
        const offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
        const offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
        return { offsetX, offsetY };
    }
    calculateMinZoom(contentHeight, contentWidth, boxHeight, boxWidth) {
        const bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        const { clientHeight, clientWidth } = this.elementRef.nativeElement;
        return bigSize
            ? round(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    }
    refresh(width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.elementRef.nativeElement.clientHeight, this.elementRef.nativeElement.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    }
    processZoom(clientX, clientY, delta) {
        const oldScale = this.zoom$.value;
        const newScale = clamp(oldScale + delta, this.minZoom, 2);
        const center = this.getScaleCenter({ clientX, clientY }, this.coordinates$.value, this.zoom$.value);
        const moveX = center[0] * oldScale - center[0] * newScale;
        const moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    }
    getGuardedCoordinates(x, y) {
        const { offsetX, offsetY } = this.offsets;
        return [clamp(x, -offsetX, offsetX), clamp(y, -offsetY, offsetY)];
    }
    getScaleCenter({ clientX, clientY }, [x, y], scale) {
        return [
            (clientX - x - this.elementRef.nativeElement.offsetWidth / 2) / scale,
            (clientY - y - this.elementRef.nativeElement.offsetHeight / 2) / scale,
        ];
    }
};
TuiPreviewComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_TEXTS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPreviewComponent.prototype, "zoomable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPreviewComponent.prototype, "rotatable", void 0);
TuiPreviewComponent = __decorate([
    Component({
        selector: 'tui-preview',
        template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        subtree\n        childList\n        characterData\n        attributeFilter=\"src\"\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (tuiResize)=\"onResize($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n    >\n        <ng-content></ng-content>\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\"></ng-content>\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\"></ng-content>\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\"></ng-content>\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconRotate\"\n            tuiHintId=\"Rotate\"\n            tuiHintDirection=\"top-right\"\n            tuiHintMode=\"onDark\"\n            class=\"t-rotate-button\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (valueChange)=\"zoom$.next($event)\"\n            (reset)=\"reset()\"\n        ></tui-preview-zoom>\n    </footer>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [tuiSlideInTop],
        providers: [TuiDestroyService],
        styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiDestroyService)),
    __param(2, Inject(TUI_PREVIEW_TEXTS))
], TuiPreviewComponent);
export { TuiPreviewComponent };
//# sourceMappingURL=data:application/json;base64,