import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { TUI_PREVIEW_ZOOM_TEXTS } from '@taiga-ui/addon-preview/tokens';
import { clamp, tuiDefaultProp } from '@taiga-ui/cdk';
import { merge, Observable, of, timer } from 'rxjs';
import { mapTo, startWith, switchMap } from 'rxjs/operators';
const STEP = 0.5;
let TuiPreviewZoomComponent = class TuiPreviewZoomComponent {
    constructor(zoomTexts$) {
        this.zoomTexts$ = zoomTexts$;
        this.min = 0.5;
        this.max = 2;
        this.value = 1;
        this.valueChange = new EventEmitter();
        this.reset = new EventEmitter();
        this.hintShow$ = this.valueChange.pipe(switchMap(() => merge(of(true), timer(1000).pipe(mapTo(false)))), startWith(false));
    }
    get leftButtonDisabled() {
        return this.value === this.min;
    }
    get rightButtonDisabled() {
        return this.value === this.max;
    }
    get collapseVisible() {
        return this.value > this.min;
    }
    onModelChange(value) {
        const clamped = clamp(value, this.min, this.max);
        if (clamped === this.value) {
            return;
        }
        this.value = clamped;
        this.valueChange.emit(clamped);
    }
    onReset() {
        this.reset.emit();
    }
    onMinus() {
        this.onModelChange(this.value - STEP);
    }
    onPlus() {
        this.onModelChange(this.value < 1 ? 1 : this.value + STEP);
    }
};
TuiPreviewZoomComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_PREVIEW_ZOOM_TEXTS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPreviewZoomComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPreviewZoomComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPreviewZoomComponent.prototype, "value", void 0);
__decorate([
    Output()
], TuiPreviewZoomComponent.prototype, "valueChange", void 0);
__decorate([
    Output()
], TuiPreviewZoomComponent.prototype, "reset", void 0);
TuiPreviewZoomComponent = __decorate([
    Component({
        selector: 'tui-preview-zoom',
        template: "<ng-container *ngIf=\"zoomTexts$ | async as texts\">\n    <section class=\"t-zoom\">\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconMinus\"\n            class=\"t-sign_minus\"\n            [title]=\"texts.zoomOut\"\n            [disabled]=\"leftButtonDisabled\"\n            (click)=\"onMinus()\"\n        ></button>\n        <label tuiSliderThumbLabel>\n            <div\n                tuiHintMode=\"onDark\"\n                tuiHintDirection=\"top-right\"\n                [tuiManualHint]=\"hint\"\n                [tuiManualHintShow]=\"!!(hintShow$ | async)\"\n            ></div>\n\n            <ng-template #hint>\n                {{ (valueChange | async) || value | percent }}\n            </ng-template>\n\n            <input\n                tuiSlider\n                type=\"range\"\n                step=\"any\"\n                class=\"t-slider\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [ngModel]=\"value\"\n                (ngModelChange)=\"onModelChange($event)\"\n            />\n        </label>\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            icon=\"tuiIconPlus\"\n            class=\"t-sign_plus\"\n            [title]=\"texts.zoomIn\"\n            [disabled]=\"rightButtonDisabled\"\n            (click)=\"onPlus()\"\n        ></button>\n    </section>\n\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        icon=\"tuiIconCollapse\"\n        tuiHintId=\"Collapse\"\n        tuiHintDirection=\"top-right\"\n        tuiHintMode=\"onDark\"\n        class=\"t-reset-button\"\n        [tuiHint]=\"texts.reset\"\n        [class.t-invisible]=\"!collapseVisible\"\n        (click)=\"onReset()\"\n    ></button>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:flex}.t-zoom{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:12rem}.t-slider{width:7.5rem}.t-sign_minus{border-top-right-radius:0;border-bottom-right-radius:0}.t-sign_plus{border-top-left-radius:0;border-bottom-left-radius:0}.t-invisible{visibility:hidden}.t-reset-button{margin-left:.3125rem}"]
    }),
    __param(0, Inject(TUI_PREVIEW_ZOOM_TEXTS))
], TuiPreviewZoomComponent);
export { TuiPreviewZoomComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy16b29tLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9hZGRvbi1wcmV2aWV3L2NvbXBvbmVudHMvcHJldmlldy8iLCJzb3VyY2VzIjpbInpvb20vcHJldmlldy16b29tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxLQUFLLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBUWpCLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBd0JoQyxZQUVhLFVBQW9EO1FBQXBELGVBQVUsR0FBVixVQUFVLENBQTBDO1FBdkJqRSxRQUFHLEdBQUcsR0FBRyxDQUFDO1FBSVYsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUlSLFVBQUssR0FBRyxDQUFDLENBQUM7UUFHRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFakMsY0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUN0QyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUNuQixDQUFDO0lBS0MsQ0FBQztJQUVKLElBQUksa0JBQWtCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakQsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUNKLENBQUE7O1lBckM0QixVQUFVLHVCQUQ5QixNQUFNLFNBQUMsc0JBQXNCOztBQXRCbEM7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7b0RBQ1A7QUFJVjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTtvREFDVDtBQUlSO0lBRkMsS0FBSyxFQUFFO0lBQ1AsY0FBYyxFQUFFO3NEQUNQO0FBR1Y7SUFEQyxNQUFNLEVBQUU7NERBQ3lDO0FBR2xEO0lBREMsTUFBTSxFQUFFO3NEQUNpQztBQWpCakMsdUJBQXVCO0lBTm5DLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsMndEQUEyQztRQUUzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDbEQsQ0FBQztJQTBCTyxXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0dBekIxQix1QkFBdUIsQ0ErRG5DO1NBL0RZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX1BSRVZJRVdfWk9PTV9URVhUU30gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLXByZXZpZXcvdG9rZW5zJztcbmltcG9ydCB7Y2xhbXAsIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TGFuZ3VhZ2VQcmV2aWV3fSBmcm9tICdAdGFpZ2EtdWkvaTE4bic7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlLCBvZiwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXBUbywgc3RhcnRXaXRoLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgU1RFUCA9IDAuNTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJldmlldy16b29tJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJldmlldy16b29tLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ByZXZpZXctem9vbS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByZXZpZXdab29tQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWluID0gMC41O1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1heCA9IDI7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgdmFsdWUgPSAxO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHJlc2V0ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgcmVhZG9ubHkgaGludFNob3ckID0gdGhpcy52YWx1ZUNoYW5nZS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gbWVyZ2Uob2YodHJ1ZSksIHRpbWVyKDEwMDApLnBpcGUobWFwVG8oZmFsc2UpKSkpLFxuICAgICAgICBzdGFydFdpdGgoZmFsc2UpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfUFJFVklFV19aT09NX1RFWFRTKVxuICAgICAgICByZWFkb25seSB6b29tVGV4dHMkOiBPYnNlcnZhYmxlPExhbmd1YWdlUHJldmlld1snem9vbVRleHRzJ10+LFxuICAgICkge31cblxuICAgIGdldCBsZWZ0QnV0dG9uRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB0aGlzLm1pbjtcbiAgICB9XG5cbiAgICBnZXQgcmlnaHRCdXR0b25EaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHRoaXMubWF4O1xuICAgIH1cblxuICAgIGdldCBjb2xsYXBzZVZpc2libGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID4gdGhpcy5taW47XG4gICAgfVxuXG4gICAgb25Nb2RlbENoYW5nZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNsYW1wZWQgPSBjbGFtcCh2YWx1ZSwgdGhpcy5taW4sIHRoaXMubWF4KTtcblxuICAgICAgICBpZiAoY2xhbXBlZCA9PT0gdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IGNsYW1wZWQ7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdChjbGFtcGVkKTtcbiAgICB9XG5cbiAgICBvblJlc2V0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0LmVtaXQoKTtcbiAgICB9XG5cbiAgICBvbk1pbnVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UodGhpcy52YWx1ZSAtIFNURVApO1xuICAgIH1cblxuICAgIG9uUGx1cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMudmFsdWUgPCAxID8gMSA6IHRoaXMudmFsdWUgKyBTVEVQKTtcbiAgICB9XG59XG4iXX0=