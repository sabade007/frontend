import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { AbstractTuiDialogService, TUI_DIALOGS } from '@taiga-ui/cdk';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TuiPreviewDialogComponent } from './preview-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/services";
/**
 * @deprecated: use {@link TuiPreviewDialogService}
 * TODO: remove in v3.0
 */
let PreviewDialogService = 
// eslint-disable-next-line @typescript-eslint/naming-convention
class PreviewDialogService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.defaultOptions = {};
        this.component = new PolymorpheusComponent(TuiPreviewDialogComponent);
    }
};
PreviewDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PreviewDialogService_Factory() { return new PreviewDialogService(i0.ɵɵinject(i1.TuiIdService)); }, token: PreviewDialogService, providedIn: "root" });
PreviewDialogService = __decorate([
    Injectable({ providedIn: `root` })
    // eslint-disable-next-line @typescript-eslint/naming-convention
], PreviewDialogService);
export { PreviewDialogService };
let TuiPreviewDialogService = class TuiPreviewDialogService extends PreviewDialogService {
};
TuiPreviewDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiPreviewDialogService_Factory() { return new TuiPreviewDialogService(i0.ɵɵinject(i1.TuiIdService)); }, token: TuiPreviewDialogService, providedIn: "root" });
TuiPreviewDialogService = __decorate([
    Injectable({ providedIn: `root` })
], TuiPreviewDialogService);
export { TuiPreviewDialogService };
export const PREVIEW_DIALOG_PROVIDER = [
    {
        provide: TUI_DIALOGS,
        useExisting: TuiPreviewDialogService,
        multi: true,
    },
    {
        provide: TUI_DIALOGS,
        useExisting: PreviewDialogService,
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1kaWFsb2cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9hZGRvbi1wcmV2aWV3L2NvbXBvbmVudHMvcHJldmlldy1kaWFsb2cvIiwic291cmNlcyI6WyJwcmV2aWV3LWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyx3QkFBd0IsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFL0QsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sNEJBQTRCLENBQUM7OztBQUVyRTs7O0dBR0c7QUFHSCxJQUFhLG9CQUFvQjtBQURqQyxnRUFBZ0U7QUFDaEUsTUFBYSxvQkFBcUIsU0FBUSx3QkFBaUM7SUFBM0U7O1FBQ2EsbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFDcEIsY0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM3RTtDQUFBLENBQUE7O0FBSFksb0JBQW9CO0lBRmhDLFVBQVUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsQ0FBQztJQUNqQyxnRUFBZ0U7R0FDbkQsb0JBQW9CLENBR2hDO1NBSFksb0JBQW9CO0FBTWpDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXdCLFNBQVEsb0JBQW9CO0NBQUcsQ0FBQTs7QUFBdkQsdUJBQXVCO0lBRG5DLFVBQVUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsQ0FBQztHQUNwQix1QkFBdUIsQ0FBZ0M7U0FBdkQsdUJBQXVCO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFlO0lBQy9DO1FBQ0ksT0FBTyxFQUFFLFdBQVc7UUFDcEIsV0FBVyxFQUFFLHVCQUF1QjtRQUNwQyxLQUFLLEVBQUUsSUFBSTtLQUNkO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsV0FBVztRQUNwQixXQUFXLEVBQUUsb0JBQW9CO1FBQ2pDLEtBQUssRUFBRSxJQUFJO0tBQ2Q7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpRGlhbG9nU2VydmljZSwgVFVJX0RJQUxPR1N9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VHVpUHJldmlld0RpYWxvZ0NvbXBvbmVudH0gZnJvbSAnLi9wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIFR1aVByZXZpZXdEaWFsb2dTZXJ2aWNlfVxuICogVE9ETzogcmVtb3ZlIGluIHYzLjBcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46IGByb290YH0pXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY2xhc3MgUHJldmlld0RpYWxvZ1NlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdFR1aURpYWxvZ1NlcnZpY2U8dW5rbm93bj4ge1xuICAgIHJlYWRvbmx5IGRlZmF1bHRPcHRpb25zID0ge307XG4gICAgcmVhZG9ubHkgY29tcG9uZW50ID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChUdWlQcmV2aWV3RGlhbG9nQ29tcG9uZW50KTtcbn1cblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46IGByb290YH0pXG5leHBvcnQgY2xhc3MgVHVpUHJldmlld0RpYWxvZ1NlcnZpY2UgZXh0ZW5kcyBQcmV2aWV3RGlhbG9nU2VydmljZSB7fVxuXG5leHBvcnQgY29uc3QgUFJFVklFV19ESUFMT0dfUFJPVklERVI6IFByb3ZpZGVyW10gPSBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfRElBTE9HUyxcbiAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVByZXZpZXdEaWFsb2dTZXJ2aWNlLFxuICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0RJQUxPR1MsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBQcmV2aWV3RGlhbG9nU2VydmljZSxcbiAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbl07XG4iXX0=