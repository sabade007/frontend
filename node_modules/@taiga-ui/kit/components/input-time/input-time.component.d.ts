import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiBooleanHandler, TuiFocusableElementAccessor, TuiTime, TuiTimeMode } from '@taiga-ui/cdk';
import { TextMaskConfig } from 'angular2-text-mask';
import { Observable } from 'rxjs';
import { TuiInputTimeOptions } from './input-time-options';
export declare class TuiInputTimeComponent extends AbstractTuiNullableControl<TuiTime> implements TuiFocusableElementAccessor {
    private readonly timeTexts$;
    private readonly options;
    private readonly textfield?;
    disabledItemHandler: TuiBooleanHandler<TuiTime>;
    items: readonly TuiTime[];
    itemSize: TuiInputTimeOptions['itemSize'];
    strict: boolean;
    mode: TuiInputTimeOptions['mode'];
    postfix: TuiInputTimeOptions['postfix'];
    open: boolean;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, timeTexts$: Observable<Record<TuiTimeMode, string>>, options: TuiInputTimeOptions);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get filtered(): readonly TuiTime[];
    get textMaskOptions(): TextMaskConfig;
    get computedValue(): string;
    get computedSearch(): string;
    get innerPseudoFocused(): boolean | null;
    get icon(): TuiInputTimeOptions['icon'];
    get nativeValue(): string;
    set nativeValue(value: string);
    getFiller$(mode: TuiTimeMode): Observable<string>;
    onClick(): void;
    onValueChange(value: string): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onArrowUp(event: Event): void;
    onArrowDown(event: Event): void;
    onMenuClick(item: TuiTime): void;
    onOpen(open: boolean): void;
    writeValue(value: TuiTime | null): void;
    private calculateMask;
    private filter;
    private findNearestTimeFromItems;
    private getMatch;
    private close;
    private processArrow;
    private calculateShift;
    private shiftTime;
    private focusInput;
}
