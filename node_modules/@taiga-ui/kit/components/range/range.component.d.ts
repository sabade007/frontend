import { ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiSizeS } from '@taiga-ui/core';
import { AbstractTuiSlider } from '@taiga-ui/kit/abstract';
import { TuiKeySteps } from '@taiga-ui/kit/types';
import { Observable } from 'rxjs';
/**
 * Turn on new mode for `Range` and `InputRange`.
 * The new version of component will behave almost the same as the same component from the next major release.
 * @deprecated TODO remove me in v3.0 and make `Range` and `InputRange` always "new".
 */
export declare class TuiNewRangeDirective {
}
export declare class TuiRangeComponent extends AbstractTuiSlider<[number, number]> implements TuiFocusableElementAccessor {
    private readonly elementRef;
    readonly isNew: TuiNewRangeDirective | null;
    min: number;
    /**
     * TODO: make `100` as default value (to be like native sliders) in v3.0
     */
    max: number;
    /**
     * TODO: think about replacing this props by `step` (to be like native slider).
     * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
     */
    steps: number;
    /**
     * TODO: think about replacing this props by `step` (to be like native slider).
     * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
     * */
    quantum: number;
    size: TuiSizeS;
    segments: number;
    keySteps: TuiKeySteps | null;
    slidersRefs: QueryList<ElementRef<HTMLInputElement>>;
    lastActiveThumb: 'left' | 'right';
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, documentRef: Document, elementRef: ElementRef<HTMLElement>, fromToTexts$: Observable<[string, string]>, isNew: TuiNewRangeDirective | null);
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    get fractionStep(): number;
    get computedKeySteps(): TuiKeySteps;
    get left(): number;
    get right(): number;
    onFocused(focused: boolean): void;
    changeByStep(coefficient: number, target: HTMLElement): void;
    processValue(value: number, right: boolean): void;
    fractionGuard(fraction: number): number;
    getValueFromFraction(fraction: number): number;
    getPercentageFromValue(value: number): number;
    protected valueGuard(value: number): number;
    protected getFallbackValue(): [number, number];
    private computePureKeySteps;
    private updateStart;
    private updateEnd;
}
