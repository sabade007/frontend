import { ChangeDetectorRef, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiFocusableElementAccessor, TuiInputModeT, TuiMapper } from '@taiga-ui/cdk';
import { TuiDecimalT, TuiNumberFormatSettings } from '@taiga-ui/core';
import { TextMaskConfig } from 'angular2-text-mask';
export declare class TuiInputNumberComponent extends AbstractTuiNullableControl<number> implements TuiFocusableElementAccessor {
    private readonly numberFormat;
    private readonly isIOS;
    private readonly primitiveTextfield?;
    private unfinishedValue;
    min: number;
    max: number;
    decimal: TuiDecimalT;
    precision: number;
    prefix: string;
    postfix: string;
    readonly polymorpheusValueContent: QueryList<unknown>;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, numberFormat: TuiNumberFormatSettings, isIOS: boolean);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get isNegativeAllowed(): boolean;
    get inputMode(): TuiInputModeT;
    get calculatedMaxLength(): number;
    get formattedValue(): string;
    get computedValue(): string;
    onZero(event: KeyboardEvent): void;
    mask: TuiMapper<boolean, TextMaskConfig>;
    onValueChange(value: string): void;
    onKeyDown(event: KeyboardEvent): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onPressed(pressed: boolean): void;
    getFormattedValue(value: number): string;
    private get isNativeValueNotFinished();
    get nativeValue(): string;
    set nativeValue(value: string);
    private get nativeNumberValue();
    private clear;
    private absoluteCapInputValue;
    private setCaretAfterComma;
}
