import { ChangeDetectorRef, ElementRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiContextWithImplicit, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiDecimalT, TuiSizeL, TuiTextfieldController } from '@taiga-ui/core';
import { AbstractTuiInputSlider } from '@taiga-ui/kit/abstract';
import { TuiNewRangeDirective } from '@taiga-ui/kit/components/range';
import { TuiKeySteps } from '@taiga-ui/kit/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
export declare class TuiInputRangeComponent extends AbstractTuiInputSlider<[number, number]> implements TuiFocusableElementAccessor {
    private readonly isMobile;
    readonly appearance: string;
    private readonly elementRef;
    readonly controller: TuiTextfieldController;
    readonly isNew: TuiNewRangeDirective | null;
    private readonly inputNumberRefs;
    private readonly rangeRef;
    min: number;
    max: number;
    quantum: number;
    steps: number;
    segments: number;
    keySteps: TuiKeySteps | null;
    leftValueContent: PolymorpheusContent<TuiContextWithImplicit<number>>;
    rightValueContent: PolymorpheusContent<TuiContextWithImplicit<number>>;
    lastActiveSide: 'left' | 'right';
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, isMobile: boolean, appearance: string, elementRef: ElementRef, controller: TuiTextfieldController, isNew: TuiNewRangeDirective | null);
    get leftFocusableElement(): HTMLInputElement | null;
    get rightFocusableElement(): HTMLInputElement | null;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    get showLeftValueContent(): boolean;
    get showRightValueContent(): boolean;
    get precision(): number;
    get decimal(): TuiDecimalT;
    get computedSteps(): number;
    get computedSize(): TuiSizeL;
    get legacyLabelOutside(): boolean;
    onActiveZone(active: boolean): void;
    onTextInputFocused(focused: boolean, right: boolean): void;
    changeByStep(event: Event | KeyboardEvent, [leftCoefficient, rightCoefficient]: [number, number]): void;
    onInputLeft(value: number | null): void;
    onInputRight(value: number | null): void;
    onRangeValue(value: [number, number]): void;
    focusToTextInput(): void;
    onActiveThumbChange(activeThumb: 'left' | 'right'): void;
    protected getFallbackValue(): [number, number];
    private safelyUpdateValue;
    private valueGuard;
    private calibrate;
    private updateTextInputValue;
}
export declare function tuiTextfieldAppearanceDirectiveFactory({ nativeElement, }: ElementRef): string;
export declare class TuiTextfieldAppearanceDirective {
}
