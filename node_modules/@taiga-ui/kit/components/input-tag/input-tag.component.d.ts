import { ChangeDetectorRef, ElementRef, EventEmitter, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, TuiActiveZoneDirective, TuiBooleanHandler, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiScrollService } from '@taiga-ui/cdk';
import { TuiBrightness, TuiDataListHost, TuiHintControllerDirective, TuiHorizontalDirection, TuiHostedDropdownComponent, TuiModeDirective, TuiScrollbarComponent, TuiSizeL, TuiSizeS, TuiTextfieldController } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TuiStatusT } from '@taiga-ui/kit/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiInputTagOptions } from './input-tag-options';
export declare class TuiInputTagComponent extends AbstractTuiMultipleControl<string> implements TuiFocusableElementAccessor, TuiDataListHost<string> {
    private readonly tuiScrollService;
    private readonly elementRef;
    readonly appearance: string;
    private readonly modeDirective;
    private readonly mode$;
    private readonly tagStatus;
    readonly hintController: TuiHintControllerDirective;
    readonly controller: TuiTextfieldController;
    private readonly options;
    private readonly parentHostedDropdown?;
    private readonly hostedDropdown?;
    private readonly focusableElement?;
    private readonly tagsContainer?;
    private readonly tags;
    private readonly cleanerSvg?;
    private readonly scrollBar?;
    private readonly scrollToStart$;
    private readonly scrollToEnd$;
    allowSpaces: boolean;
    separator: RegExp | string;
    icon: string;
    iconAlign: TuiHorizontalDirection;
    search: string;
    editable: boolean;
    tagValidator: TuiBooleanHandler<string> | TuiBooleanHandler<TuiStringifiableItem<unknown> | string>;
    expandable: boolean;
    inputHidden: boolean;
    uniqueTags: boolean;
    disabledItemHandler: TuiBooleanHandler<TuiStringifiableItem<any> | string>;
    set pseudoFocusedSetter(value: boolean | null);
    readonly searchChange: EventEmitter<string>;
    readonly datalist?: TemplateRef<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    readonly errorIconTemplate?: TemplateRef<Record<string, unknown>>;
    set scrollerSetter(scroller: TuiScrollbarComponent | null);
    status$: Observable<TuiStatusT>;
    open: boolean;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, tuiScrollService: TuiScrollService, elementRef: ElementRef<HTMLElement>, appearance: string, modeDirective: TuiModeDirective | null, mode$: Observable<TuiBrightness | null>, tagStatus: TuiStatusT, hintController: TuiHintControllerDirective, controller: TuiTextfieldController, options: TuiInputTagOptions, parentHostedDropdown?: TuiHostedDropdownComponent | undefined);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get size(): TuiSizeL | TuiSizeS;
    get labelOutside(): boolean;
    get hasCleaner(): boolean;
    get hasNativeValue(): boolean;
    get hasValue(): boolean;
    get hasPlaceholder(): boolean;
    get placeholderRaised(): boolean;
    get hasExampleText(): boolean;
    get hasTooltip(): boolean;
    get iconAlignLeft(): boolean;
    get iconAlignRight(): boolean;
    get hasRightIcons(): boolean;
    get status(): TuiStatusT;
    get canOpen(): boolean;
    getLeftContent(tag: string): PolymorpheusContent;
    onCleanerClick(): void;
    onActiveZone(active: boolean): void;
    onMouseDown(event: MouseEvent): void;
    onFieldKeyDownBackspace(event: Event): void;
    onFieldKeyDownArrowLeft(event: Event): void;
    onFieldKeyDownEnter(): void;
    onTagKeyDownArrowLeft(currentIndex: number): void;
    onTagKeyDownArrowRight(currentIndex: number): void;
    onTagEdited(value: string, index: number): void;
    handleOption(item: string): void;
    onInput(value: string): void;
    onHoveredChange(hovered: boolean): void;
    setDisabledState(): void;
    trackByFn(_: number, tag: string): string;
    protected updateValue(value: string[]): void;
    private onScrollKeyDown;
    private initScrollerSubscription;
    private updateSearch;
    private shouldScroll;
    private addTag;
    private deleteLastEnabledItem;
    private focusInput;
}
