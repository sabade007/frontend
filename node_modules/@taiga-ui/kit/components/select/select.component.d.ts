import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiActiveZoneDirective, TuiContextWithImplicit, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiSizeL, TuiSizeM, TuiSizeS, TuiTextfieldCleanerDirective, TuiValueContentContext } from '@taiga-ui/core';
import { TuiArrowMode } from '@taiga-ui/kit/components/arrow';
import { TuiItemsHandlers } from '@taiga-ui/kit/tokens';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { TuiSelectOptions } from './select-options';
export declare class TuiSelectComponent<T> extends AbstractTuiNullableControl<T> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    private readonly textfieldCleaner;
    private readonly arrowMode;
    private readonly itemsHandlers;
    private readonly options;
    private readonly textfield?;
    private readonly hostedDropdown?;
    stringify: TuiItemsHandlers<T>['stringify'];
    identityMatcher: TuiItemsHandlers<T>['identityMatcher'];
    valueContent: TuiSelectOptions<T>['valueContent'];
    readonly datalist: PolymorpheusContent<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, textfieldCleaner: TuiTextfieldCleanerDirective, arrowMode: TuiArrowMode, itemsHandlers: TuiItemsHandlers<T>, options: TuiSelectOptions<T>);
    get arrow(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeM | TuiSizeS>>;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedValue(): string;
    get computedContent(): PolymorpheusContent<TuiValueContentContext<T>>;
    onValueChange(value: string): void;
    onActiveZone(active: boolean): void;
    onHovered(hovered: boolean): void;
    onKeyDownDelete(): void;
    handleOption(option: T): void;
    private focusInput;
}
