import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiBrightness, TuiSizeL } from '@taiga-ui/core';
import { TuiFileLike } from '@taiga-ui/kit/interfaces';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
export declare class TuiInputFileComponent extends AbstractTuiNullableControl<TuiFileLike | readonly TuiFileLike[]> implements TuiFocusableElementAccessor {
    readonly isMobile: boolean;
    readonly inputFileTexts$: Observable<Record<'defaultLabelMultiple' | 'defaultLabelSingle' | 'defaultLinkMultiple' | 'defaultLinkSingle' | 'drop' | 'dropMultiple' | 'formatRejectionReason' | 'maxSizeRejectionReason', string>>;
    readonly mode$: Observable<TuiBrightness | null>;
    readonly units$: Observable<[string, string, string]>;
    private dataTransfer;
    link: PolymorpheusContent;
    label: PolymorpheusContent;
    accept: string;
    multiple: boolean;
    size: TuiSizeL;
    showSize: boolean;
    maxFileSize: number;
    loadingFiles: readonly TuiFileLike[];
    rejectedFiles: readonly TuiFileLike[];
    rejectedFilesChange: EventEmitter<readonly TuiFileLike[]>;
    readonly input?: ElementRef<HTMLInputElement>;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, isMobile: boolean, inputFileTexts$: Observable<Record<'defaultLabelMultiple' | 'defaultLabelSingle' | 'defaultLinkMultiple' | 'defaultLinkSingle' | 'drop' | 'dropMultiple' | 'formatRejectionReason' | 'maxSizeRejectionReason', string>>, mode$: Observable<TuiBrightness | null>, units$: Observable<[string, string, string]>);
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    get computedLink$(): Observable<PolymorpheusContent>;
    get computedLabel$(): Observable<PolymorpheusContent>;
    get fileDragged(): boolean;
    get acceptArray(): readonly string[];
    get arrayValue(): readonly TuiFileLike[];
    get readyFiles(): readonly TuiFileLike[];
    get computedLoading(): readonly TuiFileLike[];
    get hasFiles(): boolean;
    onHovered(hovered: boolean): void;
    onFocused(focused: boolean): void;
    onPressed(pressed: boolean): void;
    onFilesSelected(input: HTMLInputElement, texts: Record<'formatRejectionReason' | 'maxSizeRejectionReason', string>, units: [string, string, string]): void;
    onDropped(event: DataTransfer, texts: Record<'formatRejectionReason' | 'maxSizeRejectionReason', string>, units: [string, string, string]): void;
    onDragOver(dataTransfer: DataTransfer | null): void;
    removeFile(removedFile: TuiFileLike): void;
    removeRejectedFile(removedFile: TuiFileLike): void;
    getAppearance(mode: unknown | null): string;
    private computeLink$;
    private computeLabel$;
    private getValueArray;
    private getReadyFiles;
    private getLoadingFiles;
    private getAcceptArray;
    private processSelectedFiles;
    private isFormatAcceptable;
    private updateRejectedFiles;
}
