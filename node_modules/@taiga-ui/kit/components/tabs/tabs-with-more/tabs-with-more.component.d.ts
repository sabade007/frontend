import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { TuiActiveZoneDirective, TuiContextWithImplicit } from '@taiga-ui/cdk';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiTabsOptions } from '../tabs-options';
export declare class TuiTabsWithMoreComponent implements AfterViewInit {
    private readonly options;
    private readonly margin;
    private readonly refresh$;
    private readonly elementRef;
    private readonly changeDetectorRef;
    readonly moreWord$: Observable<string>;
    private readonly moreButton?;
    private maxIndex;
    moreContent: PolymorpheusContent;
    dropdownContent: PolymorpheusContent<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    underline: boolean;
    activeItemIndex: number;
    itemsLimit: number;
    readonly activeItemIndexChange: EventEmitter<number>;
    readonly items: QueryList<TemplateRef<Record<string, unknown>>>;
    open: boolean;
    constructor(options: TuiTabsOptions, margin: number, refresh$: Observable<unknown>, elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef, moreWord$: Observable<string>);
    get tabs(): readonly HTMLElement[];
    get activeElement(): HTMLElement | null;
    get isMoreVisible(): boolean;
    get isMoreFocusable(): boolean;
    get isMoreActive(): boolean;
    get isMoreAlone(): boolean;
    get lastVisibleIndex(): number;
    ngAfterViewInit(): void;
    onActiveItemIndexChange(activeItemIndex: number): void;
    onClick(index: number): void;
    onArrowRight(event: Event): void;
    onArrowLeft(): void;
    onWrapperArrow(event: Event, wrapper: HTMLElement, prev: boolean): void;
    isOverflown(index: number): boolean;
    shouldShow(index: number): boolean;
    private focusMore;
    private getMaxIndex;
    private updateActiveItemIndex;
}
