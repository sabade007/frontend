import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiInputTypeT, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiBrightness, TuiHintControllerDirective, TuiHintModeT, TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiInputPasswordOptions } from './input-password-options';
export declare class TuiInputPasswordComponent extends AbstractTuiControl<string> implements TuiFocusableElementAccessor {
    private readonly textfieldSize;
    readonly passwordTexts$: Observable<[string, string]>;
    readonly options: TuiInputPasswordOptions;
    readonly hintController: TuiHintControllerDirective;
    private readonly mode$;
    private readonly textfield?;
    isPasswordHidden: boolean;
    readonly computedMode$: Observable<TuiHintModeT | null>;
    readonly type: TuiContextWithImplicit<TuiSizeL | TuiSizeS>;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, textfieldSize: TuiTextfieldSizeDirective, passwordTexts$: Observable<[string, string]>, options: TuiInputPasswordOptions, hintController: TuiHintControllerDirective, mode$: Observable<TuiBrightness | null>);
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    get icon(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get context(): TuiContextWithImplicit<TuiSizeL | TuiSizeS>;
    get inputType(): TuiInputTypeT;
    onValueChange(textValue: string): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onPressed(pressed: boolean): void;
    togglePasswordVisibility(): void;
    protected getFallbackValue(): string;
    private getContext;
}
