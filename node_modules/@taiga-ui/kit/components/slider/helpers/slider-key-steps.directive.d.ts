import { ChangeDetectorRef, ElementRef, PipeTransform } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiKeySteps } from '@taiga-ui/kit/types';
import { TuiSliderComponent } from '../slider.component';
export declare class TuiSliderKeyStepsDirective extends AbstractTuiControl<number> implements TuiFocusableElementAccessor {
    private readonly elementRef;
    private readonly slider;
    keySteps: TuiKeySteps;
    keyStepsInput: import("rxjs").Observable<number>;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get min(): number;
    get max(): number;
    get controlValue(): number;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLInputElement>, slider: TuiSliderComponent);
    /**
     * TODO: 3.0
     * ___
     * Also add @HostListener(`input`): to be similar to
     * {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/range_value_accessor.ts#L47-L48 RangeValueAccessor}
     * ___
     * Remove {@link keyStepsInput}
     */
    updateControlValue(): void;
    writeValue(controlValue: number | null): void;
    protected getFallbackValue(): number;
    private transformToNativeValue;
}
/**
 * @deprecated DONT USE IT! It is just temporary solution for internal purposes only. We will delete it in next major release.
 * TODO delete it in v3.0
 *
 */
export declare class TuiSliderTickLabelPipe implements PipeTransform {
    transform(tickIndex: number, totalSegments: number, keySteps: TuiKeySteps): number;
}
