import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Inject, Injector, Input, Optional, Self, } from '@angular/core';
import { NgControl, NgModel } from '@angular/forms';
import { USER_AGENT } from '@ng-web-apis/common';
import { CHROMIUM_EDGE_START_VERSION, isEdgeOlderThan, tuiDefaultProp, tuiPure, watch, } from '@taiga-ui/cdk';
import { take } from 'rxjs/operators';
import { TuiSliderKeyStepsDirective } from './helpers/slider-key-steps.directive';
import { TUI_SLIDER_OPTIONS } from './slider-options';
let TuiSliderComponent = class TuiSliderComponent {
    constructor(control, changeDetectorRef, options, elementRef, userAgent, injector) {
        var _a;
        this.control = control;
        this.options = options;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.injector = injector;
        this.size = this.options.size;
        this.segments = 1;
        if (control instanceof NgModel) {
            /**
             * The ValueAccessor.writeValue method is called twice on any value accessor during component initialization,
             * when a control is bound using [(ngModel)], first time with a phantom null value.
             * With `changeDetection: ChangeDetectionStrategy.OnPush` the second call of writeValue with real value don't re-render the view.
             * ___
             * See this {@link https://github.com/angular/angular/issues/14988 issue}
             */
            (_a = control.valueChanges) === null || _a === void 0 ? void 0 : _a.pipe(watch(changeDetectorRef), take(1)).subscribe();
        }
    }
    get min() {
        return Number(this.elementRef.nativeElement.min);
    }
    get max() {
        return Number(this.elementRef.nativeElement.max || 100);
    }
    get step() {
        return Number(this.elementRef.nativeElement.step) || 1;
    }
    get value() {
        const { elementRef, control, hasKeySteps } = this;
        if (!hasKeySteps && control instanceof NgModel) {
            /**
             * If developer uses `[(ngModel)]` and programmatically change value,
             * the `elementRef.nativeElement.value` is equal to the previous value at this moment.
             */
            return control.viewModel;
        }
        return Number(elementRef.nativeElement.value) || 0;
    }
    set value(newValue) {
        this.elementRef.nativeElement.value = `${newValue}`;
    }
    get valuePercentage() {
        return (100 * (this.value - this.min)) / (this.max - this.min) || 0;
    }
    get segmentWidth() {
        return 100 / Math.max(1, this.segments);
    }
    get isOldEdge() {
        return isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);
    }
    get hasKeySteps() {
        return Boolean(this.injector.get(TuiSliderKeyStepsDirective, null));
    }
};
TuiSliderComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_SLIDER_OPTIONS,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
    { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiSliderComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiSliderComponent.prototype, "segments", void 0);
__decorate([
    HostBinding('style.--tui-slider-fill-percentage.%')
], TuiSliderComponent.prototype, "valuePercentage", null);
__decorate([
    HostBinding('style.--tui-slider-segment-width.%')
], TuiSliderComponent.prototype, "segmentWidth", null);
__decorate([
    HostBinding('class._old-edge')
], TuiSliderComponent.prototype, "isOldEdge", null);
__decorate([
    tuiPure
], TuiSliderComponent.prototype, "hasKeySteps", null);
TuiSliderComponent = __decorate([
    Component({
        /**
         * We have to call our component as `<input tuiSlider type="range" ... />`
         * because otherwise built-in angular
         * {@link https://github.com/angular/angular/blob/master/packages/forms/src/directives/range_value_accessor.ts#L45 RangeValueAccessor}
         * cannot be matched by its CSS selector.
         */
        selector: 'input[type=range][tuiSlider]',
        template: '',
        host: {
            /**
             * For change detection.
             * Webkit does not have built-in method for customization of filling progress (as Firefox).
             * We draw filling of progress by `background: linear-gradient(...)` of the track.
             * This function triggers change detection (for {@link valuePercentage} function) when we drag thumb of the input.
             */
            '(input)': '0',
            '[style.--tui-slider-track-color]': 'options.trackColor',
        },
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;width:100%;color:var(--tui-primary);cursor:pointer}:host:active{cursor:ew-resize}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:auto}:host:not(._old-edge){-webkit-appearance:none;-moz-appearance:none;appearance:none;height:.125rem;padding:.4375rem 0;background-color:transparent;background-clip:content-box;outline:0;border-radius:var(--tui-radius-m)}:host:not(._old-edge)::-webkit-slider-container{border-radius:inherit}:host:not(._old-edge)[data-size='m']::-webkit-slider-runnable-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0 .625rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-07) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor var(--tui-slider-fill-percentage),transparent var(--tui-slider-fill-percentage));background-position-x:0,.375rem,0;background-size:calc(100% - 1rem),calc(100% - 1rem),auto}:host:not(._old-edge)[data-size='s']::-webkit-slider-runnable-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0 .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-07) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor var(--tui-slider-fill-percentage),transparent var(--tui-slider-fill-percentage));background-position-x:0,.125rem,0;background-size:calc(100% - .5rem),calc(100% - .5rem),auto}:host:not(._old-edge)[data-size='m']::-moz-range-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0 .625rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-07) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.375rem;background-size:calc(100% - 1rem)}:host:not(._old-edge)[data-size='s']::-moz-range-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0 .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-07) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.125rem;background-size:calc(100% - .5rem)}:host:not(._old-edge)[data-size='m']::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;background-color:currentColor;border:none;border-radius:50%;height:1rem;width:1rem;margin-top:-.4375rem}:not(:disabled):host:not(._old-edge)[data-size='m']::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled):host:not(._old-edge)[data-size='m']::-webkit-slider-thumb:hover{background:var(--tui-primary-hover)}:not(:disabled):host:not(._old-edge)[data-size='m']::-webkit-slider-thumb:active{background:var(--tui-primary-active)}:focus-visible:host:not(._old-edge)[data-size='m']::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}:host:not(._old-edge)[data-size='s']::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;background-color:currentColor;border:none;border-radius:50%;height:.5rem;width:.5rem;margin-top:-.1875rem}:not(:disabled):host:not(._old-edge)[data-size='s']::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled):host:not(._old-edge)[data-size='s']::-webkit-slider-thumb:hover{background:var(--tui-primary-hover)}:not(:disabled):host:not(._old-edge)[data-size='s']::-webkit-slider-thumb:active{background:var(--tui-primary-active)}:focus-visible:host:not(._old-edge)[data-size='s']::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}:host:not(._old-edge)[data-size='m']::-moz-range-thumb{-moz-appearance:none;appearance:none;background-color:currentColor;border:none;border-radius:50%;height:1rem;width:1rem}:not(:disabled):host:not(._old-edge)[data-size='m']::-moz-range-thumb{cursor:ew-resize}:not(:disabled):host:not(._old-edge)[data-size='m']::-moz-range-thumb:hover{background:var(--tui-primary-hover)}:not(:disabled):host:not(._old-edge)[data-size='m']::-moz-range-thumb:active{background:var(--tui-primary-active)}:focus-visible:host:not(._old-edge)[data-size='m']::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}:host:not(._old-edge)[data-size='s']::-moz-range-thumb{-moz-appearance:none;appearance:none;background-color:currentColor;border:none;border-radius:50%;height:.5rem;width:.5rem}:not(:disabled):host:not(._old-edge)[data-size='s']::-moz-range-thumb{cursor:ew-resize}:not(:disabled):host:not(._old-edge)[data-size='s']::-moz-range-thumb:hover{background:var(--tui-primary-hover)}:not(:disabled):host:not(._old-edge)[data-size='s']::-moz-range-thumb:active{background:var(--tui-primary-active)}:focus-visible:host:not(._old-edge)[data-size='s']::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}:host:not(._old-edge)::-moz-range-progress{background:currentColor;border-radius:inherit;border-top-right-radius:0;border-bottom-right-radius:0}:host._old-edge::-ms-thumb{background:currentColor;border-radius:50%}:host._old-edge::-ms-fill-lower{background:currentColor}:host._old-edge::-ms-track{background:var(--tui-slider-track-color);border:none}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_SLIDER_OPTIONS)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(USER_AGENT)),
    __param(5, Inject(Injector))
], TuiSliderComponent);
export { TuiSliderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zbGlkZXIvIiwic291cmNlcyI6WyJzbGlkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sUUFBUSxFQUNSLEtBQUssRUFDTCxRQUFRLEVBQ1IsSUFBSSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFDSCwyQkFBMkIsRUFDM0IsZUFBZSxFQUNmLGNBQWMsRUFDZCxPQUFPLEVBQ1AsS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwQyxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRixPQUFPLEVBQUMsa0JBQWtCLEVBQW1CLE1BQU0sa0JBQWtCLENBQUM7QUF3QnRFLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBNEQzQixZQUlxQixPQUF5QixFQUNmLGlCQUFvQyxFQUMxQixPQUF5QixFQUNqQyxVQUF3QyxFQUNoQyxTQUFpQixFQUNuQixRQUFrQjs7UUFMcEMsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFFTCxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUNqQyxlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQUNoQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQVU7UUFqRXpELFNBQUksR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztR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QUtHO1FBQ0gsUUFBUSxFQUFFLDhCQUE4QjtRQUN4QyxRQUFRLEVBQUUsRUFBRTtRQUVaLElBQUksRUFBRTtZQUNGOzs7OztlQUtHO1lBQ0gsU0FBUyxFQUFFLEdBQUc7WUFDZCxrQ0FBa0MsRUFBRSxvQkFBb0I7U0FDM0Q7UUFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDbEQsQ0FBQztJQThETyxXQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsV0FBQSxJQUFJLEVBQUUsQ0FBQTtJQUNOLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRWpCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDekIsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUMxQixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtHQXJFWixrQkFBa0IsQ0FrRjlCO1NBbEZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIEluamVjdG9yLFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2wsIE5nTW9kZWx9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7VVNFUl9BR0VOVH0gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENIUk9NSVVNX0VER0VfU1RBUlRfVkVSU0lPTixcbiAgICBpc0VkZ2VPbGRlclRoYW4sXG4gICAgdHVpRGVmYXVsdFByb3AsXG4gICAgdHVpUHVyZSxcbiAgICB3YXRjaCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVTfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge3Rha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlTbGlkZXJLZXlTdGVwc0RpcmVjdGl2ZX0gZnJvbSAnLi9oZWxwZXJzL3NsaWRlci1rZXktc3RlcHMuZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1NMSURFUl9PUFRJT05TLCBUdWlTbGlkZXJPcHRpb25zfSBmcm9tICcuL3NsaWRlci1vcHRpb25zJztcblxuQENvbXBvbmVudCh7XG4gICAgLyoqXG4gICAgICogV2UgaGF2ZSB0byBjYWxsIG91ciBjb21wb25lbnQgYXMgYDxpbnB1dCB0dWlTbGlkZXIgdHlwZT1cInJhbmdlXCIgLi4uIC8+YFxuICAgICAqIGJlY2F1c2Ugb3RoZXJ3aXNlIGJ1aWx0LWluIGFuZ3VsYXJcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21hc3Rlci9wYWNrYWdlcy9mb3Jtcy9zcmMvZGlyZWN0aXZlcy9yYW5nZV92YWx1ZV9hY2Nlc3Nvci50cyNMNDUgUmFuZ2VWYWx1ZUFjY2Vzc29yfVxuICAgICAqIGNhbm5vdCBiZSBtYXRjaGVkIGJ5IGl0cyBDU1Mgc2VsZWN0b3IuXG4gICAgICovXG4gICAgc2VsZWN0b3I6ICdpbnB1dFt0eXBlPXJhbmdlXVt0dWlTbGlkZXJdJyxcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2xpZGVyLnN0eWxlLmxlc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3IgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgICAgICogV2Via2l0IGRvZXMgbm90IGhhdmUgYnVpbHQtaW4gbWV0aG9kIGZvciBjdXN0b21pemF0aW9uIG9mIGZpbGxpbmcgcHJvZ3Jlc3MgKGFzIEZpcmVmb3gpLlxuICAgICAgICAgKiBXZSBkcmF3IGZpbGxpbmcgb2YgcHJvZ3Jlc3MgYnkgYGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCguLi4pYCBvZiB0aGUgdHJhY2suXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gdHJpZ2dlcnMgY2hhbmdlIGRldGVjdGlvbiAoZm9yIHtAbGluayB2YWx1ZVBlcmNlbnRhZ2V9IGZ1bmN0aW9uKSB3aGVuIHdlIGRyYWcgdGh1bWIgb2YgdGhlIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgJyhpbnB1dCknOiAnMCcsXG4gICAgICAgICdbc3R5bGUuLS10dWktc2xpZGVyLXRyYWNrLWNvbG9yXSc6ICdvcHRpb25zLnRyYWNrQ29sb3InLFxuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNsaWRlckNvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVTID0gdGhpcy5vcHRpb25zLnNpemU7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2VnbWVudHMgPSAxO1xuXG4gICAgZ2V0IG1pbigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm1pbik7XG4gICAgfVxuXG4gICAgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm1heCB8fCAxMDApO1xuICAgIH1cblxuICAgIGdldCBzdGVwKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3RlcCkgfHwgMTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3Qge2VsZW1lbnRSZWYsIGNvbnRyb2wsIGhhc0tleVN0ZXBzfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFoYXNLZXlTdGVwcyAmJiBjb250cm9sIGluc3RhbmNlb2YgTmdNb2RlbCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBkZXZlbG9wZXIgdXNlcyBgWyhuZ01vZGVsKV1gIGFuZCBwcm9ncmFtbWF0aWNhbGx5IGNoYW5nZSB2YWx1ZSxcbiAgICAgICAgICAgICAqIHRoZSBgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZhbHVlYCBpcyBlcXVhbCB0byB0aGUgcHJldmlvdXMgdmFsdWUgYXQgdGhpcyBtb21lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBjb250cm9sLnZpZXdNb2RlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBOdW1iZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZhbHVlKSB8fCAwO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZhbHVlID0gYCR7bmV3VmFsdWV9YDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLi0tdHVpLXNsaWRlci1maWxsLXBlcmNlbnRhZ2UuJScpXG4gICAgZ2V0IHZhbHVlUGVyY2VudGFnZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKDEwMCAqICh0aGlzLnZhbHVlIC0gdGhpcy5taW4pKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSB8fCAwO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuLS10dWktc2xpZGVyLXNlZ21lbnQtd2lkdGguJScpXG4gICAgZ2V0IHNlZ21lbnRXaWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMTAwIC8gTWF0aC5tYXgoMSwgdGhpcy5zZWdtZW50cyk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fb2xkLWVkZ2UnKVxuICAgIGdldCBpc09sZEVkZ2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc0VkZ2VPbGRlclRoYW4oQ0hST01JVU1fRURHRV9TVEFSVF9WRVJTSU9OLCB0aGlzLnVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBnZXQgaGFzS2V5U3RlcHMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuaW5qZWN0b3IuZ2V0KFR1aVNsaWRlcktleVN0ZXBzRGlyZWN0aXZlLCBudWxsKSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBASW5qZWN0KFRVSV9TTElERVJfT1BUSU9OUykgcmVhZG9ubHkgb3B0aW9uczogVHVpU2xpZGVyT3B0aW9ucyxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFVTRVJfQUdFTlQpIHByaXZhdGUgcmVhZG9ubHkgdXNlckFnZW50OiBzdHJpbmcsXG4gICAgICAgIEBJbmplY3QoSW5qZWN0b3IpIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICkge1xuICAgICAgICBpZiAoY29udHJvbCBpbnN0YW5jZW9mIE5nTW9kZWwpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIFZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZSBtZXRob2QgaXMgY2FsbGVkIHR3aWNlIG9uIGFueSB2YWx1ZSBhY2Nlc3NvciBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpemF0aW9uLFxuICAgICAgICAgICAgICogd2hlbiBhIGNvbnRyb2wgaXMgYm91bmQgdXNpbmcgWyhuZ01vZGVsKV0sIGZpcnN0IHRpbWUgd2l0aCBhIHBoYW50b20gbnVsbCB2YWx1ZS5cbiAgICAgICAgICAgICAqIFdpdGggYGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoYCB0aGUgc2Vjb25kIGNhbGwgb2Ygd3JpdGVWYWx1ZSB3aXRoIHJlYWwgdmFsdWUgZG9uJ3QgcmUtcmVuZGVyIHRoZSB2aWV3LlxuICAgICAgICAgICAgICogX19fXG4gICAgICAgICAgICAgKiBTZWUgdGhpcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTQ5ODggaXNzdWV9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRyb2wudmFsdWVDaGFuZ2VzPy5waXBlKHdhdGNoKGNoYW5nZURldGVjdG9yUmVmKSwgdGFrZSgxKSkuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=