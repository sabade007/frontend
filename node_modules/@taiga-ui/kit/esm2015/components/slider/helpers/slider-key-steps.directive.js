import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, Output, Pipe, PipeTransform, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, clamp, isNativeFocused, tuiAssert, tuiDefaultProp, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiCheckKeyStepsHaveMinMaxPercents, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, } from '@taiga-ui/kit/utils';
import { map } from 'rxjs/operators';
import { TuiSliderComponent } from '../slider.component';
// @dynamic
let TuiSliderKeyStepsDirective = class TuiSliderKeyStepsDirective extends AbstractTuiControl {
    constructor(control, changeDetectorRef, elementRef, slider) {
        super(control, changeDetectorRef);
        this.elementRef = elementRef;
        this.slider = slider;
        this.keySteps = [];
        this.keyStepsInput = typedFromEvent(this.elementRef.nativeElement, 'input').pipe(map(() => this.controlValue));
    }
    get nativeFocusableElement() {
        return this.computedDisabled ? null : this.elementRef.nativeElement;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get min() {
        var _a;
        return ((_a = this.keySteps[0]) === null || _a === void 0 ? void 0 : _a[1]) || 0;
    }
    get max() {
        var _a;
        return ((_a = this.keySteps[this.keySteps.length - 1]) === null || _a === void 0 ? void 0 : _a[1]) || 100;
    }
    get controlValue() {
        return tuiPercentageToKeyStepValue(this.slider.valuePercentage, this.keySteps);
    }
    /**
     * TODO: 3.0
     * ___
     * Also add @HostListener(`input`): to be similar to
     * {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/range_value_accessor.ts#L47-L48 RangeValueAccessor}
     * ___
     * Remove {@link keyStepsInput}
     */
    updateControlValue() {
        this.updateValue(this.controlValue);
    }
    writeValue(controlValue) {
        if (controlValue === null) {
            return;
        }
        const clampedControlValue = clamp(controlValue, this.min, this.max);
        tuiAssert.assert(controlValue === clampedControlValue, '\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max');
        this.slider.value = this.transformToNativeValue(clampedControlValue);
    }
    getFallbackValue() {
        return 0;
    }
    transformToNativeValue(controlValue) {
        const { min, max } = this.slider;
        const newValuePercentage = tuiKeyStepValueToPercentage(controlValue, this.keySteps);
        return (newValuePercentage * (max - min)) / 100 + min;
    }
};
TuiSliderKeyStepsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiSliderComponent, decorators: [{ type: Inject, args: [forwardRef(() => TuiSliderComponent),] }] }
];
__decorate([
    Input(),
    tuiDefaultProp(tuiCheckKeyStepsHaveMinMaxPercents, 'Should contain min and max values')
], TuiSliderKeyStepsDirective.prototype, "keySteps", void 0);
__decorate([
    Output()
], TuiSliderKeyStepsDirective.prototype, "keyStepsInput", void 0);
__decorate([
    HostListener('change')
], TuiSliderKeyStepsDirective.prototype, "updateControlValue", null);
TuiSliderKeyStepsDirective = __decorate([
    Directive({
        selector: 'input[tuiSlider][keySteps]',
        host: {
            '[attr.aria-valuenow]': 'safeCurrentValue',
            '[attr.aria-valuemin]': 'min',
            '[attr.aria-valuemax]': 'max',
        },
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(ElementRef)),
    __param(3, Inject(forwardRef(() => TuiSliderComponent)))
], TuiSliderKeyStepsDirective);
export { TuiSliderKeyStepsDirective };
/**
 * @deprecated DONT USE IT! It is just temporary solution for internal purposes only. We will delete it in next major release.
 * TODO delete it in v3.0
 *
 */
let TuiSliderTickLabelPipe = class TuiSliderTickLabelPipe {
    transform(tickIndex, totalSegments, keySteps) {
        const percentage = (100 / totalSegments) * tickIndex;
        return tuiPercentageToKeyStepValue(percentage, keySteps);
    }
};
TuiSliderTickLabelPipe = __decorate([
    Pipe({ name: 'tuiSliderTickLabel' })
], TuiSliderTickLabelPipe);
export { TuiSliderTickLabelPipe };
//# sourceMappingURL=data:application/json;base64,