import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk';
import { TuiSliderComponent } from '../../slider.component';
let TuiSliderThumbLabelComponent = class TuiSliderThumbLabelComponent {
    get size() {
        var _a;
        return ((_a = this.slider) === null || _a === void 0 ? void 0 : _a.size) || 'm';
    }
    get ratio() {
        var _a;
        return (((_a = this.slider) === null || _a === void 0 ? void 0 : _a.valuePercentage) || 0) / 100;
    }
    get ghostLeft() {
        var _a;
        return this.ratio * (((_a = this.slider) === null || _a === void 0 ? void 0 : _a.elementRef.nativeElement.offsetWidth) || 0);
    }
    ngAfterContentInit() {
        var _a;
        tuiAssert.assert(Boolean((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges), '\n[tuiSliderThumbLabel] expected <input tuiSlider type="range" /> to use Angular Forms.\n' +
            'Use [(ngModel)] or [formControl] or formControlName for correct work.');
    }
};
__decorate([
    ContentChild(TuiSliderComponent)
], TuiSliderThumbLabelComponent.prototype, "slider", void 0);
__decorate([
    ContentChild(NgControl)
], TuiSliderThumbLabelComponent.prototype, "control", void 0);
TuiSliderThumbLabelComponent = __decorate([
    Component({
        selector: '[tuiSliderThumbLabel]',
        template: "<ng-container *ngIf=\"control?.valueChanges | async\"></ng-container>\n\n<div\n    class=\"t-ghost\"\n    [attr.data-size]=\"size\"\n    [style.left.px]=\"ghostLeft\"\n    [style.--tui-slider-thumb-ratio]=\"ratio\"\n>\n    <ng-content></ng-content>\n</div>\n\n<ng-content select=\"input[type=range]\"></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative}.t-ghost{position:absolute;top:0;bottom:0;margin:auto;border-radius:50%;pointer-events:none}.t-ghost[data-size='s']{width:.5rem;height:.5rem;transform:translateX(calc(var(--tui-slider-thumb-ratio) * -.5rem))}.t-ghost[data-size='m']{width:1rem;height:1rem;transform:translateX(calc(var(--tui-slider-thumb-ratio) * -1rem))}"]
    })
], TuiSliderThumbLabelComponent);
export { TuiSliderThumbLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLXRodW1iLWxhYmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zbGlkZXIvIiwic291cmNlcyI6WyJoZWxwZXJzL3NsaWRlci10aHVtYi1sYWJlbC9zbGlkZXItdGh1bWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEdBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHeEMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFRMUQsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7SUFPckMsSUFBSSxJQUFJOztRQUNKLE9BQU8sT0FBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxJQUFJLEtBQUksR0FBRyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLEtBQUs7O1FBQ0wsT0FBTyxDQUFDLE9BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsZUFBZSxLQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxTQUFTOztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEtBQUksQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELGtCQUFrQjs7UUFDZCxTQUFTLENBQUMsTUFBTSxDQUNaLE9BQU8sT0FBQyxJQUFJLENBQUMsT0FBTywwQ0FBRSxZQUFZLENBQUMsRUFDbkMsMkZBQTJGO1lBQ3ZGLHVFQUF1RSxDQUM5RSxDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUE7QUF4Qkc7SUFEQyxZQUFZLENBQUMsa0JBQWtCLENBQUM7NERBQ0k7QUFHckM7SUFEQyxZQUFZLENBQUMsU0FBUyxDQUFDOzZEQUNLO0FBTHBCLDRCQUE0QjtJQU54QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDLHdVQUFpRDtRQUVqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDbEQsQ0FBQztHQUNXLDRCQUE0QixDQTBCeEM7U0ExQlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpU2l6ZVN9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcblxuaW1wb3J0IHtUdWlTbGlkZXJDb21wb25lbnR9IGZyb20gJy4uLy4uL3NsaWRlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1t0dWlTbGlkZXJUaHVtYkxhYmVsXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NsaWRlci10aHVtYi1sYWJlbC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zbGlkZXItdGh1bWItbGFiZWwuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTbGlkZXJUaHVtYkxhYmVsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgQENvbnRlbnRDaGlsZChUdWlTbGlkZXJDb21wb25lbnQpXG4gICAgcmVhZG9ubHkgc2xpZGVyPzogVHVpU2xpZGVyQ29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZChOZ0NvbnRyb2wpXG4gICAgcmVhZG9ubHkgY29udHJvbD86IE5nQ29udHJvbDtcblxuICAgIGdldCBzaXplKCk6IFR1aVNpemVTIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpZGVyPy5zaXplIHx8ICdtJztcbiAgICB9XG5cbiAgICBnZXQgcmF0aW8oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNsaWRlcj8udmFsdWVQZXJjZW50YWdlIHx8IDApIC8gMTAwO1xuICAgIH1cblxuICAgIGdldCBnaG9zdExlZnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF0aW8gKiAodGhpcy5zbGlkZXI/LmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCB8fCAwKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICBCb29sZWFuKHRoaXMuY29udHJvbD8udmFsdWVDaGFuZ2VzKSxcbiAgICAgICAgICAgICdcXG5bdHVpU2xpZGVyVGh1bWJMYWJlbF0gZXhwZWN0ZWQgPGlucHV0IHR1aVNsaWRlciB0eXBlPVwicmFuZ2VcIiAvPiB0byB1c2UgQW5ndWxhciBGb3Jtcy5cXG4nICtcbiAgICAgICAgICAgICAgICAnVXNlIFsobmdNb2RlbCldIG9yIFtmb3JtQ29udHJvbF0gb3IgZm9ybUNvbnRyb2xOYW1lIGZvciBjb3JyZWN0IHdvcmsuJyxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=