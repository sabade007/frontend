import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, CHAR_EN_DASH, TUI_FIRST_DAY, TUI_LAST_DAY, tuiDefaultProp, TuiMonthRange, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiTextfieldSizeDirective, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { TUI_INPUT_MONTH_RANGE_PROVIDERS } from './input-month-range.providers';
// @dynamic
let TuiInputMonthRangeComponent = class TuiInputMonthRangeComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, formatter, textfieldSize) {
        super(control, changeDetectorRef);
        this.formatter = formatter;
        this.textfieldSize = textfieldSize;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get calendarIcon() {
        return sizeBigger(this.textfieldSize.size)
            ? 'tuiIconCalendarLarge'
            : 'tuiIconCalendar';
    }
    computeValue(from, to) {
        const formattedTo = from === to && this.focused && !this.readOnly ? '' : to;
        return `${from} ${CHAR_EN_DASH} ${formattedTo}`;
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.updateValue(null);
        this.onOpenChange(true);
    }
    onMonthClick(month) {
        if (this.value === null || !this.value.isSingleMonth) {
            this.writeValue(new TuiMonthRange(month, month));
            return;
        }
        this.updateValue(TuiMonthRange.sort(this.value.from, month));
        this.close();
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onOpenChange(open) {
        this.open = open;
    }
    onActiveZone(focused) {
        var _a;
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleMonth) {
            this.updateValue(new TuiMonthRange(this.value.from, this.value.from));
        }
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    close() {
        this.open = false;
    }
};
TuiInputMonthRangeComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputMonthRangeComponent.prototype, "textfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "disabledItemHandler", void 0);
TuiInputMonthRangeComponent = __decorate([
    Component({
        selector: 'tui-input-month-range',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"calendarIcon\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"\n            value\n                ? computeValue(value.from | tuiMapper: formatter | async, value.to | tuiMapper: formatter | async)\n                : ''\n        \"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n",
        providers: TUI_INPUT_MONTH_RANGE_PROVIDERS,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_MONTH_FORMATTER)),
    __param(3, Inject(TUI_TEXTFIELD_SIZE))
], TuiInputMonthRangeComponent);
export { TuiInputMonthRangeComponent };
//# sourceMappingURL=data:application/json;base64,