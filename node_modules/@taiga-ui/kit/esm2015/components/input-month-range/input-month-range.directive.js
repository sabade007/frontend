var TuiInputMonthRangeDirective_1;
import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Inject, Self } from '@angular/core';
import { AbstractTuiControl, TuiDestroyService, } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { combineLatest, Observable, Subject } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { TuiInputMonthRangeComponent } from './input-month-range.component';
let TuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = class TuiInputMonthRangeDirective extends TuiAbstractTextfieldHost {
    constructor(host, formatter, destroy$) {
        super(host);
        this.value$ = new Subject();
        this.localizedValue = ['', ''];
        this.value$
            .pipe(distinctUntilChanged(), switchMap((value) => combineLatest([
            formatter((value === null || value === void 0 ? void 0 : value.from) || null),
            formatter((value === null || value === void 0 ? void 0 : value.to) || null),
        ])), takeUntil(destroy$))
            .subscribe(localizedValue => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue[0]
            ? this.host.computeValue(...this.localizedValue)
            : '';
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
};
TuiInputMonthRangeDirective.ctorParameters = () => [
    { type: TuiInputMonthRangeComponent, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
    { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] }
];
TuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = __decorate([
    Directive({
        selector: 'tui-input-month-range',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiInputMonthRangeDirective_1),
            },
            TuiDestroyService,
        ],
    }),
    __param(0, Inject(AbstractTuiControl)),
    __param(1, Inject(TUI_MONTH_FORMATTER)),
    __param(2, Self()), __param(2, Inject(TuiDestroyService))
], TuiInputMonthRangeDirective);
export { TuiInputMonthRangeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2lucHV0LW1vbnRoLXJhbmdlLyIsInNvdXJjZXMiOlsiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBVyxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLGlCQUFpQixHQUlwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsa0JBQWtCLEVBQUUsd0JBQXdCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDeEQsT0FBTyxFQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRSxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQVkxRSxJQUFhLDJCQUEyQixtQ0FBeEMsTUFBYSwyQkFDVCxTQUFRLHdCQUFxRDtJQU83RCxZQUNnQyxJQUFpQyxFQUU3RCxTQUEwRCxFQUN2QixRQUE2QjtRQUVoRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFWQyxXQUFNLEdBQUcsSUFBSSxPQUFPLEVBQXdCLENBQUM7UUFFdEQsbUJBQWMsR0FBcUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFVaEQsSUFBSSxDQUFDLE1BQU07YUFDTixJQUFJLENBQ0Qsb0JBQW9CLEVBQUUsRUFDdEIsU0FBUyxDQUFDLENBQUMsS0FBMkIsRUFBRSxFQUFFLENBQ3RDLGFBQWEsQ0FBQztZQUNWLFNBQVMsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxJQUFJLEtBQUksSUFBSSxDQUFDO1lBQzlCLFNBQVMsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxFQUFFLEtBQUksSUFBSSxDQUFDO1NBQy9CLENBQUMsQ0FDTCxFQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEI7YUFDQSxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNoRCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVELFNBQVM7UUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBYTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0osQ0FBQTs7WUF4Q3lDLDJCQUEyQix1QkFBNUQsTUFBTSxTQUFDLGtCQUFrQjs0Q0FDekIsTUFBTSxTQUFDLG1CQUFtQjtZQUVrQixVQUFVLHVCQUF0RCxJQUFJLFlBQUksTUFBTSxTQUFDLGlCQUFpQjs7QUFaNUIsMkJBQTJCO0lBVnZDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsU0FBUyxFQUFFO1lBQ1A7Z0JBQ0ksT0FBTyxFQUFFLGtCQUFrQjtnQkFDM0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBMkIsQ0FBQzthQUM3RDtZQUNELGlCQUFpQjtTQUNwQjtLQUNKLENBQUM7SUFVTyxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQzFCLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFFM0IsV0FBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7R0FaN0IsMkJBQTJCLENBaUR2QztTQWpEWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRG9DaGVjaywgZm9yd2FyZFJlZiwgSW5qZWN0LCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWJzdHJhY3RUdWlDb250cm9sLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUhhbmRsZXIsXG4gICAgVHVpTW9udGgsXG4gICAgVHVpTW9udGhSYW5nZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9URVhURklFTERfSE9TVCwgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1RVSV9NT05USF9GT1JNQVRURVJ9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7Y29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBzd2l0Y2hNYXAsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUlucHV0TW9udGhSYW5nZUNvbXBvbmVudH0gZnJvbSAnLi9pbnB1dC1tb250aC1yYW5nZS5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS1pbnB1dC1tb250aC1yYW5nZScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9URVhURklFTERfSE9TVCxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUlucHV0TW9udGhSYW5nZURpcmVjdGl2ZSksXG4gICAgICAgIH0sXG4gICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0TW9udGhSYW5nZURpcmVjdGl2ZVxuICAgIGV4dGVuZHMgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0PFR1aUlucHV0TW9udGhSYW5nZUNvbXBvbmVudD5cbiAgICBpbXBsZW1lbnRzIERvQ2hlY2tcbntcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlJCA9IG5ldyBTdWJqZWN0PFR1aU1vbnRoUmFuZ2UgfCBudWxsPigpO1xuXG4gICAgcHJpdmF0ZSBsb2NhbGl6ZWRWYWx1ZTogW3N0cmluZywgc3RyaW5nXSA9IFsnJywgJyddO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoQWJzdHJhY3RUdWlDb250cm9sKSBob3N0OiBUdWlJbnB1dE1vbnRoUmFuZ2VDb21wb25lbnQsXG4gICAgICAgIEBJbmplY3QoVFVJX01PTlRIX0ZPUk1BVFRFUilcbiAgICAgICAgZm9ybWF0dGVyOiBUdWlIYW5kbGVyPFR1aU1vbnRoIHwgbnVsbCwgT2JzZXJ2YWJsZTxzdHJpbmc+PixcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoaG9zdCk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSRcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCh2YWx1ZTogVHVpTW9udGhSYW5nZSB8IG51bGwpID0+XG4gICAgICAgICAgICAgICAgICAgIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyKHZhbHVlPy5mcm9tIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyKHZhbHVlPy50byB8fCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShsb2NhbGl6ZWRWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGl6ZWRWYWx1ZSA9IGxvY2FsaXplZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHJlYWRPbmx5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxpemVkVmFsdWVbMF1cbiAgICAgICAgICAgID8gdGhpcy5ob3N0LmNvbXB1dGVWYWx1ZSguLi50aGlzLmxvY2FsaXplZFZhbHVlKVxuICAgICAgICAgICAgOiAnJztcbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWUkLm5leHQodGhpcy5ob3N0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3N0Lm9uVmFsdWVDaGFuZ2UodmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==