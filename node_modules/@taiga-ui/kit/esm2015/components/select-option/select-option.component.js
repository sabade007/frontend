import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, TemplateRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isPresent, TUI_DEFAULT_IDENTITY_MATCHER, typedFromEvent, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiDataListHost, TuiOptionComponent } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
let TuiSelectOptionComponent = class TuiSelectOptionComponent {
    constructor(context, host, elementRef, option, control) {
        var _a;
        this.context = context;
        this.host = host;
        this.elementRef = elementRef;
        this.option = option;
        this.control = control;
        this.selected$ = merge((_a = this.control.valueChanges) !== null && _a !== void 0 ? _a : EMPTY, typedFromEvent(this.elementRef.nativeElement, 'animationstart')).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    ngOnInit() {
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(() => {
            if (isPresent(this.option.value) && this.host.checkOption) {
                this.host.checkOption(this.option.value);
            }
        });
    }
    get selected() {
        return (isPresent(this.option.value) &&
            isPresent(this.control.value) &&
            this.matcher(this.control.value, this.option.value));
    }
};
TuiSelectOptionComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiOptionComponent, decorators: [{ type: Inject, args: [TuiOptionComponent,] }] },
    { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
];
TuiSelectOptionComponent = __decorate([
    Component({
        selector: 'tui-select-option',
        template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\"></ng-container>\n<tui-svg\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    src=\"tuiIconCheckLarge\"\n    class=\"t-checkmark\"\n    [tuiScrollIntoView]=\"true\"\n></tui-svg>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["@keyframes retrigger{from{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-width:100%;animation:1s retrigger}.t-checkmark{margin:0 -.375rem 0 auto;border-left:5px solid transparent}.t-dummy{width:1.5rem}"]
    }),
    __param(0, Inject(POLYMORPHEUS_CONTEXT)),
    __param(1, Inject(TUI_DATA_LIST_HOST)),
    __param(2, Inject(ElementRef)),
    __param(3, Inject(TuiOptionComponent)),
    __param(4, Inject(NgControl))
], TuiSelectOptionComponent);
export { TuiSelectOptionComponent };
export const TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvc2VsZWN0LW9wdGlvbi8iLCJzb3VyY2VzIjpbInNlbGVjdC1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFDSCxTQUFTLEVBQ1QsNEJBQTRCLEVBRzVCLGNBQWMsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3JGLE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFRcEUsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUFVakMsWUFFYSxPQUFxRSxFQUU3RCxJQUF3QixFQUNKLFVBQW1DLEVBQ3pCLE1BQTZCLEVBQ3RDLE9BQWtCOztRQUwvQyxZQUFPLEdBQVAsT0FBTyxDQUE4RDtRQUU3RCxTQUFJLEdBQUosSUFBSSxDQUFvQjtRQUNKLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQXVCO1FBQ3RDLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFoQm5ELGNBQVMsR0FBRyxLQUFLLE9BQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxtQ0FBSSxLQUFLLEVBQ2xDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUNsRSxDQUFDLElBQUksQ0FDRixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDeEIsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztJQVVDLENBQUM7SUFFSixJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLDRCQUE0QixDQUFDO0lBQ3JFLENBQUM7SUFFRCxRQUFRO1FBQ0o7Ozs7O1dBS0c7UUFDSCxtRUFBbUU7UUFDbkUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1QztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQWMsUUFBUTtRQUNsQixPQUFPLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzVCLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3RELENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQTs7NENBbkNRLE1BQU0sU0FBQyxvQkFBb0I7NENBRTNCLE1BQU0sU0FBQyxrQkFBa0I7WUFFdUIsVUFBVSx1QkFBMUQsTUFBTSxTQUFDLFVBQVU7WUFDcUMsa0JBQWtCLHVCQUF4RSxNQUFNLFNBQUMsa0JBQWtCO1lBQ3FCLFNBQVMsdUJBQXZELE1BQU0sU0FBQyxTQUFTOztBQWpCWix3QkFBd0I7SUFOcEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QixtWEFBNEM7UUFFNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUFZTyxXQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0lBRTVCLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFFMUIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUMxQixXQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtHQWpCYix3QkFBd0IsQ0E4Q3BDO1NBOUNZLHdCQUF3QjtBQWdEckMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgT25Jbml0LFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIGlzUHJlc2VudCxcbiAgICBUVUlfREVGQVVMVF9JREVOVElUWV9NQVRDSEVSLFxuICAgIFR1aUNvbnRleHRXaXRoSW1wbGljaXQsXG4gICAgVHVpSWRlbnRpdHlNYXRjaGVyLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0RBVEFfTElTVF9IT1NULCBUdWlEYXRhTGlzdEhvc3QsIFR1aU9wdGlvbkNvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtQT0xZTU9SUEhFVVNfQ09OVEVYVCwgUG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtFTVBUWSwgbWVyZ2V9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGh9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktc2VsZWN0LW9wdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlbGVjdC1vcHRpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VsZWN0LW9wdGlvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNlbGVjdE9wdGlvbkNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcmVhZG9ubHkgc2VsZWN0ZWQkID0gbWVyZ2UoXG4gICAgICAgIHRoaXMuY29udHJvbC52YWx1ZUNoYW5nZXMgPz8gRU1QVFksXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnYW5pbWF0aW9uc3RhcnQnKSxcbiAgICApLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuc2VsZWN0ZWQpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChQT0xZTU9SUEhFVVNfQ09OVEVYVClcbiAgICAgICAgcmVhZG9ubHkgY29udGV4dDogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUZW1wbGF0ZVJlZjxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4+LFxuICAgICAgICBASW5qZWN0KFRVSV9EQVRBX0xJU1RfSE9TVClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4sXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlPcHRpb25Db21wb25lbnQpIHByb3RlY3RlZCByZWFkb25seSBvcHRpb246IFR1aU9wdGlvbkNvbXBvbmVudDxUPixcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpIHByb3RlY3RlZCByZWFkb25seSBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgKSB7fVxuXG4gICAgZ2V0IG1hdGNoZXIoKTogVHVpSWRlbnRpdHlNYXRjaGVyPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5pZGVudGl0eU1hdGNoZXIgfHwgVFVJX0RFRkFVTFRfSURFTlRJVFlfTUFUQ0hFUjtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd291bGQgY2F1c2UgY2hhbmdlcyBpbnNpZGUgYWxyZWFkeSBjaGVja2VkIHBhcmVudCBjb21wb25lbnQgKGR1cmluZyB0aGUgc2FtZSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlKSxcbiAgICAgICAgICogYW5kIGl0IG1pZ2h0IGNhdXNlIEV4cHJlc3Npb25DaGFuZ2VkIGVycm9yIGR1ZSB0byBwb3RlbnRpYWwgSG9zdEJpbmRpbmdcbiAgICAgICAgICogKGZvciBleGFtcGxlLCBpbnNpZGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi9tYWluL3BhY2thZ2VzL2Zvcm1zL3NyYy9kaXJlY3RpdmVzL25nX2NvbnRyb2xfc3RhdHVzLnRzI0w5OSBOZ0NvbnRyb2xTdGF0dXN9KS5cbiAgICAgICAgICogTWljcm90YXNrIGtlZXBzIGl0IGluIHRoZSBzYW1lIGZyYW1lIGJ1dCBhbGxvd3MgY2hhbmdlIGRldGVjdGlvbiB0byBydW4uXG4gICAgICAgICAqL1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLm9wdGlvbi52YWx1ZSkgJiYgdGhpcy5ob3N0LmNoZWNrT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0LmNoZWNrT3B0aW9uKHRoaXMub3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzUHJlc2VudCh0aGlzLm9wdGlvbi52YWx1ZSkgJiZcbiAgICAgICAgICAgIGlzUHJlc2VudCh0aGlzLmNvbnRyb2wudmFsdWUpICYmXG4gICAgICAgICAgICB0aGlzLm1hdGNoZXIodGhpcy5jb250cm9sLnZhbHVlLCB0aGlzLm9wdGlvbi52YWx1ZSlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfU0VMRUNUX09QVElPTiA9IG5ldyBQb2x5bW9ycGhldXNDb21wb25lbnQoVHVpU2VsZWN0T3B0aW9uQ29tcG9uZW50KTtcbiJdfQ==