import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { sizeBigger, TUI_TEXTFIELD_SIZE, TuiHostedDropdownComponent, TuiTextfieldSizeDirective, } from '@taiga-ui/core';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TUI_ARROW_OPTIONS } from './arrow-options';
let TuiArrowComponent = class TuiArrowComponent {
    constructor(dropdown, textfieldSize, options) {
        this.dropdown = dropdown;
        this.textfieldSize = textfieldSize;
        this.options = options;
    }
    get arrowIcon() {
        return sizeBigger(this.textfieldSize.size)
            ? this.options.iconLarge
            : this.options.iconSmall;
    }
};
TuiArrowComponent.ctorParameters = () => [
    { type: TuiHostedDropdownComponent, decorators: [{ type: Inject, args: [TuiHostedDropdownComponent,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ARROW_OPTIONS,] }] }
];
TuiArrowComponent = __decorate([
    Component({
        selector: 'tui-arrow',
        template: "<span\n    polymorpheus-outlet\n    class=\"t-icon\"\n    [class.t-icon_rotated]=\"dropdown.openChange | async\"\n    [content]=\"arrowIcon\"\n>\n    <ng-template let-icon>\n        <tui-svg [src]=\"icon\"></tui-svg>\n    </ng-template>\n</span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".t-icon{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}.t-icon_rotated{transform:rotate(180deg)}"]
    }),
    __param(0, Inject(TuiHostedDropdownComponent)),
    __param(1, Inject(TUI_TEXTFIELD_SIZE)),
    __param(2, Inject(TUI_ARROW_OPTIONS))
], TuiArrowComponent);
export { TuiArrowComponent };
export const TUI_ARROW = new PolymorpheusComponent(TuiArrowComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2Fycm93LyIsInNvdXJjZXMiOlsiYXJyb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQ0gsVUFBVSxFQUNWLGtCQUFrQixFQUNsQiwwQkFBMEIsRUFDMUIseUJBQXlCLEdBQzVCLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFDLHFCQUFxQixFQUFzQixNQUFNLDBCQUEwQixDQUFDO0FBRXBGLE9BQU8sRUFBQyxpQkFBaUIsRUFBa0IsTUFBTSxpQkFBaUIsQ0FBQztBQVFuRSxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUMxQixZQUVhLFFBQW9DLEVBRTVCLGFBQXdDLEVBQ2IsT0FBd0I7UUFIM0QsYUFBUSxHQUFSLFFBQVEsQ0FBNEI7UUFFNUIsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7SUFDckUsQ0FBQztJQUVKLElBQUksU0FBUztRQUNULE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDeEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Q0FDSixDQUFBOztZQVgwQiwwQkFBMEIsdUJBRDVDLE1BQU0sU0FBQywwQkFBMEI7WUFHRix5QkFBeUIsdUJBRHhELE1BQU0sU0FBQyxrQkFBa0I7NENBRXpCLE1BQU0sU0FBQyxpQkFBaUI7O0FBTnBCLGlCQUFpQjtJQU43QixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsV0FBVztRQUNyQixtUUFBb0M7UUFFcEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUFHTyxXQUFBLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0lBRWxDLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFFMUIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtHQU5yQixpQkFBaUIsQ0FjN0I7U0FkWSxpQkFBaUI7QUFnQjlCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIHNpemVCaWdnZXIsXG4gICAgVFVJX1RFWFRGSUVMRF9TSVpFLFxuICAgIFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50LFxuICAgIFR1aVRleHRmaWVsZFNpemVEaXJlY3RpdmUsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50LCBQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1RVSV9BUlJPV19PUFRJT05TLCBUdWlBcnJvd09wdGlvbnN9IGZyb20gJy4vYXJyb3ctb3B0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWFycm93JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXJyb3cudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXJyb3cuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBcnJvd0NvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSG9zdGVkRHJvcGRvd25Db21wb25lbnQpXG4gICAgICAgIHJlYWRvbmx5IGRyb3Bkb3duOiBUdWlIb3N0ZWREcm9wZG93bkNvbXBvbmVudCxcbiAgICAgICAgQEluamVjdChUVUlfVEVYVEZJRUxEX1NJWkUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGV4dGZpZWxkU2l6ZTogVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZSxcbiAgICAgICAgQEluamVjdChUVUlfQVJST1dfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlBcnJvd09wdGlvbnMsXG4gICAgKSB7fVxuXG4gICAgZ2V0IGFycm93SWNvbigpOiBQb2x5bW9ycGhldXNDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHNpemVCaWdnZXIodGhpcy50ZXh0ZmllbGRTaXplLnNpemUpXG4gICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5pY29uTGFyZ2VcbiAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmljb25TbWFsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfQVJST1cgPSBuZXcgUG9seW1vcnBoZXVzQ29tcG9uZW50KFR1aUFycm93Q29tcG9uZW50KTtcbiJdfQ==