import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Inject, Output } from '@angular/core';
import { clamp, round, TuiDestroyService, typedFromEvent } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { merge, Observable } from 'rxjs';
import { filter, map, repeat, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import { TuiRangeComponent } from './range.component';
// @dynamic
let TuiRangeChangeDirective = class TuiRangeChangeDirective {
    constructor(documentRef, elementRef, range, destroy$) {
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.range = range;
        /**
         * TODO replace with pointer events (when all supported browsers can handle them).
         * Dont forget to use setPointerCapture instead of listening all documentRef events
         */
        this.pointerDown$ = merge(typedFromEvent(this.elementRef.nativeElement, 'touchstart', { passive: true }).pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0])), typedFromEvent(this.elementRef.nativeElement, 'mousedown', { passive: true }));
        this.pointerMove$ = merge(typedFromEvent(this.documentRef, 'touchmove').pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0])), typedFromEvent(this.documentRef, 'mousemove'));
        this.pointerUp$ = merge(typedFromEvent(this.documentRef, 'touchend', { passive: true }), typedFromEvent(this.documentRef, 'mouseup', { passive: true }));
        this.activeThumbChange = new EventEmitter();
        let activeThumb;
        this.pointerDown$
            .pipe(tap(({ clientX, target }) => {
            activeThumb = this.detectActiveThumb(clientX, target);
            this.activeThumbChange.emit(activeThumb);
            if (this.range.focusable) {
                elementRef.nativeElement.focus();
            }
        }), switchMap(event => this.pointerMove$.pipe(startWith(event))), map(({ clientX }) => clamp(this.getFractionFromEvents(clientX), 0, 1)), takeUntil(this.pointerUp$), repeat(), takeUntil(destroy$))
            .subscribe(fraction => {
            const value = this.range.getValueFromFraction(this.range.fractionGuard(fraction));
            this.range.processValue(value, activeThumb === 'right');
        });
    }
    getFractionFromEvents(clickClientX) {
        const hostRect = this.elementRef.nativeElement.getBoundingClientRect();
        const value = clickClientX - hostRect.left;
        const total = hostRect.width;
        return round(value / total, TUI_FLOATING_PRECISION);
    }
    detectActiveThumb(clientX, target) {
        const [leftSliderRef, rightSliderRef] = this.range.slidersRefs;
        switch (target) {
            case leftSliderRef.nativeElement:
                return 'left';
            case rightSliderRef.nativeElement:
                return 'right';
            default:
                return this.findNearestActiveThumb(clientX);
        }
    }
    findNearestActiveThumb(clientX) {
        const fraction = this.getFractionFromEvents(clientX);
        const deltaLeft = fraction * 100 - this.range.left;
        const deltaRight = fraction * 100 - 100 + this.range.right;
        return Math.abs(deltaLeft) > Math.abs(deltaRight) ||
            deltaRight > 0 ||
            (this.range.left === 0 && this.range.right === 100)
            ? 'right'
            : 'left';
    }
};
TuiRangeChangeDirective.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiRangeComponent, decorators: [{ type: Inject, args: [TuiRangeComponent,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Output()
], TuiRangeChangeDirective.prototype, "activeThumbChange", void 0);
TuiRangeChangeDirective = __decorate([
    Directive({
        selector: 'tui-range',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiRangeComponent)),
    __param(3, Inject(TuiDestroyService))
], TuiRangeChangeDirective);
export { TuiRangeChangeDirective };
//# sourceMappingURL=data:application/json;base64,