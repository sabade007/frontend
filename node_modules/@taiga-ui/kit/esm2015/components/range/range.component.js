var TuiRangeComponent_1;
import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, Optional, QueryList, Self, ViewChildren, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { clamp, EMPTY_QUERY, isNativeFocusedIn, nonNegativeFiniteAssertion, quantize, round, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiAssert, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { AbstractTuiSlider, SLIDER_KEYBOARD_STEP } from '@taiga-ui/kit/abstract';
import { TuiSliderComponent } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiCheckKeyStepsHaveMinMaxPercents, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, } from '@taiga-ui/kit/utils';
import { Observable } from 'rxjs';
/**
 * Turn on new mode for `Range` and `InputRange`.
 * The new version of component will behave almost the same as the same component from the next major release.
 * @deprecated TODO remove me in v3.0 and make `Range` and `InputRange` always "new".
 */
let TuiNewRangeDirective = class TuiNewRangeDirective {
};
TuiNewRangeDirective = __decorate([
    Directive({
        selector: 'tui-range[new], tui-input-range[new]',
    })
], TuiNewRangeDirective);
export { TuiNewRangeDirective };
// @dynamic
let TuiRangeComponent = TuiRangeComponent_1 = 
/**
 * `AbstractTuiSlider` includes all legacy code (it can be deleted in v3.0)
 * TODO replace `extends AbstractTuiSlider<[number, number]>` by `extends AbstractTuiControl<[number, number]> implements TuiWithOptionalMinMax<number>, TuiFocusableElementAccessor`
 */
class TuiRangeComponent extends AbstractTuiSlider {
    constructor(control, changeDetectorRef, documentRef, elementRef, fromToTexts$, isNew) {
        super(control, changeDetectorRef, documentRef, fromToTexts$);
        this.elementRef = elementRef;
        this.isNew = isNew;
        this.min = 0;
        /**
         * TODO: make `100` as default value (to be like native sliders) in v3.0
         */
        this.max = Infinity;
        /**
         * TODO: think about replacing this props by `step` (to be like native slider).
         * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
         */
        this.steps = 0;
        /**
         * TODO: think about replacing this props by `step` (to be like native slider).
         * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
         * */
        this.quantum = 0;
        this.size = 'm';
        this.segments = 0;
        this.keySteps = null;
        this.slidersRefs = EMPTY_QUERY;
        this.lastActiveThumb = 'right';
    }
    get nativeFocusableElement() {
        const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
        if (this.computedDisabled || !sliderLeftRef || !sliderRightRef) {
            return null;
        }
        return this.isLeftFocusable
            ? sliderLeftRef.nativeElement
            : sliderRightRef.nativeElement;
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
    get fractionStep() {
        if (this.steps) {
            return 1 / this.steps;
        }
        return this.quantum ? this.quantum / (this.max - this.min) : SLIDER_KEYBOARD_STEP;
    }
    get computedKeySteps() {
        return this.computePureKeySteps(this.keySteps, this.min, this.max);
    }
    get left() {
        return this.getPercentageFromValue(this.value[0]);
    }
    get right() {
        return 100 - this.getPercentageFromValue(this.value[1]);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    changeByStep(coefficient, target) {
        const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
        const leftThumbElement = sliderLeftRef.nativeElement;
        const rightThumbElement = sliderRightRef.nativeElement;
        const isRightThumb = target === this.elementRef.nativeElement
            ? this.lastActiveThumb === 'right'
            : target === rightThumbElement;
        const activeThumbElement = isRightThumb ? rightThumbElement : leftThumbElement;
        const previousValue = isRightThumb ? this.value[1] : this.value[0];
        /** @bad TODO think about a solution without twice conversion */
        const previousFraction = this.getPercentageFromValue(previousValue) / 100;
        const newFractionValue = previousFraction + coefficient * this.fractionStep;
        this.processValue(this.getValueFromFraction(newFractionValue), isRightThumb);
        if (activeThumbElement) {
            activeThumbElement.focus();
        }
    }
    processValue(value, right) {
        const guardedValue = this.valueGuard(value);
        if (right) {
            this.updateEnd(guardedValue);
        }
        else {
            this.updateStart(guardedValue);
        }
        this.lastActiveThumb = right ? 'right' : 'left';
    }
    fractionGuard(fraction) {
        return clamp(quantize(fraction, this.fractionStep), 0, 1);
    }
    getValueFromFraction(fraction) {
        const percentage = this.fractionGuard(fraction) * 100;
        return tuiPercentageToKeyStepValue(percentage, this.computedKeySteps);
    }
    getPercentageFromValue(value) {
        return tuiKeyStepValueToPercentage(value, this.computedKeySteps);
    }
    valueGuard(value) {
        return clamp(this.quantum
            ? round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION)
            : value, this.min, this.max);
    }
    getFallbackValue() {
        return [0, 0];
    }
    computePureKeySteps(keySteps, min, max) {
        if (keySteps && tuiCheckKeyStepsHaveMinMaxPercents(keySteps)) {
            return keySteps;
        }
        // TODO replace all function by `return keySteps || [[0, min], [100, max]]` in v3.0
        tuiAssert.assert(!keySteps, '\n' +
            'Input property [keySteps] should contain min and max percents.\n' +
            'We have taken [min] and [max] properties of your component for now (but it will not work in v3.0).\n' +
            'See example how properly use [keySteps]: https://taiga-ui.dev/components/range#key-steps');
        return [[0, min], ...(keySteps || []), [100, max]];
    }
    updateStart(value) {
        this.updateValue([Math.min(value, this.value[1]), this.value[1]]);
    }
    updateEnd(value) {
        this.updateValue([this.value[0], Math.max(value, this.value[0])]);
    }
};
TuiRangeComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] },
    { type: TuiNewRangeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiNewRangeDirective,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp(nonNegativeFiniteAssertion, 'Quantum must be a non-negative number')
], TuiRangeComponent.prototype, "quantum", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRangeComponent.prototype, "keySteps", void 0);
__decorate([
    ViewChildren(TuiSliderComponent, { read: ElementRef })
], TuiRangeComponent.prototype, "slidersRefs", void 0);
__decorate([
    HostBinding('style.--left.%')
], TuiRangeComponent.prototype, "left", null);
__decorate([
    HostBinding('style.--right.%')
], TuiRangeComponent.prototype, "right", null);
__decorate([
    HostListener('focusin', ['true']),
    HostListener('focusout', ['false'])
], TuiRangeComponent.prototype, "onFocused", null);
__decorate([
    HostListener('keydown.arrowUp.prevent', ['1', '$event.target']),
    HostListener('keydown.arrowRight.prevent', ['1', '$event.target']),
    HostListener('keydown.arrowLeft.prevent', ['-1', '$event.target']),
    HostListener('keydown.arrowDown.prevent', ['-1', '$event.target'])
], TuiRangeComponent.prototype, "changeByStep", null);
__decorate([
    tuiPure
], TuiRangeComponent.prototype, "computePureKeySteps", null);
TuiRangeComponent = TuiRangeComponent_1 = __decorate([
    Component({
        selector: 'tui-range',
        template: "<div class=\"t-track\">\n    <input\n        tuiSlider\n        readonly\n        type=\"range\"\n        step=\"any\"\n        automation-id=\"tui-range__left\"\n        class=\"t-thumb\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [ngModel]=\"value[0]\"\n        [size]=\"size\"\n        [keySteps]=\"computedKeySteps\"\n        [tuiFocusable]=\"focusable\"\n        [attr.disabled]=\"computedDisabled || null\"\n    />\n    <input\n        tuiSlider\n        readonly\n        type=\"range\"\n        step=\"any\"\n        automation-id=\"tui-range__right\"\n        class=\"t-thumb\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [ngModel]=\"value[1]\"\n        [size]=\"size\"\n        [keySteps]=\"computedKeySteps\"\n        [tuiFocusable]=\"focusable\"\n        [attr.disabled]=\"computedDisabled || null\"\n    />\n</div>\n\n<!-- TODO backward compatibility only (remove in v3.0) -->\n<div\n    *ngIf=\"segments > 0\"\n    class=\"t-segments\"\n>\n    <span\n        *tuiRepeatTimes=\"let tickIndex of segments + 1\"\n        automation-id=\"tui-slider__segment\"\n        class=\"t-segment\"\n    >\n        <ng-container *ngIf=\"fromToTexts$ | async as fromToText\">\n            <span\n                *ngIf=\"!isNew\"\n                class=\"t-number\"\n            >\n                {{ getSegmentPrefix(tickIndex, fromToText) }}\n                {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | tuiFormatNumber }}\n                <span *ngIf=\"pluralizeMap\">\n                    {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | i18nPlural: pluralizeMap }}\n                </span>\n            </span>\n        </ng-container>\n    </span>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            '[attr.tabindex]': '-1',
            '[attr.aria-disabled]': 'computedDisabled',
        },
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiRangeComponent_1),
            },
        ],
        styles: [":host{position:relative;display:block;height:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-base-03);cursor:pointer;outline:0;margin:.4375rem 0;touch-action:pan-x}:host:active{cursor:ew-resize}:host:after{content:'';position:absolute;top:-.4375rem;bottom:-.4375rem;width:100%}:host._disabled{opacity:var(--tui-disabled-opacity);cursor:auto}:host[data-size='s'] .t-track{position:relative;margin:0 .25rem;height:100%}:host[data-size='s'] .t-track:after{content:'';position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 -.25rem}:host[data-size='m'] .t-track{position:relative;margin:0 .5rem;height:100%}:host[data-size='m'] .t-track:after{content:'';position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 -.5rem}.t-thumb{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translate(0,-50%)}.t-thumb::-webkit-slider-thumb{pointer-events:all}.t-thumb::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb::-webkit-slider-runnable-track{background:0 0}input[type=range].t-thumb::-moz-range-track{background:0 0}input[type=range].t-thumb::-moz-range-progress{background:0 0}input[type=range].t-thumb::-ms-track{background:0 0}input[type=range].t-thumb::-ms-fill-lower{background:0 0}.t-thumb:last-of-type::-webkit-slider-thumb{transform:translate(50%,0)}.t-thumb:first-of-type::-webkit-slider-thumb{transform:translate(-50%,0)}.t-thumb:last-of-type::-moz-range-thumb{transform:translate(50%,0)}.t-thumb:first-of-type::-moz-range-thumb{transform:translate(-50%,0)}:host._disabled .t-thumb{opacity:1}.t-segments{position:absolute;top:0;left:0;bottom:0;right:0}:host[data-size='s'] .t-segments{display:flex;margin:0 .25rem;font:var(--tui-font-text-s);padding:0 .25rem}:host[data-size='s'] .t-segments>*{position:relative;flex:2;text-align:center}:host[data-size='s'] .t-segments>:first-child{left:-.25rem;flex:1;text-align:left}:host[data-size='s'] .t-segments>:last-child{right:-.25rem;flex:1;text-align:right}tui-input-slider+:host[data-size='s'] .t-segments{margin-left:calc(var(--tui-radius-m)/ 2 + .25rem)}tui-input-range+:host[data-size='s'] .t-segments,tui-range+:host[data-size='s'] .t-segments{margin-left:.5rem;margin-right:.5rem}tui-input-range+:host[data-size='s'] .t-segments>:first-child,tui-range+:host[data-size='s'] .t-segments>:first-child{left:-.5rem}tui-input-range+:host[data-size='s'] .t-segments>:last-child,tui-range+:host[data-size='s'] .t-segments>:last-child{right:-.5rem}:host[data-size='m'] .t-segments{display:flex;margin:0 .5rem;font:var(--tui-font-text-s);padding:0 .5rem}:host[data-size='m'] .t-segments>*{position:relative;flex:2;text-align:center}:host[data-size='m'] .t-segments>:first-child{left:-.5rem;flex:1;text-align:left}:host[data-size='m'] .t-segments>:last-child{right:-.5rem;flex:1;text-align:right}tui-input-slider+:host[data-size='m'] .t-segments{margin-left:calc(var(--tui-radius-m)/ 2 + .5rem)}tui-input-range+:host[data-size='m'] .t-segments,tui-range+:host[data-size='m'] .t-segments{margin-left:1rem;margin-right:1rem}tui-input-range+:host[data-size='m'] .t-segments>:first-child,tui-range+:host[data-size='m'] .t-segments>:first-child{left:-1rem}tui-input-range+:host[data-size='m'] .t-segments>:last-child,tui-range+:host[data-size='m'] .t-segments>:last-child{right:-1rem}.t-segment:not(:last-of-type):not(:first-of-type):before{content:'';position:absolute;left:0;right:0;margin:auto;background:var(--tui-base-07);width:.25rem;height:100%}.t-segment:last-of-type .t-number{margin-right:-.5rem}.t-segment:first-of-type .t-number{margin-left:-.5rem}.t-number{display:inline-block;margin-top:.5rem}"]
    })
    /**
     * `AbstractTuiSlider` includes all legacy code (it can be deleted in v3.0)
     * TODO replace `extends AbstractTuiSlider<[number, number]>` by `extends AbstractTuiControl<[number, number]> implements TuiWithOptionalMinMax<number>, TuiFocusableElementAccessor`
     */
    ,
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(DOCUMENT)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(TUI_FROM_TO_TEXTS)),
    __param(5, Optional()),
    __param(5, Inject(TuiNewRangeDirective))
], TuiRangeComponent);
export { TuiRangeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3JhbmdlLyIsInNvdXJjZXMiOlsicmFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVMsRUFDVCxJQUFJLEVBQ0osWUFBWSxHQUNmLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsS0FBSyxFQUNMLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsMEJBQTBCLEVBQzFCLFFBQVEsRUFDUixLQUFLLEVBQ0wsMkJBQTJCLEVBQzNCLFNBQVMsRUFDVCxjQUFjLEVBR2QsT0FBTyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQy9FLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXZELE9BQU8sRUFDSCxrQ0FBa0MsRUFDbEMsMkJBQTJCLEVBQzNCLDJCQUEyQixHQUM5QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFaEM7Ozs7R0FJRztBQUlILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEs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QUFzQixFQUFFLGtCQUFrQjtTQUM3QztRQUNELFNBQVMsRUFBRTtZQUNQO2dCQUNJLE9BQU8sRUFBRSwyQkFBMkI7Z0JBQ3BDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQWlCLENBQUM7YUFDbkQ7U0FDSjs7S0FDSixDQUFDO0lBQ0Y7OztPQUdHOztJQW1ETSxXQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsV0FBQSxJQUFJLEVBQUUsQ0FBQTtJQUNOLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRWpCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDekIsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN6QixXQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtHQTNEeEIsaUJBQWlCLENBK003QjtTQS9NWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBTZWxmLFxuICAgIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgICBjbGFtcCxcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBpc05hdGl2ZUZvY3VzZWRJbixcbiAgICBub25OZWdhdGl2ZUZpbml0ZUFzc2VydGlvbixcbiAgICBxdWFudGl6ZSxcbiAgICByb3VuZCxcbiAgICBUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IsXG4gICAgdHVpQXNzZXJ0LFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICBUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50LFxuICAgIHR1aVB1cmUsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aVNsaWRlciwgU0xJREVSX0tFWUJPQVJEX1NURVB9IGZyb20gJ0B0YWlnYS11aS9raXQvYWJzdHJhY3QnO1xuaW1wb3J0IHtUdWlTbGlkZXJDb21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zbGlkZXInO1xuaW1wb3J0IHtUVUlfRkxPQVRJTkdfUFJFQ0lTSU9OfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbnN0YW50cyc7XG5pbXBvcnQge1RVSV9GUk9NX1RPX1RFWFRTfSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5pbXBvcnQge1R1aUtleVN0ZXBzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcbmltcG9ydCB7XG4gICAgdHVpQ2hlY2tLZXlTdGVwc0hhdmVNaW5NYXhQZXJjZW50cyxcbiAgICB0dWlLZXlTdGVwVmFsdWVUb1BlcmNlbnRhZ2UsXG4gICAgdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogVHVybiBvbiBuZXcgbW9kZSBmb3IgYFJhbmdlYCBhbmQgYElucHV0UmFuZ2VgLlxuICogVGhlIG5ldyB2ZXJzaW9uIG9mIGNvbXBvbmVudCB3aWxsIGJlaGF2ZSBhbG1vc3QgdGhlIHNhbWUgYXMgdGhlIHNhbWUgY29tcG9uZW50IGZyb20gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAqIEBkZXByZWNhdGVkIFRPRE8gcmVtb3ZlIG1lIGluIHYzLjAgYW5kIG1ha2UgYFJhbmdlYCBhbmQgYElucHV0UmFuZ2VgIGFsd2F5cyBcIm5ld1wiLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS1yYW5nZVtuZXddLCB0dWktaW5wdXQtcmFuZ2VbbmV3XScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5ld1JhbmdlRGlyZWN0aXZlIHt9XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1yYW5nZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhbmdlLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3JhbmdlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgICdbYXR0ci50YWJpbmRleF0nOiAnLTEnLFxuICAgICAgICAnW2F0dHIuYXJpYS1kaXNhYmxlZF0nOiAnY29tcHV0ZWREaXNhYmxlZCcsXG4gICAgfSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVHVpUmFuZ2VDb21wb25lbnQpLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuLyoqXG4gKiBgQWJzdHJhY3RUdWlTbGlkZXJgIGluY2x1ZGVzIGFsbCBsZWdhY3kgY29kZSAoaXQgY2FuIGJlIGRlbGV0ZWQgaW4gdjMuMClcbiAqIFRPRE8gcmVwbGFjZSBgZXh0ZW5kcyBBYnN0cmFjdFR1aVNsaWRlcjxbbnVtYmVyLCBudW1iZXJdPmAgYnkgYGV4dGVuZHMgQWJzdHJhY3RUdWlDb250cm9sPFtudW1iZXIsIG51bWJlcl0+IGltcGxlbWVudHMgVHVpV2l0aE9wdGlvbmFsTWluTWF4PG51bWJlcj4sIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcmBcbiAqL1xuZXhwb3J0IGNsYXNzIFR1aVJhbmdlQ29tcG9uZW50XG4gICAgZXh0ZW5kcyBBYnN0cmFjdFR1aVNsaWRlcjxbbnVtYmVyLCBudW1iZXJdPlxuICAgIGltcGxlbWVudHMgVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yXG57XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1pbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBtYWtlIGAxMDBgIGFzIGRlZmF1bHQgdmFsdWUgKHRvIGJlIGxpa2UgbmF0aXZlIHNsaWRlcnMpIGluIHYzLjBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWF4ID0gSW5maW5pdHk7XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiB0aGluayBhYm91dCByZXBsYWNpbmcgdGhpcyBwcm9wcyBieSBgc3RlcGAgKHRvIGJlIGxpa2UgbmF0aXZlIHNsaWRlcikuXG4gICAgICogSXQgY2FuIGJlIGRvbmUgYWZ0ZXIgcmVtb3ZpbmcgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBjb2RlIGluc2lkZSB7QGxpbmsgY29tcHV0ZVB1cmVLZXlTdGVwc30gaW4gdjMuMFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzdGVwcyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiB0aGluayBhYm91dCByZXBsYWNpbmcgdGhpcyBwcm9wcyBieSBgc3RlcGAgKHRvIGJlIGxpa2UgbmF0aXZlIHNsaWRlcikuXG4gICAgICogSXQgY2FuIGJlIGRvbmUgYWZ0ZXIgcmVtb3ZpbmcgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBjb2RlIGluc2lkZSB7QGxpbmsgY29tcHV0ZVB1cmVLZXlTdGVwc30gaW4gdjMuMFxuICAgICAqICovXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3Aobm9uTmVnYXRpdmVGaW5pdGVBc3NlcnRpb24sICdRdWFudHVtIG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyJylcbiAgICBxdWFudHVtID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplUyA9ICdtJztcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZWdtZW50cyA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzIHwgbnVsbCA9IG51bGw7XG5cbiAgICBAVmlld0NoaWxkcmVuKFR1aVNsaWRlckNvbXBvbmVudCwge3JlYWQ6IEVsZW1lbnRSZWZ9KVxuICAgIHNsaWRlcnNSZWZzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50Pj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIGxhc3RBY3RpdmVUaHVtYjogJ2xlZnQnIHwgJ3JpZ2h0JyA9ICdyaWdodCc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbClcbiAgICAgICAgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUVUlfRlJPTV9UT19URVhUUykgZnJvbVRvVGV4dHMkOiBPYnNlcnZhYmxlPFtzdHJpbmcsIHN0cmluZ10+LFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFR1aU5ld1JhbmdlRGlyZWN0aXZlKVxuICAgICAgICByZWFkb25seSBpc05ldzogVHVpTmV3UmFuZ2VEaXJlY3RpdmUgfCBudWxsLFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250cm9sLCBjaGFuZ2VEZXRlY3RvclJlZiwgZG9jdW1lbnRSZWYsIGZyb21Ub1RleHRzJCk7XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQoKTogVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCB8IG51bGwge1xuICAgICAgICBjb25zdCBbc2xpZGVyTGVmdFJlZiwgc2xpZGVyUmlnaHRSZWZdID0gdGhpcy5zbGlkZXJzUmVmcztcblxuICAgICAgICBpZiAodGhpcy5jb21wdXRlZERpc2FibGVkIHx8ICFzbGlkZXJMZWZ0UmVmIHx8ICFzbGlkZXJSaWdodFJlZikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pc0xlZnRGb2N1c2FibGVcbiAgICAgICAgICAgID8gc2xpZGVyTGVmdFJlZi5uYXRpdmVFbGVtZW50XG4gICAgICAgICAgICA6IHNsaWRlclJpZ2h0UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc05hdGl2ZUZvY3VzZWRJbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0IGZyYWN0aW9uU3RlcCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5zdGVwcykge1xuICAgICAgICAgICAgcmV0dXJuIDEgLyB0aGlzLnN0ZXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucXVhbnR1bSA/IHRoaXMucXVhbnR1bSAvICh0aGlzLm1heCAtIHRoaXMubWluKSA6IFNMSURFUl9LRVlCT0FSRF9TVEVQO1xuICAgIH1cblxuICAgIGdldCBjb21wdXRlZEtleVN0ZXBzKCk6IFR1aUtleVN0ZXBzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZVB1cmVLZXlTdGVwcyh0aGlzLmtleVN0ZXBzLCB0aGlzLm1pbiwgdGhpcy5tYXgpO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuLS1sZWZ0LiUnKVxuICAgIGdldCBsZWZ0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBlcmNlbnRhZ2VGcm9tVmFsdWUodGhpcy52YWx1ZVswXSk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLXJpZ2h0LiUnKVxuICAgIGdldCByaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMTAwIC0gdGhpcy5nZXRQZXJjZW50YWdlRnJvbVZhbHVlKHRoaXMudmFsdWVbMV0pO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzaW4nLCBbJ3RydWUnXSlcbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c291dCcsIFsnZmFsc2UnXSlcbiAgICBvbkZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzZWQoZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd1VwLnByZXZlbnQnLCBbJzEnLCAnJGV2ZW50LnRhcmdldCddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dSaWdodC5wcmV2ZW50JywgWycxJywgJyRldmVudC50YXJnZXQnXSlcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFycm93TGVmdC5wcmV2ZW50JywgWyctMScsICckZXZlbnQudGFyZ2V0J10pXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd0Rvd24ucHJldmVudCcsIFsnLTEnLCAnJGV2ZW50LnRhcmdldCddKVxuICAgIGNoYW5nZUJ5U3RlcChjb2VmZmljaWVudDogbnVtYmVyLCB0YXJnZXQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzbGlkZXJMZWZ0UmVmLCBzbGlkZXJSaWdodFJlZl0gPSB0aGlzLnNsaWRlcnNSZWZzO1xuICAgICAgICBjb25zdCBsZWZ0VGh1bWJFbGVtZW50ID0gc2xpZGVyTGVmdFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCByaWdodFRodW1iRWxlbWVudCA9IHNsaWRlclJpZ2h0UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgY29uc3QgaXNSaWdodFRodW1iID1cbiAgICAgICAgICAgIHRhcmdldCA9PT0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgICAgICA/IHRoaXMubGFzdEFjdGl2ZVRodW1iID09PSAncmlnaHQnXG4gICAgICAgICAgICAgICAgOiB0YXJnZXQgPT09IHJpZ2h0VGh1bWJFbGVtZW50O1xuICAgICAgICBjb25zdCBhY3RpdmVUaHVtYkVsZW1lbnQgPSBpc1JpZ2h0VGh1bWIgPyByaWdodFRodW1iRWxlbWVudCA6IGxlZnRUaHVtYkVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBpc1JpZ2h0VGh1bWIgPyB0aGlzLnZhbHVlWzFdIDogdGhpcy52YWx1ZVswXTtcbiAgICAgICAgLyoqIEBiYWQgVE9ETyB0aGluayBhYm91dCBhIHNvbHV0aW9uIHdpdGhvdXQgdHdpY2UgY29udmVyc2lvbiAqL1xuICAgICAgICBjb25zdCBwcmV2aW91c0ZyYWN0aW9uID0gdGhpcy5nZXRQZXJjZW50YWdlRnJvbVZhbHVlKHByZXZpb3VzVmFsdWUpIC8gMTAwO1xuICAgICAgICBjb25zdCBuZXdGcmFjdGlvblZhbHVlID0gcHJldmlvdXNGcmFjdGlvbiArIGNvZWZmaWNpZW50ICogdGhpcy5mcmFjdGlvblN0ZXA7XG5cbiAgICAgICAgdGhpcy5wcm9jZXNzVmFsdWUodGhpcy5nZXRWYWx1ZUZyb21GcmFjdGlvbihuZXdGcmFjdGlvblZhbHVlKSwgaXNSaWdodFRodW1iKTtcblxuICAgICAgICBpZiAoYWN0aXZlVGh1bWJFbGVtZW50KSB7XG4gICAgICAgICAgICBhY3RpdmVUaHVtYkVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb2Nlc3NWYWx1ZSh2YWx1ZTogbnVtYmVyLCByaWdodDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBndWFyZGVkVmFsdWUgPSB0aGlzLnZhbHVlR3VhcmQodmFsdWUpO1xuXG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbmQoZ3VhcmRlZFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhcnQoZ3VhcmRlZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEFjdGl2ZVRodW1iID0gcmlnaHQgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgIH1cblxuICAgIGZyYWN0aW9uR3VhcmQoZnJhY3Rpb246IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBjbGFtcChxdWFudGl6ZShmcmFjdGlvbiwgdGhpcy5mcmFjdGlvblN0ZXApLCAwLCAxKTtcbiAgICB9XG5cbiAgICBnZXRWYWx1ZUZyb21GcmFjdGlvbihmcmFjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IHRoaXMuZnJhY3Rpb25HdWFyZChmcmFjdGlvbikgKiAxMDA7XG5cbiAgICAgICAgcmV0dXJuIHR1aVBlcmNlbnRhZ2VUb0tleVN0ZXBWYWx1ZShwZXJjZW50YWdlLCB0aGlzLmNvbXB1dGVkS2V5U3RlcHMpO1xuICAgIH1cblxuICAgIGdldFBlcmNlbnRhZ2VGcm9tVmFsdWUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0dWlLZXlTdGVwVmFsdWVUb1BlcmNlbnRhZ2UodmFsdWUsIHRoaXMuY29tcHV0ZWRLZXlTdGVwcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHZhbHVlR3VhcmQodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBjbGFtcChcbiAgICAgICAgICAgIHRoaXMucXVhbnR1bVxuICAgICAgICAgICAgICAgID8gcm91bmQoXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCh2YWx1ZSAvIHRoaXMucXVhbnR1bSkgKiB0aGlzLnF1YW50dW0sXG4gICAgICAgICAgICAgICAgICAgICAgVFVJX0ZMT0FUSU5HX1BSRUNJU0lPTixcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IHZhbHVlLFxuICAgICAgICAgICAgdGhpcy5taW4sXG4gICAgICAgICAgICB0aGlzLm1heCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RmFsbGJhY2tWYWx1ZSgpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgY29tcHV0ZVB1cmVLZXlTdGVwcyhcbiAgICAgICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzIHwgbnVsbCxcbiAgICAgICAgbWluOiBudW1iZXIsXG4gICAgICAgIG1heDogbnVtYmVyLFxuICAgICk6IFR1aUtleVN0ZXBzIHtcbiAgICAgICAgaWYgKGtleVN0ZXBzICYmIHR1aUNoZWNrS2V5U3RlcHNIYXZlTWluTWF4UGVyY2VudHMoa2V5U3RlcHMpKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5U3RlcHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPIHJlcGxhY2UgYWxsIGZ1bmN0aW9uIGJ5IGByZXR1cm4ga2V5U3RlcHMgfHwgW1swLCBtaW5dLCBbMTAwLCBtYXhdXWAgaW4gdjMuMFxuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgIWtleVN0ZXBzLFxuICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICdJbnB1dCBwcm9wZXJ0eSBba2V5U3RlcHNdIHNob3VsZCBjb250YWluIG1pbiBhbmQgbWF4IHBlcmNlbnRzLlxcbicgK1xuICAgICAgICAgICAgICAgICdXZSBoYXZlIHRha2VuIFttaW5dIGFuZCBbbWF4XSBwcm9wZXJ0aWVzIG9mIHlvdXIgY29tcG9uZW50IGZvciBub3cgKGJ1dCBpdCB3aWxsIG5vdCB3b3JrIGluIHYzLjApLlxcbicgK1xuICAgICAgICAgICAgICAgICdTZWUgZXhhbXBsZSBob3cgcHJvcGVybHkgdXNlIFtrZXlTdGVwc106IGh0dHBzOi8vdGFpZ2EtdWkuZGV2L2NvbXBvbmVudHMvcmFuZ2Uja2V5LXN0ZXBzJyxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gW1swLCBtaW5dLCAuLi4oa2V5U3RlcHMgfHwgW10pLCBbMTAwLCBtYXhdXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVN0YXJ0KHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShbTWF0aC5taW4odmFsdWUsIHRoaXMudmFsdWVbMV0pLCB0aGlzLnZhbHVlWzFdXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVFbmQodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKFt0aGlzLnZhbHVlWzBdLCBNYXRoLm1heCh2YWx1ZSwgdGhpcy52YWx1ZVswXSldKTtcbiAgICB9XG59XG4iXX0=