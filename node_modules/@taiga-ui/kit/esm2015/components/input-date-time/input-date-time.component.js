import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, clamp, DATE_FILLER_LENGTH, nullableSame, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, tuiDefaultProp, TuiMonth, tuiPure, TuiTime, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { DATE_TIME_SEPARATOR } from '@taiga-ui/kit/constants';
import { TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_TIME_TEXTS, } from '@taiga-ui/kit/tokens';
import { tuiCreateAutoCorrectedDateTimePipe, tuiCreateDateMask, tuiCreateTimeMask, } from '@taiga-ui/kit/utils/mask';
import { combineLatest, Observable } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import { TUI_INPUT_DATE_TIME_PROVIDERS } from './input-date-time.providers';
// @dynamic
let TuiInputDateTimeComponent = class TuiInputDateTimeComponent extends AbstractTuiControl {
    constructor(control, changeDetectorRef, textfieldSize, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer) {
        super(control, changeDetectorRef, valueTransformer);
        this.textfieldSize = textfieldSize;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.timeTexts$ = timeTexts$;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.month = null;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.timeMode = 'HH:MM';
        this.open = false;
        this.filler$ = combineLatest([
            this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator))),
            this.timeTexts$.pipe(pluck(this.timeMode)),
        ]).pipe(map(fillers => this.getDateTimeString(...fillers)));
    }
    get fillerLength() {
        return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;
    }
    get textMaskOptions() {
        return this.calculateMask(this.value[0], this.calendarMinDay, this.calendarMaxDay, this.timeMode, this.dateFormat, this.dateSeparator);
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get calendarIcon() {
        return sizeBigger(this.textfieldSize.size)
            ? 'tuiIconCalendarLarge'
            : 'tuiIconCalendar';
    }
    get computedValue() {
        const { value, nativeValue, timeMode } = this;
        const [date, time] = value;
        const hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;
        if (!date || (!time && hasTimeInputChars)) {
            return nativeValue;
        }
        return this.getDateTimeString(date, time, timeMode);
    }
    get calendarValue() {
        return this.value[0];
    }
    get calendarMinDay() {
        return Array.isArray(this.min) ? this.min[0] : this.min;
    }
    get calendarMaxDay() {
        return Array.isArray(this.max) ? this.max[0] : this.max;
    }
    get computedActiveYearMonth() {
        return this.month || this.value[0] || this.defaultActiveYearMonth;
    }
    get nativeValue() {
        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    onClick() {
        this.open = !this.open;
    }
    onValueChange(value) {
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length < DATE_FILLER_LENGTH) {
            this.updateValue([null, null]);
            return;
        }
        const [date, time] = value.split(DATE_TIME_SEPARATOR);
        const parsedDate = TuiDay.normalizeParse(date, this.dateFormat);
        const parsedTime = time && time.length === this.timeMode.length
            ? this.clampTime(TuiTime.fromString(time), parsedDate)
            : null;
        this.open = false;
        this.updateValue([parsedDate, parsedTime]);
    }
    onDayClick(day) {
        const modifiedTime = this.value[1] && this.clampTime(this.value[1], day);
        this.updateValue([day, modifiedTime]);
        this.updateNativeValue(day);
        this.open = false;
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused ||
            this.value[0] === null ||
            this.value[1] !== null ||
            this.nativeValue.length <= this.fillerLength + DATE_TIME_SEPARATOR.length ||
            this.timeMode === 'HH:MM') {
            return;
        }
        const [, time] = this.nativeValue.split(DATE_TIME_SEPARATOR);
        if (!time) {
            return;
        }
        const parsedTime = TuiTime.fromString(time);
        this.updateValue([this.value[0], parsedTime]);
        setTimeout(() => {
            if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {
                this.nativeValue = this.nativeValue.slice(0, -1);
            }
        });
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue =
            this.value && (this.value[0] || this.value[1]) ? this.computedValue : '';
    }
    getFallbackValue() {
        return [null, null];
    }
    valueIdenticalComparator(oldValue, newValue) {
        return (nullableSame(oldValue[0], newValue[0], (a, b) => a.daySame(b)) &&
            nullableSame(oldValue[1], newValue[1], (a, b) => String(a) === String(b)));
    }
    calculateMask(day, min, max, timeMode, dateFormat, dateSeparator) {
        return {
            mask: [
                ...tuiCreateDateMask(dateFormat, dateSeparator),
                ',',
                ' ',
                ...tuiCreateTimeMask(timeMode),
            ],
            pipe: tuiCreateAutoCorrectedDateTimePipe({
                value: day,
                min,
                max,
                dateFormat,
                dateSeparator,
                timeMode,
            }),
            guide: false,
        };
    }
    getDateTimeString(date, time, timeMode = 'HH:MM') {
        const dateString = date instanceof TuiDay
            ? date.toString(this.dateFormat, this.dateSeparator)
            : date;
        const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';
        return `${dateString}${DATE_TIME_SEPARATOR}${timeString}`;
    }
    updateNativeValue(day) {
        const time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || '';
        this.nativeValue = this.getDateTimeString(day, time);
    }
    clampTime(time, day) {
        const ms = time.toAbsoluteMilliseconds();
        const min = Array.isArray(this.min) && day.daySame(this.calendarMinDay)
            ? this.min[1].toAbsoluteMilliseconds()
            : -Infinity;
        const max = Array.isArray(this.max) && day.daySame(this.calendarMaxDay)
            ? this.max[1].toAbsoluteMilliseconds()
            : Infinity;
        return TuiTime.fromAbsoluteMilliseconds(clamp(ms, min, max));
    }
};
TuiInputDateTimeComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DATE_FORMAT,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_DATE_SEPARATOR,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_TIME_TEXTS,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DATE_TEXTS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATE_TIME_VALUE_TRANSFORMER,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputDateTimeComponent.prototype, "textfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputDateTimeComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputDateTimeComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputDateTimeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputDateTimeComponent.prototype, "defaultActiveYearMonth", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputDateTimeComponent.prototype, "timeMode", void 0);
__decorate([
    HostListener('click')
], TuiInputDateTimeComponent.prototype, "onClick", null);
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "getDateTimeString", null);
TuiInputDateTimeComponent = __decorate([
    Component({
        selector: 'tui-input-date-time',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input-date-time__textfield\"\n        tuiValueAccessor\n        tuiTextfieldInputMode=\"numeric\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [filler]=\"(filler$ | async) || ''\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"iconContent\"\n        [disabled]=\"computedDisabled\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            tuiPreventDefault=\"mousedown\"\n            automation-id=\"tui-input-date-time__calendar\"\n            [min]=\"calendarMinDay\"\n            [max]=\"calendarMaxDay\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"calendarValue\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n        ></tui-calendar>\n    </ng-template>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_INPUT_DATE_TIME_PROVIDERS,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_SIZE)),
    __param(3, Inject(TUI_DATE_FORMAT)),
    __param(4, Inject(TUI_DATE_SEPARATOR)),
    __param(5, Inject(TUI_TIME_TEXTS)),
    __param(6, Inject(TUI_DATE_TEXTS)),
    __param(7, Optional()),
    __param(7, Inject(TUI_DATE_TIME_VALUE_TRANSFORMER))
], TuiInputDateTimeComponent);
export { TuiInputDateTimeComponent };
//# sourceMappingURL=data:application/json;base64,