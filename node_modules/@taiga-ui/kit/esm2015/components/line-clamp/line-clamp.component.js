import { __decorate, __param } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, HostListener, Inject, Input, NgZone, Output, Renderer2, ViewChild, } from '@angular/core';
import { isCurrentTarget, tuiDefaultProp, tuiPure, tuiPx, typedFromEvent, } from '@taiga-ui/cdk';
import { PolymorpheusOutletComponent } from '@tinkoff/ng-polymorpheus';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, pairwise, startWith, switchMap, } from 'rxjs/operators';
import { TUI_LINE_CLAMP_OPTIONS } from './line-clamp-options';
let TuiLineClampComponent = class TuiLineClampComponent {
    constructor(elementRef, renderer, cd, ngZone, options) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.cd = cd;
        this.ngZone = ngZone;
        this.options = options;
        this.linesLimit$ = new BehaviorSubject(1);
        this.isOverflown$ = new Subject();
        this.initialized = false;
        this.lineHeight = 24;
        this.content = '';
        this.overflownChange = this.isOverflown$.pipe(distinctUntilChanged());
        this.skipInitialTransition();
    }
    set linesLimit(linesLimit) {
        this.linesLimit$.next(linesLimit);
    }
    get lineClamp$() {
        return this.linesLimit$.pipe(startWith(1), pairwise(), switchMap(([prev, next]) => next >= prev
            ? of(next)
            : typedFromEvent(this.elementRef.nativeElement, 'transitionend').pipe(filter(isCurrentTarget), mapTo(next))));
    }
    get overflown() {
        if (!this.outlet) {
            return false;
        }
        const { scrollHeight, scrollWidth } = this.outlet.nativeElement;
        const { clientHeight, clientWidth } = this.elementRef.nativeElement;
        // 4px buffer for IE/Edge incorrectly rounding scrollHeight
        return scrollHeight - clientHeight > 4 || scrollWidth - clientWidth > 0;
    }
    get computedContent() {
        return this.options.showHint && this.overflown ? this.content : '';
    }
    updateView() {
        this.cd.detectChanges();
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    ngDoCheck() {
        this.update();
        this.isOverflown$.next(this.overflown);
    }
    skipInitialTransition() {
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.renderer.addClass(this.elementRef.nativeElement, '_initialized');
                this.cd.detectChanges();
            });
        });
    }
    update() {
        if (this.outlet) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'height', tuiPx(this.outlet.nativeElement.scrollHeight + 4));
        }
        if (this.initialized) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-height', tuiPx(this.lineHeight * this.linesLimit$.value));
        }
    }
};
TuiLineClampComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_LINE_CLAMP_OPTIONS,] }] }
];
__decorate([
    ViewChild(PolymorpheusOutletComponent, { read: ElementRef })
], TuiLineClampComponent.prototype, "outlet", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "linesLimit", null);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "lineHeight", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "content", void 0);
__decorate([
    Output()
], TuiLineClampComponent.prototype, "overflownChange", void 0);
__decorate([
    tuiPure
], TuiLineClampComponent.prototype, "lineClamp$", null);
__decorate([
    HostListener('transitionend')
], TuiLineClampComponent.prototype, "updateView", null);
TuiLineClampComponent = __decorate([
    Component({
        selector: 'tui-line-clamp',
        template: "<div\n    *tuiLet=\"lineClamp$ | async as lineClamp\"\n    polymorpheus-outlet\n    tuiHintId=\"unnecessary\"\n    tuiHintMode=\"overflow\"\n    class=\"t-wrapper\"\n    [tuiHint]=\"computedContent\"\n    [content]=\"content\"\n    [style.-webkit-line-clamp]=\"lineClamp\"\n    [style.word-break]=\"lineClamp > 1 ? 'break-word' : 'break-all'\"\n    (tuiResize)=\"updateView()\"\n></div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;overflow:hidden}:host._initialized{transition-property:max-height;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out}.t-wrapper{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(Renderer2)),
    __param(2, Inject(ChangeDetectorRef)),
    __param(3, Inject(NgZone)),
    __param(4, Inject(TUI_LINE_CLAMP_OPTIONS))
], TuiLineClampComponent);
export { TuiLineClampComponent };
//# sourceMappingURL=data:application/json;base64,