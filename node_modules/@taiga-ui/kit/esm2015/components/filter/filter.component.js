import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, ALWAYS_FALSE_HANDLER, isNativeFocusedIn, TUI_DEFAULT_IDENTITY_MATCHER, TUI_DEFAULT_STRINGIFY, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
// @bad TODO: Add active zone to track focus
let TuiFilterComponent = class TuiFilterComponent extends AbstractTuiMultipleControl {
    constructor(control, changeDetectorRef, elementRef) {
        super(control, changeDetectorRef);
        this.elementRef = elementRef;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.items = [];
        this.size = 'm';
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.toggledItem = new EventEmitter();
        this.content = ({ $implicit }) => TUI_DEFAULT_STRINGIFY($implicit);
        this.badgeHandler = item => Number(item);
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
    getItemContentContext($implicit) {
        return {
            $implicit,
        };
    }
    onCheckbox(value, item) {
        this.toggledItem.emit(item);
        this.updateValue(value
            ? [...this.value, item]
            : this.value.filter(arrItem => !this.identityMatcher(arrItem, item)));
    }
    isCheckboxEnabled(item) {
        return this.value.some(arrItem => this.identityMatcher(arrItem, item));
    }
};
TuiFilterComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "items", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Output()
], TuiFilterComponent.prototype, "toggledItem", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "content", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "badgeHandler", void 0);
__decorate([
    tuiPure
], TuiFilterComponent.prototype, "getItemContentContext", null);
TuiFilterComponent = __decorate([
    Component({
        selector: 'tui-filter',
        template: "<ng-container *ngFor=\"let item of items\">\n    <tui-checkbox-block\n        automation-id=\"tui-filter__checkbox\"\n        class=\"t-item\"\n        [disabled]=\"disabledItemHandler(item)\"\n        [hideCheckbox]=\"true\"\n        [ngModel]=\"isCheckboxEnabled(item)\"\n        [size]=\"size\"\n        (ngModelChange)=\"onCheckbox($event, item)\"\n    >\n        <div\n            automation-id=\"tui-filter__content\"\n            class=\"t-content\"\n        >\n            <div\n                polymorpheus-outlet\n                [content]=\"content\"\n                [context]=\"getItemContentContext(item)\"\n            ></div>\n            <tui-badge\n                *ngIf=\"badgeHandler(item) as badgeValue\"\n                automation-id=\"tui-filter__badge\"\n                tuiMode=\"onLight\"\n                class=\"t-badge\"\n                [class.t-badge_disabled]=\"disabledItemHandler(item)\"\n                [size]=\"size\"\n                [value]=\"badgeValue\"\n            ></tui-badge>\n        </div>\n    </tui-checkbox-block>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;margin-bottom:-.25rem}.t-content{display:flex;align-items:center}.t-item{margin-right:.25rem;margin-bottom:.25rem}.t-item:last-child,:host[data-size='l'] .t-item:last-child{margin-right:0}:host[data-size='l'] .t-item{margin-right:.5rem;margin-bottom:.5rem}.t-badge{margin-left:.25rem}.t-badge_disabled{opacity:var(--tui-disabled-opacity)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(ElementRef))
], TuiFilterComponent);
export { TuiFilterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9maWx0ZXIvIiwic291cmNlcyI6WyJmaWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsaUJBQWlCLEVBQ2pCLDRCQUE0QixFQUM1QixxQkFBcUIsRUFHckIsY0FBYyxFQUdkLE9BQU8sR0FDVixNQUFNLGVBQWUsQ0FBQztBQUl2Qiw0Q0FBNEM7QUFPNUMsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBc0IsU0FBUSwwQkFBNkI7SUFxQnBFLFlBSUksT0FBeUIsRUFDRSxpQkFBb0MsRUFDMUIsVUFBbUM7UUFFeEUsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRkcsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUF4QjVFLG9CQUFlLEdBQTBCLDRCQUE0QixDQUFDO1FBSXRFLFVBQUssR0FBaUIsRUFBRSxDQUFDO1FBS3pCLFNBQUksR0FBd0IsR0FBRyxDQUFDO1FBSWhDLHdCQUFtQixHQUF5QixvQkFBb0IsQ0FBQztRQUd4RCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFlN0MsWUFBTyxHQUE2QixDQUFDLEVBQUMsU0FBUyxFQUFrQyxFQUFFLEVBQUUsQ0FDakYscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFJckMsaUJBQVksR0FBMEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFUM0QsQ0FBQztJQVdELElBQUksT0FBTztRQUNQLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBR0QscUJBQXFCLENBQUMsU0FBWTtRQUM5QixPQUFPO1lBQ0gsU0FBUztTQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWMsRUFBRSxJQUFPO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQ1osS0FBSztZQUNELENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUM7WUFDdkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUMzRSxDQUFDO0lBQ04sQ0FBQztJQUVELGlCQUFpQixDQUFDLElBQU87UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztDQUNKLENBQUE7O1lBdkNnQixTQUFTLHVCQUhqQixRQUFRLFlBQ1IsSUFBSSxZQUNKLE1BQU0sU0FBQyxTQUFTO1lBRTZCLGlCQUFpQix1QkFBOUQsTUFBTSxTQUFDLGlCQUFpQjtZQUN3QixVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTs7QUF4QnRCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsY0FBYyxFQUFFOzJEQUNxRDtBQUl0RTtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTtpREFDUTtBQUt6QjtJQUhDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM3QixjQUFjLEVBQUU7Z0RBQ2U7QUFJaEM7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7K0RBQ2dEO0FBR2pFO0lBREMsTUFBTSxFQUFFO3VEQUNvQztBQWU3QztJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTttREFFb0I7QUFJckM7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7d0RBQzBDO0FBTzNEO0lBREMsT0FBTzsrREFLUDtBQWxEUSxrQkFBa0I7SUFOOUIsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLFlBQVk7UUFDdEIsd2tDQUFxQztRQUVyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDbEQsQ0FBQztJQXVCTyxXQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsV0FBQSxJQUFJLEVBQUUsQ0FBQTtJQUNOLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRWpCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDekIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7R0EzQmQsa0JBQWtCLENBZ0U5QjtTQWhFWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0LFxuICAgIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gICAgQWJzdHJhY3RUdWlNdWx0aXBsZUNvbnRyb2wsXG4gICAgQUxXQVlTX0ZBTFNFX0hBTkRMRVIsXG4gICAgaXNOYXRpdmVGb2N1c2VkSW4sXG4gICAgVFVJX0RFRkFVTFRfSURFTlRJVFlfTUFUQ0hFUixcbiAgICBUVUlfREVGQVVMVF9TVFJJTkdJRlksXG4gICAgVHVpQm9vbGVhbkhhbmRsZXIsXG4gICAgVHVpQ29udGV4dFdpdGhJbXBsaWNpdCxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICBUdWlIYW5kbGVyLFxuICAgIFR1aUlkZW50aXR5TWF0Y2hlcixcbiAgICB0dWlQdXJlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpU2l6ZUwsIFR1aVNpemVTfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbi8vIEBiYWQgVE9ETzogQWRkIGFjdGl2ZSB6b25lIHRvIHRyYWNrIGZvY3VzXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1maWx0ZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9maWx0ZXIudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZmlsdGVyLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRmlsdGVyQ29tcG9uZW50PFQ+IGV4dGVuZHMgQWJzdHJhY3RUdWlNdWx0aXBsZUNvbnRyb2w8VD4ge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpZGVudGl0eU1hdGNoZXI6IFR1aUlkZW50aXR5TWF0Y2hlcjxUPiA9IFRVSV9ERUZBVUxUX0lERU5USVRZX01BVENIRVI7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaXRlbXM6IHJlYWRvbmx5IFRbXSA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMIHwgVHVpU2l6ZVMgPSAnbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZGlzYWJsZWRJdGVtSGFuZGxlcjogVHVpQm9vbGVhbkhhbmRsZXI8VD4gPSBBTFdBWVNfRkFMU0VfSEFORExFUjtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHRvZ2dsZWRJdGVtID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpXG4gICAgICAgIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250cm9sLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8YW55PiA9ICh7JGltcGxpY2l0fTogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDx1bmtub3duPikgPT5cbiAgICAgICAgVFVJX0RFRkFVTFRfU1RSSU5HSUZZKCRpbXBsaWNpdCk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgYmFkZ2VIYW5kbGVyOiBUdWlIYW5kbGVyPFQsIG51bWJlcj4gPSBpdGVtID0+IE51bWJlcihpdGVtKTtcblxuICAgIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNOYXRpdmVGb2N1c2VkSW4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgZ2V0SXRlbUNvbnRlbnRDb250ZXh0KCRpbXBsaWNpdDogVCk6IFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VD4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGltcGxpY2l0LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG9uQ2hlY2tib3godmFsdWU6IGJvb2xlYW4sIGl0ZW06IFQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVkSXRlbS5lbWl0KGl0ZW0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICA/IFsuLi50aGlzLnZhbHVlLCBpdGVtXVxuICAgICAgICAgICAgICAgIDogdGhpcy52YWx1ZS5maWx0ZXIoYXJySXRlbSA9PiAhdGhpcy5pZGVudGl0eU1hdGNoZXIoYXJySXRlbSwgaXRlbSkpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlzQ2hlY2tib3hFbmFibGVkKGl0ZW06IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc29tZShhcnJJdGVtID0+IHRoaXMuaWRlbnRpdHlNYXRjaGVyKGFyckl0ZW0sIGl0ZW0pKTtcbiAgICB9XG59XG4iXX0=