var TuiInputPasswordComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiPure, } from '@taiga-ui/cdk';
import { HINT_CONTROLLER_PROVIDER, MODE_PROVIDER, TUI_HINT_WATCHED_CONTROLLER, TUI_MODE, TUI_TEXTFIELD_SIZE, TuiBrightness, TuiHintControllerDirective, TuiHintModeT, TuiPrimitiveTextfieldComponent, TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective, } from '@taiga-ui/core';
import { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';
import { combineLatest, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { TUI_INPUT_PASSWORD_OPTIONS, } from './input-password-options';
// @dynamic
let TuiInputPasswordComponent = TuiInputPasswordComponent_1 = class TuiInputPasswordComponent extends AbstractTuiControl {
    constructor(control, changeDetectorRef, textfieldSize, passwordTexts$, options, hintController, mode$) {
        super(control, changeDetectorRef);
        this.textfieldSize = textfieldSize;
        this.passwordTexts$ = passwordTexts$;
        this.options = options;
        this.hintController = hintController;
        this.mode$ = mode$;
        this.isPasswordHidden = true;
        this.computedMode$ = combineLatest([
            this.mode$.pipe(map(val => (val === 'onDark' ? 'onDark' : null))),
            this.hintController.change$.pipe(startWith(null), map(() => this.hintController.mode)),
        ]).pipe(map(([mode, controller]) => controller || mode), startWith(null));
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get icon() {
        return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;
    }
    get context() {
        return this.getContext(this.textfieldSize.size);
    }
    get inputType() {
        return this.isPasswordHidden || !this.interactive ? 'password' : 'text';
    }
    onValueChange(textValue) {
        this.updateValue(textValue);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    togglePasswordVisibility() {
        this.isPasswordHidden = !this.isPasswordHidden;
    }
    getFallbackValue() {
        return '';
    }
    getContext($implicit) {
        return { $implicit };
    }
};
TuiInputPasswordComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_PASSWORD_TEXTS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PASSWORD_OPTIONS,] }] },
    { type: TuiHintControllerDirective, decorators: [{ type: Inject, args: [TUI_HINT_WATCHED_CONTROLLER,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputPasswordComponent.prototype, "textfield", void 0);
__decorate([
    tuiPure
], TuiInputPasswordComponent.prototype, "getContext", null);
TuiInputPasswordComponent = TuiInputPasswordComponent_1 = __decorate([
    Component({
        selector: 'tui-input-password',
        template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [pseudoFocused]=\"pseudoFocused\"\n    [pseudoHovered]=\"pseudoHovered\"\n    [pseudoPressed]=\"pseudoPressed\"\n    [invalid]=\"computedInvalid\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [tuiTextfieldType]=\"inputType\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [iconContent]=\"interactive ? iconContent : null\"\n    [value]=\"value\"\n    (valueChange)=\"onValueChange($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n\n<ng-template\n    #iconContent=\"polymorpheus\"\n    [polymorpheus]=\"type\"\n>\n    <span\n        *ngIf=\"passwordTexts$ | async as texts\"\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"context\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                automation-id=\"tui-password__icon\"\n                tuiHintId=\"not_required\"\n                class=\"t-icon\"\n                [tuiHint]=\"texts[0] && texts[1] && hintContent\"\n                [tuiHintDirection]=\"hintController.direction\"\n                [tuiHintMode]=\"computedMode$ | async\"\n                [src]=\"icon\"\n                (click)=\"togglePasswordVisibility()\"\n            ></tui-svg>\n        </ng-template>\n\n        <ng-template\n            #hintContent=\"polymorpheus\"\n            polymorpheus\n        >\n            {{ isPasswordHidden ? texts[0] : texts[1] }}\n        </ng-template>\n    </span>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputPasswordComponent_1),
            },
            {
                provide: AbstractTuiControl,
                useExisting: forwardRef(() => TuiInputPasswordComponent_1),
            },
            HINT_CONTROLLER_PROVIDER,
            MODE_PROVIDER,
        ],
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon{cursor:pointer;pointer-events:auto}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_SIZE)),
    __param(3, Inject(TUI_PASSWORD_TEXTS)),
    __param(4, Inject(TUI_INPUT_PASSWORD_OPTIONS)),
    __param(5, Inject(TUI_HINT_WATCHED_CONTROLLER)),
    __param(6, Inject(TUI_MODE))
], TuiInputPasswordComponent);
export { TuiInputPasswordComponent };
//# sourceMappingURL=data:application/json;base64,