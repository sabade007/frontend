import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, nullableSame, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, tuiDefaultProp, TuiMonth, TuiMonthRange, tuiPure, } from '@taiga-ui/cdk';
import { TUI_CALENDAR_MONTHS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
const TODAY = TuiDay.currentLocal();
// @dynamic
let TuiCalendarMonthComponent = class TuiCalendarMonthComponent {
    constructor(months$) {
        this.months$ = months$;
        this.value = null;
        this.year = TODAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.monthClick = new EventEmitter();
        this.hoveredItemChange = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.isYearPickerShown = false;
        this.hoveredItem = null;
        this.pressedItem = null;
    }
    get isSingle() {
        return (this.value !== null &&
            (this.value instanceof TuiMonth || this.value.isSingleMonth));
    }
    get previousYearDisabled() {
        return this.year.yearSameOrBefore(this.min);
    }
    get nextYearDisabled() {
        return this.year.yearSameOrAfter(this.max);
    }
    getItemState(item) {
        const { disabledItemHandlerWithMinMax, pressedItem, hoveredItem } = this;
        if (disabledItemHandlerWithMinMax(item)) {
            return "disabled" /* Disabled */;
        }
        if (pressedItem === null || pressedItem === void 0 ? void 0 : pressedItem.monthSame(item)) {
            return "pressed" /* Pressed */;
        }
        if (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) {
            return "hovered" /* Hovered */;
        }
        return null;
    }
    getItemRange(item) {
        const { value, hoveredItem } = this;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiMonth) {
            return value.monthSame(item) ? "single" /* Single */ : null;
        }
        const theFirstOfRange = value.from.monthSame(item) && !value.isSingleMonth;
        const hoveredItemAfterFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) &&
            value.from.monthSame(item) &&
            value.isSingleMonth;
        const hoveredItemIsCandidateToBeFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.from)) &&
            value.isSingleMonth;
        if (theFirstOfRange || hoveredItemAfterFrom || hoveredItemIsCandidateToBeFrom) {
            return "start" /* Start */;
        }
        const theLastOfRange = value.to.monthSame(item) && !value.isSingleMonth;
        const hoveredItemBeforeTo = value.to.monthSame(item) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.to)) &&
            value.isSingleMonth;
        const hoveredItemIsCandidateToBeTo = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) &&
            value.isSingleMonth;
        if (theLastOfRange || hoveredItemBeforeTo || hoveredItemIsCandidateToBeTo) {
            return "end" /* End */;
        }
        return value.isSingleMonth && value.from.monthSame(item)
            ? "single" /* Single */
            : null;
    }
    getTuiMonth(monthNumber, yearNumber) {
        return new TuiMonth(yearNumber, monthNumber);
    }
    isItemToday(item) {
        return TODAY.monthSame(item);
    }
    isItemInsideRange(month) {
        const { value, hoveredItem } = this;
        if (value === null || value instanceof TuiMonth) {
            return false;
        }
        if (!value.isSingleMonth) {
            return value.from.monthSameOrBefore(month) && value.to.monthAfter(month);
        }
        if (hoveredItem === null) {
            return false;
        }
        const range = TuiMonthRange.sort(value.from, hoveredItem);
        return range.from.monthSameOrBefore(month) && range.to.monthAfter(month);
    }
    onPickerYearClick(year) {
        this.isYearPickerShown = false;
        if (this.year.yearSame(year)) {
            return;
        }
        this.updateActiveYear(year);
    }
    onItemClick(month) {
        if (this.disabledItemHandlerWithMinMax(month)) {
            return;
        }
        this.monthClick.emit(month);
    }
    onYearClick() {
        this.isYearPickerShown = true;
    }
    onNextYear() {
        this.updateActiveYear(this.year.append({ year: 1 }));
    }
    onPreviousYear() {
        this.updateActiveYear(this.year.append({ year: -1 }));
    }
    onItemHovered(hovered, item) {
        this.updateHoveredItem(hovered ? item : null);
    }
    onItemPressed(pressed, item) {
        this.updatePressedItem(pressed ? item : null);
    }
    calculateDisabledItemHandlerWithMinMax(disabledItemHandler, value, min, max) {
        return item => item.monthBefore(min) ||
            item.monthAfter(max) ||
            disabledItemHandler(item, { value });
    }
    get disabledItemHandlerWithMinMax() {
        return this.calculateDisabledItemHandlerWithMinMax(this.disabledItemHandler, this.value, this.min, this.max);
    }
    updateHoveredItem(month) {
        if (nullableSame(this.hoveredItem, month, (a, b) => a.monthSame(b))) {
            return;
        }
        this.hoveredItem = month;
        this.hoveredItemChange.emit(month);
    }
    updatePressedItem(item) {
        this.pressedItem = item;
    }
    updateActiveYear(year) {
        this.year = year;
        this.yearChange.emit(year);
    }
};
TuiCalendarMonthComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_CALENDAR_MONTHS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarMonthComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarMonthComponent.prototype, "year", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarMonthComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarMonthComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCalendarMonthComponent.prototype, "max", void 0);
__decorate([
    Output()
], TuiCalendarMonthComponent.prototype, "monthClick", void 0);
__decorate([
    Output()
], TuiCalendarMonthComponent.prototype, "hoveredItemChange", void 0);
__decorate([
    Output()
], TuiCalendarMonthComponent.prototype, "yearChange", void 0);
__decorate([
    HostBinding('class._single')
], TuiCalendarMonthComponent.prototype, "isSingle", null);
__decorate([
    tuiPure
], TuiCalendarMonthComponent.prototype, "calculateDisabledItemHandlerWithMinMax", null);
TuiCalendarMonthComponent = __decorate([
    Component({
        selector: 'tui-calendar-month',
        template: "<tui-scrollbar\n    *ngIf=\"isYearPickerShown; else monthSelect\"\n    class=\"t-scrollbar\"\n>\n    <tui-primitive-year-picker\n        [min]=\"min\"\n        [max]=\"max\"\n        [initialItem]=\"year\"\n        [value]=\"value\"\n        (yearClick)=\"onPickerYearClick($event)\"\n    ></tui-primitive-year-picker>\n</tui-scrollbar>\n<ng-template #monthSelect>\n    <tui-primitive-spin-button\n        [focusable]=\"false\"\n        [leftDisabled]=\"previousYearDisabled\"\n        [rightDisabled]=\"nextYearDisabled\"\n        (leftClick)=\"onPreviousYear()\"\n        (rightClick)=\"onNextYear()\"\n    >\n        <button\n            tuiLink\n            automation-id=\"tui-calendar-month__active-year\"\n            [tuiFocusable]=\"false\"\n            (click)=\"onYearClick()\"\n        >\n            {{ year.formattedYear }}\n        </button>\n    </tui-primitive-spin-button>\n    <div class=\"t-row\">\n        <ng-container *ngFor=\"let month of months$ | async; let index = index\">\n            <div\n                *tuiLet=\"getTuiMonth(index, year.year) as item\"\n                class=\"t-cell\"\n                [class.t-cell_today]=\"isItemToday(item)\"\n                [class.t-cell_interval]=\"isItemInsideRange(item)\"\n                [attr.data-range]=\"getItemRange(item)\"\n                [attr.data-state]=\"getItemState(item)\"\n                (tuiHoveredChange)=\"onItemHovered($event, item)\"\n                (tuiPressedChange)=\"onItemHovered($event, item)\"\n                (click)=\"onItemClick(item)\"\n            >\n                <div class=\"t-item\">{{ month }}</div>\n            </div>\n        </ng-container>\n    </div>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{font:var(--tui-font-text-m)}.t-row{position:relative;z-index:0;display:flex;justify-content:space-between;height:2.25rem}.t-item{position:relative;flex:1;line-height:2rem;border-radius:var(--tui-radius-m)}.t-item:after,.t-item:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.6875rem;text-align:center;outline:0;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent;box-sizing:content-box}.t-cell:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell_today:after{position:absolute;left:50%;transform:translate(-50%,0);content:'';bottom:.3125rem;height:.125rem;width:.75rem;border-radius:.375rem;background-color:var(--tui-text-02)}.t-cell_interval:before{background:var(--tui-base-02)}:host._single .t-cell_interval:before{background:var(--tui-secondary-hover)}.t-cell_interval:not(:last-child):before{right:-3.6875rem}.t-cell_interval:last-child:first-child:before{right:0}.t-cell_interval:first-child>.t-item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.t-cell_interval:last-child>.t-item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.t-cell_interval>.t-item{border-radius:0}.t-cell[data-range]:after{background-color:var(--tui-primary-text)}.t-cell[data-range]>.t-item{color:var(--tui-primary-text)}.t-cell[data-range]>.t-item:after,.t-cell[data-range]>.t-item:before{background-color:var(--tui-primary)}.t-cell[data-range][data-state=hovered]>.t-item:after,.t-cell[data-range][data-state=hovered]>.t-item:before{background-color:var(--tui-primary-hover)}.t-cell[data-range][data-state=pressed]>.t-item:after,.t-cell[data-range][data-state=pressed]>.t-item:before{background-color:var(--tui-primary-active)}.t-cell[data-range=end]>.t-item:before{left:.25rem}.t-cell[data-range=end]>.t-item:after{left:-2rem;right:100%;transform:translateX(1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-range=start]>.t-item:before{right:.25rem}.t-cell[data-range=start]>.t-item:after{left:100%;right:-2rem;transform:translateX(-1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-state=disabled]{pointer-events:none}.t-cell[data-state=disabled]>.t-item{opacity:.36}.t-cell[data-state=hovered]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-hover)}.t-cell[data-state=pressed]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-active)}:host{display:block;height:13.625rem;width:15.75rem;padding:1.125rem;box-sizing:content-box}.t-row{flex-wrap:wrap;margin-top:1.4375rem}.t-cell:nth-child(n+5){margin-top:1.75rem}.t-cell_interval:nth-child(4n):before{right:0}.t-scrollbar{height:inherit;width:inherit}"]
    }),
    __param(0, Inject(TUI_CALENDAR_MONTHS))
], TuiCalendarMonthComponent);
export { TuiCalendarMonthComponent };
//# sourceMappingURL=data:application/json;base64,