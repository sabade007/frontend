import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { PAGE_VISIBILITY } from '@ng-web-apis/common';
import { typedFromEvent } from '@taiga-ui/cdk';
import { BehaviorSubject, combineLatest, EMPTY, interval, merge, Observable } from 'rxjs';
import { mapTo, switchMap } from 'rxjs/operators';
let TuiCarouselDirective = class TuiCarouselDirective extends Observable {
    constructor(elementRef, visible$) {
        super(subscriber => this.output$.subscribe(subscriber));
        this.elementRef = elementRef;
        this.visible$ = visible$;
        this.duration$ = new BehaviorSubject(0);
        this.running$ = merge(typedFromEvent(this.elementRef.nativeElement, 'mouseenter').pipe(mapTo(false)), typedFromEvent(this.elementRef.nativeElement, 'touchstart').pipe(mapTo(false)), typedFromEvent(this.elementRef.nativeElement, 'touchend').pipe(mapTo(true)), typedFromEvent(this.elementRef.nativeElement, 'mouseleave').pipe(mapTo(true)), this.visible$);
        this.output$ = combineLatest([this.duration$, this.running$]).pipe(switchMap(([duration, running]) => duration && running ? interval(duration) : EMPTY));
    }
    set duration(duration) {
        this.duration$.next(duration);
    }
    set index(_) {
        this.duration$.next(this.duration$.value);
    }
};
TuiCarouselDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [PAGE_VISIBILITY,] }] }
];
__decorate([
    Input()
], TuiCarouselDirective.prototype, "duration", null);
__decorate([
    Input()
], TuiCarouselDirective.prototype, "index", null);
TuiCarouselDirective = __decorate([
    Directive({
        selector: 'tui-carousel',
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(PAGE_VISIBILITY))
], TuiCarouselDirective);
export { TuiCarouselDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2Nhcm91c2VsLyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN4RixPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBS2hELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQXFCLFNBQVEsVUFBbUI7SUEyQnpELFlBQ3lDLFVBQW1DLEVBQzlCLFFBQTZCO1FBRXZFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFIbkIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDOUIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUE1QjFELGNBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQyxhQUFRLEdBQUcsS0FBSyxDQUM3QixjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5RSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5RSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUMzRSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM3RSxJQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO1FBRWUsWUFBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQzlCLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNuRCxDQUNKLENBQUM7SUFpQkYsQ0FBQztJQWRELElBQUksUUFBUSxDQUFDLFFBQWdCO1FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFHRCxJQUFJLEtBQUssQ0FBQyxDQUFTO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBUUosQ0FBQTs7WUFMd0QsVUFBVSx1QkFBMUQsTUFBTSxTQUFDLFVBQVU7WUFDa0MsVUFBVSx1QkFBN0QsTUFBTSxTQUFDLGVBQWU7O0FBWDNCO0lBREMsS0FBSyxFQUFFO29EQUdQO0FBR0Q7SUFEQyxLQUFLLEVBQUU7aURBR1A7QUF6QlEsb0JBQW9CO0lBSGhDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxjQUFjO0tBQzNCLENBQUM7SUE2Qk8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7R0E3Qm5CLG9CQUFvQixDQWlDaEM7U0FqQ1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQQUdFX1ZJU0lCSUxJVFl9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0eXBlZEZyb21FdmVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgRU1QVFksIGludGVydmFsLCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcFRvLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktY2Fyb3VzZWwnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDYXJvdXNlbERpcmVjdGl2ZSBleHRlbmRzIE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHVyYXRpb24kID0gbmV3IEJlaGF2aW9yU3ViamVjdCgwKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcnVubmluZyQgPSBtZXJnZShcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJykucGlwZShtYXBUbyhmYWxzZSkpLFxuICAgICAgICB0eXBlZEZyb21FdmVudCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RvdWNoc3RhcnQnKS5waXBlKG1hcFRvKGZhbHNlKSksXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndG91Y2hlbmQnKS5waXBlKG1hcFRvKHRydWUpKSxcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWxlYXZlJykucGlwZShtYXBUbyh0cnVlKSksXG4gICAgICAgIHRoaXMudmlzaWJsZSQsXG4gICAgKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0JCA9IGNvbWJpbmVMYXRlc3QoW3RoaXMuZHVyYXRpb24kLCB0aGlzLnJ1bm5pbmckXSkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKChbZHVyYXRpb24sIHJ1bm5pbmddKSA9PlxuICAgICAgICAgICAgZHVyYXRpb24gJiYgcnVubmluZyA/IGludGVydmFsKGR1cmF0aW9uKSA6IEVNUFRZLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBkdXJhdGlvbihkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24kLm5leHQoZHVyYXRpb24pO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGluZGV4KF86IG51bWJlcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uJC5uZXh0KHRoaXMuZHVyYXRpb24kLnZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFBBR0VfVklTSUJJTElUWSkgcHJpdmF0ZSByZWFkb25seSB2aXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLm91dHB1dCQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG59XG4iXX0=