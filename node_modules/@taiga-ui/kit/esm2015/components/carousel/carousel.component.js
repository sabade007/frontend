import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, QueryList, TemplateRef, } from '@angular/core';
import { clamp, EMPTY_QUERY, TUI_IS_MOBILE, tuiDefaultProp, TuiItemDirective, tuiPure, } from '@taiga-ui/cdk';
// @dynamic
let TuiCarouselComponent = class TuiCarouselComponent {
    constructor(changeDetectorRef, elementRef, isMobile) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.isMobile = isMobile;
        this.translate = 0;
        this.draggable = false;
        this.itemsCount = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.transitioned = true;
    }
    get transform() {
        const x = this.transitioned ? this.computedTranslate : this.translate;
        return `translateX(${100 * x}%)`;
    }
    onTransitioned(transitioned) {
        this.transitioned = transitioned;
        if (!transitioned) {
            this.translate = this.computedTranslate;
        }
    }
    getStyle(itemsCount) {
        const percent = `${100 / itemsCount}%`;
        return {
            flexBasis: percent,
            minWidth: percent,
            maxWidth: percent,
        };
    }
    next() {
        this.updateIndex(this.index + 1);
    }
    prev() {
        this.updateIndex(this.index - 1);
    }
    isDisabled(index) {
        return index < this.index || index > this.index + this.itemsCount;
    }
    onIntersection({ intersectionRatio }, index) {
        if (intersectionRatio && intersectionRatio !== 1 && !this.transitioned) {
            this.updateIndex(index - Math.floor(this.itemsCount / 2));
        }
    }
    onScroll(delta) {
        if (!this.isMobile) {
            this.updateIndex(this.index + delta);
        }
    }
    onPan(x) {
        if (!this.computedDraggable) {
            return;
        }
        const { clientWidth } = this.elementRef.nativeElement;
        const min = 1 - this.items.length / this.itemsCount;
        this.translate = clamp(x / clientWidth + this.translate, min, 0);
    }
    onSwipe(direction) {
        if (direction === 'left') {
            this.next();
        }
        else if (direction === 'right') {
            this.prev();
        }
    }
    onAutoscroll() {
        this.updateIndex(this.index === this.items.length - 1 ? 0 : this.index + 1);
    }
    get computedTranslate() {
        return -this.index / this.itemsCount;
    }
    get computedDraggable() {
        return this.isMobile || this.draggable;
    }
    updateIndex(index) {
        this.index = clamp(index, 0, this.items.length - 1);
        this.indexChange.emit(this.index);
        this.changeDetectorRef.markForCheck();
    }
};
TuiCarouselComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] }
];
__decorate([
    Input(),
    HostBinding('class._draggable'),
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "draggable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "itemsCount", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "index", void 0);
__decorate([
    Output()
], TuiCarouselComponent.prototype, "indexChange", void 0);
__decorate([
    ContentChildren(TuiItemDirective, { read: TemplateRef })
], TuiCarouselComponent.prototype, "items", void 0);
__decorate([
    HostBinding('class._transitioned')
], TuiCarouselComponent.prototype, "transitioned", void 0);
__decorate([
    HostListener('touchstart', ['false']),
    HostListener('touchend', ['true']),
    HostListener('mousedown', ['false']),
    HostListener('document:mouseup.silent', ['true'])
], TuiCarouselComponent.prototype, "onTransitioned", null);
__decorate([
    tuiPure
], TuiCarouselComponent.prototype, "getStyle", null);
TuiCarouselComponent = __decorate([
    Component({
        selector: 'tui-carousel',
        template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div\n    class=\"t-scroller\"\n    (tuiCarouselScroll)=\"onScroll($event)\"\n>\n    <div\n        waIntersectionRoot\n        waIntersectionObserver\n        waIntersectionThreshold=\"0,1\"\n        waIntersectionRootMargin=\"100px 1000000px 100px -51%\"\n        class=\"t-wrapper\"\n    >\n        <div\n            class=\"t-items\"\n            [style.transform]=\"transform\"\n            (tuiPan)=\"onPan($event[0])\"\n            (tuiSwipe)=\"onSwipe($event.direction)\"\n            (tuiCarouselAutoscroll)=\"onAutoscroll()\"\n        >\n            <fieldset\n                *ngFor=\"let item of items; let i = index\"\n                class=\"t-item\"\n                [disabled]=\"isDisabled(i)\"\n                [ngStyle]=\"getStyle(itemsCount)\"\n                (waIntersectionObservee)=\"onIntersection($event[0], i)\"\n            >\n                <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n            </fieldset>\n        </div>\n    </div>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;overflow:hidden}:host._draggable{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host._draggable:hover{cursor:-webkit-grab;cursor:grab}:host._draggable:active{cursor:-webkit-grabbing;cursor:grabbing}.t-items{display:flex}:host._transitioned .t-items{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out}.t-item{display:flex;flex-direction:column;justify-content:center;padding:0 1.25rem;flex:1;min-width:100%;max-width:100%;box-sizing:border-box;border:none;margin:0}.t-wrapper{position:-webkit-sticky;position:sticky;left:0;right:0;min-width:100%;overflow:hidden}.t-scroller{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;overscroll-behavior-x:none;padding-bottom:2rem;margin-bottom:-2rem}.t-scroller::-webkit-scrollbar,.t-scroller::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}.t-scroller:after,.t-scroller:before{content:'';display:block;min-width:1rem}"]
    }),
    __param(0, Inject(ChangeDetectorRef)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TUI_IS_MOBILE))
], TuiCarouselComponent);
export { TuiCarouselComponent };
//# sourceMappingURL=data:application/json;base64,