var TuiInputSliderComponent_1;
import { __decorate, __param } from "tslib";
import { I18nPluralPipe } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, forwardRef, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { clamp, isNativeFocused, round, setNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiAssert, tuiDefaultProp, } from '@taiga-ui/cdk';
import { getFractionPartPadded, HINT_CONTROLLER_PROVIDER, TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiDecimalT, TuiSizeL, TuiTextfieldController, } from '@taiga-ui/core';
import { AbstractTuiInputSlider } from '@taiga-ui/kit/abstract';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TuiSliderComponent, tuiSliderOptionsProvider, } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
/**
 * Turn on new `InputSlider`'s version.
 * The new version will behave almost the same as `InputSlider` from the next major release.
 * @deprecated TODO remove me in v3.0 and make `InputSlider` always "new".
 */
let TuiNewInputSliderDirective = class TuiNewInputSliderDirective {
};
TuiNewInputSliderDirective = __decorate([
    Directive({
        selector: 'tui-input-slider[new]',
    })
], TuiNewInputSliderDirective);
export { TuiNewInputSliderDirective };
// @dynamic
let TuiInputSliderComponent = TuiInputSliderComponent_1 = 
/**
 * TODO replace `extends AbstractTuiInputSlider<number>` by `extends AbstractTuiControl<number> implements TuiWithOptionalMinMax<number>`
 * in v3.0
 */
class TuiInputSliderComponent extends AbstractTuiInputSlider {
    constructor(control, changeDetectorRef, controller, fromToTexts$, isNew, i18nPlural) {
        super(control, changeDetectorRef);
        this.controller = controller;
        this.fromToTexts$ = fromToTexts$;
        this.isNew = isNew;
        this.i18nPlural = i18nPlural;
        this.min = 0;
        this.max = Infinity;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 0;
        this.keySteps = null;
        this.valueContent = '';
        this.prefix = '';
        this.postfix = '';
        /**
         * @deprecated use `tuiTextfieldCustomContent` instead
         * TODO delete in v3.0
         */
        this.secondary = '';
    }
    get nativeFocusableElement() {
        var _a;
        return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled
            ? null
            : this.inputNumberRef.nativeFocusableElement;
    }
    get focused() {
        var _a;
        return (isNativeFocused(this.nativeFocusableElement) ||
            isNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null));
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get precision() {
        return getFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get showValueContent() {
        return Boolean(this.computedValueContent && !this.focused);
    }
    /**
     * TODO remove old property `size` in v3.0
     */
    get computedSize() {
        if (this.isNew) {
            tuiAssert.assert(this.controller.size !== 's', 
            // eslint-disable-next-line @typescript-eslint/quotes
            "Size 's' is not supported by this input.");
            return this.controller.size === 'l' ? 'l' : 'm';
        }
        return this.size;
    }
    /**
     * @deprecated for backward compatibility
     * TODO replace by just `this.valueContent` in v3.0
     */
    get computedValueContent() {
        return this.minLabel || this.maxLabel
            ? legacyMinMaxLabel(this)
            : this.valueContent;
    }
    focusTextInput() {
        var _a;
        const focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;
        if (focusableElement) {
            setNativeFocused(focusableElement);
        }
    }
    safelyUpdateValue(value) {
        this.updateValue(this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue));
    }
    onVerticalArrowKeyDown(coefficient) {
        if (this.readOnly || !this.step) {
            return;
        }
        const value = this.value + coefficient * this.step;
        if (value !== this.value) {
            this.safelyUpdateValue(value);
        }
        this.updateTextInputValue(this.valueGuard(value));
    }
    onSliderChange(newValue) {
        this.safelyUpdateValue(newValue);
        this.updateTextInputValue(this.value);
    }
    onFocused(focused) {
        const { value, textInputValue, safeCurrentValue, inputNumberRef } = this;
        if (!focused && textInputValue !== (inputNumberRef === null || inputNumberRef === void 0 ? void 0 : inputNumberRef.getFormattedValue(value))) {
            this.updateTextInputValue(value !== null && value !== void 0 ? value : safeCurrentValue);
        }
        this.updateFocused(focused);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    get textInputValue() {
        var _a;
        return ((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeValue) || '';
    }
    getFallbackValue() {
        return 0;
    }
    valueGuard(value) {
        const roundedValue = round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return clamp(roundedValue, this.min, this.max);
    }
    updateTextInputValue(value) {
        if (this.inputNumberRef) {
            this.inputNumberRef.nativeValue =
                this.inputNumberRef.getFormattedValue(value);
        }
    }
};
TuiInputSliderComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] },
    { type: TuiNewInputSliderDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiNewInputSliderDirective,] }] },
    { type: I18nPluralPipe, decorators: [{ type: Inject, args: [I18nPluralPipe,] }] }
];
__decorate([
    ViewChild(TuiInputNumberComponent)
], TuiInputSliderComponent.prototype, "inputNumberRef", void 0);
__decorate([
    ViewChild(TuiSliderComponent, { read: ElementRef })
], TuiInputSliderComponent.prototype, "sliderRef", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp(quantumAssertion, 'Quantum must be positive')
], TuiInputSliderComponent.prototype, "quantum", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "keySteps", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "valueContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "prefix", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "postfix", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "secondary", void 0);
TuiInputSliderComponent = TuiInputSliderComponent_1 = __decorate([
    Component({
        selector: 'tui-input-slider',
        template: "<tui-input-number\n    [min]=\"min\"\n    [max]=\"max\"\n    [precision]=\"precision\"\n    [decimal]=\"decimal\"\n    [prefix]=\"showValueContent ? '' : prefix\"\n    [postfix]=\"showValueContent ? '' : postfix || (value | i18nPlural: pluralizeMap || pluralizeMapFallback)\"\n    [tuiTextfieldCustomContent]=\"controller.customContent || deprecatedSecondary\"\n    [tuiTextfieldSize]=\"computedSize\"\n    [tuiTextfieldLabelOutside]=\"computedSize !== 'l'\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [pseudoFocused]=\"computedFocused\"\n    [pseudoHovered]=\"computedHovered\"\n    [pseudoPressed]=\"computedPressed\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n>\n    <ng-content></ng-content>\n    <div\n        *ngIf=\"showValueContent\"\n        polymorpheus-outlet\n        automation-id=\"tui-input-slider__value-content\"\n        [content]=\"computedValueContent\"\n        [context]=\"{$implicit: value}\"\n    ></div>\n</tui-input-number>\n\n<!--TODO: remove in v3.0-->\n<ng-template #deprecatedSecondary>{{ secondary }}</ng-template>\n\n<!--TODO: remove wrapper + ticks labels (leave only slider) in v3.0-->\n<div class=\"t-slider-wrapper\">\n    <input\n        tuiSlider\n        type=\"range\"\n        [tuiFocusable]=\"false\"\n        [max]=\"computedSteps\"\n        [segments]=\"segments\"\n        [keySteps]=\"computedKeySteps\"\n        [attr.disabled]=\"readOnly || computedDisabled || null\"\n        [ngModel]=\"value\"\n        (keyStepsInput)=\"onSliderChange($event)\"\n        (click)=\"focusTextInput()\"\n    />\n\n    <!--TODO delete ticks labels in v3.0-->\n    <div\n        *ngIf=\"segments && !isNew\"\n        class=\"t-ticks-labels\"\n    >\n        <span\n            *tuiRepeatTimes=\"let tickIndex of segments + 1\"\n            automation-id=\"tui-slider__segment\"\n        >\n            <span *ngIf=\"fromToTexts$ | async as fromToText\">\n                {{ getTickPrefix(tickIndex, segments, fromToText) }}\n                {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | tuiFormatNumber }}\n                <span *ngIf=\"segmentsPluralizeMap\">\n                    {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | i18nPlural: segmentsPluralizeMap }}\n                </span>\n            </span>\n        </span>\n    </div>\n</div>\n",
        host: {
            /**
             * TODO delete it in v3.0
             * Dont forget to clear html-tags
             */
            '[class._show-ticks-labels]': '!isNew',
        },
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            I18nPluralPipe,
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputSliderComponent_1),
            },
            tuiSliderOptionsProvider({ trackColor: 'transparent' }),
            HINT_CONTROLLER_PROVIDER,
            TEXTFIELD_CONTROLLER_PROVIDER,
        ],
        styles: [":host{position:relative;z-index:0;display:block;height:-webkit-max-content;height:-moz-max-content;height:max-content}:host._segmented._show-ticks-labels{border-bottom:26px solid transparent}.t-slider-wrapper{position:absolute;top:100%;left:calc(var(--tui-radius-m)/ 2);right:0;margin:-.5625rem 0 0}input[type=range]{border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}.t-ticks-labels{display:flex;margin:0 .5rem;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-ticks-labels>*{position:relative;flex:2;text-align:center}.t-ticks-labels>:first-child{left:-.5rem;flex:1;text-align:left}.t-ticks-labels>:last-child{right:-.5rem;flex:1;text-align:right}tui-input-slider+.t-ticks-labels{margin-left:calc(var(--tui-radius-m)/ 2 + .5rem)}tui-input-range+.t-ticks-labels,tui-range+.t-ticks-labels{margin-left:1rem;margin-right:1rem}tui-input-range+.t-ticks-labels>:first-child,tui-range+.t-ticks-labels>:first-child{left:-1rem}tui-input-range+.t-ticks-labels>:last-child,tui-range+.t-ticks-labels>:last-child{right:-1rem}"]
    })
    /**
     * TODO replace `extends AbstractTuiInputSlider<number>` by `extends AbstractTuiControl<number> implements TuiWithOptionalMinMax<number>`
     * in v3.0
     */
    ,
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER)),
    __param(3, Inject(TUI_FROM_TO_TEXTS)),
    __param(4, Optional()),
    __param(4, Inject(TuiNewInputSliderDirective)),
    __param(5, Inject(I18nPluralPipe))
], TuiInputSliderComponent);
export { TuiInputSliderComponent };
function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @deprecated helper for backward compatibility.
 * TODO remove in v3.0
 */
function legacyMinMaxLabel({ min, max, minLabel, maxLabel, i18nPlural, pluralizeMap, }) {
    return ({ $implicit: value }) => {
        const valueWithPlural = `${value} ${pluralizeMap ? i18nPlural.transform(value, pluralizeMap) : ''}`;
        switch (value) {
            case min:
                return minLabel || valueWithPlural;
            case max:
                return maxLabel || valueWithPlural;
            default:
                return valueWithPlural;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,