import { DOCUMENT } from '@angular/common';
import { ElementRef, InjectionToken, Optional } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { tuiCustomEvent, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiRouterLinkActiveService } from '@taiga-ui/core';
import { EMPTY, identity, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
export const TUI_TAB_ACTIVATE = `tui-tab-activate`;
export const TUI_TAB_EVENT = new InjectionToken(`Stream of tab activation events`);
export const TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            DOCUMENT,
            TuiRouterLinkActiveService,
            [new Optional(), MutationObserverService],
            [new Optional(), RouterLinkActive],
        ],
        useFactory: tabActiveFactory,
    },
    MODE_PROVIDER,
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function tabActiveFactory({ nativeElement }, documentRef, routerLinkActiveService, mutationObserverService, routerLinkActive) {
    const mutationObserver = routerLinkActive && mutationObserverService
        ? mutationObserverService.pipe(filter(() => routerLinkActive.isActive))
        : EMPTY;
    return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches(`button`) ? typedFromEvent(nativeElement, `click`) : EMPTY).pipe(map(() => nativeElement.dispatchEvent(tuiCustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }, documentRef))));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90YWJzLyIsInNvdXJjZXMiOlsidGFiL3RhYi5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0gsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUMzQyxpQ0FBaUMsQ0FDcEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFlO0lBQ3pDLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCO1FBQ0ksT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFO1lBQ0YsVUFBVTtZQUNWLFFBQVE7WUFDUiwwQkFBMEI7WUFDMUIsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDO1lBQ3pDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQztTQUNyQztRQUNELFVBQVUsRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxhQUFhO0NBQ2hCLENBQUM7QUFFRixnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixFQUFDLGFBQWEsRUFBMEIsRUFDeEMsV0FBcUIsRUFDckIsdUJBQTRDLEVBQzVDLHVCQUF1RCxFQUN2RCxnQkFBeUM7SUFFekMsTUFBTSxnQkFBZ0IsR0FDbEIsZ0JBQWdCLElBQUksdUJBQXVCO1FBQ3ZDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFaEIsT0FBTyxLQUFLLENBQ1IsZ0JBQWdCLEVBQ2hCLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDOUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNuRixDQUFDLElBQUksQ0FDRixHQUFHLENBQUMsR0FBRyxFQUFFLENBQ0wsYUFBYSxDQUFDLGFBQWEsQ0FDdkIsY0FBYyxDQUFDLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxFQUFFLFdBQVcsQ0FBQyxDQUNqRSxDQUNKLENBQ0osQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7TXV0YXRpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge1xuICAgIHR1aUN1c3RvbUV2ZW50LFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgdHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSLCBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtFTVBUWSwgaWRlbnRpdHksIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9UQUJfQUNUSVZBVEUgPSBgdHVpLXRhYi1hY3RpdmF0ZWA7XG5leHBvcnQgY29uc3QgVFVJX1RBQl9FVkVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPEV2ZW50Pj4oXG4gICAgYFN0cmVhbSBvZiB0YWIgYWN0aXZhdGlvbiBldmVudHNgLFxuKTtcbmV4cG9ydCBjb25zdCBUVUlfVEFCX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RBQl9FVkVOVCxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIERPQ1VNRU5ULFxuICAgICAgICAgICAgVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2UsXG4gICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlXSxcbiAgICAgICAgICAgIFtuZXcgT3B0aW9uYWwoKSwgUm91dGVyTGlua0FjdGl2ZV0sXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IHRhYkFjdGl2ZUZhY3RvcnksXG4gICAgfSxcbiAgICBNT0RFX1BST1ZJREVSLFxuXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHRhYkFjdGl2ZUZhY3RvcnkoXG4gICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgcm91dGVyTGlua0FjdGl2ZVNlcnZpY2U6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAgbXV0YXRpb25PYnNlcnZlclNlcnZpY2U6IE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlIHwgbnVsbCxcbiAgICByb3V0ZXJMaW5rQWN0aXZlOiBSb3V0ZXJMaW5rQWN0aXZlIHwgbnVsbCxcbik6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIGNvbnN0IG11dGF0aW9uT2JzZXJ2ZXIgPVxuICAgICAgICByb3V0ZXJMaW5rQWN0aXZlICYmIG11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlXG4gICAgICAgICAgICA/IG11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLnBpcGUoZmlsdGVyKCgpID0+IHJvdXRlckxpbmtBY3RpdmUuaXNBY3RpdmUpKVxuICAgICAgICAgICAgOiBFTVBUWTtcblxuICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgbXV0YXRpb25PYnNlcnZlcixcbiAgICAgICAgcm91dGVyTGlua0FjdGl2ZVNlcnZpY2UucGlwZShmaWx0ZXIoaWRlbnRpdHkpKSxcbiAgICAgICAgbmF0aXZlRWxlbWVudC5tYXRjaGVzKGBidXR0b25gKSA/IHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGBjbGlja2ApIDogRU1QVFksXG4gICAgKS5waXBlKFxuICAgICAgICBtYXAoKCkgPT5cbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICB0dWlDdXN0b21FdmVudChUVUlfVEFCX0FDVElWQVRFLCB7YnViYmxlczogdHJ1ZX0sIGRvY3VtZW50UmVmKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgKTtcbn1cbiJdfQ==