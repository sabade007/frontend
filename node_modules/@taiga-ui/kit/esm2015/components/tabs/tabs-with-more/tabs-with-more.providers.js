import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ElementRef, InjectionToken } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiResizeService } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { debounceTime, filter, startWith, takeUntil, tap } from 'rxjs/operators';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function tabsRefreshFactory(resize$, mutations$, destroy$, { body }, { nativeElement }, changeDetectorRef) {
    return merge(resize$, mutations$.pipe(tap(() => changeDetectorRef.detectChanges()))).pipe(
    // Ignoring cases when host is detached from DOM
    filter(() => body.contains(nativeElement)), debounceTime(0), startWith(null), takeUntil(destroy$));
}
// TODO: 3.0 remove in ivy compilation
export const MUTATION_CONFIG = {
    childList: true,
    subtree: true,
    characterData: true,
};
export const TABS_REFRESH = new InjectionToken(`Refresh stream`);
export const TABS_PROVIDERS = [
    TuiResizeService,
    TuiDestroyService,
    MutationObserverService,
    {
        provide: MUTATION_OBSERVER_INIT,
        useValue: MUTATION_CONFIG,
    },
    {
        provide: TABS_REFRESH,
        deps: [
            TuiResizeService,
            MutationObserverService,
            TuiDestroyService,
            DOCUMENT,
            ElementRef,
            ChangeDetectorRef,
        ],
        useFactory: tabsRefreshFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy13aXRoLW1vcmUucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3RhYnMvIiwic291cmNlcyI6WyJ0YWJzLXdpdGgtbW9yZS90YWJzLXdpdGgtbW9yZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsdUJBQXVCLEdBQzFCLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRSxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGtCQUFrQixDQUM5QixPQUE0QixFQUM1QixVQUErQixFQUMvQixRQUE2QixFQUM3QixFQUFDLElBQUksRUFBVyxFQUNoQixFQUFDLGFBQWEsRUFBbUIsRUFDakMsaUJBQW9DO0lBRXBDLE9BQU8sS0FBSyxDQUNSLE9BQU8sRUFDUCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQ2hFLENBQUMsSUFBSTtJQUNGLGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUMxQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ2YsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztBQUNOLENBQUM7QUFFRCxzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzNCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLElBQUk7SUFDYixhQUFhLEVBQUUsSUFBSTtDQUN0QixDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFzQixnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBZTtJQUN0QyxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2QjtRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFLGVBQWU7S0FDNUI7SUFDRDtRQUNJLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRTtZQUNGLGdCQUFnQjtZQUNoQix1QkFBdUI7WUFDdkIsaUJBQWlCO1lBQ2pCLFFBQVE7WUFDUixVQUFVO1lBQ1YsaUJBQWlCO1NBQ3BCO1FBQ0QsVUFBVSxFQUFFLGtCQUFrQjtLQUNqQztDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbn0gZnJvbSAnQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIFR1aVJlc2l6ZVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlYm91bmNlVGltZSwgZmlsdGVyLCBzdGFydFdpdGgsIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB0YWJzUmVmcmVzaEZhY3RvcnkoXG4gICAgcmVzaXplJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICBtdXRhdGlvbnMkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgIHtib2R5fTogRG9jdW1lbnQsXG4gICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPE5vZGU+LFxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbik6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgcmVzaXplJCxcbiAgICAgICAgbXV0YXRpb25zJC5waXBlKHRhcCgoKSA9PiBjaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCkpKSxcbiAgICApLnBpcGUoXG4gICAgICAgIC8vIElnbm9yaW5nIGNhc2VzIHdoZW4gaG9zdCBpcyBkZXRhY2hlZCBmcm9tIERPTVxuICAgICAgICBmaWx0ZXIoKCkgPT4gYm9keS5jb250YWlucyhuYXRpdmVFbGVtZW50KSksXG4gICAgICAgIGRlYm91bmNlVGltZSgwKSxcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICk7XG59XG5cbi8vIFRPRE86IDMuMCByZW1vdmUgaW4gaXZ5IGNvbXBpbGF0aW9uXG5leHBvcnQgY29uc3QgTVVUQVRJT05fQ09ORklHID0ge1xuICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlLFxuICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IFRBQlNfUkVGUkVTSCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPHVua25vd24+PihgUmVmcmVzaCBzdHJlYW1gKTtcbmV4cG9ydCBjb25zdCBUQUJTX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICAgICAgdXNlVmFsdWU6IE1VVEFUSU9OX0NPTkZJRyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVEFCU19SRUZSRVNILFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICAgICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG4gICAgICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgICAgIERPQ1VNRU5ULFxuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiB0YWJzUmVmcmVzaEZhY3RvcnksXG4gICAgfSxcbl07XG4iXX0=