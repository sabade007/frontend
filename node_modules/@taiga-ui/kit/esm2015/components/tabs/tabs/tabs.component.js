import { __decorate, __param } from "tslib";
import { AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, QueryList, Renderer2, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { EMPTY_QUERY, moveFocus, TUI_IS_ANDROID, TUI_IS_IOS, tuiDefaultProp, TuiDestroyService, TuiResizeService, } from '@taiga-ui/cdk';
import { TUI_MOBILE_AWARE } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { filter } from 'rxjs/operators';
import { TuiTabComponent } from '../tab/tab.component';
import { TUI_TAB_ACTIVATE } from '../tab/tab.providers';
import { TUI_TABS_OPTIONS } from '../tabs-options';
const TAB_ACTIVE_CLASS = '_active';
// TODO: 3.0 remove in ivy compilation
export const OBSERVER_INIT = {
    childList: true,
};
// @dynamic
let TuiTabsComponent = class TuiTabsComponent {
    constructor(options, elementRef, renderer, changeDetectorRef, resize$, isIos, isAndroid, mobileAware) {
        this.options = options;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.children = EMPTY_QUERY;
        this.underline = this.options.underline;
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        this.isIos = mobileAware && isIos;
        this.isAndroid = mobileAware && isAndroid;
        resize$.pipe(filter(() => this.underline)).subscribe(() => {
            changeDetectorRef.detectChanges();
        });
    }
    set activeItemIndexSetter(index) {
        this.activeItemIndex = index;
        this.scrollTo(this.tabs[index]);
    }
    get tabs() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        return this.tabs[this.activeItemIndex] || null;
    }
    onActivate(element) {
        const index = this.tabs.findIndex(tab => tab === element);
        if (index === this.activeItemIndex) {
            return;
        }
        this.activeItemIndexSetter = index;
        this.activeItemIndexChange.emit(index);
    }
    onKeyDownArrow(current, step) {
        const { tabs } = this;
        moveFocus(tabs.indexOf(current), tabs, step);
    }
    ngAfterViewChecked() {
        const { tabs, activeElement } = this;
        tabs.forEach(nativeElement => {
            this.renderer.removeClass(nativeElement, TAB_ACTIVE_CLASS);
            this.renderer.setAttribute(nativeElement, 'tabIndex', '-1');
        });
        if (activeElement) {
            this.renderer.addClass(activeElement, TAB_ACTIVE_CLASS);
            this.renderer.setAttribute(activeElement, 'tabIndex', '0');
        }
    }
    scrollTo(element) {
        if (!element) {
            return;
        }
        const { offsetLeft, offsetWidth } = element;
        const { nativeElement } = this.elementRef;
        if (offsetLeft < nativeElement.scrollLeft) {
            nativeElement.scrollLeft = offsetLeft;
        }
        if (offsetLeft + offsetWidth >
            nativeElement.scrollLeft + nativeElement.offsetWidth) {
            nativeElement.scrollLeft =
                offsetLeft + offsetWidth - nativeElement.offsetWidth;
        }
    }
};
TuiTabsComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TABS_OPTIONS,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_ANDROID,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_MOBILE_AWARE,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => TuiTabComponent))
], TuiTabsComponent.prototype, "children", void 0);
__decorate([
    Input(),
    HostBinding('class._underline'),
    tuiDefaultProp()
], TuiTabsComponent.prototype, "underline", void 0);
__decorate([
    Input('activeItemIndex')
], TuiTabsComponent.prototype, "activeItemIndexSetter", null);
__decorate([
    Output()
], TuiTabsComponent.prototype, "activeItemIndexChange", void 0);
__decorate([
    HostBinding('class._ios')
], TuiTabsComponent.prototype, "isIos", void 0);
__decorate([
    HostBinding('class._android')
], TuiTabsComponent.prototype, "isAndroid", void 0);
__decorate([
    HostListener(`${TUI_TAB_ACTIVATE}.stop`, ['$event.target'])
], TuiTabsComponent.prototype, "onActivate", null);
__decorate([
    HostListener('keydown.arrowRight.prevent', ['$event.target', '1']),
    HostListener('keydown.arrowLeft.prevent', ['$event.target', '-1'])
], TuiTabsComponent.prototype, "onKeyDownArrow", null);
TuiTabsComponent = __decorate([
    Component({
        selector: 'tui-tabs, nav[tuiTabs]',
        template: "<ng-container *ngIf=\"children.changes | async\"></ng-container>\n<ng-content></ng-content>\n<tui-underline\n    *ngIf=\"underline\"\n    class=\"t-underline\"\n    [element]=\"activeElement\"\n></tui-underline>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            TuiDestroyService,
            TuiResizeService,
            MutationObserverService,
            {
                provide: MUTATION_OBSERVER_INIT,
                useValue: OBSERVER_INIT,
            },
        ],
        styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:relative;z-index:0;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host._android{height:auto}:host._ios{height:auto;border:2px solid transparent;border-radius:.5625rem;background:var(--tui-link);box-shadow:none}.t-underline{z-index:-1}"]
    }),
    __param(0, Inject(TUI_TABS_OPTIONS)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(ChangeDetectorRef)),
    __param(4, Inject(TuiResizeService)),
    __param(5, Inject(TUI_IS_IOS)),
    __param(6, Inject(TUI_IS_ANDROID)),
    __param(7, Inject(TUI_MOBILE_AWARE))
], TuiTabsComponent);
export { TuiTabsComponent };
//# sourceMappingURL=data:application/json;base64,