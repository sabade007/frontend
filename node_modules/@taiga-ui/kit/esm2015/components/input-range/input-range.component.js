var TuiInputRangeComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, forwardRef, HostBinding, Inject, Input, Optional, QueryList, Self, ViewChild, ViewChildren, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { clamp, EMPTY_QUERY, isNativeFocused, isNativeFocusedIn, round, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_MOBILE, tuiDefaultProp, } from '@taiga-ui/cdk';
import { getFractionPartPadded, TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_APPEARANCE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiDecimalT, TuiSizeL, TuiTextfieldController, } from '@taiga-ui/core';
import { AbstractTuiInputSlider, quantumAssertion } from '@taiga-ui/kit/abstract';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TuiNewRangeDirective, TuiRangeComponent } from '@taiga-ui/kit/components/range';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
// @dynamic
let TuiInputRangeComponent = TuiInputRangeComponent_1 = 
/**
 * `AbstractTuiInputSlider` includes all legacy code (it can be deleted in v3.0)
 * TODO replace `extends AbstractTuiInputSlider<[number, number]>` by `extends AbstractTuiControl<[number, number]> implements TuiWithOptionalMinMax<number>`
 */
class TuiInputRangeComponent extends AbstractTuiInputSlider {
    constructor(control, changeDetectorRef, isMobile, appearance, elementRef, controller, isNew) {
        super(control, changeDetectorRef);
        this.isMobile = isMobile;
        this.appearance = appearance;
        this.elementRef = elementRef;
        this.controller = controller;
        this.isNew = isNew;
        this.inputNumberRefs = EMPTY_QUERY;
        this.rangeRef = null;
        this.min = 0;
        /* TODO: make `100` as default value (like in native sliders) */
        this.max = Infinity;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 0;
        this.keySteps = null;
        this.leftValueContent = '';
        this.rightValueContent = '';
        this.lastActiveSide = 'left';
    }
    get leftFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.first) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get rightFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.last) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get nativeFocusableElement() {
        return this.disabled
            ? null
            : this.leftFocusableElement || this.rightFocusableElement;
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
    get showLeftValueContent() {
        var _a;
        return Boolean((this.minLabel || this.leftValueContent) &&
            !isNativeFocused(this.leftFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'left'));
    }
    get showRightValueContent() {
        var _a;
        return Boolean((this.maxLabel || this.rightValueContent) &&
            !isNativeFocused(this.rightFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'right'));
    }
    get precision() {
        return getFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get computedSize() {
        return this.isNew && this.controller.size !== 's'
            ? this.controller.size
            : this.size;
    }
    get legacyLabelOutside() {
        return this.isNew ? this.controller.labelOutside : this.computedSize === 'm';
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onTextInputFocused(focused, right) {
        if (focused) {
            return;
        }
        const [leftTextInputRef, rightTextInputRef] = this.inputNumberRefs;
        const inputRef = right ? rightTextInputRef : leftTextInputRef;
        const valueIndex = right ? 1 : 0;
        if (!inputRef.nativeValue || inputRef.value !== this.value[valueIndex]) {
            this.updateTextInputValue(this.safeCurrentValue[valueIndex], right);
        }
    }
    changeByStep(event, [leftCoefficient, rightCoefficient]) {
        if (this.readOnly) {
            return;
        }
        event.preventDefault();
        const newValue = this.valueGuard([
            this.value[0] + leftCoefficient * this.step,
            this.value[1] + rightCoefficient * this.step,
        ]);
        const leftValueChanged = newValue[0] !== this.value[0];
        const rightValueChanged = newValue[1] !== this.value[1];
        if (leftValueChanged || rightValueChanged) {
            this.safelyUpdateValue(newValue);
            this.updateTextInputValue(newValue[rightValueChanged ? 1 : 0], rightValueChanged);
        }
    }
    onInputLeft(value) {
        this.safelyUpdateValue([value !== null && value !== void 0 ? value : this.safeCurrentValue[0], this.value[1]]);
    }
    onInputRight(value) {
        this.safelyUpdateValue([this.value[0], value !== null && value !== void 0 ? value : this.safeCurrentValue[1]]);
    }
    onRangeValue(value) {
        this.safelyUpdateValue(value);
        const rightValueChanged = this.lastActiveSide === 'right';
        this.updateTextInputValue(this.value[rightValueChanged ? 1 : 0], rightValueChanged);
    }
    focusToTextInput() {
        const element = this.lastActiveSide === 'left'
            ? this.leftFocusableElement
            : this.rightFocusableElement;
        if (!this.isMobile && element) {
            element.focus();
        }
    }
    onActiveThumbChange(activeThumb) {
        this.lastActiveSide = activeThumb;
    }
    getFallbackValue() {
        return [0, 0];
    }
    safelyUpdateValue(value) {
        this.updateValue(this.valueGuard(value));
    }
    valueGuard([leftValue, rightValue]) {
        const leftCalibratedValue = this.calibrate(leftValue);
        const rightCalibratedValue = this.calibrate(rightValue);
        return [
            Math.min(leftCalibratedValue, this.value[1]),
            Math.max(rightCalibratedValue, this.value[0]),
        ];
    }
    calibrate(value) {
        const roundedValue = round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return clamp(roundedValue, this.min, this.max);
    }
    updateTextInputValue(value, right) {
        const [leftInputRef, rightInputRef] = this.inputNumberRefs;
        const textInputRef = right ? rightInputRef : leftInputRef;
        if (textInputRef) {
            textInputRef.nativeValue = textInputRef.getFormattedValue(value);
        }
    }
};
TuiInputRangeComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_APPEARANCE,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] },
    { type: TuiNewRangeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiNewRangeDirective,] }] }
];
__decorate([
    ViewChildren(TuiInputNumberComponent)
], TuiInputRangeComponent.prototype, "inputNumberRefs", void 0);
__decorate([
    ViewChild(TuiRangeComponent)
], TuiInputRangeComponent.prototype, "rangeRef", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp(quantumAssertion, 'Quantum must be positive')
], TuiInputRangeComponent.prototype, "quantum", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "keySteps", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "leftValueContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "rightValueContent", void 0);
__decorate([
    HostBinding('class._label-outside')
], TuiInputRangeComponent.prototype, "legacyLabelOutside", null);
TuiInputRangeComponent = TuiInputRangeComponent_1 = __decorate([
    Component({
        selector: 'tui-input-range',
        template: "<tui-wrapper\n    class=\"t-wrapper\"\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"disabled\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered\"\n    [invalid]=\"computedInvalid\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-number\n        tuiTextfieldAppearance=\"none\"\n        automation-id=\"tui-input-range__left-input\"\n        class=\"t-left t-text-input\"\n        [min]=\"min\"\n        [max]=\"value[1]\"\n        [precision]=\"precision\"\n        [decimal]=\"decimal\"\n        [postfix]=\"pluralizeMap && !showLeftValueContent ? (value[0] | i18nPlural: pluralizeMap) : ''\"\n        [disabled]=\"computedDisabled\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldSize]=\"computedSize\"\n        [tuiTextfieldLabelOutside]=\"legacyLabelOutside\"\n        [ngModel]=\"value[0]\"\n        (ngModelChange)=\"onInputLeft($event)\"\n        (focusedChange)=\"onTextInputFocused($event, false)\"\n        (keydown.arrowUp)=\"changeByStep($event, [1, 0])\"\n        (keydown.arrowDown)=\"changeByStep($event, [-1, 0])\"\n    >\n        <ng-content></ng-content>\n        <div\n            *ngIf=\"showLeftValueContent\"\n            polymorpheus-outlet\n            [content]=\"minLabel ? legacyMinLabel : leftValueContent\"\n            [context]=\"{$implicit: value[0]}\"\n        ></div>\n    </tui-input-number>\n\n    <div class=\"t-right\">\n        <tui-input-number\n            tuiTextfieldAppearance=\"none\"\n            automation-id=\"tui-input-range__right-input\"\n            class=\"t-text-input\"\n            [min]=\"value[0]\"\n            [max]=\"max\"\n            [precision]=\"precision\"\n            [decimal]=\"decimal\"\n            [disabled]=\"computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [tuiTextfieldSize]=\"computedSize\"\n            [tuiTextfieldLabelOutside]=\"legacyLabelOutside\"\n            [ngModel]=\"value[1]\"\n            (ngModelChange)=\"onInputRight($event)\"\n            (focusedChange)=\"onTextInputFocused($event, true)\"\n            (keydown.arrowUp)=\"changeByStep($event, [0, 1])\"\n            (keydown.arrowDown)=\"changeByStep($event, [0, -1])\"\n        >\n            <div\n                *ngIf=\"showRightValueContent\"\n                polymorpheus-outlet\n                [content]=\"maxLabel ? legacyMaxLabel : rightValueContent\"\n                [context]=\"{$implicit: value[1]}\"\n            ></div>\n        </tui-input-number>\n\n        <!-- TODO replace by postfix of the right InputNumber (after fix https://github.com/Tinkoff/taiga-ui/issues/1193) -->\n        <span\n            *ngIf=\"!showRightValueContent && pluralizeMap\"\n            automation-id=\"tui-input-range__pluralize-right\"\n            class=\"t-pluralize-right\"\n        >\n            &nbsp;{{ value[1] | i18nPlural: pluralizeMap }}\n        </span>\n    </div>\n\n    <tui-range\n        class=\"t-slider\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [steps]=\"computedSteps\"\n        [segments]=\"segments\"\n        [keySteps]=\"keySteps\"\n        [pluralize]=\"segmentsPluralizeMap\"\n        [focusable]=\"false\"\n        [disabled]=\"readOnly || disabled\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onRangeValue($event)\"\n        (tuiPressedChange)=\"focusToTextInput()\"\n        (activeThumbChange)=\"onActiveThumbChange($event)\"\n    ></tui-range>\n</tui-wrapper>\n\n<!-- TODO: 3.0 remove -->\n<ng-template\n    #legacyMinLabel\n    let-value\n>\n    <ng-container *ngIf=\"value === min\">{{ minLabel }}</ng-container>\n    <ng-container *ngIf=\"value !== min\">\n        {{ value }}&nbsp;{{ value | i18nPlural: pluralizeMap || pluralizeMapFallback }}\n    </ng-container>\n</ng-template>\n\n<!-- TODO: 3.0 remove -->\n<ng-template\n    #legacyMaxLabel\n    let-value\n>\n    <ng-container *ngIf=\"value === max\">{{ maxLabel }}</ng-container>\n    <ng-container *ngIf=\"value !== max\">\n        {{ value }}&nbsp;{{ value | i18nPlural: pluralizeMap || pluralizeMapFallback }}\n    </ng-container>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputRangeComponent_1),
            },
            TEXTFIELD_CONTROLLER_PROVIDER,
        ],
        host: {
            /**
             * TODO: 3.0 delete it
             * Dont forget to clear html-tags
             */
            '[class._show-ticks-labels]': '!isNew',
        },
        styles: [".t-wrapper{position:relative}.t-left{width:100%}.t-right{position:absolute;right:0;top:0;display:flex;width:50%;height:100%;text-align:right}.t-right .t-text-input{flex:1}.t-text-input{text-align:inherit}.t-pluralize-right{display:flex;align-items:center;padding:1.125rem var(--tui-padding-m) 0 0;margin-left:-.75rem;font:var(--tui-font-text-s)}:host[data-size='l'] .t-pluralize-right{font:var(--tui-font-text-m);padding-top:1.25rem;margin-left:-1rem;padding-right:var(--tui-padding-l)}:host._label-outside .t-pluralize-right{padding-top:0}:host._disabled .t-pluralize-right{color:var(--tui-text-03)}:host{display:block;border-radius:var(--tui-radius-m)}:host._show-ticks-labels._segmented{border-bottom:26px solid transparent}.t-slider{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0;background:0 0}"]
    })
    /**
     * `AbstractTuiInputSlider` includes all legacy code (it can be deleted in v3.0)
     * TODO replace `extends AbstractTuiInputSlider<[number, number]>` by `extends AbstractTuiControl<[number, number]> implements TuiWithOptionalMinMax<number>`
     */
    ,
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_IS_MOBILE)),
    __param(3, Inject(TUI_TEXTFIELD_APPEARANCE)),
    __param(4, Inject(ElementRef)),
    __param(5, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER)),
    __param(6, Optional()),
    __param(6, Inject(TuiNewRangeDirective))
], TuiInputRangeComponent);
export { TuiInputRangeComponent };
export function tuiTextfieldAppearanceDirectiveFactory({ nativeElement, }) {
    return nativeElement.getAttribute('tuiTextfieldAppearance');
}
let TuiTextfieldAppearanceDirective = class TuiTextfieldAppearanceDirective {
};
TuiTextfieldAppearanceDirective = __decorate([
    Directive({
        selector: '[tuiTextfieldAppearance]',
        providers: [
            {
                provide: TUI_TEXTFIELD_APPEARANCE,
                deps: [ElementRef],
                useFactory: tuiTextfieldAppearanceDirectiveFactory,
            },
        ],
    })
], TuiTextfieldAppearanceDirective);
export { TuiTextfieldAppearanceDirective };
//# sourceMappingURL=data:application/json;base64,