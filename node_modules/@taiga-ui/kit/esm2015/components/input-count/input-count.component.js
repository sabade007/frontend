var TuiInputCountComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, AbstractTuiNullableControl, clamp, isNativeFocused, isPresent, setNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { formatNumber, TUI_NUMBER_FORMAT, TUI_TEXTFIELD_APPEARANCE, TUI_TEXTFIELD_SIZE, tuiCreateNumberMask, tuiMaskedNumberStringToNumber, TuiNumberFormatSettings, TuiPrimitiveTextfieldComponent, TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { TUI_INPUT_COUNT_OPTIONS } from './input-count-options';
// @dynamic
let TuiInputCountComponent = TuiInputCountComponent_1 = class TuiInputCountComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, appearance, textfieldSize, minusTexts$, isMobile, options, numberFormat) {
        super(control, changeDetectorRef);
        this.appearance = appearance;
        this.textfieldSize = textfieldSize;
        this.minusTexts$ = minusTexts$;
        this.isMobile = isMobile;
        this.options = options;
        this.numberFormat = numberFormat;
        this.unfinishedValue = '';
        this.step = this.options.step;
        this.min = this.options.min;
        this.max = this.options.max;
        this.hideButtons = this.options.hideButtons;
        this.prefix = '';
        this.postfix = this.options.postfix;
    }
    getMask(allowNegative) {
        return {
            mask: tuiCreateNumberMask({
                allowNegative,
                decimalSymbol: this.numberFormat.decimalSeparator,
                thousandSymbol: this.numberFormat.thousandSeparator,
            }),
            guide: false,
        };
    }
    // TODO: 3.0 Remove in v.3
    get buttonsHidden() {
        return this.hideButtons || this.appearance === 'table';
    }
    get iconUp() {
        return this.options.icons.up;
    }
    get iconDown() {
        return this.options.icons.down;
    }
    get nativeFocusableElement() {
        return !this.primitiveTextfield || this.computedDisabled
            ? null
            : this.primitiveTextfield.nativeFocusableElement;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get exampleText() {
        return String(this.min);
    }
    get computedValue() {
        return this.focused ? this.nativeValue : this.formatNumber(this.value);
    }
    get minusButtonDisabled() {
        return !this.interactive || (isPresent(this.value) && this.value <= this.min);
    }
    get plusButtonDisabled() {
        return !this.interactive || (isPresent(this.value) && this.value >= this.max);
    }
    onButtonMouseDown(event, disabled = false) {
        if (disabled || !this.nativeFocusableElement || this.isMobile) {
            return;
        }
        event.preventDefault();
        setNativeFocused(this.nativeFocusableElement);
    }
    onFocused(focused) {
        if (!focused) {
            this.onBlur();
        }
        this.updateFocused(focused);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    onValueChange() {
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = this.nativeValue;
            return;
        }
        this.unfinishedValue = null;
        const capped = this.capValue(this.nativeNumberValue);
        if (this.isNotNumber(capped)) {
            this.updateValue(null);
            return;
        }
        const newValue = this.formatNumber(capped);
        if (this.nativeValue !== newValue) {
            this.nativeValue = newValue;
        }
        this.updateValue(capped);
    }
    decreaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) - this.step;
        this.safeUpdateValue(newValue);
    }
    increaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) + this.step;
        this.safeUpdateValue(newValue);
    }
    onKeydown(event) {
        switch (event.key) {
            case 'ArrowUp':
            case 'Up':
                this.increaseValue();
                event.preventDefault();
                break;
            case 'ArrowDown':
            case 'Down':
                this.decreaseValue();
                event.preventDefault();
                break;
            default:
                break;
        }
    }
    get nativeNumberValue() {
        return parseInt(this.nativeValue.split(this.numberFormat.thousandSeparator).join(''), 10);
    }
    get nativeValue() {
        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    safeUpdateValue(newValue) {
        const value = clamp(newValue, this.min, this.max);
        this.updateValue(value);
        this.nativeValue = this.formatNumber(value);
    }
    capValue(value) {
        const capped = Math.min(value, this.max);
        return Number.isNaN(capped) || capped < this.min ? null : capped;
    }
    onBlur() {
        const nativeNumberValue = this.unfinishedValue
            ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (this.isNotNumber(nativeNumberValue)) {
            this.updateValue(null);
            return;
        }
        const value = Math.max(nativeNumberValue || 0, this.min);
        const formattedValue = this.formatNumber(value);
        this.nativeValue = formattedValue;
        this.updateValue(value);
        if (this.primitiveTextfield) {
            this.primitiveTextfield.value = formattedValue;
        }
    }
    formatNumber(value) {
        return this.isNotNumber(value)
            ? ''
            : formatNumber(value, null, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
    }
    isNotNumber(value) {
        return !isPresent(value) || Number.isNaN(value);
    }
    get isNativeValueNotFinished() {
        const { nativeNumberValue } = this;
        return nativeNumberValue < 0
            ? nativeNumberValue > this.max
            : nativeNumberValue < this.min;
    }
};
TuiInputCountComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_APPEARANCE,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_PLUS_MINUS_TEXTS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_COUNT_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_NUMBER_FORMAT,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputCountComponent.prototype, "primitiveTextfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "step", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "hideButtons", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "prefix", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "postfix", void 0);
__decorate([
    tuiPure
], TuiInputCountComponent.prototype, "getMask", null);
__decorate([
    HostBinding('class._hide-buttons')
], TuiInputCountComponent.prototype, "buttonsHidden", null);
__decorate([
    HostBinding('attr.data-size')
], TuiInputCountComponent.prototype, "size", null);
TuiInputCountComponent = TuiInputCountComponent_1 = __decorate([
    Component({
        selector: 'tui-input-count',
        template: "<tui-primitive-textfield\n    tuiValueAccessor\n    tuiTextfieldAutocomplete=\"off\"\n    tuiTextfieldInputMode=\"numeric\"\n    class=\"t-textfield\"\n    [tuiTextfieldMaxLength]=\"18\"\n    [pseudoFocused]=\"pseudoFocused\"\n    [pseudoHovered]=\"pseudoHovered\"\n    [pseudoPressed]=\"pseudoPressed\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [prefix]=\"prefix\"\n    [postfix]=\"postfix\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [textMask]=\"getMask(min < 0)\"\n    [invalid]=\"computedInvalid\"\n    [value]=\"computedValue\"\n    (valueChange)=\"onValueChange()\"\n    (keydown)=\"onKeydown($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n<ng-container *ngIf=\"!buttonsHidden\">\n    <ng-container *ngIf=\"minusTexts$ | async as texts\">\n        <section class=\"t-buttons\">\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__plus-button\"\n                size=\"s\"\n                class=\"t-button t-button_plus\"\n                [icon]=\"iconUp\"\n                [appearance]=\"options.appearance\"\n                [title]=\"texts[0]\"\n                [disabled]=\"plusButtonDisabled\"\n                [focusable]=\"false\"\n                (mousedown)=\"onButtonMouseDown($event, plusButtonDisabled)\"\n                (click)=\"increaseValue()\"\n            ></button>\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__minus-button\"\n                size=\"s\"\n                class=\"t-button t-button_minus\"\n                [icon]=\"iconDown\"\n                [appearance]=\"options.appearance\"\n                [disabled]=\"minusButtonDisabled\"\n                [focusable]=\"false\"\n                [title]=\"texts[1]\"\n                (mousedown)=\"onButtonMouseDown($event, minusButtonDisabled)\"\n                (click)=\"decreaseValue()\"\n            ></button>\n        </section>\n    </ng-container>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputCountComponent_1),
            },
            {
                provide: AbstractTuiControl,
                useExisting: forwardRef(() => TuiInputCountComponent_1),
            },
        ],
        styles: [":host{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}:host._disabled{pointer-events:none}:host[data-size='l']{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}:host:not(._hide-buttons) .t-textfield{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons{display:flex;flex-direction:column;margin-left:.125rem;height:100%}.t-buttons .t-button{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem)}.t-buttons .t-button_plus{margin-bottom:.125rem;border-radius:0 var(--tui-radius-m) 0 0}.t-buttons .t-button_minus{border-radius:0 0 var(--tui-radius-m)}:host[data-size='l'] .t-buttons .t-button{width:calc(var(--tui-height-l) * .75)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_APPEARANCE)),
    __param(3, Inject(TUI_TEXTFIELD_SIZE)),
    __param(4, Inject(TUI_PLUS_MINUS_TEXTS)),
    __param(5, Inject(TUI_IS_MOBILE)),
    __param(6, Inject(TUI_INPUT_COUNT_OPTIONS)),
    __param(7, Inject(TUI_NUMBER_FORMAT))
], TuiInputCountComponent);
export { TuiInputCountComponent };
//# sourceMappingURL=data:application/json;base64,