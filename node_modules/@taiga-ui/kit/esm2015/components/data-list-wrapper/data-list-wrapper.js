import { __decorate } from "tslib";
import { Directive, forwardRef, Input, ViewChildren, } from '@angular/core';
import { EMPTY_QUERY, isNativeFocused, isPresent, tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiOptionComponent, } from '@taiga-ui/core';
let AbstractTuiDataListWrapper = class AbstractTuiDataListWrapper {
    constructor(itemsHandlers) {
        this.itemsHandlers = itemsHandlers;
        this.optionsQuery = EMPTY_QUERY;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.emptyContent = ``;
        this.size = `m`;
        this.itemContent = ({ $implicit }) => this.itemsHandlers.stringify($implicit);
    }
    getContext($implicit, { nativeElement }) {
        return { $implicit, active: isNativeFocused(nativeElement) };
    }
    getOptions(includeDisabled = false) {
        return this.optionsQuery
            .toArray()
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(isPresent);
    }
};
AbstractTuiDataListWrapper.ctorParameters = () => [
    { type: undefined }
];
__decorate([
    ViewChildren(forwardRef(() => TuiOptionComponent))
], AbstractTuiDataListWrapper.prototype, "optionsQuery", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "emptyContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "itemContent", void 0);
AbstractTuiDataListWrapper = __decorate([
    Directive()
], AbstractTuiDataListWrapper);
export { AbstractTuiDataListWrapper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LXdyYXBwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvZGF0YS1saXN0LXdyYXBwZXIvIiwic291cmNlcyI6WyJkYXRhLWxpc3Qtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxVQUFVLEVBQ1YsS0FBSyxFQUVMLFlBQVksR0FDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxrQkFBa0IsR0FJckIsTUFBTSxnQkFBZ0IsQ0FBQztBQUt4QixJQUFzQiwwQkFBMEIsR0FBaEQsTUFBc0IsMEJBQTBCO0lBaUI1QyxZQUF5QyxhQUFrQztRQUFsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7UUFmeEQsaUJBQVksR0FBcUMsV0FBVyxDQUFDO1FBSWhGLHdCQUFtQixHQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7UUFJM0MsaUJBQVksR0FBd0IsRUFBRSxDQUFDO1FBSXZDLFNBQUksR0FBeUIsR0FBRyxDQUFDO1FBTWpDLGdCQUFXLEdBQW1ELENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFFLENBQzFFLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBTGtDLENBQUM7SUFPL0UsVUFBVSxDQUNOLFNBQVksRUFDWixFQUFDLGFBQWEsRUFBMEI7UUFFeEMsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELFVBQVUsQ0FBQyxrQkFBMkIsS0FBSztRQUN2QyxPQUFPLElBQUksQ0FBQyxZQUFZO2FBQ25CLE9BQU8sRUFBRTthQUNULE1BQU0sQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNwRCxHQUFHLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSixDQUFBOzs7O0FBcENHO0lBREMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dFQUM2QjtBQUloRjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTt1RUFFMEI7QUFJM0M7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7Z0VBQ3NCO0FBSXZDO0lBRkMsS0FBSyxFQUFFO0lBQ1AsY0FBYyxFQUFFO3dEQUNnQjtBQU1qQztJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTsrREFFMkI7QUF0QjFCLDBCQUEwQjtJQUQvQyxTQUFTLEVBQUU7R0FDVSwwQkFBMEIsQ0FzQy9DO1NBdENxQiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSW5wdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0VNUFRZX1FVRVJZLCBpc05hdGl2ZUZvY3VzZWQsIGlzUHJlc2VudCwgdHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUdWlPcHRpb25Db21wb25lbnQsXG4gICAgVHVpU2l6ZUwsXG4gICAgVHVpU2l6ZVhTLFxuICAgIFR1aVZhbHVlQ29udGVudENvbnRleHQsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VHVpSXRlbXNIYW5kbGVyc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aURhdGFMaXN0V3JhcHBlcjxUPiB7XG4gICAgQFZpZXdDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aU9wdGlvbkNvbXBvbmVudCkpXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnNRdWVyeTogUXVlcnlMaXN0PFR1aU9wdGlvbkNvbXBvbmVudDxUPj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlJdGVtc0hhbmRsZXJzPFQ+WydkaXNhYmxlZEl0ZW1IYW5kbGVyJ10gPVxuICAgICAgICB0aGlzLml0ZW1zSGFuZGxlcnMuZGlzYWJsZWRJdGVtSGFuZGxlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBlbXB0eUNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQgPSBgYDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplTCB8IFR1aVNpemVYUyA9IGBtYDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgaXRlbXNIYW5kbGVyczogVHVpSXRlbXNIYW5kbGVyczxUPikge31cblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpdGVtQ29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlWYWx1ZUNvbnRlbnRDb250ZXh0PFQ+PiA9ICh7JGltcGxpY2l0fSkgPT5cbiAgICAgICAgdGhpcy5pdGVtc0hhbmRsZXJzLnN0cmluZ2lmeSgkaW1wbGljaXQpO1xuXG4gICAgZ2V0Q29udGV4dChcbiAgICAgICAgJGltcGxpY2l0OiBULFxuICAgICAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICk6IFR1aVZhbHVlQ29udGVudENvbnRleHQ8VD4ge1xuICAgICAgICByZXR1cm4geyRpbXBsaWNpdCwgYWN0aXZlOiBpc05hdGl2ZUZvY3VzZWQobmF0aXZlRWxlbWVudCl9O1xuICAgIH1cblxuICAgIGdldE9wdGlvbnMoaW5jbHVkZURpc2FibGVkOiBib29sZWFuID0gZmFsc2UpOiByZWFkb25seSBUW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zUXVlcnlcbiAgICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAgIC5maWx0ZXIoKHtkaXNhYmxlZH0pID0+IGluY2x1ZGVEaXNhYmxlZCB8fCAhZGlzYWJsZWQpXG4gICAgICAgICAgICAubWFwKCh7dmFsdWV9KSA9PiB2YWx1ZSlcbiAgICAgICAgICAgIC5maWx0ZXIoaXNQcmVzZW50KTtcbiAgICB9XG59XG4iXX0=