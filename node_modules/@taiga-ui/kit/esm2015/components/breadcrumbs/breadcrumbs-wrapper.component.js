var TuiBreadcrumbsWrapperComponent_1;
import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, HostBinding, Input, TemplateRef, } from '@angular/core';
import { EMPTY_QUERY, tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core';
import { Subject } from 'rxjs';
import { TuiBreadcrumbDirective } from './breadcrumb.directive';
let TuiBreadcrumbsWrapperComponent = TuiBreadcrumbsWrapperComponent_1 = class TuiBreadcrumbsWrapperComponent {
    constructor() {
        this.size = 'm';
        this.items = EMPTY_QUERY;
        this.change$ = new Subject();
        this.mode = 'onLight';
    }
    ngOnChanges() { }
};
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiBreadcrumbsWrapperComponent.prototype, "size", void 0);
__decorate([
    ContentChildren(TuiBreadcrumbDirective, { read: TemplateRef })
], TuiBreadcrumbsWrapperComponent.prototype, "items", void 0);
TuiBreadcrumbsWrapperComponent = TuiBreadcrumbsWrapperComponent_1 = __decorate([
    Component({
        selector: 'tui-breadcrumbs:not([items])',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<ng-container *ngFor=\"let item of items; let last = last\">\n    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n    <tui-svg\n        *ngIf=\"!last\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-icon\"\n    ></tui-svg>\n</ng-container>\n",
        providers: [
            {
                provide: TuiModeDirective,
                useExisting: forwardRef(() => TuiBreadcrumbsWrapperComponent_1),
            },
        ],
        styles: [":host{display:flex;align-items:center;height:2.5rem;font:var(--tui-font-text-s)}:host[data-size='l']{font:var(--tui-font-text-m)}.t-icon{margin:0 .25rem;color:var(--tui-text-03)}"]
    })
], TuiBreadcrumbsWrapperComponent);
export { TuiBreadcrumbsWrapperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMtd3JhcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvYnJlYWRjcnVtYnMvIiwic291cmNlcyI6WyJicmVhZGNydW1icy13cmFwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULGVBQWUsRUFDZixVQUFVLEVBQ1YsV0FBVyxFQUNYLEtBQUssRUFFTCxXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLGdCQUFnQixFQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWM5RCxJQUFhLDhCQUE4QixzQ0FBM0MsTUFBYSw4QkFBOEI7SUFBM0M7UUFJSSxTQUFJLEdBQWEsR0FBRyxDQUFDO1FBR1osVUFBSyxHQUFvRCxXQUFXLENBQUM7UUFFckUsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDOUIsU0FBSSxHQUFHLFNBQVMsQ0FBQztJQUc5QixDQUFDO0lBREcsV0FBVyxLQUFVLENBQUM7Q0FDekIsQ0FBQTtBQVRHO0lBSEMsS0FBSyxFQUFFO0lBQ1AsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQzdCLGNBQWMsRUFBRTs0REFDSTtBQUdyQjtJQURDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQzs2REFDaUI7QUFQckUsOEJBQThCO0lBWjFDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSw4QkFBOEI7UUFDeEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsZ1ZBQWtEO1FBRWxELFNBQVMsRUFBRTtZQUNQO2dCQUNJLE9BQU8sRUFBRSxnQkFBZ0I7Z0JBQ3pCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQThCLENBQUM7YUFDaEU7U0FDSjs7S0FDSixDQUFDO0dBQ1csOEJBQThCLENBYTFDO1NBYlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RU1QVFlfUVVFUlksIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpTW9kZURpcmVjdGl2ZSwgVHVpU2l6ZUx9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpQnJlYWRjcnVtYkRpcmVjdGl2ZX0gZnJvbSAnLi9icmVhZGNydW1iLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWJyZWFkY3J1bWJzOm5vdChbaXRlbXNdKScsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWJzLXdyYXBwZXIudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYnJlYWRjcnVtYnMtd3JhcHBlci5zdHlsZS5sZXNzJ10sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFR1aU1vZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlCcmVhZGNydW1ic1dyYXBwZXJDb21wb25lbnQpLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUJyZWFkY3J1bWJzV3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIFR1aU1vZGVEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplTCA9ICdtJztcblxuICAgIEBDb250ZW50Q2hpbGRyZW4oVHVpQnJlYWRjcnVtYkRpcmVjdGl2ZSwge3JlYWQ6IFRlbXBsYXRlUmVmfSlcbiAgICByZWFkb25seSBpdGVtczogUXVlcnlMaXN0PFRlbXBsYXRlUmVmPFJlY29yZDxzdHJpbmcsIHVua25vd24+Pj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIHJlYWRvbmx5IGNoYW5nZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHJlYWRvbmx5IG1vZGUgPSAnb25MaWdodCc7XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHt9XG59XG4iXX0=