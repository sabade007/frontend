import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, getClipboardDataText, isNativeFocused, setNativeFocused, tuiDefaultProp, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { formatPhone, TUI_MASK_SYMBOLS_REGEXP, TUI_TEXTFIELD_CLEANER, TuiDataListDirective, TuiDataListHost, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiTextfieldCleanerDirective, TuiTextMaskOptions, } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { TUI_INPUT_PHONE_OPTIONS } from './input-phone.options';
import { INPUT_PHONE_PROVIDERS, SELECTION_STREAM } from './input-phone.providers';
// @dynamic
let TuiInputPhoneComponent = class TuiInputPhoneComponent extends AbstractTuiControl {
    constructor(control, changeDetectorRef, selection$, textfieldCleaner, options) {
        super(control, changeDetectorRef);
        this.textfieldCleaner = textfieldCleaner;
        this.options = options;
        this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;
        this.allowText = this.options.allowText;
        this.search = '';
        this.searchChange = new EventEmitter();
        this.textMaskOptions = {
            mask: value => this.allowText && !this.value && isText(value) && value !== '+'
                ? false
                : [
                    ...this.countryCode.split(''),
                    ' ',
                    ...this.phoneMaskAfterCountryCode
                        .replace(/[^#\- ()]+/g, '')
                        .split('')
                        .map(item => (item === '#' ? /\d/ : item)),
                ],
            pipe: value => {
                if (this.allowText) {
                    return value;
                }
                return value === '' && this.focused && !this.readOnly
                    ? `${this.countryCode} `
                    : value.replace(/-$/, '');
            },
            guide: false,
        };
        this.countryCode = this.options.countryCode;
        this.open = false;
        selection$.subscribe(() => {
            this.setCaretPosition();
        });
    }
    set countryCodeSetter(countryCode) {
        this.updateValueWithNewCountryCode(countryCode);
        this.countryCode = countryCode;
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (isNativeFocused(this.nativeFocusableElement) ||
            (!!this.dropdown && this.dropdown.focused));
    }
    get computedValue() {
        return this.value
            ? formatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode)
            : this.search || '';
    }
    get inputMode() {
        return this.allowText ? 'text' : 'numeric';
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    get canClean() {
        return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onDrop(event) {
        if (!event.dataTransfer) {
            return;
        }
        this.setValueWithoutPrefix(event.dataTransfer.getData('text'));
        event.preventDefault();
    }
    onPaste(event) {
        this.setValueWithoutPrefix(getClipboardDataText(event));
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (active && !this.computedValue && !this.readOnly && !this.allowText) {
            this.updateSearch(this.countryCode);
            return;
        }
        if (this.computedValue === this.countryCode ||
            (this.search !== null &&
                Number.isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10)))) {
            this.updateSearch('');
        }
    }
    onBackspace(event) {
        const target = event.target;
        if ((target.selectionStart || 0) <= this.nonRemovableLength &&
            target.selectionStart === target.selectionEnd) {
            event.preventDefault();
        }
    }
    onValueChange(value) {
        value = value === '' ? this.countryCode : value;
        const parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, '');
        this.updateSearch(parsed);
        this.updateValue(parsed === this.countryCode || isText(parsed) ? '' : parsed);
        this.open = true;
    }
    handleOption(item) {
        this.focusInput();
        this.updateValue(item);
        this.updateSearch('');
        this.open = false;
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.updateSearch('');
    }
    getFallbackValue() {
        return '';
    }
    get caretIsInForbiddenArea() {
        const { nativeFocusableElement } = this;
        if (!nativeFocusableElement) {
            return false;
        }
        const { selectionStart, selectionEnd } = nativeFocusableElement;
        return (isNativeFocused(nativeFocusableElement) &&
            selectionStart !== null &&
            selectionStart < this.nonRemovableLength &&
            selectionStart === selectionEnd);
    }
    get nonRemovableLength() {
        return this.isTextValue ? 0 : this.countryCode.length + 1;
    }
    get maxPhoneLength() {
        return (this.countryCode.length +
            this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length);
    }
    get isTextValue() {
        return !!this.search && isText(this.search);
    }
    setCaretPosition() {
        if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {
            this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);
        }
    }
    setValueWithoutPrefix(value) {
        if (this.readOnly) {
            return;
        }
        this.open = true;
        this.updateValue(this.cleanValue(value));
        this.updateSearch(this.allowText && isText(value)
            ? value
            : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));
    }
    cleanValue(value) {
        const reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));
        const oldValueExist = this.value.length > this.countryCode.length &&
            this.value.length < this.maxPhoneLength;
        const newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;
        const cleanNewValue = value.replace(/[^0-9]+/g, '');
        const selectionLength = String(getSelection()).length;
        if (oldValueExist && selectionLength === 0) {
            return `${this.value}${cleanNewValue}`.slice(0, this.maxPhoneLength);
        }
        if (newValueLength < this.maxPhoneLength - 1) {
            return `${this.countryCode}${cleanNewValue}`.slice(0, this.maxPhoneLength);
        }
        return `${this.countryCode}${cleanNewValue.replace(reg, '')}`.slice(0, this.maxPhoneLength);
    }
    focusInput() {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, true);
        }
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    updateValueWithNewCountryCode(newCountryCode) {
        if (!this.isTextValue) {
            this.updateValue(this.value.replace(this.countryCode, newCountryCode));
        }
    }
};
TuiInputPhoneComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [SELECTION_STREAM,] }] },
    { type: TuiTextfieldCleanerDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_CLEANER,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PHONE_OPTIONS,] }] }
];
__decorate([
    ViewChild(TuiHostedDropdownComponent)
], TuiInputPhoneComponent.prototype, "dropdown", void 0);
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputPhoneComponent.prototype, "textfield", void 0);
__decorate([
    Input('countryCode'),
    tuiRequiredSetter()
], TuiInputPhoneComponent.prototype, "countryCodeSetter", null);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "phoneMaskAfterCountryCode", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "allowText", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "search", void 0);
__decorate([
    Output()
], TuiInputPhoneComponent.prototype, "searchChange", void 0);
__decorate([
    ContentChild(TuiDataListDirective, { read: TemplateRef })
], TuiInputPhoneComponent.prototype, "datalist", void 0);
TuiInputPhoneComponent = __decorate([
    Component({
        selector: 'tui-input-phone',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        tuiTextfieldType=\"tel\"\n        class=\"t-textfield\"\n        [tuiTextfieldInputMode]=\"inputMode\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [pseudoFocused]=\"computedFocused\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (drop)=\"onDrop($event)\"\n        (keydown.backspace)=\"onBackspace($event)\"\n        (paste.prevent)=\"onPaste($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: INPUT_PHONE_PROVIDERS,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(SELECTION_STREAM)),
    __param(3, Inject(TUI_TEXTFIELD_CLEANER)),
    __param(4, Inject(TUI_INPUT_PHONE_OPTIONS))
], TuiInputPhoneComponent);
export { TuiInputPhoneComponent };
function isText(value) {
    return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));
}
//# sourceMappingURL=data:application/json;base64,