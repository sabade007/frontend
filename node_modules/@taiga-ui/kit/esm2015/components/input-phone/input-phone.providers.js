import { DOCUMENT } from '@angular/common';
import { forwardRef, InjectionToken } from '@angular/core';
import { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiDestroyService, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST } from '@taiga-ui/core';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { fromEvent, merge } from 'rxjs';
import { flatMap, startWith, takeUntil, windowToggle } from 'rxjs/operators';
import { TuiInputPhoneComponent } from './input-phone.component';
export const SELECTION_STREAM = new InjectionToken(`A stream of selection changes`);
export const INPUT_PHONE_PROVIDERS = [
    TuiDestroyService,
    FIXED_DROPDOWN_CONTROLLER_PROVIDER,
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(() => TuiInputPhoneComponent),
    },
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiInputPhoneComponent),
    },
    {
        provide: TUI_DATA_LIST_HOST,
        useExisting: forwardRef(() => TuiInputPhoneComponent),
    },
    {
        provide: SELECTION_STREAM,
        deps: [TuiDestroyService, DOCUMENT],
        useFactory: selectionStreamFactory,
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function selectionStreamFactory(destroy$, documentRef) {
    return fromEvent(documentRef, `selectionchange`).pipe(windowToggle(merge(fromEvent(documentRef, `mouseup`), fromEvent(documentRef, `keydown`)), () => fromEvent(documentRef, `mousedown`)), flatMap(windowed$ => windowed$.pipe(startWith(null))), takeUntil(destroy$));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcGhvbmUucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2lucHV0LXBob25lLyIsInNvdXJjZXMiOlsiaW5wdXQtcGhvbmUucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLDJCQUEyQixFQUMzQixpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGtDQUFrQyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDM0UsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRS9ELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUM5QywrQkFBK0IsQ0FDbEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ2pDLGlCQUFpQjtJQUNqQixrQ0FBa0M7SUFDbEM7UUFDSSxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUM7S0FDeEQ7SUFDRDtRQUNJLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztLQUN4RDtJQUNEO1FBQ0ksT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDO0tBQ3hEO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQztRQUNuQyxVQUFVLEVBQUUsc0JBQXNCO0tBQ3JDO0NBQ0osQ0FBQztBQUVGLGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsc0JBQXNCLENBQ2xDLFFBQTZCLEVBQzdCLFdBQXFCO0lBRXJCLE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FDakQsWUFBWSxDQUNSLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFDM0UsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FDNUMsRUFDRCxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3JELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtmb3J3YXJkUmVmLCBJbmplY3Rpb25Ub2tlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0VHVpQ29udHJvbCxcbiAgICBUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0hPU1R9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7RklYRURfRFJPUERPV05fQ09OVFJPTExFUl9QUk9WSURFUn0gZnJvbSAnQHRhaWdhLXVpL2tpdC9wcm92aWRlcnMnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmxhdE1hcCwgc3RhcnRXaXRoLCB0YWtlVW50aWwsIHdpbmRvd1RvZ2dsZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUlucHV0UGhvbmVDb21wb25lbnR9IGZyb20gJy4vaW5wdXQtcGhvbmUuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IFNFTEVDVElPTl9TVFJFQU0gPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oXG4gICAgYEEgc3RyZWFtIG9mIHNlbGVjdGlvbiBjaGFuZ2VzYCxcbik7XG5leHBvcnQgY29uc3QgSU5QVVRfUEhPTkVfUFJPVklERVJTID0gW1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIEZJWEVEX0RST1BET1dOX0NPTlRST0xMRVJfUFJPVklERVIsXG4gICAge1xuICAgICAgICBwcm92aWRlOiBBYnN0cmFjdFR1aUNvbnRyb2wsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUlucHV0UGhvbmVDb21wb25lbnQpLFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUlucHV0UGhvbmVDb21wb25lbnQpLFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfREFUQV9MSVNUX0hPU1QsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUlucHV0UGhvbmVDb21wb25lbnQpLFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBTRUxFQ1RJT05fU1RSRUFNLFxuICAgICAgICBkZXBzOiBbVHVpRGVzdHJveVNlcnZpY2UsIERPQ1VNRU5UXSxcbiAgICAgICAgdXNlRmFjdG9yeTogc2VsZWN0aW9uU3RyZWFtRmFjdG9yeSxcbiAgICB9LFxuXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGlvblN0cmVhbUZhY3RvcnkoXG4gICAgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgcmV0dXJuIGZyb21FdmVudChkb2N1bWVudFJlZiwgYHNlbGVjdGlvbmNoYW5nZWApLnBpcGUoXG4gICAgICAgIHdpbmRvd1RvZ2dsZShcbiAgICAgICAgICAgIG1lcmdlKGZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNldXBgKSwgZnJvbUV2ZW50KGRvY3VtZW50UmVmLCBga2V5ZG93bmApKSxcbiAgICAgICAgICAgICgpID0+IGZyb21FdmVudChkb2N1bWVudFJlZiwgYG1vdXNlZG93bmApLFxuICAgICAgICApLFxuICAgICAgICBmbGF0TWFwKHdpbmRvd2VkJCA9PiB3aW5kb3dlZCQucGlwZShzdGFydFdpdGgobnVsbCkpKSxcbiAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICApO1xufVxuIl19