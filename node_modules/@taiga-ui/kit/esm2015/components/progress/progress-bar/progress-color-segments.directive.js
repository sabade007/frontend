import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { CHROMIUM_EDGE_START_VERSION, isEdgeOlderThan, isIE, TuiDestroyService, tuiPure, TuiResizeService, } from '@taiga-ui/cdk';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { calculateColorSegments } from '../utils/calculate-color-segments';
let TuiProgressColorSegmentsDirective = class TuiProgressColorSegmentsDirective {
    constructor(elementRef, resize$, userAgent) {
        this.elementRef = elementRef;
        this.resize$ = resize$;
        this.userAgent = userAgent;
        this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) ||
            isIE(this.userAgent);
        this.colors = [];
    }
    get calcSegments$() {
        return this.resize$.pipe(map(() => this.isOldBrowsers
            ? this.colors[0]
            : calculateColorSegments(this.colors, this.elementRef.nativeElement.offsetWidth)));
    }
};
TuiProgressColorSegmentsDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
__decorate([
    Input('tuiProgressColorSegments')
], TuiProgressColorSegmentsDirective.prototype, "colors", void 0);
__decorate([
    tuiPure
], TuiProgressColorSegmentsDirective.prototype, "calcSegments$", null);
TuiProgressColorSegmentsDirective = __decorate([
    Directive({
        selector: 'progress[tuiProgressBar][tuiProgressColorSegments]',
        host: {
            '[$.style.--tui-progress-color]': 'calcSegments$',
            '($.style.--tui-progress-color)': '0',
        },
        providers: [TuiDestroyService, TuiResizeService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiResizeService)),
    __param(2, Inject(USER_AGENT))
], TuiProgressColorSegmentsDirective);
export { TuiProgressColorSegmentsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY29sb3Itc2VnbWVudHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3Byb2dyZXNzLyIsInNvdXJjZXMiOlsicHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWNvbG9yLXNlZ21lbnRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUNILDJCQUEyQixFQUMzQixlQUFlLEVBQ2YsSUFBSSxFQUNKLGlCQUFpQixFQUNqQixPQUFPLEVBQ1AsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBVXpFLElBQWEsaUNBQWlDLEdBQTlDLE1BQWEsaUNBQWlDO0lBc0IxQyxZQUN5QyxVQUEyQyxFQUNyQyxPQUE0QixFQUNsQyxTQUFpQjtRQUZqQixlQUFVLEdBQVYsVUFBVSxDQUFpQztRQUNyQyxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUNsQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBeEJ6QyxrQkFBYSxHQUMxQixlQUFlLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR3pCLFdBQU0sR0FBYSxFQUFFLENBQUM7SUFvQm5CLENBQUM7SUFqQkosSUFBSSxhQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDcEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUNMLElBQUksQ0FBQyxhQUFhO1lBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxzQkFBc0IsQ0FDbEIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQzVDLENBQ1YsQ0FDSixDQUFDO0lBQ04sQ0FBQztDQU9KLENBQUE7O1lBSndELFVBQVUsdUJBQTFELE1BQU0sU0FBQyxVQUFVO1lBQ2tDLFVBQVUsdUJBQTdELE1BQU0sU0FBQyxnQkFBZ0I7eUNBQ3ZCLE1BQU0sU0FBQyxVQUFVOztBQW5CdEI7SUFEQyxLQUFLLENBQUMsMEJBQTBCLENBQUM7aUVBQ1o7QUFHdEI7SUFEQyxPQUFPO3NFQVlQO0FBcEJRLGlDQUFpQztJQVI3QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsb0RBQW9EO1FBQzlELElBQUksRUFBRTtZQUNGLGdDQUFnQyxFQUFFLGVBQWU7WUFDakQsZ0NBQWdDLEVBQUUsR0FBRztTQUN4QztRQUNELFNBQVMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDO0tBQ25ELENBQUM7SUF3Qk8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUN4QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQXpCZCxpQ0FBaUMsQ0EyQjdDO1NBM0JZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VVNFUl9BR0VOVH0gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENIUk9NSVVNX0VER0VfU1RBUlRfVkVSU0lPTixcbiAgICBpc0VkZ2VPbGRlclRoYW4sXG4gICAgaXNJRSxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB0dWlQdXJlLFxuICAgIFR1aVJlc2l6ZVNlcnZpY2UsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7Y2FsY3VsYXRlQ29sb3JTZWdtZW50c30gZnJvbSAnLi4vdXRpbHMvY2FsY3VsYXRlLWNvbG9yLXNlZ21lbnRzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdwcm9ncmVzc1t0dWlQcm9ncmVzc0Jhcl1bdHVpUHJvZ3Jlc3NDb2xvclNlZ21lbnRzXScsXG4gICAgaG9zdDoge1xuICAgICAgICAnWyQuc3R5bGUuLS10dWktcHJvZ3Jlc3MtY29sb3JdJzogJ2NhbGNTZWdtZW50cyQnLFxuICAgICAgICAnKCQuc3R5bGUuLS10dWktcHJvZ3Jlc3MtY29sb3IpJzogJzAnLFxuICAgIH0sXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2UsIFR1aVJlc2l6ZVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcm9ncmVzc0NvbG9yU2VnbWVudHNEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaXNPbGRCcm93c2VycyA9XG4gICAgICAgIGlzRWRnZU9sZGVyVGhhbihDSFJPTUlVTV9FREdFX1NUQVJUX1ZFUlNJT04sIHRoaXMudXNlckFnZW50KSB8fFxuICAgICAgICBpc0lFKHRoaXMudXNlckFnZW50KTtcblxuICAgIEBJbnB1dCgndHVpUHJvZ3Jlc3NDb2xvclNlZ21lbnRzJylcbiAgICBjb2xvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICBAdHVpUHVyZVxuICAgIGdldCBjYWxjU2VnbWVudHMkKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2l6ZSQucGlwZShcbiAgICAgICAgICAgIG1hcCgoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuaXNPbGRCcm93c2Vyc1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY29sb3JzWzBdXG4gICAgICAgICAgICAgICAgICAgIDogY2FsY3VsYXRlQ29sb3JTZWdtZW50cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MUHJvZ3Jlc3NFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlSZXNpemVTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IHJlc2l6ZSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVVNFUl9BR0VOVCkgcHJpdmF0ZSByZWFkb25seSB1c2VyQWdlbnQ6IHN0cmluZyxcbiAgICApIHt9XG59XG4iXX0=