import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Inject, Input, ViewChild, } from '@angular/core';
import { USER_AGENT, WINDOW } from '@ng-web-apis/common';
import { CHROMIUM_EDGE_START_VERSION, tuiDefaultProp, tuiIsEdgeOlderThan, } from '@taiga-ui/cdk';
import { of } from 'rxjs';
import { delay } from 'rxjs/operators';
// @dynamic
let TuiProgressCircleComponent = class TuiProgressCircleComponent {
    constructor(userAgent, win, el) {
        this.userAgent = userAgent;
        this.win = win;
        this.el = el;
        this.value = 0;
        this.max = 1;
        this.color = null;
        this.size = 'm';
        this.animationDelay$ = of(true).pipe(delay(0));
    }
    get progressPercentage() {
        return this.value / this.max;
    }
    get oldEdgeRadiusFallback() {
        if (!tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {
            return null;
        }
        const strokeWidth = parseInt(this.win.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);
        return (this.el.nativeElement.offsetWidth - strokeWidth) / 2;
    }
};
TuiProgressCircleComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    ViewChild('progressCircle', { static: true })
], TuiProgressCircleComponent.prototype, "progressCircle", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "max", void 0);
__decorate([
    Input(),
    HostBinding('style.--tui-progress-color'),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "color", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "size", void 0);
__decorate([
    HostBinding('style.--progress-percentage')
], TuiProgressCircleComponent.prototype, "progressPercentage", null);
TuiProgressCircleComponent = __decorate([
    Component({
        selector: 'tui-progress-circle',
        template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<svg\n    height=\"100%\"\n    width=\"100%\"\n    aria-hidden=\"true\"\n    class=\"t-svg\"\n>\n    <circle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-track\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n\n    <circle\n        #progressCircle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-progress\"\n        [class.t-progress_filled]=\"animationDelay$ | async\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n</svg>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem}:host[data-size='s']{width:2em;height:2em}:host[data-size='s'] .t-track{\n  r: 0.75em;\n  stroke-width:.5em}:host[data-size='s'] .t-progress{\n  r: 0.75em;\n  stroke-width:.5em;stroke-dasharray:4.71238898em;stroke-dashoffset:4.71238898em}:host[data-size='s'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(4.71238898em - var(--progress-percentage) * 4.71238898em)}:host[data-size='m']{width:3em;height:3em}:host[data-size='m'] .t-track{\n  r: 1.3125em;\n  stroke-width:.375em}:host[data-size='m'] .t-progress{\n  r: 1.3125em;\n  stroke-width:.375em;stroke-dasharray:8.24668072em;stroke-dashoffset:8.24668072em}:host[data-size='m'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(8.24668072em - var(--progress-percentage) * 8.24668072em)}:host[data-size='l']{width:4em;height:4em}:host[data-size='l'] .t-track{\n  r: 1.8125em;\n  stroke-width:.375em}:host[data-size='l'] .t-progress{\n  r: 1.8125em;\n  stroke-width:.375em;stroke-dasharray:11.38827337em;stroke-dashoffset:11.38827337em}:host[data-size='l'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(11.38827337em - var(--progress-percentage) * 11.38827337em)}:host[data-size=xl]{width:7em;height:7em}:host[data-size=xl] .t-track{\n  r: 3.3125em;\n  stroke-width:.375em}:host[data-size=xl] .t-progress{\n  r: 3.3125em;\n  stroke-width:.375em;stroke-dasharray:20.81305133em;stroke-dashoffset:20.81305133em}:host[data-size=xl] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(20.81305133em - var(--progress-percentage) * 20.81305133em)}.t-track{fill:transparent;stroke:var(--tui-base-03)}.t-progress{fill:transparent;stroke:var(--tui-progress-color,currentColor);stroke-linecap:round}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg{overflow:unset}"]
    }),
    __param(0, Inject(USER_AGENT)),
    __param(1, Inject(WINDOW)),
    __param(2, Inject(ElementRef))
], TuiProgressCircleComponent);
export { TuiProgressCircleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9wcm9ncmVzcy8iLCJzb3VyY2VzIjpbInByb2dyZXNzLWNpcmNsZS9wcm9ncmVzcy1jaXJjbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUNILDJCQUEyQixFQUMzQixjQUFjLEVBQ2Qsa0JBQWtCLEdBQ3JCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLFdBQVc7QUFPWCxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEwQjtJQTBDbkMsWUFDeUMsU0FBaUIsRUFDckIsR0FBVyxFQUNQLEVBQTJCO1FBRjNCLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFDckIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNQLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBdkNwRSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBSVYsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUtSLFVBQUssR0FBa0IsSUFBSSxDQUFDO1FBSzVCLFNBQUksR0FBeUIsR0FBRyxDQUFDO1FBT2pDLG9CQUFlLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQW1CdkMsQ0FBQztJQXZCSixJQUFJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNqQyxDQUFDO0lBSUQsSUFBSSxxQkFBcUI7UUFDckIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsRSxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsV0FBVyxFQUN4RSxFQUFFLENBQ0wsQ0FBQztRQUVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FPSixDQUFBOzt5Q0FKUSxNQUFNLFNBQUMsVUFBVTtZQUNvQixNQUFNLHVCQUEzQyxNQUFNLFNBQUMsTUFBTTtZQUMyQixVQUFVLHVCQUFsRCxNQUFNLFNBQUMsVUFBVTs7QUEzQ3RCO0lBREMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDO2tFQUNtQjtBQUkvRDtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTt5REFDUDtBQUlWO0lBRkMsS0FBSyxFQUFFO0lBQ1AsY0FBYyxFQUFFO3VEQUNUO0FBS1I7SUFIQyxLQUFLLEVBQUU7SUFDUCxXQUFXLENBQUMsNEJBQTRCLENBQUM7SUFDekMsY0FBYyxFQUFFO3lEQUNXO0FBSzVCO0lBSEMsS0FBSyxFQUFFO0lBQ1AsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQzdCLGNBQWMsRUFBRTt3REFDZ0I7QUFHakM7SUFEQyxXQUFXLENBQUMsNkJBQTZCLENBQUM7b0VBRzFDO0FBekJRLDBCQUEwQjtJQU50QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLGdsQkFBOEM7UUFFOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUE0Q08sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQTdDZCwwQkFBMEIsQ0ErQ3RDO1NBL0NZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1VTRVJfQUdFTlQsIFdJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENIUk9NSVVNX0VER0VfU1RBUlRfVkVSU0lPTixcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICB0dWlJc0VkZ2VPbGRlclRoYW4sXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplUywgVHVpU2l6ZVhMfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge29mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGVsYXl9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXByb2dyZXNzLWNpcmNsZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzLWNpcmNsZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wcm9ncmVzcy1jaXJjbGUuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcm9ncmVzc0NpcmNsZUNvbXBvbmVudCB7XG4gICAgQFZpZXdDaGlsZCgncHJvZ3Jlc3NDaXJjbGUnLCB7c3RhdGljOiB0cnVlfSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2dyZXNzQ2lyY2xlITogRWxlbWVudFJlZjxTVkdDaXJjbGVFbGVtZW50PjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICB2YWx1ZSA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWF4ID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLXR1aS1wcm9ncmVzcy1jb2xvcicpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBjb2xvcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZVMgfCBUdWlTaXplWEwgPSAnbSc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLi0tcHJvZ3Jlc3MtcGVyY2VudGFnZScpXG4gICAgZ2V0IHByb2dyZXNzUGVyY2VudGFnZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSAvIHRoaXMubWF4O1xuICAgIH1cblxuICAgIGFuaW1hdGlvbkRlbGF5JCA9IG9mKHRydWUpLnBpcGUoZGVsYXkoMCkpO1xuXG4gICAgZ2V0IG9sZEVkZ2VSYWRpdXNGYWxsYmFjaygpOiBudW1iZXIgfCBudWxsIHtcbiAgICAgICAgaWYgKCF0dWlJc0VkZ2VPbGRlclRoYW4oQ0hST01JVU1fRURHRV9TVEFSVF9WRVJTSU9OLCB0aGlzLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBwYXJzZUludChcbiAgICAgICAgICAgIHRoaXMud2luLmdldENvbXB1dGVkU3R5bGUodGhpcy5wcm9ncmVzc0NpcmNsZS5uYXRpdmVFbGVtZW50KS5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAodGhpcy5lbC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC0gc3Ryb2tlV2lkdGgpIC8gMjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSBwcml2YXRlIHJlYWRvbmx5IHVzZXJBZ2VudDogc3RyaW5nLFxuICAgICAgICBASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdyxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApIHt9XG59XG4iXX0=