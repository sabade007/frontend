import { __decorate } from "tslib";
import { Directive, forwardRef, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core';
import { TuiMultiSelectOptionComponent } from '@taiga-ui/kit/components/multi-select-option';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TuiMultiSelectComponent } from '../multi-select.component';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function hostFallbackFactory(control, host) {
    return (host || {
        handleOption: option => {
            if (!control.control) {
                return;
            }
            const value = control.value || [];
            const index = value.indexOf(option);
            control.control.setValue(index === -1
                ? [...value, option]
                : [...value.slice(0, index), ...value.slice(index + 1)]);
        },
    });
}
export const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
// TODO: 3.0 remove in ivy compilation
export const MULTI_SELECT_ACCESSOR = {
    writeValue: EMPTY_FUNCTION,
    registerOnChange: EMPTY_FUNCTION,
    registerOnTouched: EMPTY_FUNCTION,
};
let TuiMultiSelectGroupDirective = class TuiMultiSelectGroupDirective {
};
TuiMultiSelectGroupDirective = __decorate([
    Directive({
        selector: '[tuiMultiSelectGroup]',
        providers: [
            {
                provide: TUI_OPTION_CONTENT,
                useValue: TUI_MULTI_SELECT_OPTION,
            },
            {
                provide: TUI_DATA_LIST_HOST,
                deps: [
                    NgControl,
                    [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
                ],
                useFactory: hostFallbackFactory,
            },
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useValue: MULTI_SELECT_ACCESSOR,
            },
        ],
    })
], TuiMultiSelectGroupDirective);
export { TuiMultiSelectGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvIiwic291cmNlcyI6WyJtdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBa0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMzRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLG1CQUFtQixDQUMvQixPQUFrQixFQUNsQixJQUErQjtJQUUvQixPQUFPLENBQ0gsSUFBSSxJQUFJO1FBQ0osWUFBWSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUNsQixPQUFPO2FBQ1Y7WUFFRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNsQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXBDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUNwQixLQUFLLEtBQUssQ0FBQyxDQUFDO2dCQUNSLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLE1BQU0sQ0FBQztnQkFDcEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQzlELENBQUM7UUFDTixDQUFDO0tBQ0osQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLElBQUkscUJBQXFCLENBQzVELDZCQUE2QixDQUNoQyxDQUFDO0FBRUYsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ2pDLFVBQVUsRUFBRSxjQUFjO0lBQzFCLGdCQUFnQixFQUFFLGNBQWM7SUFDaEMsaUJBQWlCLEVBQUUsY0FBYztDQUNwQyxDQUFDO0FBd0JGLElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0NBQUcsQ0FBQTtBQUEvQiw0QkFBNEI7SUF0QnhDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsU0FBUyxFQUFFO1lBQ1A7Z0JBQ0ksT0FBTyxFQUFFLGtCQUFrQjtnQkFDM0IsUUFBUSxFQUFFLHVCQUF1QjthQUNwQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLElBQUksRUFBRTtvQkFDRixTQUFTO29CQUNULENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQztpQkFDOUQ7Z0JBQ0QsVUFBVSxFQUFFLG1CQUFtQjthQUNsQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLEtBQUssRUFBRSxJQUFJO2dCQUNYLFFBQVEsRUFBRSxxQkFBcUI7YUFDbEM7U0FDSjtLQUNKLENBQUM7R0FDVyw0QkFBNEIsQ0FBRztTQUEvQiw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUiwgTmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0VNUFRZX0ZVTkNUSU9OfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0RBVEFfTElTVF9IT1NULCBUVUlfT1BUSU9OX0NPTlRFTlQsIFR1aURhdGFMaXN0SG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUdWlNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC1vcHRpb24nO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VHVpTXVsdGlTZWxlY3RDb21wb25lbnR9IGZyb20gJy4uL211bHRpLXNlbGVjdC5jb21wb25lbnQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gaG9zdEZhbGxiYWNrRmFjdG9yeTxUPihcbiAgICBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgaG9zdDogVHVpRGF0YUxpc3RIb3N0PFQ+IHwgbnVsbCxcbik6IFR1aURhdGFMaXN0SG9zdDxUPiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaG9zdCB8fCB7XG4gICAgICAgICAgICBoYW5kbGVPcHRpb246IG9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250cm9sLmNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udHJvbC52YWx1ZSB8fCBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHZhbHVlLmluZGV4T2Yob3B0aW9uKTtcblxuICAgICAgICAgICAgICAgIGNvbnRyb2wuY29udHJvbC5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPT09IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFsuLi52YWx1ZSwgb3B0aW9uXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbLi4udmFsdWUuc2xpY2UoMCwgaW5kZXgpLCAuLi52YWx1ZS5zbGljZShpbmRleCArIDEpXSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICk7XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfTVVMVElfU0VMRUNUX09QVElPTiA9IG5ldyBQb2x5bW9ycGhldXNDb21wb25lbnQoXG4gICAgVHVpTXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQsXG4pO1xuXG4vLyBUT0RPOiAzLjAgcmVtb3ZlIGluIGl2eSBjb21waWxhdGlvblxuZXhwb3J0IGNvbnN0IE1VTFRJX1NFTEVDVF9BQ0NFU1NPUiA9IHtcbiAgICB3cml0ZVZhbHVlOiBFTVBUWV9GVU5DVElPTixcbiAgICByZWdpc3Rlck9uQ2hhbmdlOiBFTVBUWV9GVU5DVElPTixcbiAgICByZWdpc3Rlck9uVG91Y2hlZDogRU1QVFlfRlVOQ1RJT04sXG59O1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlNdWx0aVNlbGVjdEdyb3VwXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9PUFRJT05fQ09OVEVOVCxcbiAgICAgICAgICAgIHVzZVZhbHVlOiBUVUlfTVVMVElfU0VMRUNUX09QVElPTixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX0RBVEFfTElTVF9IT1NULFxuICAgICAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgICAgIE5nQ29udHJvbCxcbiAgICAgICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIGZvcndhcmRSZWYoKCkgPT4gVHVpTXVsdGlTZWxlY3RDb21wb25lbnQpXSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBob3N0RmFsbGJhY2tGYWN0b3J5LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgdXNlVmFsdWU6IE1VTFRJX1NFTEVDVF9BQ0NFU1NPUixcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNdWx0aVNlbGVjdEdyb3VwRGlyZWN0aXZlIHt9XG4iXX0=