import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk';
import { isFlat } from '@taiga-ui/kit/utils';
import { TuiMultiSelectComponent } from './multi-select.component';
let TuiHideSelectedPipe = class TuiHideSelectedPipe {
    constructor(component) {
        this.component = component;
    }
    transform(items, component) {
        const { value, identityMatcher } = component !== null && component !== void 0 ? component : this.component;
        if (!items) {
            return null;
        }
        return isFlat(items)
            ? this.filter(items, value, identityMatcher)
            : this.filter2d(items, value, identityMatcher);
    }
    filter2d(items, value, matcher) {
        return items.map(subItems => this.filter(subItems, value, matcher));
    }
    filter(items, value, matcher) {
        return items.filter(item => value.every(selected => !matcher(selected, item)));
    }
};
TuiHideSelectedPipe.ctorParameters = () => [
    { type: TuiMultiSelectComponent, decorators: [{ type: Inject, args: [TuiMultiSelectComponent,] }] }
];
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter2d", null);
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter", null);
TuiHideSelectedPipe = __decorate([
    Pipe({
        name: `tuiHideSelected`,
        pure: false,
    }),
    __param(0, Inject(TuiMultiSelectComponent))
], TuiHideSelectedPipe);
export { TuiHideSelectedPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS1zZWxlY3RlZC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC8iLCJzb3VyY2VzIjpbImhpZGUtc2VsZWN0ZWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBcUIsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQU1qRSxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUM1QixZQUVxQixTQUF1QztRQUF2QyxjQUFTLEdBQVQsU0FBUyxDQUE4QjtJQUN6RCxDQUFDO0lBVUosU0FBUyxDQUNMLEtBQXdELEVBQ3hELFNBQXNDO1FBRXRDLE1BQU0sRUFBQyxLQUFLLEVBQUUsZUFBZSxFQUFDLEdBQUcsU0FBUyxhQUFULFNBQVMsY0FBVCxTQUFTLEdBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUU3RCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNoQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQztZQUM1QyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFHTyxRQUFRLENBQ1osS0FBa0MsRUFDbEMsS0FBbUIsRUFDbkIsT0FBOEI7UUFFOUIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUdPLE1BQU0sQ0FDVixLQUFtQixFQUNuQixLQUFtQixFQUNuQixPQUE4QjtRQUU5QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0osQ0FBQTs7WUEzQ21DLHVCQUF1Qix1QkFEbEQsTUFBTSxTQUFDLHVCQUF1Qjs7QUE0Qm5DO0lBREMsT0FBTzttREFPUDtBQUdEO0lBREMsT0FBTztpREFPUDtBQTdDUSxtQkFBbUI7SUFKL0IsSUFBSSxDQUFDO1FBQ0YsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixJQUFJLEVBQUUsS0FBSztLQUNkLENBQUM7SUFHTyxXQUFBLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0dBRjNCLG1CQUFtQixDQThDL0I7U0E5Q1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlJZGVudGl0eU1hdGNoZXIsIHR1aVB1cmV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtpc0ZsYXR9IGZyb20gJ0B0YWlnYS11aS9raXQvdXRpbHMnO1xuXG5pbXBvcnQge1R1aU11bHRpU2VsZWN0Q29tcG9uZW50fSBmcm9tICcuL211bHRpLXNlbGVjdC5jb21wb25lbnQnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUhpZGVTZWxlY3RlZGAsXG4gICAgcHVyZTogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpZGVTZWxlY3RlZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlNdWx0aVNlbGVjdENvbXBvbmVudClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnQ6IFR1aU11bHRpU2VsZWN0Q29tcG9uZW50PGFueT4sXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtPFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgY29tcG9uZW50PzogVHVpTXVsdGlTZWxlY3RDb21wb25lbnQ8VD4sIC8vIFRPRE86IDMuMCBAZGVwcmVjYXRlZCByZW1vdmVcbiAgICApOiByZWFkb25seSBUW10gfCBudWxsO1xuICAgIHRyYW5zZm9ybTxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IG51bGwsXG4gICAgICAgIGNvbXBvbmVudD86IFR1aU11bHRpU2VsZWN0Q29tcG9uZW50PFQ+LCAvLyBUT0RPOiAzLjAgQGRlcHJlY2F0ZWQgcmVtb3ZlXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgbnVsbDtcbiAgICB0cmFuc2Zvcm08VD4oXG4gICAgICAgIGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCByZWFkb25seSBUW10gfCBudWxsLFxuICAgICAgICBjb21wb25lbnQ/OiBUdWlNdWx0aVNlbGVjdENvbXBvbmVudDxUPiwgLy8gVE9ETzogMy4wIEBkZXByZWNhdGVkIHJlbW92ZVxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwge1xuICAgICAgICBjb25zdCB7dmFsdWUsIGlkZW50aXR5TWF0Y2hlcn0gPSBjb21wb25lbnQgPz8gdGhpcy5jb21wb25lbnQ7XG5cbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNGbGF0KGl0ZW1zKVxuICAgICAgICAgICAgPyB0aGlzLmZpbHRlcihpdGVtcywgdmFsdWUsIGlkZW50aXR5TWF0Y2hlcilcbiAgICAgICAgICAgIDogdGhpcy5maWx0ZXIyZChpdGVtcywgdmFsdWUsIGlkZW50aXR5TWF0Y2hlcik7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcml2YXRlIGZpbHRlcjJkPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+LFxuICAgICAgICB2YWx1ZTogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlJZGVudGl0eU1hdGNoZXI8VD4sXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChzdWJJdGVtcyA9PiB0aGlzLmZpbHRlcihzdWJJdGVtcywgdmFsdWUsIG1hdGNoZXIpKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgZmlsdGVyPFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdLFxuICAgICAgICB2YWx1ZTogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlJZGVudGl0eU1hdGNoZXI8VD4sXG4gICAgKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbHRlcihpdGVtID0+IHZhbHVlLmV2ZXJ5KHNlbGVjdGVkID0+ICFtYXRjaGVyKHNlbGVjdGVkLCBpdGVtKSkpO1xuICAgIH1cbn1cbiJdfQ==