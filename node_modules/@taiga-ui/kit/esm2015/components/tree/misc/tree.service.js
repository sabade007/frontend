import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';
import { TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_START } from './tree.tokens';
// @dynamic
let TuiTreeService = class TuiTreeService {
    constructor(loading, start, loader) {
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(item => this.loader.loadChildren(item).pipe(tap(children => this.map.set(item, children)), map(children => children.filter(item => !this.loader.hasChildren(item))), tap(children => children.forEach(child => this.map.set(child, []))))), startWith(null), mapTo(this.start));
    }
    getChildren(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : [this.loading];
    }
    loadChildren(item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    }
};
TuiTreeService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADING,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_START,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADER,] }] }
];
TuiTreeService = __decorate([
    Injectable(),
    __param(0, Inject(TUI_TREE_LOADING)),
    __param(1, Inject(TUI_TREE_START)),
    __param(2, Inject(TUI_TREE_LOADER))
], TuiTreeService);
export { TuiTreeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3RyZWUvIiwic291cmNlcyI6WyJtaXNjL3RyZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3JFLE9BQU8sRUFBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhGLFdBQVc7QUFFWCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBaUJ2QixZQUMrQyxPQUFVLEVBQ1osS0FBUSxFQUNQLE1BQXdCO1FBRnZCLFlBQU8sR0FBUCxPQUFPLENBQUc7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFHO1FBQ1AsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFuQnJELFFBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXJELFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBSyxDQUFDO1FBRWpDLFVBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDNUIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFDN0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN4RSxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdEUsQ0FDSixFQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUNwQixDQUFDO0lBTUMsQ0FBQztJQUVKLFdBQVcsQ0FBQyxJQUFPOztRQUNmLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1DQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxZQUFZLENBQUMsSUFBTztRQUNoQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDSixDQUFBOzs0Q0FqQlEsTUFBTSxTQUFDLGdCQUFnQjs0Q0FDdkIsTUFBTSxTQUFDLGNBQWM7NENBQ3JCLE1BQU0sU0FBQyxlQUFlOztBQXBCbEIsY0FBYztJQUQxQixVQUFVLEVBQUU7SUFtQkosV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUN4QixXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN0QixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtHQXBCbkIsY0FBYyxDQW1DMUI7U0FuQ1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgbWFwVG8sIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUcmVlTG9hZGVyfSBmcm9tICcuL3RyZWUuaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9UUkVFX0xPQURFUiwgVFVJX1RSRUVfTE9BRElORywgVFVJX1RSRUVfU1RBUlR9IGZyb20gJy4vdHJlZS50b2tlbnMnO1xuXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aVRyZWVTZXJ2aWNlPFQ+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hcCA9IG5ldyBNYXA8VCwgcmVhZG9ubHkgVFtdPihbW3RoaXMubG9hZGluZywgW11dXSk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWQkID0gbmV3IFN1YmplY3Q8VD4oKTtcblxuICAgIHJlYWRvbmx5IGRhdGEkID0gdGhpcy5sb2FkJC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoaXRlbSA9PlxuICAgICAgICAgICAgdGhpcy5sb2FkZXIubG9hZENoaWxkcmVuKGl0ZW0pLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFwKGNoaWxkcmVuID0+IHRoaXMubWFwLnNldChpdGVtLCBjaGlsZHJlbikpLFxuICAgICAgICAgICAgICAgIG1hcChjaGlsZHJlbiA9PiBjaGlsZHJlbi5maWx0ZXIoaXRlbSA9PiAhdGhpcy5sb2FkZXIuaGFzQ2hpbGRyZW4oaXRlbSkpKSxcbiAgICAgICAgICAgICAgICB0YXAoY2hpbGRyZW4gPT4gY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB0aGlzLm1hcC5zZXQoY2hpbGQsIFtdKSkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICBtYXBUbyh0aGlzLnN0YXJ0KSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX1RSRUVfTE9BRElORykgcHJpdmF0ZSByZWFkb25seSBsb2FkaW5nOiBULFxuICAgICAgICBASW5qZWN0KFRVSV9UUkVFX1NUQVJUKSBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0OiBULFxuICAgICAgICBASW5qZWN0KFRVSV9UUkVFX0xPQURFUikgcHJpdmF0ZSByZWFkb25seSBsb2FkZXI6IFR1aVRyZWVMb2FkZXI8VD4sXG4gICAgKSB7fVxuXG4gICAgZ2V0Q2hpbGRyZW4oaXRlbTogVCk6IHJlYWRvbmx5IFRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoaXRlbSkgPz8gW3RoaXMubG9hZGluZ107XG4gICAgfVxuXG4gICAgbG9hZENoaWxkcmVuKGl0ZW06IFQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubWFwLmdldChpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXAuc2V0KGl0ZW0sIFt0aGlzLmxvYWRpbmddKTtcbiAgICAgICAgdGhpcy5sb2FkJC5uZXh0KGl0ZW0pO1xuICAgIH1cbn1cbiJdfQ==