var TuiTreeComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input, Optional, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TuiTreeChildrenDirective } from '../../directives/tree-children.directive';
import { TUI_TREE_NODE } from '../../misc/tree.tokens';
import { TuiTreeItemComponent } from '../tree-item/tree-item.component';
let TuiTreeComponent = TuiTreeComponent_1 = class TuiTreeComponent {
    constructor(directive) {
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.ngDoCheck();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.ngDoCheck();
    }
    get handler() {
        var _a, _b;
        return (_b = (_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) !== null && _b !== void 0 ? _b : TuiTreeChildrenDirective.defaultHandler;
    }
};
TuiTreeComponent.ctorParameters = () => [
    { type: TuiTreeChildrenDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiTreeChildrenDirective,] }] }
];
__decorate([
    Input()
], TuiTreeComponent.prototype, "value", void 0);
__decorate([
    ViewChild(TuiTreeItemComponent)
], TuiTreeComponent.prototype, "item", void 0);
__decorate([
    ViewChild(TuiTreeComponent_1)
], TuiTreeComponent.prototype, "child", void 0);
__decorate([
    Input()
], TuiTreeComponent.prototype, "content", void 0);
TuiTreeComponent = TuiTreeComponent_1 = __decorate([
    Component({
        selector: 'tui-tree[value]',
        template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <div\n        *ngIf=\"$any(value) !== children\"\n        polymorpheus-outlet\n        [content]=\"content\"\n        [context]=\"{$implicit: value, node: view}\"\n    ></div>\n    <tui-tree\n        *ngFor=\"let child of children\"\n        [value]=\"child\"\n        [content]=\"content\"\n    ></tui-tree>\n</tui-tree-item>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_TREE_NODE,
                useExisting: TuiTreeComponent_1,
            },
        ],
        host: {
            role: 'tree',
        },
        styles: [":host{position:relative;display:block}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(TuiTreeChildrenDirective))
], TuiTreeComponent);
export { TuiTreeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvdHJlZS8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdHJlZS90cmVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEUsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sMENBQTBDLENBQUM7QUFFbEYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBaUJ0RSxJQUFhLGdCQUFnQix3QkFBN0IsTUFBYSxnQkFBZ0I7SUFrQnpCLFlBR2EsU0FBNkM7UUFBN0MsY0FBUyxHQUFULFNBQVMsQ0FBb0M7UUFwQnpDLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBV3JDLGNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDakMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNuQyxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBU0YsWUFBTyxHQUEyQyxDQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUhsRixDQUFDO0lBS0osU0FBUzs7UUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsU0FBUyxHQUFHO1FBQ3ZCLE1BQUEsSUFBSSxDQUFDLEtBQUssMENBQUUsU0FBUyxHQUFHO0lBQzVCLENBQUM7SUFFRCxJQUFZLE9BQU87O1FBQ2YsbUJBQU8sSUFBSSxDQUFDLFNBQVMsMENBQUUsZUFBZSxtQ0FBSSx3QkFBd0IsQ0FBQyxjQUFjLENBQUM7SUFDdEYsQ0FBQztDQUNKLENBQUE7O1lBZjJCLHdCQUF3Qix1QkFGM0MsUUFBUSxZQUNSLE1BQU0sU0FBQyx3QkFBd0I7O0FBaEJwQztJQURDLEtBQUssRUFBRTsrQ0FDRTtBQUdWO0lBREMsU0FBUyxDQUFDLG9CQUFvQixDQUFDOzhDQUNLO0FBR3JDO0lBREMsU0FBUyxDQUFDLGtCQUFnQixDQUFDOytDQUNTO0FBZXJDO0lBREMsS0FBSyxFQUFFO2lEQUM2RTtBQXpCNUUsZ0JBQWdCO0lBZjVCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxpQkFBaUI7UUFDM0Isa2NBQWlDO1FBRWpDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFNBQVMsRUFBRTtZQUNQO2dCQUNJLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsa0JBQWdCO2FBQ2hDO1NBQ0o7UUFDRCxJQUFJLEVBQUU7WUFDRixJQUFJLEVBQUUsTUFBTTtTQUNmOztLQUNKLENBQUM7SUFvQk8sV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUE7R0FwQjVCLGdCQUFnQixDQW9DNUI7U0FwQ1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRG9DaGVjayxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3B0aW9uYWwsXG4gICAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGh9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUcmVlQ2hpbGRyZW5EaXJlY3RpdmV9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdHJlZS1jaGlsZHJlbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUcmVlQ29udGV4dH0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9OT0RFfSBmcm9tICcuLi8uLi9taXNjL3RyZWUudG9rZW5zJztcbmltcG9ydCB7VHVpVHJlZUl0ZW1Db21wb25lbnR9IGZyb20gJy4uL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdHJlZVt2YWx1ZV0nLFxuICAgIHRlbXBsYXRlVXJsOiAndHJlZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsndHJlZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9UUkVFX05PREUsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbXBvbmVudCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgcm9sZTogJ3RyZWUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRyZWVDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBEb0NoZWNrIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoZWNrJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHZhbHVlITogVDtcblxuICAgIEBWaWV3Q2hpbGQoVHVpVHJlZUl0ZW1Db21wb25lbnQpXG4gICAgcmVhZG9ubHkgaXRlbT86IFR1aVRyZWVJdGVtQ29tcG9uZW50O1xuXG4gICAgQFZpZXdDaGlsZChUdWlUcmVlQ29tcG9uZW50KVxuICAgIHJlYWRvbmx5IGNoaWxkPzogVHVpVHJlZUNvbXBvbmVudDxUPjtcblxuICAgIHJlYWRvbmx5IGNoaWxkcmVuJCA9IHRoaXMuY2hlY2skLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuaGFuZGxlcih0aGlzLnZhbHVlKSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFR1aVRyZWVDaGlsZHJlbkRpcmVjdGl2ZSlcbiAgICAgICAgcmVhZG9ubHkgZGlyZWN0aXZlOiBUdWlUcmVlQ2hpbGRyZW5EaXJlY3RpdmU8VD4gfCBudWxsLFxuICAgICkge31cblxuICAgIEBJbnB1dCgpXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlUcmVlQ29udGV4dDxUPj4gPSAoeyRpbXBsaWNpdH0pID0+IFN0cmluZygkaW1wbGljaXQpO1xuXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoZWNrJC5uZXh0KCk7XG4gICAgICAgIHRoaXMuaXRlbT8ubmdEb0NoZWNrKCk7XG4gICAgICAgIHRoaXMuY2hpbGQ/Lm5nRG9DaGVjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGhhbmRsZXIoKTogVHVpSGFuZGxlcjxULCByZWFkb25seSBUW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlPy5jaGlsZHJlbkhhbmRsZXIgPz8gVHVpVHJlZUNoaWxkcmVuRGlyZWN0aXZlLmRlZmF1bHRIYW5kbGVyO1xuICAgIH1cbn1cbiJdfQ==