var TuiTreeControllerDirective_1;
import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { isPresent, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_TREE_ACCESSOR, TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
let TuiTreeControllerDirective = TuiTreeControllerDirective_1 = class TuiTreeControllerDirective {
    constructor() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    register(item, value) {
        this.items.set(item, value);
    }
    unregister(item) {
        this.items.delete(item);
    }
    isExpanded(item) {
        var _a;
        const value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        const value = this.items.get(item);
        const expanded = this.isExpanded(item);
        if (!isPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    }
};
__decorate([
    Input('tuiTreeController'),
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "fallback", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "map", void 0);
__decorate([
    Output()
], TuiTreeControllerDirective.prototype, "toggled", void 0);
TuiTreeControllerDirective = TuiTreeControllerDirective_1 = __decorate([
    Directive({
        selector: '[tuiTreeController][map]',
        exportAs: 'tuiTreeController',
        providers: [
            {
                provide: TUI_TREE_ACCESSOR,
                useExisting: TuiTreeControllerDirective_1,
            },
            {
                provide: TUI_TREE_CONTROLLER,
                useExisting: TuiTreeControllerDirective_1,
            },
        ],
    })
], TuiTreeControllerDirective);
export { TuiTreeControllerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90cmVlLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy90cmVlLWNvbnRyb2xsZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsU0FBUyxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUl4RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQWdCM0UsSUFBYSwwQkFBMEIsa0NBQXZDLE1BQWEsMEJBQTBCO0lBQXZDO1FBS0ksYUFBUSxHQUFHLElBQUksQ0FBQztRQUloQixRQUFHLEdBQW9CLElBQUksR0FBRyxFQUFFLENBQUM7UUFHeEIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFFaEMsVUFBSyxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0lBMkJ4RCxDQUFDO0lBekJHLFFBQVEsQ0FBQyxJQUEwQixFQUFFLEtBQVE7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBMEI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUEwQjs7UUFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsYUFBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQ0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzNELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBMEI7UUFDN0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDSixDQUFBO0FBcENHO0lBRkMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0lBQzFCLGNBQWMsRUFBRTs0REFDRDtBQUloQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTt1REFDZ0I7QUFHakM7SUFEQyxNQUFNLEVBQUU7MkRBQ2dDO0FBWmhDLDBCQUEwQjtJQWR0QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsMEJBQTBCO1FBQ3BDLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsU0FBUyxFQUFFO1lBQ1A7Z0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLDRCQUEwQjthQUMxQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFdBQVcsRUFBRSw0QkFBMEI7YUFDMUM7U0FDSjtLQUNKLENBQUM7R0FDVywwQkFBMEIsQ0F5Q3RDO1NBekNZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtpc1ByZXNlbnQsIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuaW1wb3J0IHtUdWlUcmVlSXRlbUNvbXBvbmVudH0gZnJvbSAnLi4vY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQge1R1aVRyZWVBY2Nlc3NvciwgVHVpVHJlZUNvbnRyb2xsZXJ9IGZyb20gJy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfQUNDRVNTT1IsIFRVSV9UUkVFX0NPTlRST0xMRVJ9IGZyb20gJy4uL21pc2MvdHJlZS50b2tlbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlUcmVlQ29udHJvbGxlcl1bbWFwXScsXG4gICAgZXhwb3J0QXM6ICd0dWlUcmVlQ29udHJvbGxlcicsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9UUkVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVRyZWVDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVFJFRV9DT05UUk9MTEVSLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVRyZWVDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRyZWVDb250cm9sbGVyRGlyZWN0aXZlPFQ+XG4gICAgaW1wbGVtZW50cyBUdWlUcmVlQ29udHJvbGxlciwgVHVpVHJlZUFjY2Vzc29yPFQ+XG57XG4gICAgQElucHV0KCd0dWlUcmVlQ29udHJvbGxlcicpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBmYWxsYmFjayA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWFwOiBNYXA8VCwgYm9vbGVhbj4gPSBuZXcgTWFwKCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0b2dnbGVkID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xuXG4gICAgcmVhZG9ubHkgaXRlbXMgPSBuZXcgTWFwPFR1aVRyZWVJdGVtQ29tcG9uZW50LCBUPigpO1xuXG4gICAgcmVnaXN0ZXIoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXRlbXMuc2V0KGl0ZW0sIHZhbHVlKTtcbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyKGl0ZW06IFR1aVRyZWVJdGVtQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXRlbXMuZGVsZXRlKGl0ZW0pO1xuICAgIH1cblxuICAgIGlzRXhwYW5kZWQoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLml0ZW1zLmdldChpdGVtKTtcblxuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHRoaXMubWFwLmdldCh2YWx1ZSkpID8/IHRoaXMuZmFsbGJhY2s7XG4gICAgfVxuXG4gICAgdG9nZ2xlKGl0ZW06IFR1aVRyZWVJdGVtQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pdGVtcy5nZXQoaXRlbSk7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5pc0V4cGFuZGVkKGl0ZW0pO1xuXG4gICAgICAgIGlmICghaXNQcmVzZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2dnbGVkLmVtaXQodmFsdWUpO1xuICAgICAgICB0aGlzLm1hcC5zZXQodmFsdWUsICFleHBhbmRlZCk7XG4gICAgfVxufVxuIl19