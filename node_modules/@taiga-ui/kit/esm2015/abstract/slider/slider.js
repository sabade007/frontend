import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Inject, Input, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, clamp, nonNegativeFiniteAssertion, quantize, round, setNativeFocused, tuiAssertIsHTMLElement, tuiDefaultProp, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiPluralizeToICU, } from '@taiga-ui/core';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable, race, Subject } from 'rxjs';
import { map, switchMap, takeUntil } from 'rxjs/operators';
export const SLIDER_KEYBOARD_STEP = 0.05;
export const DOT_WIDTH = {
    s: 8,
    m: 16,
};
/**
 * @awful TODO: 3.0 remove
 * @internal
 * @dynamic
 */
let AbstractTuiSlider = class AbstractTuiSlider extends AbstractTuiControl {
    constructor(ngControl, changeDetectorRef, documentRef, fromToTexts$) {
        super(ngControl, changeDetectorRef);
        this.documentRef = documentRef;
        this.fromToTexts$ = fromToTexts$;
        // @bad TODO: handle pointer events instead of mouse and touch events
        this.pointerDown$ = new Subject();
        this.min = 0;
        this.max = Infinity;
        this.segments = 0;
        this.steps = 0;
        this.quantum = 0;
        this.size = `m`;
        this.keySteps = null;
        this.focusVisibleLeft = false;
        this.focusVisibleRight = false;
        this.pluralizeMap = null;
    }
    // TODO: remove setter in v3.0:
    set pluralize(pluralize) {
        this.pluralizeMap = Array.isArray(pluralize)
            ? tuiPluralizeToICU(pluralize)
            : pluralize;
    }
    get segmented() {
        return this.segments > 0;
    }
    get discrete() {
        return this.steps > 0;
    }
    get length() {
        return this.max - this.min;
    }
    get computedStep() {
        if (this.steps) {
            return 1 / this.steps;
        }
        return this.quantum ? this.quantum / this.length : SLIDER_KEYBOARD_STEP;
    }
    get isLeftFocusable() {
        return !this.disabled && this.focusable && this.right !== 100;
    }
    get isRightFocusable() {
        return !this.disabled && this.focusable && this.left !== 100;
    }
    ngOnInit() {
        super.ngOnInit();
        const mouseMoves$ = typedFromEvent(this.documentRef, `mousemove`);
        const mouseUps$ = typedFromEvent(this.documentRef, `mouseup`);
        const touchMoves$ = typedFromEvent(this.documentRef, `touchmove`);
        const touchEnds$ = typedFromEvent(this.documentRef, `touchend`);
        let isPointerDownRight;
        this.pointerDown$
            .pipe(map((event) => {
            tuiAssertIsHTMLElement(event.currentTarget);
            const rect = event.currentTarget.getBoundingClientRect();
            const clientX = event instanceof MouseEvent
                ? event.clientX
                : event.touches[0].clientX;
            const fraction = clamp(this.getFractionFromEvents(rect, clientX), 0, 1);
            const deltaLeft = fraction * 100 - this.left;
            const deltaRight = fraction * 100 - 100 + this.right;
            isPointerDownRight =
                Math.abs(deltaLeft) > Math.abs(deltaRight) ||
                    deltaRight > 0 ||
                    (this.left === 0 && this.right === 100);
            const calibratedFraction = clamp(this.getCalibratedFractionFromEvents(rect, clientX, isPointerDownRight), 0, 1);
            const value = this.getValueFromFraction(this.fractionGuard(calibratedFraction));
            this.processValue(value, isPointerDownRight);
            this.processFocus(isPointerDownRight);
            return rect;
        }), switchMap(rect => race([touchMoves$, mouseMoves$]).pipe(map(event => this.getCalibratedFractionFromEvents(rect, event instanceof MouseEvent
            ? event.clientX
            : event.touches[0].clientX, isPointerDownRight)), takeUntil(race([mouseUps$, touchEnds$])))), map(fraction => this.fractionGuard(fraction)))
            .subscribe(fraction => {
            this.processValue(this.getValueFromFraction(fraction), isPointerDownRight);
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.pointerDown$.complete();
    }
    onMouseDown(event) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        this.pointerDown$.next(event);
    }
    onTouchStart(event) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        this.pointerDown$.next(event);
    }
    getSegmentLabel(segment) {
        return round(this.getValueFromFraction(segment / this.segments), 2);
    }
    getSegmentPrefix(segment, texts) {
        if (this.segments !== 1) {
            return ``;
        }
        if (segment === 0) {
            return `${texts[0]} `;
        }
        return `${texts[1]} `;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onLeftFocusVisible(focusVisible) {
        this.focusVisibleLeft = focusVisible;
    }
    onRightFocusVisible(focusVisible) {
        this.focusVisibleRight = focusVisible;
    }
    getValueFromFraction(fraction) {
        return this.keySteps !== null
            ? this.fractionValueKeyStepConverter(fraction, true)
            : round(this.fractionGuard(fraction) * this.length + this.min, TUI_FLOATING_PRECISION);
    }
    fractionGuard(fraction) {
        return this.discrete
            ? clamp(quantize(fraction, 1 / this.steps), 0, 1)
            : clamp(fraction, 0, 1);
    }
    getFractionFromValue(value) {
        const fraction = (value - this.min) / this.length;
        return this.keySteps !== null
            ? this.fractionValueKeyStepConverter(value, false)
            : clamp(Number.isFinite(fraction) ? fraction : 1, 0, 1);
    }
    getCalibratedFractionFromEvents(rect, clientX, _) {
        return this.getFractionFromEvents(rect, clientX);
    }
    valueGuard(value) {
        return this.quantum
            ? clamp(round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION), this.min, this.max)
            : clamp(value, this.min, this.max);
    }
    processFocus(right) {
        if (!this.focusable || !this.dotRight || !this.dotLeft) {
            return;
        }
        if (right) {
            setNativeFocused(this.dotRight.nativeElement);
        }
        else {
            setNativeFocused(this.dotLeft.nativeElement);
        }
    }
    /**
     * Function for converting the fullness of the slider to a value and vice versa
     * taking into account the steps of linear dependence.
     *
     * @param value passed value
     * @param isFraction translation is carried out from fullness to value
     */
    fractionValueKeyStepConverter(value, isFraction) {
        const steps = [[0, this.min]].concat(this.keySteps, [
            [100, this.max],
        ]);
        let prevFraction = 0;
        let nextFraction = 100;
        let prevValue = this.min;
        let nextValue = this.max;
        for (let i = 1; i < steps.length; i++) {
            if ((isFraction && steps[i][0] / 100 > value) ||
                (!isFraction && steps[i][1] > value)) {
                prevFraction = steps[i - 1][0] || 0;
                nextFraction = steps[i][0];
                prevValue = steps[i - 1][1];
                nextValue = steps[i][1];
                break;
            }
        }
        const deltaFraction = nextFraction - prevFraction;
        const deltaValue = nextValue - prevValue;
        return isFraction
            ? round(((value * 100 - prevFraction) / deltaFraction) * deltaValue + prevValue, TUI_FLOATING_PRECISION)
            : clamp(((value - prevValue) / deltaValue) * deltaFraction + prevFraction, 0, 100) / 100;
    }
    getFractionFromEvents(rect, clientX) {
        const value = clientX - rect.left - DOT_WIDTH[this.size] / 2;
        const total = rect.width - DOT_WIDTH[this.size];
        return round(value / total, TUI_FLOATING_PRECISION);
    }
};
AbstractTuiSlider.ctorParameters = () => [
    { type: NgControl },
    { type: ChangeDetectorRef },
    { type: Document },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] }
];
__decorate([
    ViewChild(`dotLeft`, { read: ElementRef })
], AbstractTuiSlider.prototype, "dotLeft", void 0);
__decorate([
    ViewChild(`dotRight`, { read: ElementRef })
], AbstractTuiSlider.prototype, "dotRight", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp(nonNegativeFiniteAssertion, `Quantum must be a non-negative number`)
], AbstractTuiSlider.prototype, "quantum", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "pluralize", null);
__decorate([
    Input(),
    HostBinding(`attr.data-size`),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiSlider.prototype, "keySteps", void 0);
__decorate([
    HostBinding(`class._segmented`)
], AbstractTuiSlider.prototype, "segmented", null);
AbstractTuiSlider = __decorate([
    Directive(),
    __param(3, Inject(TUI_FROM_TO_TEXTS))
], AbstractTuiSlider);
export { AbstractTuiSlider };
//# sourceMappingURL=data:application/json;base64,