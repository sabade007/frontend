import { __decorate } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { AbstractTuiControl, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import { tuiPluralizeToICU, } from '@taiga-ui/core';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @internal
 * @deprecated TODO: 3.0 delete me after `InputSlider` and `InputRange` stop using it
 */
let AbstractTuiInputSlider = class AbstractTuiInputSlider extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.min = 0;
        this.max = Infinity;
        /**
         * @deprecated This input-property will be deleted in next major update.
         * Use `valueContent` for `InputSlider`.
         * Use `leftValueContent` for `InputRange`.
         * ___
         * TODO remove in v3.0.
         * Dont forget to delete backward-compatibility helpers inside `InputSlider` and `InputRange`:
         *** {@link legacyMinMaxLabel}
         */
        this.minLabel = ``;
        /**
         * @deprecated This input-property will be deleted in next major update.
         * Use `valueContent` for `InputSlider`.
         * Use `rightValueContent` for `InputRange`.
         * ___
         * TODO remove in v3.0.
         * Dont forget to delete backward-compatibility helpers inside `InputSlider` and `InputRange`:
         *** {@link legacyMinMaxLabel}
         */
        this.maxLabel = ``;
        this.segments = 0;
        this.steps = 0;
        this.quantum = 1;
        this.keySteps = null;
        /**
         * @deprecated use `tuiTextfieldSize` instead
         * TODO delete in v3.0
         */
        this.size = `l`;
        /**
         * @deprecated replace by input-property {@link pluralize} in v3.0
         */
        this.pluralizeMap = null;
        /** @deprecated TODO remove in v3.0 */
        this.segmentsPluralizeMap = null;
        /** @deprecated TODO remove in v3.0 */
        this.pluralizeMapFallback = {
            one: ``,
            few: ``,
            many: ``,
            other: ``,
        };
    }
    // TODO: remove setter in v3.0:
    set pluralize(pluralize) {
        this.pluralizeMap = Array.isArray(pluralize)
            ? tuiPluralizeToICU(pluralize)
            : pluralize;
    }
    /**
     * @deprecated This input-property will be deleted in next major update.
     * You can create ticks labels below this input by yourself. It is easy!
     * Mixin `tui-slider-ticks-labels` will help with it. See examples in demo page `InputSlider`.
     * ___
     * TODO remove in v3.0.
     * Dont forget to delete:
     *** {@link segmentsPluralizeMap}
     *** {@link getTickPrefix}
     *** TuiFormatNumberPipeModule
     *** TuiRepeatTimesModule
     */
    set segmentsPluralize(pluralize) {
        this.segmentsPluralizeMap = Array.isArray(pluralize)
            ? tuiPluralizeToICU(pluralize)
            : pluralize;
    }
    /** @deprecated TODO remove in v3.0 */
    getTickPrefix(segment, segments, texts) {
        if (segments !== 1) {
            return ``;
        }
        return segment === 0 ? `${texts[0]}` : `${texts[1]}`;
    }
    get segmented() {
        return this.segments > 0;
    }
    get length() {
        return this.max - this.min;
    }
    get computedSteps() {
        return this.steps || this.length / this.quantum;
    }
    get step() {
        return this.length / this.computedSteps;
    }
    get computedKeySteps() {
        return this.computePureKeySteps(this.keySteps, this.min, this.max);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    computePureKeySteps(keySteps, min, max) {
        return [[0, min], ...(keySteps || []), [100, max]];
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "minLabel", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "maxLabel", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "pluralize", null);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "segmentsPluralize", null);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp(quantumAssertion, `Quantum must be positive`)
], AbstractTuiInputSlider.prototype, "quantum", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "keySteps", void 0);
__decorate([
    Input(),
    HostBinding(`attr.data-size`),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "size", void 0);
__decorate([
    tuiPure
], AbstractTuiInputSlider.prototype, "getTickPrefix", null);
__decorate([
    HostBinding(`class._segmented`)
], AbstractTuiInputSlider.prototype, "segmented", null);
__decorate([
    tuiPure
], AbstractTuiInputSlider.prototype, "computePureKeySteps", null);
AbstractTuiInputSlider = __decorate([
    Directive()
], AbstractTuiInputSlider);
export { AbstractTuiInputSlider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc2xpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9hYnN0cmFjdC8iLCJzb3VyY2VzIjpbImlucHV0LXNsaWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFFSCxpQkFBaUIsR0FHcEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUd4QixnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE9BQWU7SUFDNUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRDs7O0dBR0c7QUFFSCxJQUFzQixzQkFBc0IsR0FBNUMsTUFBc0Isc0JBQ2xCLFNBQVEsa0JBQXFCO0lBRGpDOztRQU1JLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFJUixRQUFHLEdBQUcsUUFBUSxDQUFDO1FBRWY7Ozs7Ozs7O1dBUUc7UUFHSCxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWQ7Ozs7Ozs7O1dBUUc7UUFHSCxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBaUNkLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFJYixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBSVYsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUlaLGFBQVEsR0FBdUIsSUFBSSxDQUFDO1FBRXBDOzs7V0FHRztRQUlILFNBQUksR0FBYSxHQUFHLENBQUM7UUFFckI7O1dBRUc7UUFDSCxpQkFBWSxHQUFrQyxJQUFJLENBQUM7UUFDbkQsc0NBQXNDO1FBQ3RDLHlCQUFvQixHQUFrQyxJQUFJLENBQUM7UUFDM0Qsc0NBQXNDO1FBQzdCLHlCQUFvQixHQUFHO1lBQzVCLEdBQUcsRUFBRSxFQUFFO1lBQ1AsR0FBRyxFQUFFLEVBQUU7WUFDUCxJQUFJLEVB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SUFDUCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDN0IsY0FBYyxFQUFFO29EQUNJO0FBa0JyQjtJQURDLE9BQU87MkRBT1A7QUFHRDtJQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzt1REFHL0I7QUF1QkQ7SUFEQyxPQUFPO2lFQU9QO0FBcEppQixzQkFBc0I7SUFEM0MsU0FBUyxFQUFFO0dBQ1Usc0JBQXNCLENBcUozQztTQXJKcUIsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpQ29udHJvbCwgdHVpRGVmYXVsdFByb3AsIHR1aVB1cmV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUdWlQbHVyYWxpemUsXG4gICAgdHVpUGx1cmFsaXplVG9JQ1UsXG4gICAgVHVpU2l6ZUwsXG4gICAgVHVpV2l0aE9wdGlvbmFsTWluTWF4LFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1R1aUtleVN0ZXBzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHF1YW50dW1Bc3NlcnRpb24ocXVhbnR1bTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHF1YW50dW0gPiAwO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGRlcHJlY2F0ZWQgVE9ETzogMy4wIGRlbGV0ZSBtZSBhZnRlciBgSW5wdXRTbGlkZXJgIGFuZCBgSW5wdXRSYW5nZWAgc3RvcCB1c2luZyBpdFxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aUlucHV0U2xpZGVyPFQ+XG4gICAgZXh0ZW5kcyBBYnN0cmFjdFR1aUNvbnRyb2w8VD5cbiAgICBpbXBsZW1lbnRzIFR1aVdpdGhPcHRpb25hbE1pbk1heDxudW1iZXI+XG57XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1pbiA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWF4ID0gSW5maW5pdHk7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlucHV0LXByb3BlcnR5IHdpbGwgYmUgZGVsZXRlZCBpbiBuZXh0IG1ham9yIHVwZGF0ZS5cbiAgICAgKiBVc2UgYHZhbHVlQ29udGVudGAgZm9yIGBJbnB1dFNsaWRlcmAuXG4gICAgICogVXNlIGBsZWZ0VmFsdWVDb250ZW50YCBmb3IgYElucHV0UmFuZ2VgLlxuICAgICAqIF9fX1xuICAgICAqIFRPRE8gcmVtb3ZlIGluIHYzLjAuXG4gICAgICogRG9udCBmb3JnZXQgdG8gZGVsZXRlIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgaGVscGVycyBpbnNpZGUgYElucHV0U2xpZGVyYCBhbmQgYElucHV0UmFuZ2VgOlxuICAgICAqKioge0BsaW5rIGxlZ2FjeU1pbk1heExhYmVsfVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtaW5MYWJlbCA9IGBgO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpbnB1dC1wcm9wZXJ0eSB3aWxsIGJlIGRlbGV0ZWQgaW4gbmV4dCBtYWpvciB1cGRhdGUuXG4gICAgICogVXNlIGB2YWx1ZUNvbnRlbnRgIGZvciBgSW5wdXRTbGlkZXJgLlxuICAgICAqIFVzZSBgcmlnaHRWYWx1ZUNvbnRlbnRgIGZvciBgSW5wdXRSYW5nZWAuXG4gICAgICogX19fXG4gICAgICogVE9ETyByZW1vdmUgaW4gdjMuMC5cbiAgICAgKiBEb250IGZvcmdldCB0byBkZWxldGUgYmFja3dhcmQtY29tcGF0aWJpbGl0eSBoZWxwZXJzIGluc2lkZSBgSW5wdXRTbGlkZXJgIGFuZCBgSW5wdXRSYW5nZWA6XG4gICAgICoqKiB7QGxpbmsgbGVnYWN5TWluTWF4TGFiZWx9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1heExhYmVsID0gYGA7XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgc2V0dGVyIGluIHYzLjA6XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNldCBwbHVyYWxpemUocGx1cmFsaXplOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgVHVpUGx1cmFsaXplIHwgbnVsbCkge1xuICAgICAgICB0aGlzLnBsdXJhbGl6ZU1hcCA9IEFycmF5LmlzQXJyYXkocGx1cmFsaXplKVxuICAgICAgICAgICAgPyB0dWlQbHVyYWxpemVUb0lDVShwbHVyYWxpemUpXG4gICAgICAgICAgICA6IHBsdXJhbGl6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlucHV0LXByb3BlcnR5IHdpbGwgYmUgZGVsZXRlZCBpbiBuZXh0IG1ham9yIHVwZGF0ZS5cbiAgICAgKiBZb3UgY2FuIGNyZWF0ZSB0aWNrcyBsYWJlbHMgYmVsb3cgdGhpcyBpbnB1dCBieSB5b3Vyc2VsZi4gSXQgaXMgZWFzeSFcbiAgICAgKiBNaXhpbiBgdHVpLXNsaWRlci10aWNrcy1sYWJlbHNgIHdpbGwgaGVscCB3aXRoIGl0LiBTZWUgZXhhbXBsZXMgaW4gZGVtbyBwYWdlIGBJbnB1dFNsaWRlcmAuXG4gICAgICogX19fXG4gICAgICogVE9ETyByZW1vdmUgaW4gdjMuMC5cbiAgICAgKiBEb250IGZvcmdldCB0byBkZWxldGU6XG4gICAgICoqKiB7QGxpbmsgc2VnbWVudHNQbHVyYWxpemVNYXB9XG4gICAgICoqKiB7QGxpbmsgZ2V0VGlja1ByZWZpeH1cbiAgICAgKioqIFR1aUZvcm1hdE51bWJlclBpcGVNb2R1bGVcbiAgICAgKioqIFR1aVJlcGVhdFRpbWVzTW9kdWxlXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNldCBzZWdtZW50c1BsdXJhbGl6ZShwbHVyYWxpemU6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBUdWlQbHVyYWxpemUgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuc2VnbWVudHNQbHVyYWxpemVNYXAgPSBBcnJheS5pc0FycmF5KHBsdXJhbGl6ZSlcbiAgICAgICAgICAgID8gdHVpUGx1cmFsaXplVG9JQ1UocGx1cmFsaXplKVxuICAgICAgICAgICAgOiBwbHVyYWxpemU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNlZ21lbnRzID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzdGVwcyA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcChxdWFudHVtQXNzZXJ0aW9uLCBgUXVhbnR1bSBtdXN0IGJlIHBvc2l0aXZlYClcbiAgICBxdWFudHVtID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBrZXlTdGVwczogVHVpS2V5U3RlcHMgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgdHVpVGV4dGZpZWxkU2l6ZWAgaW5zdGVhZFxuICAgICAqIFRPRE8gZGVsZXRlIGluIHYzLjBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5kYXRhLXNpemVgKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgPSBgbGA7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCByZXBsYWNlIGJ5IGlucHV0LXByb3BlcnR5IHtAbGluayBwbHVyYWxpemV9IGluIHYzLjBcbiAgICAgKi9cbiAgICBwbHVyYWxpemVNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBudWxsID0gbnVsbDtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVE9ETyByZW1vdmUgaW4gdjMuMCAqL1xuICAgIHNlZ21lbnRzUGx1cmFsaXplTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCA9IG51bGw7XG4gICAgLyoqIEBkZXByZWNhdGVkIFRPRE8gcmVtb3ZlIGluIHYzLjAgKi9cbiAgICByZWFkb25seSBwbHVyYWxpemVNYXBGYWxsYmFjayA9IHtcbiAgICAgICAgb25lOiBgYCxcbiAgICAgICAgZmV3OiBgYCxcbiAgICAgICAgbWFueTogYGAsXG4gICAgICAgIG90aGVyOiBgYCxcbiAgICB9O1xuXG4gICAgLyoqIEBkZXByZWNhdGVkIFRPRE8gcmVtb3ZlIGluIHYzLjAgKi9cbiAgICBAdHVpUHVyZVxuICAgIGdldFRpY2tQcmVmaXgoc2VnbWVudDogbnVtYmVyLCBzZWdtZW50czogbnVtYmVyLCB0ZXh0czogW3N0cmluZywgc3RyaW5nXSk6IHN0cmluZyB7XG4gICAgICAgIGlmIChzZWdtZW50cyAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGBgO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnQgPT09IDAgPyBgJHt0ZXh0c1swXX1gIDogYCR7dGV4dHNbMV19YDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLl9zZWdtZW50ZWRgKVxuICAgIGdldCBzZWdtZW50ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzID4gMDtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heCAtIHRoaXMubWluO1xuICAgIH1cblxuICAgIGdldCBjb21wdXRlZFN0ZXBzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzIHx8IHRoaXMubGVuZ3RoIC8gdGhpcy5xdWFudHVtO1xuICAgIH1cblxuICAgIGdldCBzdGVwKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCAvIHRoaXMuY29tcHV0ZWRTdGVwcztcbiAgICB9XG5cbiAgICBnZXQgY29tcHV0ZWRLZXlTdGVwcygpOiBUdWlLZXlTdGVwcyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVQdXJlS2V5U3RlcHModGhpcy5rZXlTdGVwcywgdGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICB9XG5cbiAgICBvbkhvdmVyZWQoaG92ZXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyZWQoaG92ZXJlZCk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcml2YXRlIGNvbXB1dGVQdXJlS2V5U3RlcHMoXG4gICAgICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyB8IG51bGwsXG4gICAgICAgIG1pbjogbnVtYmVyLFxuICAgICAgICBtYXg6IG51bWJlcixcbiAgICApOiBUdWlLZXlTdGVwcyB7XG4gICAgICAgIHJldHVybiBbWzAsIG1pbl0sIC4uLihrZXlTdGVwcyB8fCBbXSksIFsxMDAsIG1heF1dO1xuICAgIH1cbn1cbiJdfQ==