import { CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_SPACE, svgNodeFilter } from '@taiga-ui/cdk';
/**
 * @deprecated: use {@link tuiGetWordRange} instead
 * Creates a cloned range with its boundaries set at word boundaries
 *
 * @param currentRange a range to clone
 * @return modified range
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function getWordRange(currentRange) {
    const range = currentRange.cloneRange();
    const { startContainer, startOffset, endContainer, endOffset } = range;
    const { ownerDocument } = startContainer;
    if (!ownerDocument) {
        return range;
    }
    const treeWalker = ownerDocument.createTreeWalker(ownerDocument.body, NodeFilter.SHOW_TEXT, svgNodeFilter, false);
    treeWalker.currentNode = startContainer;
    do {
        const container = treeWalker.currentNode;
        const textContent = container.textContent || ``;
        const content = container === startContainer
            ? textContent.slice(0, Math.max(0, startOffset + 1))
            : textContent;
        const offset = Math.max(content.lastIndexOf(` `), content.lastIndexOf(CHAR_NO_BREAK_SPACE), content.lastIndexOf(CHAR_ZERO_WIDTH_SPACE)) + 1;
        range.setStart(container, 0);
        if (offset) {
            range.setStart(container, offset);
            break;
        }
    } while (treeWalker.previousNode());
    treeWalker.currentNode = endContainer;
    do {
        const container = treeWalker.currentNode;
        const textContent = container.textContent || ``;
        const content = container === endContainer ? textContent.slice(endOffset + 1) : textContent;
        const offset = [
            content.indexOf(` `),
            content.indexOf(CHAR_NO_BREAK_SPACE),
            content.indexOf(CHAR_ZERO_WIDTH_SPACE),
        ].reduce((result, item) => result === -1 || item === -1
            ? Math.max(result, item)
            : Math.min(result, item), -1);
        range.setEnd(container, textContent.length);
        if (offset !== -1) {
            range.setEnd(container, offset + textContent.length - content.length);
            break;
        }
    } while (treeWalker.nextNode());
    return range;
}
export const tuiGetWordRange = getWordRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdvcmQtcmFuZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L3V0aWxzL2RvbS8iLCJzb3VyY2VzIjpbImdldC13b3JkLXJhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEY7Ozs7OztHQU1HO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxZQUFZLENBQUMsWUFBbUI7SUFDNUMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sRUFBQyxjQUFjLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUMsR0FBRyxLQUFLLENBQUM7SUFDckUsTUFBTSxFQUFDLGFBQWEsRUFBQyxHQUFHLGNBQWMsQ0FBQztJQUV2QyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2hCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUM3QyxhQUFhLENBQUMsSUFBSSxFQUNsQixVQUFVLENBQUMsU0FBUyxFQUNwQixhQUFhLEVBQ2IsS0FBSyxDQUNSLENBQUM7SUFFRixVQUFVLENBQUMsV0FBVyxHQUFHLGNBQWMsQ0FBQztJQUV4QyxHQUFHO1FBQ0MsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNoRCxNQUFNLE9BQU8sR0FDVCxTQUFTLEtBQUssY0FBYztZQUN4QixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDdEIsTUFBTSxNQUFNLEdBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FDSixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUN4QixPQUFPLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEVBQ3hDLE9BQU8sQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FDN0MsR0FBRyxDQUFDLENBQUM7UUFFVixLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLE1BQU0sRUFBRTtZQUNSLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2xDLE1BQU07U0FDVDtLQUNKLFFBQVEsVUFBVSxDQUFDLFlBQVksRUFBRSxFQUFFO0lBRXBDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDO0lBRXRDLEdBQUc7UUFDQyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQ2hELE1BQU0sT0FBTyxHQUNULFNBQVMsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDaEYsTUFBTSxNQUFNLEdBQUc7WUFDWCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNwQixPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1lBQ3BDLE9BQU8sQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUM7U0FDekMsQ0FBQyxNQUFNLENBQ0osQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FDYixNQUFNLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFDaEMsQ0FBQyxDQUFDLENBQ0wsQ0FBQztRQUVGLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QyxJQUFJLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNmLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RSxNQUFNO1NBQ1Q7S0FDSixRQUFRLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUVoQyxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q0hBUl9OT19CUkVBS19TUEFDRSwgQ0hBUl9aRVJPX1dJRFRIX1NQQUNFLCBzdmdOb2RlRmlsdGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayB0dWlHZXRXb3JkUmFuZ2V9IGluc3RlYWRcbiAqIENyZWF0ZXMgYSBjbG9uZWQgcmFuZ2Ugd2l0aCBpdHMgYm91bmRhcmllcyBzZXQgYXQgd29yZCBib3VuZGFyaWVzXG4gKlxuICogQHBhcmFtIGN1cnJlbnRSYW5nZSBhIHJhbmdlIHRvIGNsb25lXG4gKiBAcmV0dXJuIG1vZGlmaWVkIHJhbmdlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkUmFuZ2UoY3VycmVudFJhbmdlOiBSYW5nZSk6IFJhbmdlIHtcbiAgICBjb25zdCByYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gICAgY29uc3Qge3N0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXR9ID0gcmFuZ2U7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gc3RhcnRDb250YWluZXI7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cblxuICAgIGNvbnN0IHRyZWVXYWxrZXIgPSBvd25lckRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgICAgIG93bmVyRG9jdW1lbnQuYm9keSxcbiAgICAgICAgTm9kZUZpbHRlci5TSE9XX1RFWFQsXG4gICAgICAgIHN2Z05vZGVGaWx0ZXIsXG4gICAgICAgIGZhbHNlLFxuICAgICk7XG5cbiAgICB0cmVlV2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhcnRDb250YWluZXI7XG5cbiAgICBkbyB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRyZWVXYWxrZXIuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gY29udGFpbmVyLnRleHRDb250ZW50IHx8IGBgO1xuICAgICAgICBjb25zdCBjb250ZW50ID1cbiAgICAgICAgICAgIGNvbnRhaW5lciA9PT0gc3RhcnRDb250YWluZXJcbiAgICAgICAgICAgICAgICA/IHRleHRDb250ZW50LnNsaWNlKDAsIE1hdGgubWF4KDAsIHN0YXJ0T2Zmc2V0ICsgMSkpXG4gICAgICAgICAgICAgICAgOiB0ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID1cbiAgICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgICAgIGNvbnRlbnQubGFzdEluZGV4T2YoYCBgKSxcbiAgICAgICAgICAgICAgICBjb250ZW50Lmxhc3RJbmRleE9mKENIQVJfTk9fQlJFQUtfU1BBQ0UpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQubGFzdEluZGV4T2YoQ0hBUl9aRVJPX1dJRFRIX1NQQUNFKSxcbiAgICAgICAgICAgICkgKyAxO1xuXG4gICAgICAgIHJhbmdlLnNldFN0YXJ0KGNvbnRhaW5lciwgMCk7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoY29udGFpbmVyLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlICh0cmVlV2Fsa2VyLnByZXZpb3VzTm9kZSgpKTtcblxuICAgIHRyZWVXYWxrZXIuY3VycmVudE5vZGUgPSBlbmRDb250YWluZXI7XG5cbiAgICBkbyB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRyZWVXYWxrZXIuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gY29udGFpbmVyLnRleHRDb250ZW50IHx8IGBgO1xuICAgICAgICBjb25zdCBjb250ZW50ID1cbiAgICAgICAgICAgIGNvbnRhaW5lciA9PT0gZW5kQ29udGFpbmVyID8gdGV4dENvbnRlbnQuc2xpY2UoZW5kT2Zmc2V0ICsgMSkgOiB0ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gW1xuICAgICAgICAgICAgY29udGVudC5pbmRleE9mKGAgYCksXG4gICAgICAgICAgICBjb250ZW50LmluZGV4T2YoQ0hBUl9OT19CUkVBS19TUEFDRSksXG4gICAgICAgICAgICBjb250ZW50LmluZGV4T2YoQ0hBUl9aRVJPX1dJRFRIX1NQQUNFKSxcbiAgICAgICAgXS5yZWR1Y2UoXG4gICAgICAgICAgICAocmVzdWx0LCBpdGVtKSA9PlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9PT0gLTEgfHwgaXRlbSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heChyZXN1bHQsIGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIDogTWF0aC5taW4ocmVzdWx0LCBpdGVtKSxcbiAgICAgICAgICAgIC0xLFxuICAgICAgICApO1xuXG4gICAgICAgIHJhbmdlLnNldEVuZChjb250YWluZXIsIHRleHRDb250ZW50Lmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKG9mZnNldCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChjb250YWluZXIsIG9mZnNldCArIHRleHRDb250ZW50Lmxlbmd0aCAtIGNvbnRlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAodHJlZVdhbGtlci5uZXh0Tm9kZSgpKTtcblxuICAgIHJldHVybiByYW5nZTtcbn1cblxuZXhwb3J0IGNvbnN0IHR1aUdldFdvcmRSYW5nZSA9IGdldFdvcmRSYW5nZTtcbiJdfQ==