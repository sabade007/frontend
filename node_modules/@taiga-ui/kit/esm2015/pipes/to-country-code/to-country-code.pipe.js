import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_COUNTRIES_MASKS } from '@taiga-ui/kit/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion, } from '@taiga-ui/kit/utils';
// @dynamic
let TuiToCountryCodePipe = class TuiToCountryCodePipe {
    constructor(countriesMasks) {
        this.countriesMasks = countriesMasks;
    }
    transform(value, countries) {
        return countries.find(countryIsoCode => {
            const ruCodeTest = countryIsoCode === TuiCountryIsoCode.RU &&
                /^[78]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 ===
                    tuiGetMaxAllowedPhoneLength(this.countriesMasks, TuiCountryIsoCode.RU);
            const matched = ruCodeTest ||
                (value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, ``)) &&
                    value.length + 1 ===
                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));
            if (matched) {
                switch (countryIsoCode) {
                    case TuiCountryIsoCode.RU:
                        return tuiNotKzRegion(value);
                    case TuiCountryIsoCode.KZ:
                        return !tuiNotKzRegion(value);
                    default:
                        return true;
                }
            }
            return false;
        });
    }
};
TuiToCountryCodePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_COUNTRIES_MASKS,] }] }
];
TuiToCountryCodePipe = __decorate([
    Pipe({
        name: `tuiToCountryCode`,
    }),
    __param(0, Inject(TUI_COUNTRIES_MASKS))
], TuiToCountryCodePipe);
export { TuiToCountryCodePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tY291bnRyeS1jb2RlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L3BpcGVzL3RvLWNvdW50cnktY29kZS8iLCJzb3VyY2VzIjpbInRvLWNvdW50cnktY29kZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQ0gsMkJBQTJCLEVBQzNCLG1CQUFtQixFQUNuQixjQUFjLEdBQ2pCLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsV0FBVztBQUlYLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBQzdCLFlBRXFCLGNBQWlEO1FBQWpELG1CQUFjLEdBQWQsY0FBYyxDQUFtQztJQUNuRSxDQUFDO0lBRUosU0FBUyxDQUNMLEtBQWEsRUFDYixTQUF1QztRQUV2QyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDbkMsTUFBTSxVQUFVLEdBQ1osY0FBYyxLQUFLLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNuQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUM1QixLQUFLLENBQUMsTUFBTSxHQUFHLENBQUM7b0JBQ1osMkJBQTJCLENBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQ25CLGlCQUFpQixDQUFDLEVBQUUsQ0FDdkIsQ0FBQztZQUVWLE1BQU0sT0FBTyxHQUNULFVBQVU7Z0JBQ1YsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUNiLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUM1RCxTQUFTLEVBQ1QsRUFBRSxDQUNMLENBQ0o7b0JBQ0csS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO3dCQUNaLDJCQUEyQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUU5RSxJQUFJLE9BQU8sRUFBRTtnQkFDVCxRQUFRLGNBQWMsRUFBRTtvQkFDcEIsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFO3dCQUNyQixPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDakMsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFO3dCQUNyQixPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNsQzt3QkFDSSxPQUFPLElBQUksQ0FBQztpQkFDbkI7YUFDSjtZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7OzRDQTVDUSxNQUFNLFNBQUMsbUJBQW1COztBQUZ0QixvQkFBb0I7SUFIaEMsSUFBSSxDQUFDO1FBQ0YsSUFBSSxFQUFFLGtCQUFrQjtLQUMzQixDQUFDO0lBR08sV0FBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtHQUZ2QixvQkFBb0IsQ0E4Q2hDO1NBOUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q0hBUl9QTFVTfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpQ291bnRyeUlzb0NvZGV9IGZyb20gJ0B0YWlnYS11aS9pMThuJztcbmltcG9ydCB7VFVJX0NPVU5UUklFU19NQVNLU30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtcbiAgICB0dWlHZXRNYXhBbGxvd2VkUGhvbmVMZW5ndGgsXG4gICAgdHVpSXNvVG9Db3VudHJ5Q29kZSxcbiAgICB0dWlOb3RLelJlZ2lvbixcbn0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbi8vIEBkeW5hbWljXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aVRvQ291bnRyeUNvZGVgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUb0NvdW50cnlDb2RlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9DT1VOVFJJRVNfTUFTS1MpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY291bnRyaWVzTWFza3M6IFJlY29yZDxUdWlDb3VudHJ5SXNvQ29kZSwgc3RyaW5nPixcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm0oXG4gICAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICAgIGNvdW50cmllczogcmVhZG9ubHkgVHVpQ291bnRyeUlzb0NvZGVbXSxcbiAgICApOiBUdWlDb3VudHJ5SXNvQ29kZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBjb3VudHJpZXMuZmluZChjb3VudHJ5SXNvQ29kZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBydUNvZGVUZXN0ID1cbiAgICAgICAgICAgICAgICBjb3VudHJ5SXNvQ29kZSA9PT0gVHVpQ291bnRyeUlzb0NvZGUuUlUgJiZcbiAgICAgICAgICAgICAgICAvXls3OF0vLnRlc3QodmFsdWUpICYmXG4gICAgICAgICAgICAgICAgL14oPyE4ODBbMS05IF0pLy50ZXN0KHZhbHVlKSAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLmxlbmd0aCArIDEgPT09XG4gICAgICAgICAgICAgICAgICAgIHR1aUdldE1heEFsbG93ZWRQaG9uZUxlbmd0aChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRyaWVzTWFza3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBUdWlDb3VudHJ5SXNvQ29kZS5SVSxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9XG4gICAgICAgICAgICAgICAgcnVDb2RlVGVzdCB8fFxuICAgICAgICAgICAgICAgICh2YWx1ZS5zdGFydHNXaXRoKFxuICAgICAgICAgICAgICAgICAgICB0dWlJc29Ub0NvdW50cnlDb2RlKHRoaXMuY291bnRyaWVzTWFza3MsIGNvdW50cnlJc29Db2RlKS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgQ0hBUl9QTFVTLFxuICAgICAgICAgICAgICAgICAgICAgICAgYGAsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggKyAxID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgdHVpR2V0TWF4QWxsb3dlZFBob25lTGVuZ3RoKHRoaXMuY291bnRyaWVzTWFza3MsIGNvdW50cnlJc29Db2RlKSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb3VudHJ5SXNvQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLlJVOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR1aU5vdEt6UmVnaW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5LWjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdHVpTm90S3pSZWdpb24odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==