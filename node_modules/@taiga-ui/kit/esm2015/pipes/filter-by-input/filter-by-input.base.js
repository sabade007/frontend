import { __decorate } from "tslib";
/* eslint-disable @typescript-eslint/naming-convention */
import { isPresent, tuiPure, } from '@taiga-ui/cdk';
import { isFlat } from '@taiga-ui/kit/utils';
/**
 * @deprecated
 * TODO: 3.0 replace with {@link AbstractTuiFilterByInput}
 */
export class TuiFilterByInputBase {
    get query() {
        return this.accessor.nativeFocusableElement
            ? this.accessor.nativeFocusableElement.value || ``
            : ``;
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return isFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return isPresent(match)
            ? items
            : items.filter(item => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find(item => isPresent(this.getMatch(item, stringify, query)));
        return isPresent(match)
            ? items
            : items.map(inner => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find(item => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
}
__decorate([
    tuiPure
], TuiFilterByInputBase.prototype, "filter", null);
export class AbstractTuiFilterByInput extends TuiFilterByInputBase {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LmJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L3BpcGVzL2ZpbHRlci1ieS1pbnB1dC8iLCJzb3VyY2VzIjpbImZpbHRlci1ieS1pbnB1dC5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx5REFBeUQ7QUFDekQsT0FBTyxFQUNILFNBQVMsRUFFVCxPQUFPLEdBR1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBUTNDOzs7R0FHRztBQUNILE1BQU0sT0FBZ0Isb0JBQW9CO0lBR3RDLElBQWMsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0I7WUFDdkMsQ0FBQyxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQTJDLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDeEUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFHUyxNQUFNLENBQ1osS0FBd0QsRUFDeEQsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQztZQUNuRCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRU8sVUFBVSxDQUNkLEtBQW1CLEVBQ25CLE9BQTRCLEVBQzVCLFNBQThCLEVBQzlCLEtBQWE7UUFFYixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFckQsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTyxRQUFRLENBQ1osS0FBa0MsRUFDbEMsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDNUIsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUNuRCxDQUFDO1FBRUYsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVPLFFBQVEsQ0FDWixLQUFtQixFQUNuQixTQUE4QixFQUM5QixLQUFhO1FBRWIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNiLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLEtBQUssS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQzVFLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFwREc7SUFEQyxPQUFPO2tEQWNQO0FBeUNMLE1BQU0sT0FBZ0Isd0JBQXlCLFNBQVEsb0JBQW9CO0NBQUciLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmltcG9ydCB7XG4gICAgaXNQcmVzZW50LFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICB0dWlQdXJlLFxuICAgIFR1aVN0cmluZ0hhbmRsZXIsXG4gICAgVHVpU3RyaW5nTWF0Y2hlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge2lzRmxhdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIEFycmF5RWxlbWVudDxBPiA9IEEgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIFQ+XG4gICAgPyBBIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxSZWFkb25seUFycmF5PGluZmVyIEc+PlxuICAgICAgICA/IEdcbiAgICAgICAgOiBUXG4gICAgOiBuZXZlcjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICogVE9ETzogMy4wIHJlcGxhY2Ugd2l0aCB7QGxpbmsgQWJzdHJhY3RUdWlGaWx0ZXJCeUlucHV0fVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVHVpRmlsdGVyQnlJbnB1dEJhc2Uge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBhY2Nlc3NvcjogVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yO1xuXG4gICAgcHJvdGVjdGVkIGdldCBxdWVyeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3Nvci5uYXRpdmVGb2N1c2FibGVFbGVtZW50XG4gICAgICAgICAgICA/ICh0aGlzLmFjY2Vzc29yLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgfHwgYGBcbiAgICAgICAgICAgIDogYGA7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcm90ZWN0ZWQgZmlsdGVyPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPixcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwge1xuICAgICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0ZsYXQoaXRlbXMpXG4gICAgICAgICAgICA/IHRoaXMuZmlsdGVyRmxhdChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSlcbiAgICAgICAgICAgIDogdGhpcy5maWx0ZXIyZChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXJGbGF0PFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+LFxuICAgICAgICBzdHJpbmdpZnk6IFR1aVN0cmluZ0hhbmRsZXI8VD4sXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLmdldE1hdGNoKGl0ZW1zLCBzdHJpbmdpZnksIHF1ZXJ5KTtcblxuICAgICAgICByZXR1cm4gaXNQcmVzZW50KG1hdGNoKVxuICAgICAgICAgICAgPyBpdGVtc1xuICAgICAgICAgICAgOiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBtYXRjaGVyKGl0ZW0sIHF1ZXJ5LCBzdHJpbmdpZnkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlcjJkPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+LFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+LFxuICAgICAgICBzdHJpbmdpZnk6IFR1aVN0cmluZ0hhbmRsZXI8VD4sXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBpdGVtcy5maW5kKGl0ZW0gPT5cbiAgICAgICAgICAgIGlzUHJlc2VudCh0aGlzLmdldE1hdGNoKGl0ZW0sIHN0cmluZ2lmeSwgcXVlcnkpKSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gaXNQcmVzZW50KG1hdGNoKVxuICAgICAgICAgICAgPyBpdGVtc1xuICAgICAgICAgICAgOiBpdGVtcy5tYXAoaW5uZXIgPT4gdGhpcy5maWx0ZXJGbGF0KGlubmVyLCBtYXRjaGVyLCBzdHJpbmdpZnksIHF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNYXRjaDxUPihcbiAgICAgICAgaXRlbXM6IHJlYWRvbmx5IFRbXSxcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gaXRlbXMuZmluZChcbiAgICAgICAgICAgIGl0ZW0gPT4gc3RyaW5naWZ5KGl0ZW0pLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHF1ZXJ5LnRvTG9jYWxlTG93ZXJDYXNlKCksXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlGaWx0ZXJCeUlucHV0IGV4dGVuZHMgVHVpRmlsdGVyQnlJbnB1dEJhc2Uge31cbiJdfQ==