import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiLazyLoadingService } from './lazy-loading.service';
let TuiLazyLoadingDirective = class TuiLazyLoadingDirective {
    constructor(src$, elementRef) {
        this.src$ = src$;
        this.elementRef = elementRef;
        this.animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';
        this.background = 'var(--tui-clear-hover)';
        this.src = null;
        if (!this.supported) {
            this.src$.subscribe(src => {
                this.src = src;
            });
        }
    }
    set srcSetter(src) {
        this.src = this.supported ? src : null;
        this.src$.next(src);
    }
    get supported() {
        return 'loading' in this.elementRef.nativeElement;
    }
    onLoad() {
        this.background = '';
        this.animation = '';
    }
};
TuiLazyLoadingDirective.ctorParameters = () => [
    { type: TuiLazyLoadingService, decorators: [{ type: Inject, args: [TuiLazyLoadingService,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input('src')
], TuiLazyLoadingDirective.prototype, "srcSetter", null);
__decorate([
    HostBinding('style.animation')
], TuiLazyLoadingDirective.prototype, "animation", void 0);
__decorate([
    HostBinding('style.background')
], TuiLazyLoadingDirective.prototype, "background", void 0);
__decorate([
    HostBinding('attr.src')
], TuiLazyLoadingDirective.prototype, "src", void 0);
__decorate([
    HostListener('load')
], TuiLazyLoadingDirective.prototype, "onLoad", null);
TuiLazyLoadingDirective = __decorate([
    Directive({
        selector: 'img[loading="lazy"]',
        providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService],
    }),
    __param(0, Inject(TuiLazyLoadingService)),
    __param(1, Inject(ElementRef))
], TuiLazyLoadingDirective);
export { TuiLazyLoadingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvZGlyZWN0aXZlcy9sYXp5LWxvYWRpbmcvIiwic291cmNlcyI6WyJsYXp5LWxvYWRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDL0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBTTdELElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBZ0JoQyxZQUVxQixJQUEyQixFQUUzQixVQUF3QztRQUZ4QyxTQUFJLEdBQUosSUFBSSxDQUF1QjtRQUUzQixlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQVo3RCxjQUFTLEdBQUcsbURBQW1ELENBQUM7UUFHaEUsZUFBVSxHQUFHLHdCQUF3QixDQUFDO1FBR3RDLFFBQUcsR0FBb0MsSUFBSSxDQUFDO1FBUXhDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQXpCRCxJQUFJLFNBQVMsQ0FBQyxHQUE2QjtRQUN2QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUF3QkQsSUFBWSxTQUFTO1FBQ2pCLE9BQU8sU0FBUyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3RELENBQUM7SUFHRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBcEI4QixxQkFBcUIsdUJBRDNDLE1BQU0sU0FBQyxxQkFBcUI7WUFHQSxVQUFVLHVCQUR0QyxNQUFNLFNBQUMsVUFBVTs7QUFqQnRCO0lBREMsS0FBSyxDQUFDLEtBQUssQ0FBQzt3REFJWjtBQUdEO0lBREMsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzBEQUNpQztBQUdoRTtJQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzsyREFDTTtBQUd0QztJQURDLFdBQVcsQ0FBQyxVQUFVLENBQUM7b0RBQ29CO0FBb0I1QztJQURDLFlBQVksQ0FBQyxNQUFNLENBQUM7cURBSXBCO0FBckNRLHVCQUF1QjtJQUpuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLGlCQUFpQixDQUFDO0tBQ3JGLENBQUM7SUFrQk8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUU3QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQW5CZCx1QkFBdUIsQ0FzQ25DO1NBdENZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVSZXNvdXJjZVVybH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge0ludGVyc2VjdGlvbk9ic2VydmVyU2VydmljZX0gZnJvbSAnQG5nLXdlYi1hcGlzL2ludGVyc2VjdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuaW1wb3J0IHtUdWlMYXp5TG9hZGluZ1NlcnZpY2V9IGZyb20gJy4vbGF6eS1sb2FkaW5nLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2ltZ1tsb2FkaW5nPVwibGF6eVwiXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpTGF6eUxvYWRpbmdTZXJ2aWNlLCBJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2UsIFR1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTGF6eUxvYWRpbmdEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgnc3JjJylcbiAgICBzZXQgc3JjU2V0dGVyKHNyYzogU2FmZVJlc291cmNlVXJsIHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3JjID0gdGhpcy5zdXBwb3J0ZWQgPyBzcmMgOiBudWxsO1xuICAgICAgICB0aGlzLnNyYyQubmV4dChzcmMpO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuYW5pbWF0aW9uJylcbiAgICBhbmltYXRpb24gPSAndHVpU2tlbGV0b25WaWJlIGVhc2UtaW4tb3V0IDFzIGluZmluaXRlIGFsdGVybmF0ZSc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmJhY2tncm91bmQnKVxuICAgIGJhY2tncm91bmQgPSAndmFyKC0tdHVpLWNsZWFyLWhvdmVyKSc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuc3JjJylcbiAgICBzcmM6IFNhZmVSZXNvdXJjZVVybCB8IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpTGF6eUxvYWRpbmdTZXJ2aWNlKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNyYyQ6IFR1aUxhenlMb2FkaW5nU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEltYWdlRWxlbWVudD4sXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjJC5zdWJzY3JpYmUoc3JjID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IHNyYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgc3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gJ2xvYWRpbmcnIGluIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2xvYWQnKVxuICAgIG9uTG9hZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gJyc7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gJyc7XG4gICAgfVxufVxuIl19