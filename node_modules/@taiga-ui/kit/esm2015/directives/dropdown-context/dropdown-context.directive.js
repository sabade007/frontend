var TuiDropdownContextDirective_1;
import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Directive, ElementRef, forwardRef, HostListener, Inject, Injector, Input, } from '@angular/core';
import { EMPTY_CLIENT_RECT, getClosestFocusable, getNativeFocused, setNativeFocused, TuiActiveZoneDirective, tuiDefaultProp, TuiDestroyService, tuiPointToClientRect, TuiPortalService, } from '@taiga-ui/cdk';
import { AbstractTuiDropdown, TUI_DROPDOWN_DIRECTIVE } from '@taiga-ui/core';
import { EMPTY, Observable } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
// @dynamic
let TuiDropdownContextDirective = TuiDropdownContextDirective_1 = class TuiDropdownContextDirective extends AbstractTuiDropdown {
    constructor(elementRef, documentRef, destroy$, componentFactoryResolver, injector, portalService, activeZone) {
        super(componentFactoryResolver, injector, portalService, elementRef, activeZone);
        this.elementRef = elementRef;
        this.documentRef = documentRef;
        this.activeZone = activeZone;
        this.lastClickedClientRect = EMPTY_CLIENT_RECT;
        this.content = '';
        this.refresh$ = EMPTY;
        this.context = { close: () => this.closeDropdownBox() };
        activeZone.tuiActiveZoneChange
            .pipe(filter(isActive => !isActive), takeUntil(destroy$))
            .subscribe(() => this.closeDropdownBox());
    }
    get clientRect() {
        return this.lastClickedClientRect;
    }
    get fixed() {
        return true;
    }
    get dropdownContent() {
        var _a, _b;
        return ((_b = (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) || null;
    }
    onHostClick() {
        this.closeDropdownBox();
    }
    onContextMenu(x, y) {
        this.closeDropdownBox();
        this.openDropdown(x, y);
    }
    onAnotherContextOpen(target) {
        const isAnotherContextOpened = !this.elementRef.nativeElement.contains(target);
        if (isAnotherContextOpened) {
            this.closeDropdownBox();
        }
    }
    onArrow(event, down) {
        const activeElement = getNativeFocused(this.documentRef);
        const focusInside = activeElement && this.activeZone.contains(activeElement);
        if (!this.dropdownContent || focusInside) {
            return;
        }
        event.preventDefault();
        const nextEl = this.dropdownContent.nextElementSibling;
        const initial = down || !this.checkIsFocusableElement(nextEl) ? this.dropdownContent : nextEl;
        const focusable = getClosestFocusable(initial, !down, this.dropdownContent);
        if (focusable === null) {
            return;
        }
        setNativeFocused(focusable);
    }
    onKeyDownEsc(event) {
        if (!this.dropdownContent) {
            return;
        }
        event.stopPropagation();
        this.closeDropdownBox();
    }
    openDropdown(x, y) {
        this.lastClickedClientRect = tuiPointToClientRect(x, y);
        this.openDropdownBox();
    }
    checkIsFocusableElement(element) {
        return !!element && 'focus' in element && 'blur' in element;
    }
};
TuiDropdownContextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: ComponentFactoryResolver, decorators: [{ type: Inject, args: [ComponentFactoryResolver,] }] },
    { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] },
    { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] },
    { type: TuiActiveZoneDirective }
];
__decorate([
    Input('tuiDropdownContext'),
    tuiDefaultProp()
], TuiDropdownContextDirective.prototype, "content", void 0);
__decorate([
    HostListener('click')
], TuiDropdownContextDirective.prototype, "onHostClick", null);
__decorate([
    HostListener('contextmenu.prevent', ['$event.clientX', '$event.clientY'])
], TuiDropdownContextDirective.prototype, "onContextMenu", null);
__decorate([
    HostListener('document:contextmenu', ['$event.target'])
], TuiDropdownContextDirective.prototype, "onAnotherContextOpen", null);
__decorate([
    HostListener('document:keydown.arrowDown', ['$event', 'true']),
    HostListener('document:keydown.arrowUp', ['$event', 'false'])
], TuiDropdownContextDirective.prototype, "onArrow", null);
__decorate([
    HostListener('document:keydown.esc', ['$event'])
], TuiDropdownContextDirective.prototype, "onKeyDownEsc", null);
TuiDropdownContextDirective = TuiDropdownContextDirective_1 = __decorate([
    Directive({
        selector: '[tuiDropdownContext]',
        providers: [
            TuiDestroyService,
            TuiActiveZoneDirective,
            {
                provide: TUI_DROPDOWN_DIRECTIVE,
                useExisting: forwardRef(() => TuiDropdownContextDirective_1),
            },
        ],
    }),
    __param(1, Inject(DOCUMENT)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(ComponentFactoryResolver)),
    __param(4, Inject(Injector)),
    __param(5, Inject(TuiPortalService))
], TuiDropdownContextDirective);
export { TuiDropdownContextDirective };
//# sourceMappingURL=data:application/json;base64,