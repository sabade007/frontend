import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Inject } from '@angular/core';
import { getClosestFocusable, isNativeFocusedIn, isPresent, setNativeMouseFocused, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { TuiHostedDropdownComponent } from '@taiga-ui/core';
import { merge, Observable, of, timer } from 'rxjs';
import { debounce, debounceTime, distinctUntilChanged, filter, map, mapTo, share, switchMap, takeUntil, tap, } from 'rxjs/operators';
let TuiDropdownHoverDirective = class TuiDropdownHoverDirective {
    constructor(destroy$, { nativeElement }, dropdown) {
        this.dropdown = dropdown;
        const dropdown$ = dropdown.openChange.pipe(
        // Give change detection time to open dropdown
        debounceTime(0), map(() => dropdown.dropdown), filter(isPresent), share());
        const open$ = merge(typedFromEvent(nativeElement, 'mouseenter'), typedFromEvent(nativeElement, 'click').pipe(tap(e => e.stopImmediatePropagation())), dropdown$.pipe(switchMap(element => merge(typedFromEvent(element, 'focusin'), typedFromEvent(element, 'mouseenter'))))).pipe(mapTo(true));
        const close$ = merge(typedFromEvent(nativeElement, 'mouseleave'), dropdown$.pipe(switchMap(element => typedFromEvent(element, 'mouseleave').pipe(filter(() => !isNativeFocusedIn(element)))))).pipe(mapTo(false));
        merge(open$, close$)
            .pipe(debounce(value => (value ? of(value) : timer(300))), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe(open => {
            dropdown.updateOpen(open);
        });
    }
    onMouseEnter() {
        const { host } = this.dropdown;
        if (isNativeFocusedIn(host)) {
            return;
        }
        const focusable = getClosestFocusable(host, false, host, false);
        if (focusable) {
            setNativeMouseFocused(focusable);
        }
    }
};
TuiDropdownHoverDirective.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHostedDropdownComponent, decorators: [{ type: Inject, args: [TuiHostedDropdownComponent,] }] }
];
__decorate([
    HostListener('mouseenter')
], TuiDropdownHoverDirective.prototype, "onMouseEnter", null);
TuiDropdownHoverDirective = __decorate([
    Directive({
        selector: 'tui-hosted-dropdown[tuiDropdownHover]',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(TuiDestroyService)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiHostedDropdownComponent))
], TuiDropdownHoverDirective);
export { TuiDropdownHoverDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taG92ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9kaXJlY3RpdmVzL2Ryb3Bkb3duLWhvdmVyLyIsInNvdXJjZXMiOlsiZHJvcGRvd24taG92ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFDSCxtQkFBbUIsRUFDbkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxxQkFBcUIsRUFDckIsaUJBQWlCLEVBQ2pCLGNBQWMsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQ0gsUUFBUSxFQUNSLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsR0FBRyxHQUNOLE1BQU0sZ0JBQWdCLENBQUM7QUFNeEIsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFDbEMsWUFDK0IsUUFBMEIsRUFDakMsRUFBQyxhQUFhLEVBQTBCLEVBRTNDLFFBQW9DO1FBQXBDLGFBQVEsR0FBUixRQUFRLENBQTRCO1FBRXJELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSTtRQUN0Qyw4Q0FBOEM7UUFDOUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQzVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDakIsS0FBSyxFQUFFLENBQ1YsQ0FBQztRQUVGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FDZixjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxFQUMzQyxjQUFjLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FDekMsRUFDRCxTQUFTLENBQUMsSUFBSSxDQUNWLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNoQixLQUFLLENBQ0QsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFDbEMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FDeEMsQ0FDSixDQUNKLENBQ0osQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFcEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUNoQixjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxFQUMzQyxTQUFTLENBQUMsSUFBSSxDQUNWLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNoQixjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDdEMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FDNUMsQ0FDSixDQUNKLENBQ0osQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFckIsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7YUFDZixJQUFJLENBQ0QsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDbkQsb0JBQW9CLEVBQUUsRUFDdEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjthQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNkLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBR0QsWUFBWTtRQUNSLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRTdCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsT0FBTztTQUNWO1FBRUQsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFaEUsSUFBSSxTQUFTLEVBQUU7WUFDWCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUM7Q0FDSixDQUFBOztZQWhFNEMsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjtZQUNZLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxVQUFVO1lBRVMsMEJBQTBCLHVCQURwRCxNQUFNLFNBQUMsMEJBQTBCOztBQWlEdEM7SUFEQyxZQUFZLENBQUMsWUFBWSxDQUFDOzZEQWExQjtBQWpFUSx5QkFBeUI7SUFKckMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHVDQUF1QztRQUNqRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNqQyxDQUFDO0lBR08sV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN6QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0dBSjlCLHlCQUF5QixDQWtFckM7U0FsRVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgZ2V0Q2xvc2VzdEZvY3VzYWJsZSxcbiAgICBpc05hdGl2ZUZvY3VzZWRJbixcbiAgICBpc1ByZXNlbnQsXG4gICAgc2V0TmF0aXZlTW91c2VGb2N1c2VkLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpSG9zdGVkRHJvcGRvd25Db21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGUsIG9mLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRlYm91bmNlLFxuICAgIGRlYm91bmNlVGltZSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwLFxuICAgIG1hcFRvLFxuICAgIHNoYXJlLFxuICAgIHN3aXRjaE1hcCxcbiAgICB0YWtlVW50aWwsXG4gICAgdGFwLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndHVpLWhvc3RlZC1kcm9wZG93blt0dWlEcm9wZG93bkhvdmVyXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlEcm9wZG93bkhvdmVyRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlIb3N0ZWREcm9wZG93bkNvbXBvbmVudClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkcm9wZG93bjogVHVpSG9zdGVkRHJvcGRvd25Db21wb25lbnQsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duJCA9IGRyb3Bkb3duLm9wZW5DaGFuZ2UucGlwZShcbiAgICAgICAgICAgIC8vIEdpdmUgY2hhbmdlIGRldGVjdGlvbiB0aW1lIHRvIG9wZW4gZHJvcGRvd25cbiAgICAgICAgICAgIGRlYm91bmNlVGltZSgwKSxcbiAgICAgICAgICAgIG1hcCgoKSA9PiBkcm9wZG93bi5kcm9wZG93biksXG4gICAgICAgICAgICBmaWx0ZXIoaXNQcmVzZW50KSxcbiAgICAgICAgICAgIHNoYXJlKCksXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgb3BlbiQgPSBtZXJnZShcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJyksXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnY2xpY2snKS5waXBlKFxuICAgICAgICAgICAgICAgIHRhcChlID0+IGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGRyb3Bkb3duJC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChlbGVtZW50ID0+XG4gICAgICAgICAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ2ZvY3VzaW4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdtb3VzZWVudGVyJyksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZShtYXBUbyh0cnVlKSk7XG5cbiAgICAgICAgY29uc3QgY2xvc2UkID0gbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpLFxuICAgICAgICAgICAgZHJvcGRvd24kLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKGVsZW1lbnQgPT5cbiAgICAgICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ21vdXNlbGVhdmUnKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKCgpID0+ICFpc05hdGl2ZUZvY3VzZWRJbihlbGVtZW50KSksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZShtYXBUbyhmYWxzZSkpO1xuXG4gICAgICAgIG1lcmdlKG9wZW4kLCBjbG9zZSQpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBkZWJvdW5jZSh2YWx1ZSA9PiAodmFsdWUgPyBvZih2YWx1ZSkgOiB0aW1lcigzMDApKSksXG4gICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShvcGVuID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi51cGRhdGVPcGVuKG9wZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpXG4gICAgb25Nb3VzZUVudGVyKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7aG9zdH0gPSB0aGlzLmRyb3Bkb3duO1xuXG4gICAgICAgIGlmIChpc05hdGl2ZUZvY3VzZWRJbihob3N0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9jdXNhYmxlID0gZ2V0Q2xvc2VzdEZvY3VzYWJsZShob3N0LCBmYWxzZSwgaG9zdCwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChmb2N1c2FibGUpIHtcbiAgICAgICAgICAgIHNldE5hdGl2ZU1vdXNlRm9jdXNlZChmb2N1c2FibGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19