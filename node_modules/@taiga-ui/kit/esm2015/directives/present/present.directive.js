import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Inject, OnDestroy, Output, } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { isCurrentTarget, isFirefox } from '@taiga-ui/cdk';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, skip } from 'rxjs/operators';
let TuiPresentDirective = class TuiPresentDirective {
    constructor({ nativeElement }, userAgent) {
        this.visibility$ = new BehaviorSubject(false);
        this.tuiPresentChange = this.visibility$.pipe(distinctUntilChanged(), skip(1));
        if (isFirefox(userAgent)) {
            return;
        }
        const observer = new MutationObserver(() => {
            if (!nativeElement.offsetParent &&
                nativeElement.offsetWidth === 0 &&
                nativeElement.offsetHeight === 0) {
                this.visibility$.next(false);
            }
        });
        observer.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['style', 'class'],
        });
    }
    /**
     * Someday animationcancel would work and mutation observer would not be needed:
     * https://drafts.csswg.org/css-animations/#eventdef-animationevent-animationcancel
     * It would also trigger on CSS like display: none on parent nodes which is awesome
     * but currently only works in Firefox
     * ___
     * TODO: remove MutationObserver when we bump versions of supported browsers:
     *** Safari 12+
     *** Chrome 83+
     * See: {@link https://caniuse.com/mdn-api_window_animationcancel_event}
     */
    onAnimation(event, visibility) {
        if (isCurrentTarget(event)) {
            this.visibility$.next(visibility);
        }
    }
    ngOnDestroy() {
        this.visibility$.next(false);
    }
};
TuiPresentDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
__decorate([
    Output()
], TuiPresentDirective.prototype, "tuiPresentChange", void 0);
__decorate([
    HostListener('animationcancel', ['$event', 'false']),
    HostListener('animationstart', ['$event', 'true'])
], TuiPresentDirective.prototype, "onAnimation", null);
TuiPresentDirective = __decorate([
    Directive({
        selector: '[tuiPresentChange]',
        host: {
            '[style.animation]': '"tuiPresent 1s infinite"',
        },
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(USER_AGENT))
], TuiPresentDirective);
export { TuiPresentDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2RpcmVjdGl2ZXMvcHJlc2VudC8iLCJzb3VyY2VzIjpbInByZXNlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBUTFELElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBTTVCLFlBQ3dCLEVBQUMsYUFBYSxFQUEwQixFQUN4QyxTQUFpQjtRQVB4QixnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBR2pELHFCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFNL0UsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsT0FBTztTQUNWO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUU7WUFDdkMsSUFDSSxDQUFDLGFBQWEsQ0FBQyxZQUFZO2dCQUMzQixhQUFhLENBQUMsV0FBVyxLQUFLLENBQUM7Z0JBQy9CLGFBQWEsQ0FBQyxZQUFZLEtBQUssQ0FBQyxFQUNsQztnQkFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDNUIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUdILFdBQVcsQ0FBQyxLQUFZLEVBQUUsVUFBbUI7UUFDekMsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDSixDQUFBOztZQTdDNEMsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLFVBQVU7eUNBQ2pCLE1BQU0sU0FBQyxVQUFVOztBQUp0QjtJQURDLE1BQU0sRUFBRTs2REFDMEU7QUF1Q25GO0lBRkMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztzREFLbEQ7QUEvQ1EsbUJBQW1CO0lBTi9CLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsSUFBSSxFQUFFO1lBQ0YsbUJBQW1CLEVBQUUsMEJBQTBCO1NBQ2xEO0tBQ0osQ0FBQztJQVFPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0dBUmQsbUJBQW1CLENBb0QvQjtTQXBEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgT25EZXN0cm95LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1VTRVJfQUdFTlR9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtpc0N1cnJlbnRUYXJnZXQsIGlzRmlyZWZveH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBza2lwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVByZXNlbnRDaGFuZ2VdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdbc3R5bGUuYW5pbWF0aW9uXSc6ICdcInR1aVByZXNlbnQgMXMgaW5maW5pdGVcIicsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJlc2VudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB2aXNpYmlsaXR5JCA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpUHJlc2VudENoYW5nZSA9IHRoaXMudmlzaWJpbGl0eSQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBza2lwKDEpKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVVNFUl9BR0VOVCkgdXNlckFnZW50OiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIGlmIChpc0ZpcmVmb3godXNlckFnZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIW5hdGl2ZUVsZW1lbnQub2Zmc2V0UGFyZW50ICYmXG4gICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0ID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2liaWxpdHkkLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnc3R5bGUnLCAnY2xhc3MnXSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU29tZWRheSBhbmltYXRpb25jYW5jZWwgd291bGQgd29yayBhbmQgbXV0YXRpb24gb2JzZXJ2ZXIgd291bGQgbm90IGJlIG5lZWRlZDpcbiAgICAgKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWFuaW1hdGlvbnMvI2V2ZW50ZGVmLWFuaW1hdGlvbmV2ZW50LWFuaW1hdGlvbmNhbmNlbFxuICAgICAqIEl0IHdvdWxkIGFsc28gdHJpZ2dlciBvbiBDU1MgbGlrZSBkaXNwbGF5OiBub25lIG9uIHBhcmVudCBub2RlcyB3aGljaCBpcyBhd2Vzb21lXG4gICAgICogYnV0IGN1cnJlbnRseSBvbmx5IHdvcmtzIGluIEZpcmVmb3hcbiAgICAgKiBfX19cbiAgICAgKiBUT0RPOiByZW1vdmUgTXV0YXRpb25PYnNlcnZlciB3aGVuIHdlIGJ1bXAgdmVyc2lvbnMgb2Ygc3VwcG9ydGVkIGJyb3dzZXJzOlxuICAgICAqKiogU2FmYXJpIDEyK1xuICAgICAqKiogQ2hyb21lIDgzK1xuICAgICAqIFNlZToge0BsaW5rIGh0dHBzOi8vY2FuaXVzZS5jb20vbWRuLWFwaV93aW5kb3dfYW5pbWF0aW9uY2FuY2VsX2V2ZW50fVxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2FuaW1hdGlvbmNhbmNlbCcsIFsnJGV2ZW50JywgJ2ZhbHNlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcignYW5pbWF0aW9uc3RhcnQnLCBbJyRldmVudCcsICd0cnVlJ10pXG4gICAgb25BbmltYXRpb24oZXZlbnQ6IEV2ZW50LCB2aXNpYmlsaXR5OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0N1cnJlbnRUYXJnZXQoZXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2liaWxpdHkkLm5leHQodmlzaWJpbGl0eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5JC5uZXh0KGZhbHNlKTtcbiAgICB9XG59XG4iXX0=