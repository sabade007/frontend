import { InjectionToken } from '@angular/core';
import { extractI18n } from '@taiga-ui/i18n';
export var TUI_CANCEL_WORD = new InjectionToken("i18n 'cancel' word", {
    factory: extractI18n("cancel"),
});
export var TUI_DONE_WORD = new InjectionToken("i18n 'done' word", {
    factory: extractI18n("done"),
});
export var TUI_MORE_WORD = new InjectionToken("i18n 'more' word", {
    factory: extractI18n("more"),
});
export var TUI_HIDE_TEXT = new InjectionToken("i18n 'hide' word", {
    factory: extractI18n("hide"),
});
export var TUI_SHOW_ALL_TEXT = new InjectionToken("i18n 'show all' word", {
    factory: extractI18n("showAll"),
});
export var TUI_OTHER_DATE_TEXT = new InjectionToken("i18n 'Other date' text", {
    factory: extractI18n("otherDate"),
});
export var TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new InjectionToken("choose day or range i18n texts", {
    factory: extractI18n("mobileCalendarTexts"),
});
export var TUI_FROM_TO_TEXTS = new InjectionToken("from and to i18n texts", {
    factory: extractI18n("range"),
});
export var TUI_PLUS_MINUS_TEXTS = new InjectionToken("plus and minus i18n texts", {
    factory: extractI18n("countTexts"),
});
export var TUI_TIME_TEXTS = new InjectionToken("time i18n texts", {
    factory: extractI18n("time"),
});
export var TUI_DATE_TEXTS = new InjectionToken("date format i18n texts", {
    factory: extractI18n("dateTexts"),
});
export var TUI_DIGITAL_INFORMATION_UNITS = new InjectionToken("short bytes, kilobytes and megabytes i18n texts", {
    factory: extractI18n("digitalInformationUnits"),
});
export var TUI_COPY_TEXTS = new InjectionToken("copy i18n texts", {
    factory: extractI18n("copyTexts"),
});
export var TUI_PASSWORD_TEXTS = new InjectionToken("password i18n texts", {
    factory: extractI18n("passwordTexts"),
});
export var TUI_CALENDAR_MONTHS = new InjectionToken("short calendar months i18n", {
    factory: extractI18n("shortCalendarMonths"),
});
export var TUI_FILE_TEXTS = new InjectionToken("file i18n texts", {
    factory: extractI18n("fileTexts"),
});
export var TUI_PAGINATION_TEXTS = new InjectionToken("pagination i18n texts", {
    factory: extractI18n("pagination"),
});
export var TUI_INPUT_FILE_TEXTS = new InjectionToken("tui-input-file i18n texts", {
    factory: extractI18n("inputFileTexts"),
});
export var TUI_COUNTRIES = new InjectionToken("Localized countries names", {
    factory: extractI18n("countries"),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvdG9rZW5zLyIsInNvdXJjZXMiOlsiaTE4bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE9BQU8sRUFBQyxXQUFXLEVBQW9CLE1BQU0sZ0JBQWdCLENBQUM7QUFHOUQsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFHLElBQUksY0FBYyxDQUFDLG9CQUFvQixFQUFFO0lBQ3BFLE9BQU8sRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDO0NBQ2pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRTtJQUNoRSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztDQUMvQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQUMsa0JBQWtCLEVBQUU7SUFDaEUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUM7Q0FDL0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixFQUFFO0lBQ2hFLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO0NBQy9CLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFDLHNCQUFzQixFQUFFO0lBQ3hFLE9BQU8sRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDO0NBQ2xDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFDLHdCQUF3QixFQUFFO0lBQzVFLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO0NBQ3BDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLElBQUksY0FBYyxDQUMzRCxnQ0FBZ0MsRUFDaEM7SUFDSSxPQUFPLEVBQUUsV0FBVyxDQUFDLHFCQUFxQixDQUFDO0NBQzlDLENBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFDLHdCQUF3QixFQUFFO0lBQzFFLE9BQU8sRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDO0NBQ2hDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFDLDJCQUEyQixFQUFFO0lBQ2hGLE9BQU8sRUFBRSxXQUFXLENBQUMsWUFBWSxDQUFDO0NBQ3JDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRTtJQUNoRSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztDQUMvQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQzVDLHdCQUF3QixFQUN4QjtJQUNJLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO0NBQ3BDLENBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLElBQUksY0FBYyxDQUMzRCxpREFBaUQsRUFDakQ7SUFDSSxPQUFPLEVBQUUsV0FBVyxDQUFDLHlCQUF5QixDQUFDO0NBQ2xELENBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRTtJQUNoRSxPQUFPLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQztDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRTtJQUN4RSxPQUFPLEVBQUUsV0FBVyxDQUFDLGVBQWUsQ0FBQztDQUN4QyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyw0QkFBNEIsRUFBRTtJQUNoRixPQUFPLEVBQUUsV0FBVyxDQUFDLHFCQUFxQixDQUFDO0NBQzlDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRTtJQUNoRSxPQUFPLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQztDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyx1QkFBdUIsRUFBRTtJQUM1RSxPQUFPLEVBQUUsV0FBVyxDQUFDLFlBQVksQ0FBQztDQUNyQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBQywyQkFBMkIsRUFBRTtJQUNoRixPQUFPLEVBQUUsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FFdEIsSUFBSSxjQUFjLENBQUMsMkJBQTJCLEVBQUU7SUFDaEQsT0FBTyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUM7Q0FDcEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURhdGVNb2RlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7ZXh0cmFjdEkxOG4sIFR1aUNvdW50cnlJc29Db2RlfSBmcm9tICdAdGFpZ2EtdWkvaTE4bic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY29uc3QgVFVJX0NBTkNFTF9XT1JEID0gbmV3IEluamVjdGlvblRva2VuKGBpMThuICdjYW5jZWwnIHdvcmRgLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oYGNhbmNlbGApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfRE9ORV9XT1JEID0gbmV3IEluamVjdGlvblRva2VuKGBpMThuICdkb25lJyB3b3JkYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGBkb25lYCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9NT1JFX1dPUkQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYGkxOG4gJ21vcmUnIHdvcmRgLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oYG1vcmVgKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX0hJREVfVEVYVCA9IG5ldyBJbmplY3Rpb25Ub2tlbihgaTE4biAnaGlkZScgd29yZGAsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgaGlkZWApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfU0hPV19BTExfVEVYVCA9IG5ldyBJbmplY3Rpb25Ub2tlbihgaTE4biAnc2hvdyBhbGwnIHdvcmRgLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oYHNob3dBbGxgKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX09USEVSX0RBVEVfVEVYVCA9IG5ldyBJbmplY3Rpb25Ub2tlbihgaTE4biAnT3RoZXIgZGF0ZScgdGV4dGAsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgb3RoZXJEYXRlYCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9DSE9PU0VfREFZX09SX1JBTkdFX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuKFxuICAgIGBjaG9vc2UgZGF5IG9yIHJhbmdlIGkxOG4gdGV4dHNgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oYG1vYmlsZUNhbGVuZGFyVGV4dHNgKSxcbiAgICB9LFxuKTtcblxuZXhwb3J0IGNvbnN0IFRVSV9GUk9NX1RPX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuKGBmcm9tIGFuZCB0byBpMThuIHRleHRzYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGByYW5nZWApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfUExVU19NSU5VU19URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgcGx1cyBhbmQgbWludXMgaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgY291bnRUZXh0c2ApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfVElNRV9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgdGltZSBpMThuIHRleHRzYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGB0aW1lYCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9EQVRFX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8UmVjb3JkPFR1aURhdGVNb2RlLCBzdHJpbmc+Pj4oXG4gICAgYGRhdGUgZm9ybWF0IGkxOG4gdGV4dHNgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oYGRhdGVUZXh0c2ApLFxuICAgIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0RJR0lUQUxfSU5GT1JNQVRJT05fVU5JVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICAgYHNob3J0IGJ5dGVzLCBraWxvYnl0ZXMgYW5kIG1lZ2FieXRlcyBpMThuIHRleHRzYCxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGBkaWdpdGFsSW5mb3JtYXRpb25Vbml0c2ApLFxuICAgIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0NPUFlfVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYGNvcHkgaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgY29weVRleHRzYCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9QQVNTV09SRF9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgcGFzc3dvcmQgaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgcGFzc3dvcmRUZXh0c2ApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfQ0FMRU5EQVJfTU9OVEhTID0gbmV3IEluamVjdGlvblRva2VuKGBzaG9ydCBjYWxlbmRhciBtb250aHMgaTE4bmAsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgc2hvcnRDYWxlbmRhck1vbnRoc2ApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfRklMRV9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgZmlsZSBpMThuIHRleHRzYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGBmaWxlVGV4dHNgKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX1BBR0lOQVRJT05fVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYHBhZ2luYXRpb24gaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgcGFnaW5hdGlvbmApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfSU5QVVRfRklMRV9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgdHVpLWlucHV0LWZpbGUgaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bihgaW5wdXRGaWxlVGV4dHNgKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX0NPVU5UUklFUzogSW5qZWN0aW9uVG9rZW48XG4gICAgT2JzZXJ2YWJsZTxSZWNvcmQ8VHVpQ291bnRyeUlzb0NvZGUsIHN0cmluZz4+XG4+ID0gbmV3IEluamVjdGlvblRva2VuKGBMb2NhbGl6ZWQgY291bnRyaWVzIG5hbWVzYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKGBjb3VudHJpZXNgKSxcbn0pO1xuIl19