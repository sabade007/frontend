import { CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_SPACE, svgNodeFilter } from '@taiga-ui/cdk';
/**
 * @deprecated: use {@link tuiGetWordRange} instead
 * Creates a cloned range with its boundaries set at word boundaries
 *
 * @param currentRange a range to clone
 * @return modified range
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function getWordRange(currentRange) {
    var range = currentRange.cloneRange();
    var startContainer = range.startContainer, startOffset = range.startOffset, endContainer = range.endContainer, endOffset = range.endOffset;
    var ownerDocument = startContainer.ownerDocument;
    if (!ownerDocument) {
        return range;
    }
    var treeWalker = ownerDocument.createTreeWalker(ownerDocument.body, NodeFilter.SHOW_TEXT, svgNodeFilter, false);
    treeWalker.currentNode = startContainer;
    do {
        var container = treeWalker.currentNode;
        var textContent = container.textContent || "";
        var content = container === startContainer
            ? textContent.slice(0, Math.max(0, startOffset + 1))
            : textContent;
        var offset = Math.max(content.lastIndexOf(" "), content.lastIndexOf(CHAR_NO_BREAK_SPACE), content.lastIndexOf(CHAR_ZERO_WIDTH_SPACE)) + 1;
        range.setStart(container, 0);
        if (offset) {
            range.setStart(container, offset);
            break;
        }
    } while (treeWalker.previousNode());
    treeWalker.currentNode = endContainer;
    do {
        var container = treeWalker.currentNode;
        var textContent = container.textContent || "";
        var content = container === endContainer ? textContent.slice(endOffset + 1) : textContent;
        var offset = [
            content.indexOf(" "),
            content.indexOf(CHAR_NO_BREAK_SPACE),
            content.indexOf(CHAR_ZERO_WIDTH_SPACE),
        ].reduce(function (result, item) {
            return result === -1 || item === -1
                ? Math.max(result, item)
                : Math.min(result, item);
        }, -1);
        range.setEnd(container, textContent.length);
        if (offset !== -1) {
            range.setEnd(container, offset + textContent.length - content.length);
            break;
        }
    } while (treeWalker.nextNode());
    return range;
}
export var tuiGetWordRange = getWordRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdvcmQtcmFuZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L3V0aWxzL2RvbS8iLCJzb3VyY2VzIjpbImdldC13b3JkLXJhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEY7Ozs7OztHQU1HO0FBQ0gsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxZQUFZLENBQUMsWUFBbUI7SUFDNUMsSUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLElBQUEscUNBQWMsRUFBRSwrQkFBVyxFQUFFLGlDQUFZLEVBQUUsMkJBQVMsQ0FBVTtJQUM5RCxJQUFBLDRDQUFhLENBQW1CO0lBRXZDLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQzdDLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLFVBQVUsQ0FBQyxTQUFTLEVBQ3BCLGFBQWEsRUFDYixLQUFLLENBQ1IsQ0FBQztJQUVGLFVBQVUsQ0FBQyxXQUFXLEdBQUcsY0FBYyxDQUFDO0lBRXhDLEdBQUc7UUFDQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ3pDLElBQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQ2hELElBQU0sT0FBTyxHQUNULFNBQVMsS0FBSyxjQUFjO1lBQ3hCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUN0QixJQUFNLE1BQU0sR0FDUixJQUFJLENBQUMsR0FBRyxDQUNKLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQ3hCLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsRUFDeEMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUM3QyxHQUFHLENBQUMsQ0FBQztRQUVWLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTdCLElBQUksTUFBTSxFQUFFO1lBQ1IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDbEMsTUFBTTtTQUNUO0tBQ0osUUFBUSxVQUFVLENBQUMsWUFBWSxFQUFFLEVBQUU7SUFFcEMsVUFBVSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUM7SUFFdEMsR0FBRztRQUNDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDekMsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDaEQsSUFBTSxPQUFPLEdBQ1QsU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNoRixJQUFNLE1BQU0sR0FBRztZQUNYLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUM7WUFDcEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztTQUN6QyxDQUFDLE1BQU0sQ0FDSixVQUFDLE1BQU0sRUFBRSxJQUFJO1lBQ1QsT0FBQSxNQUFNLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztRQUY1QixDQUU0QixFQUNoQyxDQUFDLENBQUMsQ0FDTCxDQUFDO1FBRUYsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVDLElBQUksTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2YsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RFLE1BQU07U0FDVDtLQUNKLFFBQVEsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFO0lBRWhDLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDSEFSX05PX0JSRUFLX1NQQUNFLCBDSEFSX1pFUk9fV0lEVEhfU1BBQ0UsIHN2Z05vZGVGaWx0ZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUdldFdvcmRSYW5nZX0gaW5zdGVhZFxuICogQ3JlYXRlcyBhIGNsb25lZCByYW5nZSB3aXRoIGl0cyBib3VuZGFyaWVzIHNldCBhdCB3b3JkIGJvdW5kYXJpZXNcbiAqXG4gKiBAcGFyYW0gY3VycmVudFJhbmdlIGEgcmFuZ2UgdG8gY2xvbmVcbiAqIEByZXR1cm4gbW9kaWZpZWQgcmFuZ2VcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdvcmRSYW5nZShjdXJyZW50UmFuZ2U6IFJhbmdlKTogUmFuZ2Uge1xuICAgIGNvbnN0IHJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICBjb25zdCB7c3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldH0gPSByYW5nZTtcbiAgICBjb25zdCB7b3duZXJEb2N1bWVudH0gPSBzdGFydENvbnRhaW5lcjtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuXG4gICAgY29uc3QgdHJlZVdhbGtlciA9IG93bmVyRG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgb3duZXJEb2N1bWVudC5ib2R5LFxuICAgICAgICBOb2RlRmlsdGVyLlNIT1dfVEVYVCxcbiAgICAgICAgc3ZnTm9kZUZpbHRlcixcbiAgICAgICAgZmFsc2UsXG4gICAgKTtcblxuICAgIHRyZWVXYWxrZXIuY3VycmVudE5vZGUgPSBzdGFydENvbnRhaW5lcjtcblxuICAgIGRvIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdHJlZVdhbGtlci5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBjb250YWluZXIudGV4dENvbnRlbnQgfHwgYGA7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPVxuICAgICAgICAgICAgY29udGFpbmVyID09PSBzdGFydENvbnRhaW5lclxuICAgICAgICAgICAgICAgID8gdGV4dENvbnRlbnQuc2xpY2UoMCwgTWF0aC5tYXgoMCwgc3RhcnRPZmZzZXQgKyAxKSlcbiAgICAgICAgICAgICAgICA6IHRleHRDb250ZW50O1xuICAgICAgICBjb25zdCBvZmZzZXQgPVxuICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgY29udGVudC5sYXN0SW5kZXhPZihgIGApLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQubGFzdEluZGV4T2YoQ0hBUl9OT19CUkVBS19TUEFDRSksXG4gICAgICAgICAgICAgICAgY29udGVudC5sYXN0SW5kZXhPZihDSEFSX1pFUk9fV0lEVEhfU1BBQ0UpLFxuICAgICAgICAgICAgKSArIDE7XG5cbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoY29udGFpbmVyLCAwKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChjb250YWluZXIsIG9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKHRyZWVXYWxrZXIucHJldmlvdXNOb2RlKCkpO1xuXG4gICAgdHJlZVdhbGtlci5jdXJyZW50Tm9kZSA9IGVuZENvbnRhaW5lcjtcblxuICAgIGRvIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdHJlZVdhbGtlci5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBjb250YWluZXIudGV4dENvbnRlbnQgfHwgYGA7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPVxuICAgICAgICAgICAgY29udGFpbmVyID09PSBlbmRDb250YWluZXIgPyB0ZXh0Q29udGVudC5zbGljZShlbmRPZmZzZXQgKyAxKSA6IHRleHRDb250ZW50O1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBbXG4gICAgICAgICAgICBjb250ZW50LmluZGV4T2YoYCBgKSxcbiAgICAgICAgICAgIGNvbnRlbnQuaW5kZXhPZihDSEFSX05PX0JSRUFLX1NQQUNFKSxcbiAgICAgICAgICAgIGNvbnRlbnQuaW5kZXhPZihDSEFSX1pFUk9fV0lEVEhfU1BBQ0UpLFxuICAgICAgICBdLnJlZHVjZShcbiAgICAgICAgICAgIChyZXN1bHQsIGl0ZW0pID0+XG4gICAgICAgICAgICAgICAgcmVzdWx0ID09PSAtMSB8fCBpdGVtID09PSAtMVxuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KHJlc3VsdCwgaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbihyZXN1bHQsIGl0ZW0pLFxuICAgICAgICAgICAgLTEsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmFuZ2Uuc2V0RW5kKGNvbnRhaW5lciwgdGV4dENvbnRlbnQubGVuZ3RoKTtcblxuICAgICAgICBpZiAob2Zmc2V0ICE9PSAtMSkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGNvbnRhaW5lciwgb2Zmc2V0ICsgdGV4dENvbnRlbnQubGVuZ3RoIC0gY29udGVudC5sZW5ndGgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlICh0cmVlV2Fsa2VyLm5leHROb2RlKCkpO1xuXG4gICAgcmV0dXJuIHJhbmdlO1xufVxuXG5leHBvcnQgY29uc3QgdHVpR2V0V29yZFJhbmdlID0gZ2V0V29yZFJhbmdlO1xuIl19