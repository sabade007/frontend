import { __read } from "tslib";
import { round } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
function tuiFindKeyStepsBoundariesByFn(keySteps, fn) {
    var keyStepUpperIndex = keySteps.findIndex(function (keyStep, i) { return i && fn(keyStep); });
    var lowerStep = keySteps[keyStepUpperIndex - 1];
    var upperStep = keySteps[keyStepUpperIndex];
    return [lowerStep, upperStep];
}
export function tuiPercentageToKeyStepValue(valuePercentage, keySteps) {
    var _a = __read(tuiFindKeyStepsBoundariesByFn(keySteps, function (_a) {
        var _b = __read(_a, 2), keyStepPercentage = _b[0], _ = _b[1];
        return valuePercentage <= keyStepPercentage;
    }), 2), _b = __read(_a[0], 2), lowerStepPercent = _b[0], lowerStepValue = _b[1], _c = __read(_a[1], 2), upperStepPercent = _c[0], upperStepValue = _c[1];
    var ratio = (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);
    var controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;
    return round(controlValue, TUI_FLOATING_PRECISION);
}
export function tuiKeyStepValueToPercentage(value, keySteps) {
    var _a = __read(tuiFindKeyStepsBoundariesByFn(keySteps, function (_a) {
        var _b = __read(_a, 2), _ = _b[0], keyStepValue = _b[1];
        return value <= keyStepValue;
    }), 2), _b = __read(_a[0], 2), lowerStepPercent = _b[0], lowerStepValue = _b[1], _c = __read(_a[1], 2), upperStepPercent = _c[0], upperStepValue = _c[1];
    var ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;
    return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;
}
export function tuiCheckKeyStepsHaveMinMaxPercents(steps) {
    return !steps.length || (steps[0][0] === 0 && steps[steps.length - 1][0] === 100);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXN0ZXBzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC91dGlscy9tYXRoLyIsInNvdXJjZXMiOlsia2V5LXN0ZXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRy9ELFNBQVMsNkJBQTZCLENBQ2xDLFFBQXFCLEVBQ3JCLEVBQWlFO0lBRWpFLElBQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFDLE9BQU8sRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUM7SUFDL0UsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTlDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkIsQ0FDdkMsZUFBdUIsRUFDdkIsUUFBcUI7SUFFZixJQUFBOzs7VUFJRCxFQUpFLHFCQUFrQyxFQUFqQyx3QkFBZ0IsRUFBRSxzQkFBYyxFQUFHLHFCQUFrQyxFQUFqQyx3QkFBZ0IsRUFBRSxzQkFJekQsQ0FBQztJQUNOLElBQU0sS0FBSyxHQUNQLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pGLElBQU0sWUFBWSxHQUFHLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxHQUFHLEtBQUssR0FBRyxjQUFjLENBQUM7SUFFaEYsT0FBTyxLQUFLLENBQUMsWUFBWSxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkIsQ0FDdkMsS0FBYSxFQUNiLFFBQXFCO0lBRWYsSUFBQTs7O1VBSUQsRUFKRSxxQkFBa0MsRUFBakMsd0JBQWdCLEVBQUUsc0JBQWMsRUFBRyxxQkFBa0MsRUFBakMsd0JBQWdCLEVBQUUsc0JBSXpELENBQUM7SUFDTixJQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEYsT0FBTyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsS0FBSyxHQUFHLGdCQUFnQixDQUFDO0FBQzVFLENBQUM7QUFFRCxNQUFNLFVBQVUsa0NBQWtDLENBQUMsS0FBa0I7SUFDakUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3RGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JvdW5kfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0ZMT0FUSU5HX1BSRUNJU0lPTn0gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlLZXlTdGVwc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90eXBlcyc7XG5cbmZ1bmN0aW9uIHR1aUZpbmRLZXlTdGVwc0JvdW5kYXJpZXNCeUZuKFxuICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyxcbiAgICBmbjogKFtrZXlTdGVwUGVyY2VudCwga2V5U3RlcFZhbHVlXTogW251bWJlciwgbnVtYmVyXSkgPT4gYm9vbGVhbixcbik6IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXSB7XG4gICAgY29uc3Qga2V5U3RlcFVwcGVySW5kZXggPSBrZXlTdGVwcy5maW5kSW5kZXgoKGtleVN0ZXAsIGkpID0+IGkgJiYgZm4oa2V5U3RlcCkpO1xuICAgIGNvbnN0IGxvd2VyU3RlcCA9IGtleVN0ZXBzW2tleVN0ZXBVcHBlckluZGV4IC0gMV07XG4gICAgY29uc3QgdXBwZXJTdGVwID0ga2V5U3RlcHNba2V5U3RlcFVwcGVySW5kZXhdO1xuXG4gICAgcmV0dXJuIFtsb3dlclN0ZXAsIHVwcGVyU3RlcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlQZXJjZW50YWdlVG9LZXlTdGVwVmFsdWUoXG4gICAgdmFsdWVQZXJjZW50YWdlOiBudW1iZXIsXG4gICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzLFxuKTogbnVtYmVyIHtcbiAgICBjb25zdCBbW2xvd2VyU3RlcFBlcmNlbnQsIGxvd2VyU3RlcFZhbHVlXSwgW3VwcGVyU3RlcFBlcmNlbnQsIHVwcGVyU3RlcFZhbHVlXV0gPVxuICAgICAgICB0dWlGaW5kS2V5U3RlcHNCb3VuZGFyaWVzQnlGbihcbiAgICAgICAgICAgIGtleVN0ZXBzLFxuICAgICAgICAgICAgKFtrZXlTdGVwUGVyY2VudGFnZSwgX10pID0+IHZhbHVlUGVyY2VudGFnZSA8PSBrZXlTdGVwUGVyY2VudGFnZSxcbiAgICAgICAgKTtcbiAgICBjb25zdCByYXRpbyA9XG4gICAgICAgICh2YWx1ZVBlcmNlbnRhZ2UgLSBsb3dlclN0ZXBQZXJjZW50KSAvICh1cHBlclN0ZXBQZXJjZW50IC0gbG93ZXJTdGVwUGVyY2VudCk7XG4gICAgY29uc3QgY29udHJvbFZhbHVlID0gKHVwcGVyU3RlcFZhbHVlIC0gbG93ZXJTdGVwVmFsdWUpICogcmF0aW8gKyBsb3dlclN0ZXBWYWx1ZTtcblxuICAgIHJldHVybiByb3VuZChjb250cm9sVmFsdWUsIFRVSV9GTE9BVElOR19QUkVDSVNJT04pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpS2V5U3RlcFZhbHVlVG9QZXJjZW50YWdlKFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzLFxuKTogbnVtYmVyIHtcbiAgICBjb25zdCBbW2xvd2VyU3RlcFBlcmNlbnQsIGxvd2VyU3RlcFZhbHVlXSwgW3VwcGVyU3RlcFBlcmNlbnQsIHVwcGVyU3RlcFZhbHVlXV0gPVxuICAgICAgICB0dWlGaW5kS2V5U3RlcHNCb3VuZGFyaWVzQnlGbihcbiAgICAgICAgICAgIGtleVN0ZXBzLFxuICAgICAgICAgICAgKFtfLCBrZXlTdGVwVmFsdWVdKSA9PiB2YWx1ZSA8PSBrZXlTdGVwVmFsdWUsXG4gICAgICAgICk7XG4gICAgY29uc3QgcmF0aW8gPSAodmFsdWUgLSBsb3dlclN0ZXBWYWx1ZSkgLyAodXBwZXJTdGVwVmFsdWUgLSBsb3dlclN0ZXBWYWx1ZSkgfHwgMDtcblxuICAgIHJldHVybiAodXBwZXJTdGVwUGVyY2VudCAtIGxvd2VyU3RlcFBlcmNlbnQpICogcmF0aW8gKyBsb3dlclN0ZXBQZXJjZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ2hlY2tLZXlTdGVwc0hhdmVNaW5NYXhQZXJjZW50cyhzdGVwczogVHVpS2V5U3RlcHMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXN0ZXBzLmxlbmd0aCB8fCAoc3RlcHNbMF1bMF0gPT09IDAgJiYgc3RlcHNbc3RlcHMubGVuZ3RoIC0gMV1bMF0gPT09IDEwMCk7XG59XG4iXX0=