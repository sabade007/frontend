import { __assign } from "tslib";
import { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';
/**
 * Adjusts the entered time by omitting only suitable values for hours and minutes
 * @returns time as a string
 */
export function tuiCreateAutoCorrectedTimePipe(timeMode, maxValues) {
    if (timeMode === void 0) { timeMode = "HH:MM"; }
    if (maxValues === void 0) { maxValues = {}; }
    var timeFormatArray = ["HH", "MM", "SS", "MS"];
    var safeValues = __assign(__assign({}, MAX_TIME_VALUES), maxValues);
    return function (conformedValue) {
        var indexesOfPipedChars = [];
        var conformedValueArr = conformedValue.split("");
        timeFormatArray.forEach(function (format) {
            var position = timeMode.indexOf(format);
            var maxFirstDigit = parseInt(String(safeValues[format]).slice(0, 1), 10);
            if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {
                conformedValueArr[position + 1] = conformedValueArr[position];
                conformedValueArr[position] = "0";
                indexesOfPipedChars.push(position);
            }
        });
        var isInvalid = timeFormatArray.some(function (format) {
            return parseInt(conformedValue.slice(timeMode.indexOf(format), 2), 10) >
                safeValues[format];
        });
        return isInvalid
            ? false
            : {
                value: conformedValueArr.join(""),
                indexesOfPipedChars: indexesOfPipedChars,
            };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLXRpbWUtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvdXRpbHMvbWFzay8iLCJzb3VyY2VzIjpbImNyZWF0ZS1hdXRvLWNvcnJlY3RlZC10aW1lLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUd4RDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsOEJBQThCLENBQzFDLFFBQStCLEVBQy9CLFNBQTJEO0lBRDNELHlCQUFBLEVBQUEsa0JBQStCO0lBQy9CLDBCQUFBLEVBQUEsY0FBMkQ7SUFFM0QsSUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQVUsQ0FBQztJQUMxRCxJQUFNLFVBQVUseUJBQ1QsZUFBZSxHQUNmLFNBQVMsQ0FDZixDQUFDO0lBRUYsT0FBTyxVQUFBLGNBQWM7UUFDakIsSUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDekMsSUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO1lBQzFCLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRTNFLElBQUksUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLGFBQWEsRUFBRTtnQkFDM0QsaUJBQWlCLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM5RCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ2xDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN0QztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FDbEMsVUFBQSxNQUFNO1lBQ0YsT0FBQSxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDL0QsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQURsQixDQUNrQixDQUN6QixDQUFDO1FBRUYsT0FBTyxTQUFTO1lBQ1osQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUM7Z0JBQ0ksS0FBSyxFQUFFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ2pDLG1CQUFtQixxQkFBQTthQUN0QixDQUFDO0lBQ1osQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpVGltZU1vZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlUZXh0TWFza1BpcGVIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge01BWF9USU1FX1ZBTFVFU30gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlUaW1lRm9ybWF0UGFydHN9IGZyb20gJ0B0YWlnYS11aS9raXQvdHlwZXMnO1xuXG4vKipcbiAqIEFkanVzdHMgdGhlIGVudGVyZWQgdGltZSBieSBvbWl0dGluZyBvbmx5IHN1aXRhYmxlIHZhbHVlcyBmb3IgaG91cnMgYW5kIG1pbnV0ZXNcbiAqIEByZXR1cm5zIHRpbWUgYXMgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZUF1dG9Db3JyZWN0ZWRUaW1lUGlwZShcbiAgICB0aW1lTW9kZTogVHVpVGltZU1vZGUgPSBgSEg6TU1gLFxuICAgIG1heFZhbHVlczogUGFydGlhbDxSZWNvcmQ8VHVpVGltZUZvcm1hdFBhcnRzLCBudW1iZXI+PiA9IHt9LFxuKTogVHVpVGV4dE1hc2tQaXBlSGFuZGxlciB7XG4gICAgY29uc3QgdGltZUZvcm1hdEFycmF5ID0gW2BISGAsIGBNTWAsIGBTU2AsIGBNU2BdIGFzIGNvbnN0O1xuICAgIGNvbnN0IHNhZmVWYWx1ZXMgPSB7XG4gICAgICAgIC4uLk1BWF9USU1FX1ZBTFVFUyxcbiAgICAgICAgLi4ubWF4VmFsdWVzLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29uZm9ybWVkVmFsdWUgPT4ge1xuICAgICAgICBjb25zdCBpbmRleGVzT2ZQaXBlZENoYXJzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBjb25zdCBjb25mb3JtZWRWYWx1ZUFyciA9IGNvbmZvcm1lZFZhbHVlLnNwbGl0KGBgKTtcblxuICAgICAgICB0aW1lRm9ybWF0QXJyYXkuZm9yRWFjaChmb3JtYXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aW1lTW9kZS5pbmRleE9mKGZvcm1hdCk7XG4gICAgICAgICAgICBjb25zdCBtYXhGaXJzdERpZ2l0ID0gcGFyc2VJbnQoU3RyaW5nKHNhZmVWYWx1ZXNbZm9ybWF0XSkuc2xpY2UoMCwgMSksIDEwKTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGNvbmZvcm1lZFZhbHVlQXJyW3Bvc2l0aW9uXSwgMTApID4gbWF4Rmlyc3REaWdpdCkge1xuICAgICAgICAgICAgICAgIGNvbmZvcm1lZFZhbHVlQXJyW3Bvc2l0aW9uICsgMV0gPSBjb25mb3JtZWRWYWx1ZUFycltwb3NpdGlvbl07XG4gICAgICAgICAgICAgICAgY29uZm9ybWVkVmFsdWVBcnJbcG9zaXRpb25dID0gYDBgO1xuICAgICAgICAgICAgICAgIGluZGV4ZXNPZlBpcGVkQ2hhcnMucHVzaChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGlzSW52YWxpZCA9IHRpbWVGb3JtYXRBcnJheS5zb21lKFxuICAgICAgICAgICAgZm9ybWF0ID0+XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoY29uZm9ybWVkVmFsdWUuc2xpY2UodGltZU1vZGUuaW5kZXhPZihmb3JtYXQpLCAyKSwgMTApID5cbiAgICAgICAgICAgICAgICBzYWZlVmFsdWVzW2Zvcm1hdF0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGlzSW52YWxpZFxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogY29uZm9ybWVkVmFsdWVBcnIuam9pbihgYCksXG4gICAgICAgICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzLFxuICAgICAgICAgICAgICB9O1xuICAgIH07XG59XG4iXX0=