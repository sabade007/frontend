import { __read } from "tslib";
import { DATE_FILLER_LENGTH } from '@taiga-ui/cdk';
import { DATE_TIME_SEPARATOR } from '@taiga-ui/kit/constants';
import { normalizeDateValue, } from './create-auto-corrected-date-pipe';
import { tuiCreateAutoCorrectedTimePipe } from './create-auto-corrected-time-pipe';
export function tuiCreateAutoCorrectedDateTimePipe(configs) {
    var timePipe = tuiCreateAutoCorrectedTimePipe(configs.timeMode);
    return function (value) {
        if (value.length < DATE_FILLER_LENGTH) {
            return { value: value };
        }
        var _a = __read(value.split(DATE_TIME_SEPARATOR), 2), date = _a[0], time = _a[1];
        var formattedDate = normalizeDateValue(date, configs);
        if (!time) {
            return { value: formattedDate };
        }
        var pipedTime = timePipe(time, {});
        if (!pipedTime || typeof pipedTime === "string") {
            return false;
        }
        return {
            value: "" + formattedDate + DATE_TIME_SEPARATOR + pipedTime.value,
            indexesOfPipedChars: pipedTime.indexesOfPipedChars
                ? pipedTime.indexesOfPipedChars.map(function (i) { return i + date.length + 2; })
                : undefined,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtdGltZS1waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC91dGlscy9tYXNrLyIsInNvdXJjZXMiOlsiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtdGltZS1waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsa0JBQWtCLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFNOUQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsT0FBTyxFQUNILGtCQUFrQixHQUVyQixNQUFNLG1DQUFtQyxDQUFDO0FBQzNDLE9BQU8sRUFBQyw4QkFBOEIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBTWpGLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDOUMsT0FBNEM7SUFFNUMsSUFBTSxRQUFRLEdBQUcsOEJBQThCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWxFLE9BQU8sVUFBQSxLQUFLO1FBQ1IsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLGtCQUFrQixFQUFFO1lBQ25DLE9BQU8sRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDO1NBQ2xCO1FBRUssSUFBQSxnREFBK0MsRUFBOUMsWUFBSSxFQUFFLFlBQXdDLENBQUM7UUFFdEQsSUFBTSxhQUFhLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxPQUFPLEVBQUMsS0FBSyxFQUFFLGFBQWEsRUFBQyxDQUFDO1NBQ2pDO1FBRUQsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUN0QixJQUFJLEVBQ0osRUFBdUQsQ0FDMUQsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQzdDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTztZQUNILEtBQUssRUFBRSxLQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsS0FBTztZQUNqRSxtQkFBbUIsRUFBRSxTQUFTLENBQUMsbUJBQW1CO2dCQUM5QyxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQztnQkFDN0QsQ0FBQyxDQUFDLFNBQVM7U0FDbEIsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RBVEVfRklMTEVSX0xFTkdUSCwgVHVpVGltZU1vZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUdWlUZXh0TWFza0NvbmZpZyxcbiAgICBUdWlUZXh0TWFza09wdGlvbnMsXG4gICAgVHVpVGV4dE1hc2tQaXBlSGFuZGxlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtEQVRFX1RJTUVfU0VQQVJBVE9SfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbnN0YW50cyc7XG5cbmltcG9ydCB7XG4gICAgbm9ybWFsaXplRGF0ZVZhbHVlLFxuICAgIFR1aUF1dG9Db3JyZWN0ZWREYXRlUGlwZUNvbmZpZ3MsXG59IGZyb20gJy4vY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtcGlwZSc7XG5pbXBvcnQge3R1aUNyZWF0ZUF1dG9Db3JyZWN0ZWRUaW1lUGlwZX0gZnJvbSAnLi9jcmVhdGUtYXV0by1jb3JyZWN0ZWQtdGltZS1waXBlJztcblxuaW50ZXJmYWNlIFR1aUF1dG9Db3JyZWN0ZWREYXRlVGltZVBpcGVDb25maWdzIGV4dGVuZHMgVHVpQXV0b0NvcnJlY3RlZERhdGVQaXBlQ29uZmlncyB7XG4gICAgdGltZU1vZGU6IFR1aVRpbWVNb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlQXV0b0NvcnJlY3RlZERhdGVUaW1lUGlwZShcbiAgICBjb25maWdzOiBUdWlBdXRvQ29ycmVjdGVkRGF0ZVRpbWVQaXBlQ29uZmlncyxcbik6IFR1aVRleHRNYXNrUGlwZUhhbmRsZXIge1xuICAgIGNvbnN0IHRpbWVQaXBlID0gdHVpQ3JlYXRlQXV0b0NvcnJlY3RlZFRpbWVQaXBlKGNvbmZpZ3MudGltZU1vZGUpO1xuXG4gICAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8IERBVEVfRklMTEVSX0xFTkdUSCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZX07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbZGF0ZSwgdGltZV0gPSB2YWx1ZS5zcGxpdChEQVRFX1RJTUVfU0VQQVJBVE9SKTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gbm9ybWFsaXplRGF0ZVZhbHVlKGRhdGUsIGNvbmZpZ3MpO1xuXG4gICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZTogZm9ybWF0dGVkRGF0ZX07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwaXBlZFRpbWUgPSB0aW1lUGlwZShcbiAgICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgICB7fSBhcyB1bmtub3duIGFzIFR1aVRleHRNYXNrQ29uZmlnICYgVHVpVGV4dE1hc2tPcHRpb25zLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghcGlwZWRUaW1lIHx8IHR5cGVvZiBwaXBlZFRpbWUgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGAke2Zvcm1hdHRlZERhdGV9JHtEQVRFX1RJTUVfU0VQQVJBVE9SfSR7cGlwZWRUaW1lLnZhbHVlfWAsXG4gICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzOiBwaXBlZFRpbWUuaW5kZXhlc09mUGlwZWRDaGFyc1xuICAgICAgICAgICAgICAgID8gcGlwZWRUaW1lLmluZGV4ZXNPZlBpcGVkQ2hhcnMubWFwKGkgPT4gaSArIGRhdGUubGVuZ3RoICsgMilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl19