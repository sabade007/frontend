import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_COUNTRIES_MASKS } from '@taiga-ui/kit/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion, } from '@taiga-ui/kit/utils';
// @dynamic
var TuiToCountryCodePipe = /** @class */ (function () {
    function TuiToCountryCodePipe(countriesMasks) {
        this.countriesMasks = countriesMasks;
    }
    TuiToCountryCodePipe.prototype.transform = function (value, countries) {
        var _this = this;
        return countries.find(function (countryIsoCode) {
            var ruCodeTest = countryIsoCode === TuiCountryIsoCode.RU &&
                /^[78]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 ===
                    tuiGetMaxAllowedPhoneLength(_this.countriesMasks, TuiCountryIsoCode.RU);
            var matched = ruCodeTest ||
                (value.startsWith(tuiIsoToCountryCode(_this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, "")) &&
                    value.length + 1 ===
                        tuiGetMaxAllowedPhoneLength(_this.countriesMasks, countryIsoCode));
            if (matched) {
                switch (countryIsoCode) {
                    case TuiCountryIsoCode.RU:
                        return tuiNotKzRegion(value);
                    case TuiCountryIsoCode.KZ:
                        return !tuiNotKzRegion(value);
                    default:
                        return true;
                }
            }
            return false;
        });
    };
    TuiToCountryCodePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_COUNTRIES_MASKS,] }] }
    ]; };
    TuiToCountryCodePipe = __decorate([
        Pipe({
            name: "tuiToCountryCode",
        }),
        __param(0, Inject(TUI_COUNTRIES_MASKS))
    ], TuiToCountryCodePipe);
    return TuiToCountryCodePipe;
}());
export { TuiToCountryCodePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tY291bnRyeS1jb2RlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L3BpcGVzL3RvLWNvdW50cnktY29kZS8iLCJzb3VyY2VzIjpbInRvLWNvdW50cnktY29kZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQ0gsMkJBQTJCLEVBQzNCLG1CQUFtQixFQUNuQixjQUFjLEdBQ2pCLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsV0FBVztBQUlYO0lBQ0ksOEJBRXFCLGNBQWlEO1FBQWpELG1CQUFjLEdBQWQsY0FBYyxDQUFtQztJQUNuRSxDQUFDO0lBRUosd0NBQVMsR0FBVCxVQUNJLEtBQWEsRUFDYixTQUF1QztRQUYzQyxpQkF1Q0M7UUFuQ0csT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUEsY0FBYztZQUNoQyxJQUFNLFVBQVUsR0FDWixjQUFjLEtBQUssaUJBQWlCLENBQUMsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ25CLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzVCLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQztvQkFDWiwyQkFBMkIsQ0FDdkIsS0FBSSxDQUFDLGNBQWMsRUFDbkIsaUJBQWlCLENBQUMsRUFBRSxDQUN2QixDQUFDO1lBRVYsSUFBTSxPQUFPLEdBQ1QsVUFBVTtnQkFDVixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQ2IsbUJBQW1CLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQzVELFNBQVMsRUFDVCxFQUFFLENBQ0wsQ0FDSjtvQkFDRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUM7d0JBQ1osMkJBQTJCLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBRTlFLElBQUksT0FBTyxFQUFFO2dCQUNULFFBQVEsY0FBYyxFQUFFO29CQUNwQixLQUFLLGlCQUFpQixDQUFDLEVBQUU7d0JBQ3JCLE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNqQyxLQUFLLGlCQUFpQixDQUFDLEVBQUU7d0JBQ3JCLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2xDO3dCQUNJLE9BQU8sSUFBSSxDQUFDO2lCQUNuQjthQUNKO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnREEzQ0ksTUFBTSxTQUFDLG1CQUFtQjs7SUFGdEIsb0JBQW9CO1FBSGhDLElBQUksQ0FBQztZQUNGLElBQUksRUFBRSxrQkFBa0I7U0FDM0IsQ0FBQztRQUdPLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7T0FGdkIsb0JBQW9CLENBOENoQztJQUFELDJCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0E5Q1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDSEFSX1BMVVN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlDb3VudHJ5SXNvQ29kZX0gZnJvbSAnQHRhaWdhLXVpL2kxOG4nO1xuaW1wb3J0IHtUVUlfQ09VTlRSSUVTX01BU0tTfSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5pbXBvcnQge1xuICAgIHR1aUdldE1heEFsbG93ZWRQaG9uZUxlbmd0aCxcbiAgICB0dWlJc29Ub0NvdW50cnlDb2RlLFxuICAgIHR1aU5vdEt6UmVnaW9uLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcblxuLy8gQGR5bmFtaWNcbkBQaXBlKHtcbiAgICBuYW1lOiBgdHVpVG9Db3VudHJ5Q29kZWAsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRvQ291bnRyeUNvZGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NPVU5UUklFU19NQVNLUylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb3VudHJpZXNNYXNrczogUmVjb3JkPFR1aUNvdW50cnlJc29Db2RlLCBzdHJpbmc+LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICAgICAgY291bnRyaWVzOiByZWFkb25seSBUdWlDb3VudHJ5SXNvQ29kZVtdLFxuICAgICk6IFR1aUNvdW50cnlJc29Db2RlIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIGNvdW50cmllcy5maW5kKGNvdW50cnlJc29Db2RlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJ1Q29kZVRlc3QgPVxuICAgICAgICAgICAgICAgIGNvdW50cnlJc29Db2RlID09PSBUdWlDb3VudHJ5SXNvQ29kZS5SVSAmJlxuICAgICAgICAgICAgICAgIC9eWzc4XS8udGVzdCh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAvXig/ITg4MFsxLTkgXSkvLnRlc3QodmFsdWUpICYmXG4gICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoICsgMSA9PT1cbiAgICAgICAgICAgICAgICAgICAgdHVpR2V0TWF4QWxsb3dlZFBob25lTGVuZ3RoKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJpZXNNYXNrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFR1aUNvdW50cnlJc29Db2RlLlJVLFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkID1cbiAgICAgICAgICAgICAgICBydUNvZGVUZXN0IHx8XG4gICAgICAgICAgICAgICAgKHZhbHVlLnN0YXJ0c1dpdGgoXG4gICAgICAgICAgICAgICAgICAgIHR1aUlzb1RvQ291bnRyeUNvZGUodGhpcy5jb3VudHJpZXNNYXNrcywgY291bnRyeUlzb0NvZGUpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBDSEFSX1BMVVMsXG4gICAgICAgICAgICAgICAgICAgICAgICBgYCxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmxlbmd0aCArIDEgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlHZXRNYXhBbGxvd2VkUGhvbmVMZW5ndGgodGhpcy5jb3VudHJpZXNNYXNrcywgY291bnRyeUlzb0NvZGUpKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvdW50cnlJc29Db2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuUlU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHVpTm90S3pSZWdpb24odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLktaOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0dWlOb3RLelJlZ2lvbih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19