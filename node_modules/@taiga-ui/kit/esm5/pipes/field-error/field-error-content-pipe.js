import { __decorate, __param } from "tslib";
import { AsyncPipe } from '@angular/common';
import { Inject, Injector, OnDestroy, Pipe, PipeTransform } from '@angular/core';
import { TuiFieldErrorPipe } from './field-error-pipe';
// @dynamic
var TuiFieldErrorContentPipe = /** @class */ (function () {
    function TuiFieldErrorContentPipe(injector) {
        this.injector = injector;
        this.localInjector = Injector.create({
            providers: [{ provide: AsyncPipe }, { provide: TuiFieldErrorPipe }],
            parent: this.injector,
        });
        this.asyncPipe = this.localInjector.get(AsyncPipe);
        this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);
    }
    TuiFieldErrorContentPipe.prototype.transform = function (order) {
        return this.getErrorContent(order);
    };
    TuiFieldErrorContentPipe.prototype.ngOnDestroy = function () {
        this.asyncPipe.ngOnDestroy();
    };
    TuiFieldErrorContentPipe.prototype.getErrorContent = function (order) {
        var error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));
        if (!error) {
            return "";
        }
        return typeof error.message === "function"
            ? error.message(error.context)
            : error.message;
    };
    TuiFieldErrorContentPipe.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
    ]; };
    TuiFieldErrorContentPipe = __decorate([
        Pipe({
            name: "tuiFieldErrorContent",
            pure: false,
        }),
        __param(0, Inject(Injector))
    ], TuiFieldErrorContentPipe);
    return TuiFieldErrorContentPipe;
}());
export { TuiFieldErrorContentPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtZXJyb3ItY29udGVudC1waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9waXBlcy9maWVsZC1lcnJvci8iLCJzb3VyY2VzIjpbImZpZWxkLWVycm9yLWNvbnRlbnQtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRXJELFdBQVc7QUFLWDtJQVNJLGtDQUErQyxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUmhELGtCQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUM3QyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBQyxDQUFDO1lBQy9ELE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDLENBQUM7UUFFYyxjQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsbUJBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRVIsQ0FBQztJQUVyRSw0Q0FBUyxHQUFULFVBQVUsS0FBd0I7UUFDOUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCw4Q0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU8sa0RBQWUsR0FBdkIsVUFBd0IsS0FBd0I7UUFDNUMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUU3RSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELE9BQU8sT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFVBQVU7WUFDdEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUM5QixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOztnQkFwQndELFFBQVEsdUJBQXBELE1BQU0sU0FBQyxRQUFROztJQVRuQix3QkFBd0I7UUFKcEMsSUFBSSxDQUFDO1lBQ0YsSUFBSSxFQUFFLHNCQUFzQjtZQUM1QixJQUFJLEVBQUUsS0FBSztTQUNkLENBQUM7UUFVZSxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtPQVRwQix3QkFBd0IsQ0E4QnBDO0lBQUQsK0JBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FzeW5jUGlwZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RvciwgT25EZXN0cm95LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUdWlGaWVsZEVycm9yUGlwZX0gZnJvbSAnLi9maWVsZC1lcnJvci1waXBlJztcblxuLy8gQGR5bmFtaWNcbkBQaXBlKHtcbiAgICBuYW1lOiBgdHVpRmllbGRFcnJvckNvbnRlbnRgLFxuICAgIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGaWVsZEVycm9yQ29udGVudFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBBc3luY1BpcGV9LCB7cHJvdmlkZTogVHVpRmllbGRFcnJvclBpcGV9XSxcbiAgICAgICAgcGFyZW50OiB0aGlzLmluamVjdG9yLFxuICAgIH0pO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBhc3luY1BpcGUgPSB0aGlzLmxvY2FsSW5qZWN0b3IuZ2V0KEFzeW5jUGlwZSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWVsZEVycm9yUGlwZSA9IHRoaXMubG9jYWxJbmplY3Rvci5nZXQoVHVpRmllbGRFcnJvclBpcGUpO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChJbmplY3RvcikgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgICB0cmFuc2Zvcm0ob3JkZXI6IHJlYWRvbmx5IHN0cmluZ1tdKTogUG9seW1vcnBoZXVzQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVycm9yQ29udGVudChvcmRlcik7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXN5bmNQaXBlLm5nT25EZXN0cm95KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRFcnJvckNvbnRlbnQob3JkZXI6IHJlYWRvbmx5IHN0cmluZ1tdKTogUG9seW1vcnBoZXVzQ29udGVudCB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5hc3luY1BpcGUudHJhbnNmb3JtKHRoaXMuZmllbGRFcnJvclBpcGUudHJhbnNmb3JtKG9yZGVyKSk7XG5cbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGBgO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSBgZnVuY3Rpb25gXG4gICAgICAgICAgICA/IGVycm9yLm1lc3NhZ2UoZXJyb3IuY29udGV4dClcbiAgICAgICAgICAgIDogZXJyb3IubWVzc2FnZTtcbiAgICB9XG59XG4iXX0=