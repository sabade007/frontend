import { __decorate, __param } from "tslib";
import { Inject, Optional, Pipe, Self } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormArrayName, FormGroupDirective, FormGroupName, NgControl, } from '@angular/forms';
import { tuiPure, TuiValidationError } from '@taiga-ui/cdk';
import { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';
import { isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
var EMPTY_RECORD = {};
// @dynamic
var TuiFieldErrorPipe = /** @class */ (function () {
    function TuiFieldErrorPipe(ngControl, formArrayName, formGroupName, formGroup, validationErrors) {
        this.ngControl = ngControl;
        this.formArrayName = formArrayName;
        this.formGroupName = formGroupName;
        this.formGroup = formGroup;
        this.validationErrors = validationErrors;
        this.order = [];
        if (this.ngControl && !this.ngControl.valueAccessor) {
            this.ngControl.valueAccessor = this;
        }
    }
    TuiFieldErrorPipe.prototype.transform = function (order) {
        this.order = order;
        return this.computedError;
    };
    Object.defineProperty(TuiFieldErrorPipe.prototype, "computedError", {
        get: function () {
            return (this.invalid && this.touched && this.error) || of(null);
        },
        enumerable: true,
        configurable: true
    });
    TuiFieldErrorPipe.prototype.registerOnChange = function () { };
    TuiFieldErrorPipe.prototype.registerOnTouched = function () { };
    TuiFieldErrorPipe.prototype.setDisabledState = function () { };
    TuiFieldErrorPipe.prototype.writeValue = function () { };
    Object.defineProperty(TuiFieldErrorPipe.prototype, "error", {
        get: function () {
            var errorId = this.errorId;
            if (!errorId) {
                return null;
            }
            var firstError = this.controlErrors[errorId];
            var errorContent = this.validationErrors[errorId];
            return this.getError(firstError, errorContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiFieldErrorPipe.prototype, "invalid", {
        get: function () {
            var _a;
            return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiFieldErrorPipe.prototype, "touched", {
        get: function () {
            var _a;
            return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiFieldErrorPipe.prototype, "control", {
        get: function () {
            var _a, _b, _c, _d;
            return (((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.formArrayName) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.formGroupName) === null || _c === void 0 ? void 0 : _c.control) || ((_d = this.formGroup) === null || _d === void 0 ? void 0 : _d.control) ||
                null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiFieldErrorPipe.prototype, "errorId", {
        get: function () {
            return this.getErrorId(this.order, this.controlErrors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiFieldErrorPipe.prototype, "controlErrors", {
        get: function () {
            var _a;
            return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;
        },
        enumerable: true,
        configurable: true
    });
    TuiFieldErrorPipe.prototype.getErrorId = function (order, controlErrors) {
        var id = order === null || order === void 0 ? void 0 : order.find(function (errorId) { return controlErrors[errorId]; });
        var fallback = Object.keys(controlErrors)[0];
        return id || fallback || "";
    };
    TuiFieldErrorPipe.prototype.getError = function (firstError, errorContent) {
        if (firstError instanceof TuiValidationError) {
            return of(firstError);
        }
        if (errorContent === undefined && typeof firstError === "string") {
            return of(new TuiValidationError(firstError));
        }
        if (isObservable(errorContent)) {
            return errorContent.pipe(map(function (error) { return new TuiValidationError(error || "", firstError); }));
        }
        return of(new TuiValidationError(errorContent || "", firstError));
    };
    TuiFieldErrorPipe.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: FormArrayName, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormArrayName,] }] },
        { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormGroupName,] }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormGroupDirective,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_VALIDATION_ERRORS,] }] }
    ]; };
    __decorate([
        tuiPure
    ], TuiFieldErrorPipe.prototype, "getErrorId", null);
    __decorate([
        tuiPure
    ], TuiFieldErrorPipe.prototype, "getError", null);
    TuiFieldErrorPipe = __decorate([
        Pipe({
            name: "tuiFieldError",
            pure: false,
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Optional()),
        __param(1, Self()),
        __param(1, Inject(FormArrayName)),
        __param(2, Optional()),
        __param(2, Self()),
        __param(2, Inject(FormGroupName)),
        __param(3, Optional()),
        __param(3, Self()),
        __param(3, Inject(FormGroupDirective)),
        __param(4, Inject(TUI_VALIDATION_ERRORS))
    ], TuiFieldErrorPipe);
    return TuiFieldErrorPipe;
}());
export { TuiFieldErrorPipe };
//# sourceMappingURL=data:application/json;base64,