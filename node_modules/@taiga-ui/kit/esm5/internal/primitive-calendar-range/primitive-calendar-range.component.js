import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, OnInit, Optional, Output, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiBooleanHandler, TuiDay, TuiDayRange, tuiDefaultProp, TuiDestroyService, TuiMapper, TuiMonth, watch, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER } from '@taiga-ui/core';
import { TUI_CALENDAR_DATA_STREAM } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * @internal
 */
var TuiPrimitiveCalendarRangeComponent = /** @class */ (function () {
    function TuiPrimitiveCalendarRangeComponent(valueChanges, changeDetectorRef, destroy$) {
        var _this = this;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonthFirst = TuiMonth.currentLocal();
        this.defaultViewedMonthSecond = TuiMonth.currentLocal().append({ month: 1 });
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.value = null;
        this.dayClick = new EventEmitter();
        this.hoveredItem = null;
        this.userViewedMonthFirst = this.defaultViewedMonthFirst;
        this.userViewedMonthSecond = this.defaultViewedMonthSecond;
        this.monthOffset = function (value, offset) {
            return value.append({ month: offset });
        };
        if (!valueChanges) {
            return;
        }
        valueChanges
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(function (value) {
            _this.value = value;
            _this.updateViewedMonths();
        });
    }
    Object.defineProperty(TuiPrimitiveCalendarRangeComponent.prototype, "cappedUserViewedMonthSecond", {
        get: function () {
            return this.userViewedMonthSecond.monthBefore(this.max)
                ? this.userViewedMonthSecond
                : this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCalendarRangeComponent.prototype, "cappedUserViewedMonthFirst", {
        get: function () {
            return this.userViewedMonthFirst.monthSameOrBefore(this.userViewedMonthSecond)
                ? this.userViewedMonthFirst
                : this.userViewedMonthSecond;
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveCalendarRangeComponent.prototype.ngOnInit = function () {
        this.setInitialMonths();
    };
    TuiPrimitiveCalendarRangeComponent.prototype.onSectionFirstViewedMonth = function (month) {
        this.userViewedMonthFirst = month;
        if (this.userViewedMonthSecond.year < this.userViewedMonthFirst.year) {
            this.userViewedMonthSecond = this.userViewedMonthSecond.append({
                year: month.year - this.userViewedMonthSecond.year,
            });
        }
    };
    TuiPrimitiveCalendarRangeComponent.prototype.onSectionSecondViewedMonth = function (month) {
        this.userViewedMonthSecond = month;
        if (this.userViewedMonthFirst.year > this.userViewedMonthSecond.year) {
            this.userViewedMonthFirst = this.userViewedMonthFirst.append({
                year: month.year - this.userViewedMonthFirst.year,
            });
        }
    };
    TuiPrimitiveCalendarRangeComponent.prototype.onDayClick = function (day) {
        this.dayClick.emit(day);
    };
    TuiPrimitiveCalendarRangeComponent.prototype.setInitialMonths = function () {
        if (!this.value) {
            this.userViewedMonthSecond = this.updatedViewedMonthSecond(this.defaultViewedMonthSecond);
            this.userViewedMonthFirst = this.updatedViewedMonthFirst(this.defaultViewedMonthFirst);
        }
    };
    TuiPrimitiveCalendarRangeComponent.prototype.updatedViewedMonthSecond = function (month) {
        if (month.monthSameOrAfter(this.max)) {
            return this.max;
        }
        if (month.monthBefore(this.min)) {
            return this.min.append({ month: 1 });
        }
        return month;
    };
    TuiPrimitiveCalendarRangeComponent.prototype.updatedViewedMonthFirst = function (month) {
        if (month.monthSameOrAfter(this.userViewedMonthSecond)) {
            return this.userViewedMonthSecond.append({ month: -1 });
        }
        if (month.monthSameOrBefore(this.min)) {
            return this.min;
        }
        return month;
    };
    TuiPrimitiveCalendarRangeComponent.prototype.updateViewedMonths = function () {
        this.userViewedMonthFirst =
            this.value === null ? this.defaultViewedMonthFirst : this.value.from;
        this.userViewedMonthSecond =
            this.value === null ? this.defaultViewedMonthSecond : this.value.to;
        if (this.userViewedMonthFirst.monthSame(this.userViewedMonthSecond)) {
            this.userViewedMonthSecond = this.userViewedMonthSecond.append({ month: 1 });
        }
    };
    TuiPrimitiveCalendarRangeComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_CALENDAR_DATA_STREAM,] }, { type: Optional }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "markerHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "defaultViewedMonthFirst", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "defaultViewedMonthSecond", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "value", void 0);
    __decorate([
        Output()
    ], TuiPrimitiveCalendarRangeComponent.prototype, "dayClick", void 0);
    TuiPrimitiveCalendarRangeComponent = __decorate([
        Component({
            selector: 'tui-primitive-calendar-range',
            template: "<tui-calendar\n    [min]=\"min\"\n    [max]=\"max\"\n    [month]=\"userViewedMonthFirst\"\n    [markerHandler]=\"markerHandler\"\n    [maxViewedMonth]=\"cappedUserViewedMonthSecond | tuiMapper: monthOffset:-1\"\n    [value]=\"value\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [showAdjacent]=\"false\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionFirstViewedMonth($event)\"\n></tui-calendar>\n<tui-calendar\n    class=\"t-border\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [month]=\"userViewedMonthSecond\"\n    [markerHandler]=\"markerHandler\"\n    [minViewedMonth]=\"cappedUserViewedMonthFirst | tuiMapper: monthOffset:1\"\n    [value]=\"value\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [showAdjacent]=\"false\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionSecondViewedMonth($event)\"\n></tui-calendar>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [TuiDestroyService],
            styles: [":host{display:flex}.t-border{border-left:1px solid var(--tui-base-03)}"]
        }),
        __param(0, Inject(TUI_CALENDAR_DATA_STREAM)),
        __param(0, Optional()),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TuiDestroyService))
    ], TuiPrimitiveCalendarRangeComponent);
    return TuiPrimitiveCalendarRangeComponent;
}());
export { TuiPrimitiveCalendarRangeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvaW50ZXJuYWwvcHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLyIsInNvdXJjZXMiOlsicHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsYUFBYSxFQUNiLFlBQVksRUFDWixpQkFBaUIsRUFDakIsTUFBTSxFQUNOLFdBQVcsRUFDWCxjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxRQUFRLEVBQ1IsS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQywwQkFBMEIsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RSxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6Qzs7R0FFRztBQVFIO0lBcUNJLDRDQUdJLFlBQW1ELEVBQ3hCLGlCQUFvQyxFQUNwQyxRQUEyQjtRQUwxRCxpQkFpQkM7UUFuREQsd0JBQW1CLEdBQThCLG9CQUFvQixDQUFDO1FBSXRFLGtCQUFhLEdBQXFCLDBCQUEwQixDQUFDO1FBSTdELDRCQUF1QixHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUlsRCw2QkFBd0IsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFF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QkFBd0IsQ0FBQyxDQUFBO1FBQ2hDLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFFVixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0ExQ3JCLGtDQUFrQyxDQWlKOUM7SUFBRCx5Q0FBQztDQUFBLEFBakpELElBaUpDO1NBakpZLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25Jbml0LFxuICAgIE9wdGlvbmFsLFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFMV0FZU19GQUxTRV9IQU5ETEVSLFxuICAgIFRVSV9GSVJTVF9EQVksXG4gICAgVFVJX0xBU1RfREFZLFxuICAgIFR1aUJvb2xlYW5IYW5kbGVyLFxuICAgIFR1aURheSxcbiAgICBUdWlEYXlSYW5nZSxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlNYXBwZXIsXG4gICAgVHVpTW9udGgsXG4gICAgd2F0Y2gsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9NQVJLRVJfSEFORExFUiwgVHVpTWFya2VySGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUVUlfQ0FMRU5EQVJfREFUQV9TVFJFQU19IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmltaXRpdmUtY2FsZW5kYXItcmFuZ2UnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcmltaXRpdmUtY2FsZW5kYXItcmFuZ2UudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZUNhbGVuZGFyUmFuZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlCb29sZWFuSGFuZGxlcjxUdWlEYXk+ID0gQUxXQVlTX0ZBTFNFX0hBTkRMRVI7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWFya2VySGFuZGxlcjogVHVpTWFya2VySGFuZGxlciA9IFRVSV9ERUZBVUxUX01BUktFUl9IQU5ETEVSO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRlZmF1bHRWaWV3ZWRNb250aEZpcnN0ID0gVHVpTW9udGguY3VycmVudExvY2FsKCk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kID0gVHVpTW9udGguY3VycmVudExvY2FsKCkuYXBwZW5kKHttb250aDogMX0pO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1pbiA9IFRVSV9GSVJTVF9EQVk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWF4ID0gVFVJX0xBU1RfREFZO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHZhbHVlOiBUdWlEYXlSYW5nZSB8IG51bGwgPSBudWxsO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgZGF5Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPFR1aURheT4oKTtcblxuICAgIGhvdmVyZWRJdGVtOiBUdWlEYXkgfCBudWxsID0gbnVsbDtcblxuICAgIHVzZXJWaWV3ZWRNb250aEZpcnN0OiBUdWlNb250aCA9IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoRmlyc3Q7XG4gICAgdXNlclZpZXdlZE1vbnRoU2Vjb25kOiBUdWlNb250aCA9IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NBTEVOREFSX0RBVEFfU1RSRUFNKVxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICB2YWx1ZUNoYW5nZXM6IE9ic2VydmFibGU8VHVpRGF5UmFuZ2UgfCBudWxsPiB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBpZiAoIXZhbHVlQ2hhbmdlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVDaGFuZ2VzXG4gICAgICAgICAgICAucGlwZSh3YXRjaChjaGFuZ2VEZXRlY3RvclJlZiksIHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3ZWRNb250aHMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBjYXBwZWRVc2VyVmlld2VkTW9udGhTZWNvbmQoKTogVHVpTW9udGgge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQubW9udGhCZWZvcmUodGhpcy5tYXgpXG4gICAgICAgICAgICA/IHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kXG4gICAgICAgICAgICA6IHRoaXMubWF4O1xuICAgIH1cblxuICAgIGdldCBjYXBwZWRVc2VyVmlld2VkTW9udGhGaXJzdCgpOiBUdWlNb250aCB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0Lm1vbnRoU2FtZU9yQmVmb3JlKHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kKVxuICAgICAgICAgICAgPyB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0XG4gICAgICAgICAgICA6IHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kO1xuICAgIH1cblxuICAgIG1vbnRoT2Zmc2V0OiBUdWlNYXBwZXI8VHVpTW9udGgsIFR1aU1vbnRoPiA9ICh2YWx1ZSwgb2Zmc2V0OiBudW1iZXIpID0+XG4gICAgICAgIHZhbHVlLmFwcGVuZCh7bW9udGg6IG9mZnNldH0pO1xuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0SW5pdGlhbE1vbnRocygpO1xuICAgIH1cblxuICAgIG9uU2VjdGlvbkZpcnN0Vmlld2VkTW9udGgobW9udGg6IFR1aU1vbnRoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXNlclZpZXdlZE1vbnRoRmlyc3QgPSBtb250aDtcblxuICAgICAgICBpZiAodGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQueWVhciA8IHRoaXMudXNlclZpZXdlZE1vbnRoRmlyc3QueWVhcikge1xuICAgICAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSB0aGlzLnVzZXJWaWV3ZWRNb250aFNlY29uZC5hcHBlbmQoe1xuICAgICAgICAgICAgICAgIHllYXI6IG1vbnRoLnllYXIgLSB0aGlzLnVzZXJWaWV3ZWRNb250aFNlY29uZC55ZWFyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblNlY3Rpb25TZWNvbmRWaWV3ZWRNb250aChtb250aDogVHVpTW9udGgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSBtb250aDtcblxuICAgICAgICBpZiAodGhpcy51c2VyVmlld2VkTW9udGhGaXJzdC55ZWFyID4gdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQueWVhcikge1xuICAgICAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhGaXJzdCA9IHRoaXMudXNlclZpZXdlZE1vbnRoRmlyc3QuYXBwZW5kKHtcbiAgICAgICAgICAgICAgICB5ZWFyOiBtb250aC55ZWFyIC0gdGhpcy51c2VyVmlld2VkTW9udGhGaXJzdC55ZWFyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRheUNsaWNrKGRheTogVHVpRGF5KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF5Q2xpY2suZW1pdChkYXkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0SW5pdGlhbE1vbnRocygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJWaWV3ZWRNb250aFNlY29uZCA9IHRoaXMudXBkYXRlZFZpZXdlZE1vbnRoU2Vjb25kKFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhGaXJzdCA9IHRoaXMudXBkYXRlZFZpZXdlZE1vbnRoRmlyc3QoXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0Vmlld2VkTW9udGhGaXJzdCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZWRWaWV3ZWRNb250aFNlY29uZChtb250aDogVHVpTW9udGgpOiBUdWlNb250aCB7XG4gICAgICAgIGlmIChtb250aC5tb250aFNhbWVPckFmdGVyKHRoaXMubWF4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbnRoLm1vbnRoQmVmb3JlKHRoaXMubWluKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWluLmFwcGVuZCh7bW9udGg6IDF9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb250aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZWRWaWV3ZWRNb250aEZpcnN0KG1vbnRoOiBUdWlNb250aCk6IFR1aU1vbnRoIHtcbiAgICAgICAgaWYgKG1vbnRoLm1vbnRoU2FtZU9yQWZ0ZXIodGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQuYXBwZW5kKHttb250aDogLTF9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb250aC5tb250aFNhbWVPckJlZm9yZSh0aGlzLm1pbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb250aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZpZXdlZE1vbnRocygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhGaXJzdCA9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID09PSBudWxsID8gdGhpcy5kZWZhdWx0Vmlld2VkTW9udGhGaXJzdCA6IHRoaXMudmFsdWUuZnJvbTtcbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9PT0gbnVsbCA/IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kIDogdGhpcy52YWx1ZS50bztcblxuICAgICAgICBpZiAodGhpcy51c2VyVmlld2VkTW9udGhGaXJzdC5tb250aFNhbWUodGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQpKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJWaWV3ZWRNb250aFNlY29uZCA9IHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kLmFwcGVuZCh7bW9udGg6IDF9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==