import { __decorate, __extends, __read, __spread } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { AbstractTuiControl, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import { tuiPluralizeToICU, } from '@taiga-ui/core';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @internal
 * @deprecated TODO: 3.0 delete me after `InputSlider` and `InputRange` stop using it
 */
var AbstractTuiInputSlider = /** @class */ (function (_super) {
    __extends(AbstractTuiInputSlider, _super);
    function AbstractTuiInputSlider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.min = 0;
        _this.max = Infinity;
        /**
         * @deprecated This input-property will be deleted in next major update.
         * Use `valueContent` for `InputSlider`.
         * Use `leftValueContent` for `InputRange`.
         * ___
         * TODO remove in v3.0.
         * Dont forget to delete backward-compatibility helpers inside `InputSlider` and `InputRange`:
         *** {@link legacyMinMaxLabel}
         */
        _this.minLabel = "";
        /**
         * @deprecated This input-property will be deleted in next major update.
         * Use `valueContent` for `InputSlider`.
         * Use `rightValueContent` for `InputRange`.
         * ___
         * TODO remove in v3.0.
         * Dont forget to delete backward-compatibility helpers inside `InputSlider` and `InputRange`:
         *** {@link legacyMinMaxLabel}
         */
        _this.maxLabel = "";
        _this.segments = 0;
        _this.steps = 0;
        _this.quantum = 1;
        _this.keySteps = null;
        /**
         * @deprecated use `tuiTextfieldSize` instead
         * TODO delete in v3.0
         */
        _this.size = "l";
        /**
         * @deprecated replace by input-property {@link pluralize} in v3.0
         */
        _this.pluralizeMap = null;
        /** @deprecated TODO remove in v3.0 */
        _this.segmentsPluralizeMap = null;
        /** @deprecated TODO remove in v3.0 */
        _this.pluralizeMapFallback = {
            one: "",
            few: "",
            many: "",
            other: "",
        };
        return _this;
    }
    Object.defineProperty(AbstractTuiInputSlider.prototype, "pluralize", {
        // TODO: remove setter in v3.0:
        set: function (pluralize) {
            this.pluralizeMap = Array.isArray(pluralize)
                ? tuiPluralizeToICU(pluralize)
                : pluralize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "segmentsPluralize", {
        /**
         * @deprecated This input-property will be deleted in next major update.
         * You can create ticks labels below this input by yourself. It is easy!
         * Mixin `tui-slider-ticks-labels` will help with it. See examples in demo page `InputSlider`.
         * ___
         * TODO remove in v3.0.
         * Dont forget to delete:
         *** {@link segmentsPluralizeMap}
         *** {@link getTickPrefix}
         *** TuiFormatNumberPipeModule
         *** TuiRepeatTimesModule
         */
        set: function (pluralize) {
            this.segmentsPluralizeMap = Array.isArray(pluralize)
                ? tuiPluralizeToICU(pluralize)
                : pluralize;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated TODO remove in v3.0 */
    AbstractTuiInputSlider.prototype.getTickPrefix = function (segment, segments, texts) {
        if (segments !== 1) {
            return "";
        }
        return segment === 0 ? "" + texts[0] : "" + texts[1];
    };
    Object.defineProperty(AbstractTuiInputSlider.prototype, "segmented", {
        get: function () {
            return this.segments > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "length", {
        get: function () {
            return this.max - this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "computedSteps", {
        get: function () {
            return this.steps || this.length / this.quantum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "step", {
        get: function () {
            return this.length / this.computedSteps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "computedKeySteps", {
        get: function () {
            return this.computePureKeySteps(this.keySteps, this.min, this.max);
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiInputSlider.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    AbstractTuiInputSlider.prototype.computePureKeySteps = function (keySteps, min, max) {
        return __spread([[0, min]], (keySteps || []), [[100, max]]);
    };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "minLabel", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "maxLabel", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "pluralize", null);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "segmentsPluralize", null);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "segments", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "steps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp(quantumAssertion, "Quantum must be positive")
    ], AbstractTuiInputSlider.prototype, "quantum", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "keySteps", void 0);
    __decorate([
        Input(),
        HostBinding("attr.data-size"),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "size", void 0);
    __decorate([
        tuiPure
    ], AbstractTuiInputSlider.prototype, "getTickPrefix", null);
    __decorate([
        HostBinding("class._segmented")
    ], AbstractTuiInputSlider.prototype, "segmented", null);
    __decorate([
        tuiPure
    ], AbstractTuiInputSlider.prototype, "computePureKeySteps", null);
    AbstractTuiInputSlider = __decorate([
        Directive()
    ], AbstractTuiInputSlider);
    return AbstractTuiInputSlider;
}(AbstractTuiControl));
export { AbstractTuiInputSlider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc2xpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9hYnN0cmFjdC8iLCJzb3VyY2VzIjpbImlucHV0LXNsaWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFFSCxpQkFBaUIsR0FHcEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUd4QixnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE9BQWU7SUFDNUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRDs7O0dBR0c7QUFFSDtJQUNZLDBDQUFxQjtJQURqQztRQUFBLHFFQXFKQztRQS9JRyxTQUFHLEdBQUcsQ0FBQyxDQUFDO1FBSVIsU0FBRyxHQUFHLFFBQVEsQ0FBQztRQUVmOzs7Ozs7OztXQVFHO1FBR0gsY0FBUSxHQUFHLEVBQUUsQ0FBQztRQUVkOzs7Ozs7OztXQVFHO1FBR0gsY0FBUSxHQUFHLEVBQUUsQ0FBQztRQWlDZCxjQUFRLEdBQUcsQ0FBQyxDQUFDO1FBSWIsV0FBSyxHQUFHLENBQUMsQ0FBQztRQUlWLGFBQU8sR0FBRyxDQUFDLENBQUM7UUFJWixjQUFRLEdBQXVCLElBQUksQ0FBQztRQUVwQzs7O1dBR0c7UUFJSCxVQUFJLEdBQWEsR0FBRyxDQUFDO1FBRXJCOztXQUVHO1FBQ0gsa0JBQVksR0FBa0MsSUFBSSxDQUFDO1FBQ25ELHNDQUFzQztRQUN0QywwQkFBb0IsR0FBa0MsSUFBSSxDQUFDO1FBQzNELHNDQUFzQztRQUM3QiwwQkFBb0IsR0FBRztZQUM1QixHQUFHLEVBQUUsRUFBRTtZQUNQLEdBQUcsRUFBRSxFQUFFO1lBQ1AsSUFBSSxFQUFFLEVBQUU7WUFDUixLQUFLLEVB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QUNqRDtJQUlaO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFOzREQUNtQjtJQVNwQztRQUhDLEtBQUssRUFBRTtRQUNQLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QixjQUFjLEVBQUU7d0RBQ0k7SUFrQnJCO1FBREMsT0FBTzsrREFPUDtJQUdEO1FBREMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOzJEQUcvQjtJQXVCRDtRQURDLE9BQU87cUVBT1A7SUFwSmlCLHNCQUFzQjtRQUQzQyxTQUFTLEVBQUU7T0FDVSxzQkFBc0IsQ0FxSjNDO0lBQUQsNkJBQUM7Q0FBQSxBQXJKRCxDQUNZLGtCQUFrQixHQW9KN0I7U0FySnFCLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2wsIHR1aURlZmF1bHRQcm9wLCB0dWlQdXJlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVHVpUGx1cmFsaXplLFxuICAgIHR1aVBsdXJhbGl6ZVRvSUNVLFxuICAgIFR1aVNpemVMLFxuICAgIFR1aVdpdGhPcHRpb25hbE1pbk1heCxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUdWlLZXlTdGVwc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90eXBlcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBxdWFudHVtQXNzZXJ0aW9uKHF1YW50dW06IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBxdWFudHVtID4gMDtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBkZXByZWNhdGVkIFRPRE86IDMuMCBkZWxldGUgbWUgYWZ0ZXIgYElucHV0U2xpZGVyYCBhbmQgYElucHV0UmFuZ2VgIHN0b3AgdXNpbmcgaXRcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlJbnB1dFNsaWRlcjxUPlxuICAgIGV4dGVuZHMgQWJzdHJhY3RUdWlDb250cm9sPFQ+XG4gICAgaW1wbGVtZW50cyBUdWlXaXRoT3B0aW9uYWxNaW5NYXg8bnVtYmVyPlxue1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtaW4gPSAwO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1heCA9IEluZmluaXR5O1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpbnB1dC1wcm9wZXJ0eSB3aWxsIGJlIGRlbGV0ZWQgaW4gbmV4dCBtYWpvciB1cGRhdGUuXG4gICAgICogVXNlIGB2YWx1ZUNvbnRlbnRgIGZvciBgSW5wdXRTbGlkZXJgLlxuICAgICAqIFVzZSBgbGVmdFZhbHVlQ29udGVudGAgZm9yIGBJbnB1dFJhbmdlYC5cbiAgICAgKiBfX19cbiAgICAgKiBUT0RPIHJlbW92ZSBpbiB2My4wLlxuICAgICAqIERvbnQgZm9yZ2V0IHRvIGRlbGV0ZSBiYWNrd2FyZC1jb21wYXRpYmlsaXR5IGhlbHBlcnMgaW5zaWRlIGBJbnB1dFNsaWRlcmAgYW5kIGBJbnB1dFJhbmdlYDpcbiAgICAgKioqIHtAbGluayBsZWdhY3lNaW5NYXhMYWJlbH1cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbWluTGFiZWwgPSBgYDtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaW5wdXQtcHJvcGVydHkgd2lsbCBiZSBkZWxldGVkIGluIG5leHQgbWFqb3IgdXBkYXRlLlxuICAgICAqIFVzZSBgdmFsdWVDb250ZW50YCBmb3IgYElucHV0U2xpZGVyYC5cbiAgICAgKiBVc2UgYHJpZ2h0VmFsdWVDb250ZW50YCBmb3IgYElucHV0UmFuZ2VgLlxuICAgICAqIF9fX1xuICAgICAqIFRPRE8gcmVtb3ZlIGluIHYzLjAuXG4gICAgICogRG9udCBmb3JnZXQgdG8gZGVsZXRlIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgaGVscGVycyBpbnNpZGUgYElucHV0U2xpZGVyYCBhbmQgYElucHV0UmFuZ2VgOlxuICAgICAqKioge0BsaW5rIGxlZ2FjeU1pbk1heExhYmVsfVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtYXhMYWJlbCA9IGBgO1xuXG4gICAgLy8gVE9ETzogcmVtb3ZlIHNldHRlciBpbiB2My4wOlxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgcGx1cmFsaXplKHBsdXJhbGl6ZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IFR1aVBsdXJhbGl6ZSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5wbHVyYWxpemVNYXAgPSBBcnJheS5pc0FycmF5KHBsdXJhbGl6ZSlcbiAgICAgICAgICAgID8gdHVpUGx1cmFsaXplVG9JQ1UocGx1cmFsaXplKVxuICAgICAgICAgICAgOiBwbHVyYWxpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpbnB1dC1wcm9wZXJ0eSB3aWxsIGJlIGRlbGV0ZWQgaW4gbmV4dCBtYWpvciB1cGRhdGUuXG4gICAgICogWW91IGNhbiBjcmVhdGUgdGlja3MgbGFiZWxzIGJlbG93IHRoaXMgaW5wdXQgYnkgeW91cnNlbGYuIEl0IGlzIGVhc3khXG4gICAgICogTWl4aW4gYHR1aS1zbGlkZXItdGlja3MtbGFiZWxzYCB3aWxsIGhlbHAgd2l0aCBpdC4gU2VlIGV4YW1wbGVzIGluIGRlbW8gcGFnZSBgSW5wdXRTbGlkZXJgLlxuICAgICAqIF9fX1xuICAgICAqIFRPRE8gcmVtb3ZlIGluIHYzLjAuXG4gICAgICogRG9udCBmb3JnZXQgdG8gZGVsZXRlOlxuICAgICAqKioge0BsaW5rIHNlZ21lbnRzUGx1cmFsaXplTWFwfVxuICAgICAqKioge0BsaW5rIGdldFRpY2tQcmVmaXh9XG4gICAgICoqKiBUdWlGb3JtYXROdW1iZXJQaXBlTW9kdWxlXG4gICAgICoqKiBUdWlSZXBlYXRUaW1lc01vZHVsZVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgc2VnbWVudHNQbHVyYWxpemUocGx1cmFsaXplOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgVHVpUGx1cmFsaXplIHwgbnVsbCkge1xuICAgICAgICB0aGlzLnNlZ21lbnRzUGx1cmFsaXplTWFwID0gQXJyYXkuaXNBcnJheShwbHVyYWxpemUpXG4gICAgICAgICAgICA/IHR1aVBsdXJhbGl6ZVRvSUNVKHBsdXJhbGl6ZSlcbiAgICAgICAgICAgIDogcGx1cmFsaXplO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZWdtZW50cyA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc3RlcHMgPSAwO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AocXVhbnR1bUFzc2VydGlvbiwgYFF1YW50dW0gbXVzdCBiZSBwb3NpdGl2ZWApXG4gICAgcXVhbnR1bSA9IDE7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYHR1aVRleHRmaWVsZFNpemVgIGluc3RlYWRcbiAgICAgKiBUT0RPIGRlbGV0ZSBpbiB2My4wXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoYGF0dHIuZGF0YS1zaXplYClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gYGxgO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZSBieSBpbnB1dC1wcm9wZXJ0eSB7QGxpbmsgcGx1cmFsaXplfSBpbiB2My4wXG4gICAgICovXG4gICAgcGx1cmFsaXplTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCA9IG51bGw7XG4gICAgLyoqIEBkZXByZWNhdGVkIFRPRE8gcmVtb3ZlIGluIHYzLjAgKi9cbiAgICBzZWdtZW50c1BsdXJhbGl6ZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwgPSBudWxsO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBUT0RPIHJlbW92ZSBpbiB2My4wICovXG4gICAgcmVhZG9ubHkgcGx1cmFsaXplTWFwRmFsbGJhY2sgPSB7XG4gICAgICAgIG9uZTogYGAsXG4gICAgICAgIGZldzogYGAsXG4gICAgICAgIG1hbnk6IGBgLFxuICAgICAgICBvdGhlcjogYGAsXG4gICAgfTtcblxuICAgIC8qKiBAZGVwcmVjYXRlZCBUT0RPIHJlbW92ZSBpbiB2My4wICovXG4gICAgQHR1aVB1cmVcbiAgICBnZXRUaWNrUHJlZml4KHNlZ21lbnQ6IG51bWJlciwgc2VnbWVudHM6IG51bWJlciwgdGV4dHM6IFtzdHJpbmcsIHN0cmluZ10pOiBzdHJpbmcge1xuICAgICAgICBpZiAoc2VnbWVudHMgIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBgYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWdtZW50ID09PSAwID8gYCR7dGV4dHNbMF19YCA6IGAke3RleHRzWzFdfWA7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5fc2VnbWVudGVkYClcbiAgICBnZXQgc2VnbWVudGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50cyA+IDA7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXggLSB0aGlzLm1pbjtcbiAgICB9XG5cbiAgICBnZXQgY29tcHV0ZWRTdGVwcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwcyB8fCB0aGlzLmxlbmd0aCAvIHRoaXMucXVhbnR1bTtcbiAgICB9XG5cbiAgICBnZXQgc3RlcCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLyB0aGlzLmNvbXB1dGVkU3RlcHM7XG4gICAgfVxuXG4gICAgZ2V0IGNvbXB1dGVkS2V5U3RlcHMoKTogVHVpS2V5U3RlcHMge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlUHVyZUtleVN0ZXBzKHRoaXMua2V5U3RlcHMsIHRoaXMubWluLCB0aGlzLm1heCk7XG4gICAgfVxuXG4gICAgb25Ib3ZlcmVkKGhvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3ZlcmVkKGhvdmVyZWQpO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBjb21wdXRlUHVyZUtleVN0ZXBzKFxuICAgICAgICBrZXlTdGVwczogVHVpS2V5U3RlcHMgfCBudWxsLFxuICAgICAgICBtaW46IG51bWJlcixcbiAgICAgICAgbWF4OiBudW1iZXIsXG4gICAgKTogVHVpS2V5U3RlcHMge1xuICAgICAgICByZXR1cm4gW1swLCBtaW5dLCAuLi4oa2V5U3RlcHMgfHwgW10pLCBbMTAwLCBtYXhdXTtcbiAgICB9XG59XG4iXX0=