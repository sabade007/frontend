import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Inject } from '@angular/core';
import { getClosestFocusable, isNativeFocusedIn, isPresent, setNativeMouseFocused, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { TuiHostedDropdownComponent } from '@taiga-ui/core';
import { merge, Observable, of, timer } from 'rxjs';
import { debounce, debounceTime, distinctUntilChanged, filter, map, mapTo, share, switchMap, takeUntil, tap, } from 'rxjs/operators';
var TuiDropdownHoverDirective = /** @class */ (function () {
    function TuiDropdownHoverDirective(destroy$, _a, dropdown) {
        var nativeElement = _a.nativeElement;
        this.dropdown = dropdown;
        var dropdown$ = dropdown.openChange.pipe(
        // Give change detection time to open dropdown
        debounceTime(0), map(function () { return dropdown.dropdown; }), filter(isPresent), share());
        var open$ = merge(typedFromEvent(nativeElement, 'mouseenter'), typedFromEvent(nativeElement, 'click').pipe(tap(function (e) { return e.stopImmediatePropagation(); })), dropdown$.pipe(switchMap(function (element) {
            return merge(typedFromEvent(element, 'focusin'), typedFromEvent(element, 'mouseenter'));
        }))).pipe(mapTo(true));
        var close$ = merge(typedFromEvent(nativeElement, 'mouseleave'), dropdown$.pipe(switchMap(function (element) {
            return typedFromEvent(element, 'mouseleave').pipe(filter(function () { return !isNativeFocusedIn(element); }));
        }))).pipe(mapTo(false));
        merge(open$, close$)
            .pipe(debounce(function (value) { return (value ? of(value) : timer(300)); }), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe(function (open) {
            dropdown.updateOpen(open);
        });
    }
    TuiDropdownHoverDirective.prototype.onMouseEnter = function () {
        var host = this.dropdown.host;
        if (isNativeFocusedIn(host)) {
            return;
        }
        var focusable = getClosestFocusable(host, false, host, false);
        if (focusable) {
            setNativeMouseFocused(focusable);
        }
    };
    TuiDropdownHoverDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHostedDropdownComponent, decorators: [{ type: Inject, args: [TuiHostedDropdownComponent,] }] }
    ]; };
    __decorate([
        HostListener('mouseenter')
    ], TuiDropdownHoverDirective.prototype, "onMouseEnter", null);
    TuiDropdownHoverDirective = __decorate([
        Directive({
            selector: 'tui-hosted-dropdown[tuiDropdownHover]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(TuiDestroyService)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiHostedDropdownComponent))
    ], TuiDropdownHoverDirective);
    return TuiDropdownHoverDirective;
}());
export { TuiDropdownHoverDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taG92ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9kaXJlY3RpdmVzL2Ryb3Bkb3duLWhvdmVyLyIsInNvdXJjZXMiOlsiZHJvcGRvd24taG92ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFDSCxtQkFBbUIsRUFDbkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxxQkFBcUIsRUFDckIsaUJBQWlCLEVBQ2pCLGNBQWMsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQ0gsUUFBUSxFQUNSLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsR0FBRyxHQUNOLE1BQU0sZ0JBQWdCLENBQUM7QUFNeEI7SUFDSSxtQ0FDK0IsUUFBMEIsRUFDakMsRUFBd0MsRUFFM0MsUUFBb0M7WUFGaEMsZ0NBQWE7UUFFakIsYUFBUSxHQUFSLFFBQVEsQ0FBNEI7UUFFckQsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJO1FBQ3RDLDhDQUE4QztRQUM5QyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxDQUFDLGNBQU0sT0FBQSxRQUFRLENBQUMsUUFBUSxFQUFqQixDQUFpQixDQUFDLEVBQzVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDakIsS0FBSyxFQUFFLENBQ1YsQ0FBQztRQUVGLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FDZixjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxFQUMzQyxjQUFjLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLHdCQUF3QixFQUFFLEVBQTVCLENBQTRCLENBQUMsQ0FDekMsRUFDRCxTQUFTLENBQUMsSUFBSSxDQUNWLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDYixPQUFBLEtBQUssQ0FDRCxjQUFjLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUNsQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUN4QztRQUhELENBR0MsQ0FDSixDQUNKLENBQ0osQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFcEIsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUNoQixjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxFQUMzQyxTQUFTLENBQUMsSUFBSSxDQUNWLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDYixPQUFBLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN0QyxNQUFNLENBQUMsY0FBTSxPQUFBLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEVBQTNCLENBQTJCLENBQUMsQ0FDNUM7UUFGRCxDQUVDLENBQ0osQ0FDSixDQUNKLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXJCLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO2FBQ2YsSUFBSSxDQUNELFFBQVEsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLEVBQ25ELG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEI7YUFDQSxTQUFTLENBQUMsVUFBQSxJQUFJO1lBQ1gsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFHRCxnREFBWSxHQUFaO1FBQ1csSUFBQSx5QkFBSSxDQUFrQjtRQUU3QixJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE9BQU87U0FDVjtRQUVELElBQU0sU0FBUyxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhFLElBQUksU0FBUyxFQUFFO1lBQ1gscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEM7SUFDTCxDQUFDOztnQkEvRHdDLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxpQkFBaUI7Z0JBQ1ksVUFBVSx1QkFBOUMsTUFBTSxTQUFDLFVBQVU7Z0JBRVMsMEJBQTBCLHVCQURwRCxNQUFNLFNBQUMsMEJBQTBCOztJQWlEdEM7UUFEQyxZQUFZLENBQUMsWUFBWSxDQUFDO2lFQWExQjtJQWpFUSx5QkFBeUI7UUFKckMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHVDQUF1QztZQUNqRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUNqQyxDQUFDO1FBR08sV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO09BSjlCLHlCQUF5QixDQWtFckM7SUFBRCxnQ0FBQztDQUFBLEFBbEVELElBa0VDO1NBbEVZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIGdldENsb3Nlc3RGb2N1c2FibGUsXG4gICAgaXNOYXRpdmVGb2N1c2VkSW4sXG4gICAgaXNQcmVzZW50LFxuICAgIHNldE5hdGl2ZU1vdXNlRm9jdXNlZCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB0eXBlZEZyb21FdmVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlLCBvZiwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkZWJvdW5jZSxcbiAgICBkZWJvdW5jZVRpbWUsXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgZmlsdGVyLFxuICAgIG1hcCxcbiAgICBtYXBUbyxcbiAgICBzaGFyZSxcbiAgICBzd2l0Y2hNYXAsXG4gICAgdGFrZVVudGlsLFxuICAgIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS1ob3N0ZWQtZHJvcGRvd25bdHVpRHJvcGRvd25Ib3Zlcl0nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcGRvd25Ib3ZlckRpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHZvaWQ+LFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVHVpSG9zdGVkRHJvcGRvd25Db21wb25lbnQpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZHJvcGRvd246IFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50LFxuICAgICkge1xuICAgICAgICBjb25zdCBkcm9wZG93biQgPSBkcm9wZG93bi5vcGVuQ2hhbmdlLnBpcGUoXG4gICAgICAgICAgICAvLyBHaXZlIGNoYW5nZSBkZXRlY3Rpb24gdGltZSB0byBvcGVuIGRyb3Bkb3duXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgICAgICBtYXAoKCkgPT4gZHJvcGRvd24uZHJvcGRvd24pLFxuICAgICAgICAgICAgZmlsdGVyKGlzUHJlc2VudCksXG4gICAgICAgICAgICBzaGFyZSgpLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IG9wZW4kID0gbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnbW91c2VlbnRlcicpLFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2NsaWNrJykucGlwZShcbiAgICAgICAgICAgICAgICB0YXAoZSA9PiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkcm9wZG93biQucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoZWxlbWVudCA9PlxuICAgICAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdmb2N1c2luJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChlbGVtZW50LCAnbW91c2VlbnRlcicpLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICApLnBpcGUobWFwVG8odHJ1ZSkpO1xuXG4gICAgICAgIGNvbnN0IGNsb3NlJCA9IG1lcmdlKFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ21vdXNlbGVhdmUnKSxcbiAgICAgICAgICAgIGRyb3Bkb3duJC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChlbGVtZW50ID0+XG4gICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdtb3VzZWxlYXZlJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiAhaXNOYXRpdmVGb2N1c2VkSW4oZWxlbWVudCkpLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICApLnBpcGUobWFwVG8oZmFsc2UpKTtcblxuICAgICAgICBtZXJnZShvcGVuJCwgY2xvc2UkKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZGVib3VuY2UodmFsdWUgPT4gKHZhbHVlID8gb2YodmFsdWUpIDogdGltZXIoMzAwKSkpLFxuICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUob3BlbiA9PiB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24udXBkYXRlT3BlbihvcGVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICAgIG9uTW91c2VFbnRlcigpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2hvc3R9ID0gdGhpcy5kcm9wZG93bjtcblxuICAgICAgICBpZiAoaXNOYXRpdmVGb2N1c2VkSW4oaG9zdCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGdldENsb3Nlc3RGb2N1c2FibGUoaG9zdCwgZmFsc2UsIGhvc3QsIGZhbHNlKTtcblxuICAgICAgICBpZiAoZm9jdXNhYmxlKSB7XG4gICAgICAgICAgICBzZXROYXRpdmVNb3VzZUZvY3VzZWQoZm9jdXNhYmxlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==