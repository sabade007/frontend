import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Inject, OnDestroy, Output, } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { isCurrentTarget, isFirefox } from '@taiga-ui/cdk';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, skip } from 'rxjs/operators';
var TuiPresentDirective = /** @class */ (function () {
    function TuiPresentDirective(_a, userAgent) {
        var _this = this;
        var nativeElement = _a.nativeElement;
        this.visibility$ = new BehaviorSubject(false);
        this.tuiPresentChange = this.visibility$.pipe(distinctUntilChanged(), skip(1));
        if (isFirefox(userAgent)) {
            return;
        }
        var observer = new MutationObserver(function () {
            if (!nativeElement.offsetParent &&
                nativeElement.offsetWidth === 0 &&
                nativeElement.offsetHeight === 0) {
                _this.visibility$.next(false);
            }
        });
        observer.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['style', 'class'],
        });
    }
    /**
     * Someday animationcancel would work and mutation observer would not be needed:
     * https://drafts.csswg.org/css-animations/#eventdef-animationevent-animationcancel
     * It would also trigger on CSS like display: none on parent nodes which is awesome
     * but currently only works in Firefox
     * ___
     * TODO: remove MutationObserver when we bump versions of supported browsers:
     *** Safari 12+
     *** Chrome 83+
     * See: {@link https://caniuse.com/mdn-api_window_animationcancel_event}
     */
    TuiPresentDirective.prototype.onAnimation = function (event, visibility) {
        if (isCurrentTarget(event)) {
            this.visibility$.next(visibility);
        }
    };
    TuiPresentDirective.prototype.ngOnDestroy = function () {
        this.visibility$.next(false);
    };
    TuiPresentDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiPresentDirective.prototype, "tuiPresentChange", void 0);
    __decorate([
        HostListener('animationcancel', ['$event', 'false']),
        HostListener('animationstart', ['$event', 'true'])
    ], TuiPresentDirective.prototype, "onAnimation", null);
    TuiPresentDirective = __decorate([
        Directive({
            selector: '[tuiPresentChange]',
            host: {
                '[style.animation]': '"tuiPresent 1s infinite"',
            },
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(USER_AGENT))
    ], TuiPresentDirective);
    return TuiPresentDirective;
}());
export { TuiPresentDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2RpcmVjdGl2ZXMvcHJlc2VudC8iLCJzb3VyY2VzIjpbInByZXNlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBUTFEO0lBTUksNkJBQ3dCLEVBQXdDLEVBQ3hDLFNBQWlCO1FBRnpDLGlCQXNCQztZQXJCd0IsZ0NBQWE7UUFOckIsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUdqRCxxQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBTS9FLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLE9BQU87U0FDVjtRQUVELElBQU0sUUFBUSxHQUFHLElBQUksZ0JBQWdCLENBQUM7WUFDbEMsSUFDSSxDQUFDLGFBQWEsQ0FBQyxZQUFZO2dCQUMzQixhQUFhLENBQUMsV0FBVyxLQUFLLENBQUM7Z0JBQy9CLGFBQWEsQ0FBQyxZQUFZLEtBQUssQ0FBQyxFQUNsQztnQkFDRSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDNUIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUdILHlDQUFXLEdBQVgsVUFBWSxLQUFZLEVBQUUsVUFBbUI7UUFDekMsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7SUFDTCxDQUFDO0lBRUQseUNBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2dCQTVDd0MsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLFVBQVU7NkNBQ2pCLE1BQU0sU0FBQyxVQUFVOztJQUp0QjtRQURDLE1BQU0sRUFBRTtpRUFDMEU7SUF1Q25GO1FBRkMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQzswREFLbEQ7SUEvQ1EsbUJBQW1CO1FBTi9CLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsSUFBSSxFQUFFO2dCQUNGLG1CQUFtQixFQUFFLDBCQUEwQjthQUNsRDtTQUNKLENBQUM7UUFRTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQVJkLG1CQUFtQixDQW9EL0I7SUFBRCwwQkFBQztDQUFBLEFBcERELElBb0RDO1NBcERZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VVNFUl9BR0VOVH0gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge2lzQ3VycmVudFRhcmdldCwgaXNGaXJlZm94fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIHNraXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUHJlc2VudENoYW5nZV0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tzdHlsZS5hbmltYXRpb25dJzogJ1widHVpUHJlc2VudCAxcyBpbmZpbml0ZVwiJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmVzZW50RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZpc2liaWxpdHkkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlQcmVzZW50Q2hhbmdlID0gdGhpcy52aXNpYmlsaXR5JC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHNraXAoMSkpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSB1c2VyQWdlbnQ6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgaWYgKGlzRmlyZWZveCh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhbmF0aXZlRWxlbWVudC5vZmZzZXRQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoID09PSAwICYmXG4gICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eSQubmV4dChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUobmF0aXZlRWxlbWVudCwge1xuICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydzdHlsZScsICdjbGFzcyddLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTb21lZGF5IGFuaW1hdGlvbmNhbmNlbCB3b3VsZCB3b3JrIGFuZCBtdXRhdGlvbiBvYnNlcnZlciB3b3VsZCBub3QgYmUgbmVlZGVkOlxuICAgICAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtYW5pbWF0aW9ucy8jZXZlbnRkZWYtYW5pbWF0aW9uZXZlbnQtYW5pbWF0aW9uY2FuY2VsXG4gICAgICogSXQgd291bGQgYWxzbyB0cmlnZ2VyIG9uIENTUyBsaWtlIGRpc3BsYXk6IG5vbmUgb24gcGFyZW50IG5vZGVzIHdoaWNoIGlzIGF3ZXNvbWVcbiAgICAgKiBidXQgY3VycmVudGx5IG9ubHkgd29ya3MgaW4gRmlyZWZveFxuICAgICAqIF9fX1xuICAgICAqIFRPRE86IHJlbW92ZSBNdXRhdGlvbk9ic2VydmVyIHdoZW4gd2UgYnVtcCB2ZXJzaW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnM6XG4gICAgICoqKiBTYWZhcmkgMTIrXG4gICAgICoqKiBDaHJvbWUgODMrXG4gICAgICogU2VlOiB7QGxpbmsgaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tYXBpX3dpbmRvd19hbmltYXRpb25jYW5jZWxfZXZlbnR9XG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcignYW5pbWF0aW9uY2FuY2VsJywgWyckZXZlbnQnLCAnZmFsc2UnXSlcbiAgICBASG9zdExpc3RlbmVyKCdhbmltYXRpb25zdGFydCcsIFsnJGV2ZW50JywgJ3RydWUnXSlcbiAgICBvbkFuaW1hdGlvbihldmVudDogRXZlbnQsIHZpc2liaWxpdHk6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzQ3VycmVudFRhcmdldChldmVudCkpIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eSQubmV4dCh2aXNpYmlsaXR5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpc2liaWxpdHkkLm5leHQoZmFsc2UpO1xuICAgIH1cbn1cbiJdfQ==