import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiLazyLoadingService } from './lazy-loading.service';
var TuiLazyLoadingDirective = /** @class */ (function () {
    function TuiLazyLoadingDirective(src$, elementRef) {
        var _this = this;
        this.src$ = src$;
        this.elementRef = elementRef;
        this.animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';
        this.background = 'var(--tui-clear-hover)';
        this.src = null;
        if (!this.supported) {
            this.src$.subscribe(function (src) {
                _this.src = src;
            });
        }
    }
    Object.defineProperty(TuiLazyLoadingDirective.prototype, "srcSetter", {
        set: function (src) {
            this.src = this.supported ? src : null;
            this.src$.next(src);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLazyLoadingDirective.prototype, "supported", {
        get: function () {
            return 'loading' in this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiLazyLoadingDirective.prototype.onLoad = function () {
        this.background = '';
        this.animation = '';
    };
    TuiLazyLoadingDirective.ctorParameters = function () { return [
        { type: TuiLazyLoadingService, decorators: [{ type: Inject, args: [TuiLazyLoadingService,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input('src')
    ], TuiLazyLoadingDirective.prototype, "srcSetter", null);
    __decorate([
        HostBinding('style.animation')
    ], TuiLazyLoadingDirective.prototype, "animation", void 0);
    __decorate([
        HostBinding('style.background')
    ], TuiLazyLoadingDirective.prototype, "background", void 0);
    __decorate([
        HostBinding('attr.src')
    ], TuiLazyLoadingDirective.prototype, "src", void 0);
    __decorate([
        HostListener('load')
    ], TuiLazyLoadingDirective.prototype, "onLoad", null);
    TuiLazyLoadingDirective = __decorate([
        Directive({
            selector: 'img[loading="lazy"]',
            providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService],
        }),
        __param(0, Inject(TuiLazyLoadingService)),
        __param(1, Inject(ElementRef))
    ], TuiLazyLoadingDirective);
    return TuiLazyLoadingDirective;
}());
export { TuiLazyLoadingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvZGlyZWN0aXZlcy9sYXp5LWxvYWRpbmcvIiwic291cmNlcyI6WyJsYXp5LWxvYWRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDL0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBTTdEO0lBZ0JJLGlDQUVxQixJQUEyQixFQUUzQixVQUF3QztRQUo3RCxpQkFXQztRQVRvQixTQUFJLEdBQUosSUFBSSxDQUF1QjtRQUUzQixlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQVo3RCxjQUFTLEdBQUcsbURBQW1ELENBQUM7UUFHaEUsZUFBVSxHQUFHLHdCQUF3QixDQUFDO1FBR3RDLFFBQUcsR0FBb0MsSUFBSSxDQUFDO1FBUXhDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRztnQkFDbkIsS0FBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUF6QkQsc0JBQUksOENBQVM7YUFBYixVQUFjLEdBQTZCO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUF3QkQsc0JBQVksOENBQVM7YUFBckI7WUFDSSxPQUFPLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUN0RCxDQUFDOzs7T0FBQTtJQUdELHdDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkFuQjBCLHFCQUFxQix1QkFEM0MsTUFBTSxTQUFDLHFCQUFxQjtnQkFHQSxVQUFVLHVCQUR0QyxNQUFNLFNBQUMsVUFBVTs7SUFqQnRCO1FBREMsS0FBSyxDQUFDLEtBQUssQ0FBQzs0REFJWjtJQUdEO1FBREMsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzhEQUNpQztJQUdoRTtRQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzsrREFDTTtJQUd0QztRQURDLFdBQVcsQ0FBQyxVQUFVLENBQUM7d0RBQ29CO0lBb0I1QztRQURDLFlBQVksQ0FBQyxNQUFNLENBQUM7eURBSXBCO0lBckNRLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLGlCQUFpQixDQUFDO1NBQ3JGLENBQUM7UUFrQk8sV0FBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTtRQUU3QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQW5CZCx1QkFBdUIsQ0FzQ25DO0lBQUQsOEJBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQXRDWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTYWZlUmVzb3VyY2VVcmx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbmltcG9ydCB7VHVpTGF6eUxvYWRpbmdTZXJ2aWNlfSBmcm9tICcuL2xhenktbG9hZGluZy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbWdbbG9hZGluZz1cImxhenlcIl0nLFxuICAgIHByb3ZpZGVyczogW1R1aUxhenlMb2FkaW5nU2VydmljZSwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTZXJ2aWNlLCBUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUxhenlMb2FkaW5nRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoJ3NyYycpXG4gICAgc2V0IHNyY1NldHRlcihzcmM6IFNhZmVSZXNvdXJjZVVybCB8IHN0cmluZykge1xuICAgICAgICB0aGlzLnNyYyA9IHRoaXMuc3VwcG9ydGVkID8gc3JjIDogbnVsbDtcbiAgICAgICAgdGhpcy5zcmMkLm5leHQoc3JjKTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmFuaW1hdGlvbicpXG4gICAgYW5pbWF0aW9uID0gJ3R1aVNrZWxldG9uVmliZSBlYXNlLWluLW91dCAxcyBpbmZpbml0ZSBhbHRlcm5hdGUnO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5iYWNrZ3JvdW5kJylcbiAgICBiYWNrZ3JvdW5kID0gJ3ZhcigtLXR1aS1jbGVhci1ob3ZlciknO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnNyYycpXG4gICAgc3JjOiBTYWZlUmVzb3VyY2VVcmwgfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aUxhenlMb2FkaW5nU2VydmljZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzcmMkOiBUdWlMYXp5TG9hZGluZ1NlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxJbWFnZUVsZW1lbnQ+LFxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuc3VwcG9ydGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNyYyQuc3Vic2NyaWJlKHNyYyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHN1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICdsb2FkaW5nJyBpbiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdsb2FkJylcbiAgICBvbkxvYWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9ICcnO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9ICcnO1xuICAgIH1cbn1cbiJdfQ==