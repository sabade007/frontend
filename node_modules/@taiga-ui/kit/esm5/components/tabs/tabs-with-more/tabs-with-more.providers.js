import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ElementRef, InjectionToken } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiResizeService } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { debounceTime, filter, startWith, takeUntil, tap } from 'rxjs/operators';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function tabsRefreshFactory(resize$, mutations$, destroy$, _a, _b, changeDetectorRef) {
    var body = _a.body;
    var nativeElement = _b.nativeElement;
    return merge(resize$, mutations$.pipe(tap(function () { return changeDetectorRef.detectChanges(); }))).pipe(
    // Ignoring cases when host is detached from DOM
    filter(function () { return body.contains(nativeElement); }), debounceTime(0), startWith(null), takeUntil(destroy$));
}
// TODO: 3.0 remove in ivy compilation
export var MUTATION_CONFIG = {
    childList: true,
    subtree: true,
    characterData: true,
};
export var TABS_REFRESH = new InjectionToken("Refresh stream");
export var TABS_PROVIDERS = [
    TuiResizeService,
    TuiDestroyService,
    MutationObserverService,
    {
        provide: MUTATION_OBSERVER_INIT,
        useValue: MUTATION_CONFIG,
    },
    {
        provide: TABS_REFRESH,
        deps: [
            TuiResizeService,
            MutationObserverService,
            TuiDestroyService,
            DOCUMENT,
            ElementRef,
            ChangeDetectorRef,
        ],
        useFactory: tabsRefreshFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy13aXRoLW1vcmUucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3RhYnMvIiwic291cmNlcyI6WyJ0YWJzLXdpdGgtbW9yZS90YWJzLXdpdGgtbW9yZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsdUJBQXVCLEdBQzFCLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRSxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGtCQUFrQixDQUM5QixPQUE0QixFQUM1QixVQUErQixFQUMvQixRQUE2QixFQUM3QixFQUFnQixFQUNoQixFQUFpQyxFQUNqQyxpQkFBb0M7UUFGbkMsY0FBSTtRQUNKLGdDQUFhO0lBR2QsT0FBTyxLQUFLLENBQ1IsT0FBTyxFQUNQLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQU0sT0FBQSxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDLENBQ2hFLENBQUMsSUFBSTtJQUNGLGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsY0FBTSxPQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQTVCLENBQTRCLENBQUMsRUFDMUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNmLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixTQUFTLENBQUMsUUFBUSxDQUFDLENBQ3RCLENBQUM7QUFDTixDQUFDO0FBRUQsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRztJQUMzQixTQUFTLEVBQUUsSUFBSTtJQUNmLE9BQU8sRUFBRSxJQUFJO0lBQ2IsYUFBYSxFQUFFLElBQUk7Q0FDdEIsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBc0IsZ0JBQWdCLENBQUMsQ0FBQztBQUN0RixNQUFNLENBQUMsSUFBTSxjQUFjLEdBQWU7SUFDdEMsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQix1QkFBdUI7SUFDdkI7UUFDSSxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLFFBQVEsRUFBRSxlQUFlO0tBQzVCO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUU7WUFDRixnQkFBZ0I7WUFDaEIsdUJBQXVCO1lBQ3ZCLGlCQUFpQjtZQUNqQixRQUFRO1lBQ1IsVUFBVTtZQUNWLGlCQUFpQjtTQUNwQjtRQUNELFVBQVUsRUFBRSxrQkFBa0I7S0FDakM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG59IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlLCBUdWlSZXNpemVTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIGZpbHRlciwgc3RhcnRXaXRoLCB0YWtlVW50aWwsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdGFic1JlZnJlc2hGYWN0b3J5KFxuICAgIHJlc2l6ZSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgbXV0YXRpb25zJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICB7Ym9keX06IERvY3VtZW50LFxuICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxOb2RlPixcbiAgICBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4pOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgIHJlc2l6ZSQsXG4gICAgICAgIG11dGF0aW9ucyQucGlwZSh0YXAoKCkgPT4gY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpKSksXG4gICAgKS5waXBlKFxuICAgICAgICAvLyBJZ25vcmluZyBjYXNlcyB3aGVuIGhvc3QgaXMgZGV0YWNoZWQgZnJvbSBET01cbiAgICAgICAgZmlsdGVyKCgpID0+IGJvZHkuY29udGFpbnMobmF0aXZlRWxlbWVudCkpLFxuICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICApO1xufVxuXG4vLyBUT0RPOiAzLjAgcmVtb3ZlIGluIGl2eSBjb21waWxhdGlvblxuZXhwb3J0IGNvbnN0IE1VVEFUSU9OX0NPTkZJRyA9IHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgc3VidHJlZTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBUQUJTX1JFRlJFU0ggPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oYFJlZnJlc2ggc3RyZWFtYCk7XG5leHBvcnQgY29uc3QgVEFCU19QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpUmVzaXplU2VydmljZSxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgICAgIHVzZVZhbHVlOiBNVVRBVElPTl9DT05GSUcsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRBQlNfUkVGUkVTSCxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgVHVpUmVzaXplU2VydmljZSxcbiAgICAgICAgICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxuICAgICAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgICAgICBET0NVTUVOVCxcbiAgICAgICAgICAgIEVsZW1lbnRSZWYsXG4gICAgICAgICAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgXSxcbiAgICAgICAgdXNlRmFjdG9yeTogdGFic1JlZnJlc2hGYWN0b3J5LFxuICAgIH0sXG5dO1xuIl19