import { __decorate, __param } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Input, Output, QueryList, TemplateRef, ViewChild, } from '@angular/core';
import { EMPTY_QUERY, getClosestFocusable, isNativeFocused, setNativeFocused, toInt, tuiAssertIsHTMLElement, tuiClamp, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TUI_MORE_WORD, TUI_TAB_MARGIN } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { TuiTabDirective } from '../tab.directive';
import { TuiTabComponent } from '../tab/tab.component';
import { TUI_TABS_OPTIONS } from '../tabs-options';
import { TABS_PROVIDERS, TABS_REFRESH } from './tabs-with-more.providers';
// @dynamic
var TuiTabsWithMoreComponent = /** @class */ (function () {
    function TuiTabsWithMoreComponent(options, margin, refresh$, elementRef, changeDetectorRef, moreWord$) {
        this.options = options;
        this.margin = margin;
        this.refresh$ = refresh$;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.moreWord$ = moreWord$;
        this.maxIndex = Infinity;
        this.moreContent = '';
        this.dropdownContent = '';
        this.underline = this.options.underline;
        this.activeItemIndex = 0;
        this.itemsLimit = this.options.itemsLimit;
        this.activeItemIndexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.open = false;
    }
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "tabs", {
        // TODO: Improve performance
        get: function () {
            return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "activeElement", {
        get: function () {
            var _a;
            var tabs = this.tabs;
            var safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
            return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex
                ? tabs[safeActiveIndex] || null
                : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreVisible", {
        get: function () {
            return this.lastVisibleIndex < this.items.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreFocusable", {
        get: function () {
            return !!this.moreButton && isNativeFocused(this.moreButton.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreActive", {
        get: function () {
            return (this.open ||
                (!this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreAlone", {
        get: function () {
            return this.lastVisibleIndex < 0 && !this.options.exposeActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "lastVisibleIndex", {
        get: function () {
            if (this.itemsLimit + 1 >= this.items.length) {
                return this.maxIndex;
            }
            var offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive
                ? 1
                : 2;
            return Math.min(this.itemsLimit - offset, this.maxIndex);
        },
        enumerable: true,
        configurable: true
    });
    TuiTabsWithMoreComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.refresh$
            .pipe(map(function () { return _this.getMaxIndex(); }), filter(function (maxIndex) { return _this.maxIndex !== maxIndex; }))
            .subscribe(function (maxIndex) {
            _this.maxIndex = maxIndex;
            _this.changeDetectorRef.detectChanges();
        });
    };
    TuiTabsWithMoreComponent.prototype.onActiveItemIndexChange = function (activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    };
    TuiTabsWithMoreComponent.prototype.onClick = function (index) {
        this.open = false;
        this.focusMore();
        this.updateActiveItemIndex(index);
    };
    TuiTabsWithMoreComponent.prototype.onArrowRight = function (event) {
        tuiAssertIsHTMLElement(event.target);
        if (isNativeFocused(event.target)) {
            this.focusMore();
        }
    };
    TuiTabsWithMoreComponent.prototype.onArrowLeft = function () {
        var tabs = this.tabs;
        var index = tabs.length - 2;
        while (index >= 0) {
            setNativeFocused(tabs[index]);
            if (isNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    };
    TuiTabsWithMoreComponent.prototype.onWrapperArrow = function (event, wrapper, prev) {
        var button = event.target;
        var target = getClosestFocusable(button, prev, wrapper);
        if (target) {
            setNativeFocused(target);
        }
    };
    TuiTabsWithMoreComponent.prototype.isOverflown = function (index) {
        return index !== this.activeItemIndex || !this.options.exposeActive;
    };
    TuiTabsWithMoreComponent.prototype.shouldShow = function (index) {
        return index > this.lastVisibleIndex && this.isOverflown(index);
    };
    TuiTabsWithMoreComponent.prototype.focusMore = function () {
        if (this.moreButton) {
            setNativeFocused(this.moreButton.nativeElement);
        }
    };
    TuiTabsWithMoreComponent.prototype.getMaxIndex = function () {
        var _a = this, tabs = _a.tabs, activeItemIndex = _a.activeItemIndex, margin = _a.margin;
        if (tabs.length < 2) {
            return 0;
        }
        var _b = this.options, exposeActive = _b.exposeActive, minMoreWidth = _b.minMoreWidth;
        var clientWidth = this.elementRef.nativeElement.clientWidth;
        var activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
        var moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
        var maxIndex = tabs.length - 2;
        var total = tabs.reduce(function (acc, _a) {
            var scrollWidth = _a.scrollWidth;
            return acc + scrollWidth;
        }, 0) +
            maxIndex * margin -
            tabs[tabs.length - 1].scrollWidth;
        if (total <= clientWidth) {
            return Infinity;
        }
        while (maxIndex) {
            total -= tabs[maxIndex].scrollWidth + margin;
            maxIndex--;
            var activeDisplaced = exposeActive && activeItemIndex > maxIndex;
            var activeOffset = activeDisplaced ? activeWidth + margin : 0;
            var currentWidth = total + activeOffset + moreWidth + margin;
            // Needed for different rounding of visible and hidden elements scrollWidth
            var safetyOffset = toInt(this.maxIndex === maxIndex - 1);
            if (currentWidth + safetyOffset < clientWidth) {
                return maxIndex;
            }
        }
        return -1;
    };
    TuiTabsWithMoreComponent.prototype.updateActiveItemIndex = function (activeItemIndex) {
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
        this.maxIndex = this.getMaxIndex();
    };
    TuiTabsWithMoreComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TABS_OPTIONS,] }] },
        { type: Number, decorators: [{ type: Inject, args: [TUI_TAB_MARGIN,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TABS_REFRESH,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MORE_WORD,] }] }
    ]; };
    __decorate([
        ViewChild(TuiTabComponent, { read: ElementRef })
    ], TuiTabsWithMoreComponent.prototype, "moreButton", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "moreContent", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "dropdownContent", void 0);
    __decorate([
        Input(),
        HostBinding('class._underline'),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "underline", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "itemsLimit", void 0);
    __decorate([
        Output()
    ], TuiTabsWithMoreComponent.prototype, "activeItemIndexChange", void 0);
    __decorate([
        ContentChildren(TuiTabDirective, { read: TemplateRef })
    ], TuiTabsWithMoreComponent.prototype, "items", void 0);
    TuiTabsWithMoreComponent = __decorate([
        Component({
            selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
            template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div class=\"t-wrapper\">\n    <tui-tabs\n        class=\"t-tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div [class.t-overflown]=\"isOverflown(index)\">\n                    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"t-more_wrapper\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [content]=\"dropdownContent || dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            [class._active]=\"isMoreActive\"\n            [class.t-no-margin]=\"isMoreAlone\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <span\n                polymorpheus-outlet\n                [content]=\"moreContent || more\"\n            ></span>\n        </button>\n        <ng-template #more>\n            {{ moreWord$ | async }}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"t-icon\"\n                [class.t-icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"t-dropdown\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        >\n            <div\n                *ngFor=\"let item of items; let index = index\"\n                (tui-tab-activate)=\"onClick(index)\"\n            >\n                <ng-container\n                    *ngIf=\"shouldShow(index)\"\n                    [ngTemplateOutlet]=\"item\"\n                ></ng-container>\n            </div>\n        </div>\n    </ng-template>\n    <tui-underline\n        *ngIf=\"underline\"\n        [element]=\"activeElement\"\n    ></tui-underline>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TABS_PROVIDERS,
            styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper{position:relative;display:flex}.t-tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper{height:100%;pointer-events:none}.t-more_wrapper button{pointer-events:auto}.t-icon{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.5rem 0}.t-dropdown ::ng-deep [tuiTab]{width:100%;height:2.75rem;justify-content:flex-start;margin:0;padding:0 1rem;color:var(--tui-text-02)}.t-dropdown ::ng-deep [tuiTab]:before{display:none}.t-dropdown ::ng-deep [tuiTab]._active,.t-dropdown ::ng-deep [tuiTab]:focus,.t-dropdown ::ng-deep [tuiTab]:hover{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}.t-no-margin{margin-left:0}"]
        }),
        __param(0, Inject(TUI_TABS_OPTIONS)),
        __param(1, Inject(TUI_TAB_MARGIN)),
        __param(2, Inject(TABS_REFRESH)),
        __param(3, Inject(ElementRef)),
        __param(4, Inject(ChangeDetectorRef)),
        __param(5, Inject(TUI_MORE_WORD))
    ], TuiTabsWithMoreComponent);
    return TuiTabsWithMoreComponent;
}());
export { TuiTabsWithMoreComponent };
//# sourceMappingURL=data:application/json;base64,