import { DOCUMENT } from '@angular/common';
import { ElementRef, InjectionToken, Optional } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { tuiCustomEvent, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiRouterLinkActiveService } from '@taiga-ui/core';
import { EMPTY, identity, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
export var TUI_TAB_ACTIVATE = "tui-tab-activate";
export var TUI_TAB_EVENT = new InjectionToken("Stream of tab activation events");
export var TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            DOCUMENT,
            TuiRouterLinkActiveService,
            [new Optional(), MutationObserverService],
            [new Optional(), RouterLinkActive],
        ],
        useFactory: tabActiveFactory,
    },
    MODE_PROVIDER,
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function tabActiveFactory(_a, documentRef, routerLinkActiveService, mutationObserverService, routerLinkActive) {
    var nativeElement = _a.nativeElement;
    var mutationObserver = routerLinkActive && mutationObserverService
        ? mutationObserverService.pipe(filter(function () { return routerLinkActive.isActive; }))
        : EMPTY;
    return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches("button") ? typedFromEvent(nativeElement, "click") : EMPTY).pipe(map(function () {
        return nativeElement.dispatchEvent(tuiCustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }, documentRef));
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90YWJzLyIsInNvdXJjZXMiOlsidGFiL3RhYi5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0gsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUMzQyxpQ0FBaUMsQ0FDcEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFlO0lBQ3pDLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCO1FBQ0ksT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFO1lBQ0YsVUFBVTtZQUNWLFFBQVE7WUFDUiwwQkFBMEI7WUFDMUIsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDO1lBQ3pDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQztTQUNyQztRQUNELFVBQVUsRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxhQUFhO0NBQ2hCLENBQUM7QUFFRixnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixFQUF3QyxFQUN4QyxXQUFxQixFQUNyQix1QkFBNEMsRUFDNUMsdUJBQXVELEVBQ3ZELGdCQUF5QztRQUp4QyxnQ0FBYTtJQU1kLElBQU0sZ0JBQWdCLEdBQ2xCLGdCQUFnQixJQUFJLHVCQUF1QjtRQUN2QyxDQUFDLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsZ0JBQWdCLENBQUMsUUFBUSxFQUF6QixDQUF5QixDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUVoQixPQUFPLEtBQUssQ0FDUixnQkFBZ0IsRUFDaEIsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUM5QyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ25GLENBQUMsSUFBSSxDQUNGLEdBQUcsQ0FBQztRQUNBLE9BQUEsYUFBYSxDQUFDLGFBQWEsQ0FDdkIsY0FBYyxDQUFDLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxFQUFFLFdBQVcsQ0FBQyxDQUNqRTtJQUZELENBRUMsQ0FDSixDQUNKLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlckxpbmtBY3RpdmV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge011dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlfSBmcm9tICdAbmctd2ViLWFwaXMvbXV0YXRpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtcbiAgICB0dWlDdXN0b21FdmVudCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUiwgVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7RU1QVFksIGlkZW50aXR5LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfVEFCX0FDVElWQVRFID0gYHR1aS10YWItYWN0aXZhdGVgO1xuZXhwb3J0IGNvbnN0IFRVSV9UQUJfRVZFTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxFdmVudD4+KFxuICAgIGBTdHJlYW0gb2YgdGFiIGFjdGl2YXRpb24gZXZlbnRzYCxcbik7XG5leHBvcnQgY29uc3QgVFVJX1RBQl9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9UQUJfRVZFTlQsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIEVsZW1lbnRSZWYsXG4gICAgICAgICAgICBET0NVTUVOVCxcbiAgICAgICAgICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBNdXRhdGlvbk9ic2VydmVyU2VydmljZV0sXG4gICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIFJvdXRlckxpbmtBY3RpdmVdLFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiB0YWJBY3RpdmVGYWN0b3J5LFxuICAgIH0sXG4gICAgTU9ERV9QUk9WSURFUixcbl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB0YWJBY3RpdmVGYWN0b3J5KFxuICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuICAgIHJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgIG11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlOiBNdXRhdGlvbk9ic2VydmVyU2VydmljZSB8IG51bGwsXG4gICAgcm91dGVyTGlua0FjdGl2ZTogUm91dGVyTGlua0FjdGl2ZSB8IG51bGwsXG4pOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID1cbiAgICAgICAgcm91dGVyTGlua0FjdGl2ZSAmJiBtdXRhdGlvbk9ic2VydmVyU2VydmljZVxuICAgICAgICAgICAgPyBtdXRhdGlvbk9ic2VydmVyU2VydmljZS5waXBlKGZpbHRlcigoKSA9PiByb3V0ZXJMaW5rQWN0aXZlLmlzQWN0aXZlKSlcbiAgICAgICAgICAgIDogRU1QVFk7XG5cbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgICAgIHJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLnBpcGUoZmlsdGVyKGlkZW50aXR5KSksXG4gICAgICAgIG5hdGl2ZUVsZW1lbnQubWF0Y2hlcyhgYnV0dG9uYCkgPyB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCBgY2xpY2tgKSA6IEVNUFRZLFxuICAgICkucGlwZShcbiAgICAgICAgbWFwKCgpID0+XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgdHVpQ3VzdG9tRXZlbnQoVFVJX1RBQl9BQ1RJVkFURSwge2J1YmJsZXM6IHRydWV9LCBkb2N1bWVudFJlZiksXG4gICAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICk7XG59XG4iXX0=