import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Directive, forwardRef, Inject, Input, TemplateRef, } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { EMPTY, Observable, Subject } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import { TuiPushService } from './push.service';
var TuiPushAlertDirective = /** @class */ (function (_super) {
    __extends(TuiPushAlertDirective, _super);
    function TuiPushAlertDirective(template, changeDetectorRef, destroy$, push) {
        var _this = _super.call(this, template, changeDetectorRef) || this;
        _this.show$ = new Subject();
        _this.show$
            .pipe(switchMap(function (show) { return (show ? push.open(_this) : EMPTY); }), takeUntil(destroy$))
            .subscribe();
        return _this;
    }
    Object.defineProperty(TuiPushAlertDirective.prototype, "tuiPush", {
        set: function (show) {
            this.show$.next(show);
        },
        enumerable: true,
        configurable: true
    });
    TuiPushAlertDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiPushService, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiPushService; }),] }] }
    ]; };
    __decorate([
        Input()
    ], TuiPushAlertDirective.prototype, "tuiPush", null);
    TuiPushAlertDirective = __decorate([
        Directive({
            selector: '[tuiPush]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(TemplateRef)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(forwardRef(function () { return TuiPushService; })))
    ], TuiPushAlertDirective);
    return TuiPushAlertDirective;
}(PolymorpheusTemplate));
export { TuiPushAlertDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1hbGVydC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvcHVzaC8iLCJzb3VyY2VzIjpbInB1c2gtYWxlcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFDTCxXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQU05QztJQUEyQyx5Q0FBeUI7SUFRaEUsK0JBQ3lCLFFBQTBCLEVBQ3BCLGlCQUFvQyxFQUNwQyxRQUE2QixFQUNkLElBQW9CO1FBSmxFLFlBTUksa0JBQU0sUUFBUSxFQUFFLGlCQUFpQixDQUFDLFNBUXJDO1FBckJnQixXQUFLLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQWU1QyxLQUFJLENBQUMsS0FBSzthQUNMLElBQUksQ0FDRCxTQUFTLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQWhDLENBQWdDLENBQUMsRUFDbkQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjthQUNBLFNBQVMsRUFBRSxDQUFDOztJQUNyQixDQUFDO0lBbEJELHNCQUFJLDBDQUFPO2FBQVgsVUFBWSxJQUFhO1lBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUM7OztPQUFBOztnQkFHa0MsV0FBVyx1QkFBekMsTUFBTSxTQUFDLFdBQVc7Z0JBQzJCLGlCQUFpQix1QkFBOUQsTUFBTSxTQUFDLGlCQUFpQjtnQkFDWSxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCO2dCQUN1QixjQUFjLHVCQUE3RCxNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxjQUFjLEVBQWQsQ0FBYyxDQUFDOztJQVI1QztRQURDLEtBQUssRUFBRTt3REFHUDtJQU5RLHFCQUFxQjtRQUpqQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUNqQyxDQUFDO1FBVU8sV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDbkIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsY0FBYyxFQUFkLENBQWMsQ0FBQyxDQUFDLENBQUE7T0FacEMscUJBQXFCLENBdUJqQztJQUFELDRCQUFDO0NBQUEsQUF2QkQsQ0FBMkMsb0JBQW9CLEdBdUI5RDtTQXZCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIERpcmVjdGl2ZSxcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7UG9seW1vcnBoZXVzVGVtcGxhdGV9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0VNUFRZLCBPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7c3dpdGNoTWFwLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlQdXNoU2VydmljZX0gZnJvbSAnLi9wdXNoLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlQdXNoXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQdXNoQWxlcnREaXJlY3RpdmUgZXh0ZW5kcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxhbnk+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNob3ckID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHR1aVB1c2goc2hvdzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNob3ckLm5leHQoc2hvdyk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVHVpUHVzaFNlcnZpY2UpKSBwdXNoOiBUdWlQdXNoU2VydmljZSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIodGVtcGxhdGUsIGNoYW5nZURldGVjdG9yUmVmKTtcblxuICAgICAgICB0aGlzLnNob3ckXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoc2hvdyA9PiAoc2hvdyA/IHB1c2gub3Blbih0aGlzKSA6IEVNUFRZKSksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iXX0=