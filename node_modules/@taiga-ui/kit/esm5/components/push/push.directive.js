import { __decorate, __extends, __param } from "tslib";
import { Directive, Inject, Optional, SkipSelf } from '@angular/core';
import { TUI_BUTTON_OPTIONS, TuiButtonOptions, TuiModeDirective } from '@taiga-ui/core';
import { Subject } from 'rxjs';
var TuiPushDirective = /** @class */ (function (_super) {
    __extends(TuiPushDirective, _super);
    function TuiPushDirective(modeDirective) {
        var _a;
        var _this = _super.call(this) || this;
        _this.modeDirective = modeDirective;
        _this.size = 's';
        _this.shape = null;
        _this.change$ = ((_a = _this.modeDirective) === null || _a === void 0 ? void 0 : _a.change$) || new Subject();
        return _this;
    }
    TuiPushDirective_1 = TuiPushDirective;
    Object.defineProperty(TuiPushDirective.prototype, "appearance", {
        get: function () {
            var _a;
            return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) === 'onDark' ? 'accent' : 'secondary';
        },
        enumerable: true,
        configurable: true
    });
    var TuiPushDirective_1;
    TuiPushDirective.ctorParameters = function () { return [
        { type: TuiModeDirective, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TuiModeDirective,] }] }
    ]; };
    TuiPushDirective = TuiPushDirective_1 = __decorate([
        Directive({
            selector: 'tui-push',
            providers: [
                {
                    provide: TuiModeDirective,
                    useExisting: TuiPushDirective_1,
                },
                {
                    provide: TUI_BUTTON_OPTIONS,
                    useExisting: TuiPushDirective_1,
                },
            ],
        }),
        __param(0, Optional()),
        __param(0, SkipSelf()),
        __param(0, Inject(TuiModeDirective))
    ], TuiPushDirective);
    return TuiPushDirective;
}(TuiModeDirective));
export { TuiPushDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvcHVzaC8iLCJzb3VyY2VzIjpbInB1c2guZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFlN0I7SUFBc0Msb0NBQWdCO0lBT2xELDBCQUlxQixhQUFzQzs7UUFKM0QsWUFNSSxpQkFBTyxTQUNWO1FBSG9CLG1CQUFhLEdBQWIsYUFBYSxDQUF5QjtRQVYzRCxVQUFJLEdBQTZCLEdBQUcsQ0FBQztRQUVyQyxXQUFLLEdBQUcsSUFBSSxDQUFDO1FBRUosYUFBTyxHQUFHLE9BQUEsS0FBSSxDQUFDLGFBQWEsMENBQUUsT0FBTyxLQUFJLElBQUksT0FBTyxFQUFFLENBQUM7O0lBU2hFLENBQUM7eUJBZFEsZ0JBQWdCO0lBZ0J6QixzQkFBSSx3Q0FBVTthQUFkOztZQUNJLE9BQU8sT0FBQSxJQUFJLENBQUMsYUFBYSwwQ0FBRSxJQUFJLE1BQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUMxRSxDQUFDOzs7T0FBQTs7O2dCQVBtQyxnQkFBZ0IsdUJBSC9DLFFBQVEsWUFDUixRQUFRLFlBQ1IsTUFBTSxTQUFDLGdCQUFnQjs7SUFWbkIsZ0JBQWdCO1FBYjVCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixXQUFXLEVBQUUsa0JBQWdCO2lCQUNoQztnQkFDRDtvQkFDSSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixXQUFXLEVBQUUsa0JBQWdCO2lCQUNoQzthQUNKO1NBQ0osQ0FBQztRQVNPLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDVixXQUFBLFFBQVEsRUFBRSxDQUFBO1FBQ1YsV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtPQVZwQixnQkFBZ0IsQ0FtQjVCO0lBQUQsdUJBQUM7Q0FBQSxBQW5CRCxDQUFzQyxnQkFBZ0IsR0FtQnJEO1NBbkJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RVSV9CVVRUT05fT1BUSU9OUywgVHVpQnV0dG9uT3B0aW9ucywgVHVpTW9kZURpcmVjdGl2ZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHVzaCcsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFR1aU1vZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpUHVzaERpcmVjdGl2ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX0JVVFRPTl9PUFRJT05TLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVB1c2hEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHVzaERpcmVjdGl2ZSBleHRlbmRzIFR1aU1vZGVEaXJlY3RpdmUgaW1wbGVtZW50cyBUdWlCdXR0b25PcHRpb25zIHtcbiAgICBzaXplOiBUdWlCdXR0b25PcHRpb25zWydzaXplJ10gPSAncyc7XG5cbiAgICBzaGFwZSA9IG51bGw7XG5cbiAgICByZWFkb25seSBjaGFuZ2UkID0gdGhpcy5tb2RlRGlyZWN0aXZlPy5jaGFuZ2UkIHx8IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNraXBTZWxmKClcbiAgICAgICAgQEluamVjdChUdWlNb2RlRGlyZWN0aXZlKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVEaXJlY3RpdmU6IFR1aU1vZGVEaXJlY3RpdmUgfCBudWxsLFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVEaXJlY3RpdmU/Lm1vZGUgPT09ICdvbkRhcmsnID8gJ2FjY2VudCcgOiAnc2Vjb25kYXJ5JztcbiAgICB9XG59XG4iXX0=