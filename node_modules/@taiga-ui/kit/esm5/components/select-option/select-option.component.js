import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, TemplateRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isPresent, TUI_DEFAULT_IDENTITY_MATCHER, typedFromEvent, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiDataListHost, TuiOptionComponent } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
var TuiSelectOptionComponent = /** @class */ (function () {
    function TuiSelectOptionComponent(context, host, elementRef, option, control) {
        var _this = this;
        var _a;
        this.context = context;
        this.host = host;
        this.elementRef = elementRef;
        this.option = option;
        this.control = control;
        this.selected$ = merge((_a = this.control.valueChanges) !== null && _a !== void 0 ? _a : EMPTY, typedFromEvent(this.elementRef.nativeElement, 'animationstart')).pipe(startWith(null), map(function () { return _this.selected; }), distinctUntilChanged());
    }
    Object.defineProperty(TuiSelectOptionComponent.prototype, "matcher", {
        get: function () {
            return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
        },
        enumerable: true,
        configurable: true
    });
    TuiSelectOptionComponent.prototype.ngOnInit = function () {
        var _this = this;
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(function () {
            if (isPresent(_this.option.value) && _this.host.checkOption) {
                _this.host.checkOption(_this.option.value);
            }
        });
    };
    Object.defineProperty(TuiSelectOptionComponent.prototype, "selected", {
        get: function () {
            return (isPresent(this.option.value) &&
                isPresent(this.control.value) &&
                this.matcher(this.control.value, this.option.value));
        },
        enumerable: true,
        configurable: true
    });
    TuiSelectOptionComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiOptionComponent, decorators: [{ type: Inject, args: [TuiOptionComponent,] }] },
        { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
    ]; };
    TuiSelectOptionComponent = __decorate([
        Component({
            selector: 'tui-select-option',
            template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\"></ng-container>\n<tui-svg\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    src=\"tuiIconCheckLarge\"\n    class=\"t-checkmark\"\n    [tuiScrollIntoView]=\"true\"\n></tui-svg>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["@keyframes retrigger{from{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-width:100%;animation:1s retrigger}.t-checkmark{margin:0 -.375rem 0 auto;border-left:5px solid transparent}.t-dummy{width:1.5rem}"]
        }),
        __param(0, Inject(POLYMORPHEUS_CONTEXT)),
        __param(1, Inject(TUI_DATA_LIST_HOST)),
        __param(2, Inject(ElementRef)),
        __param(3, Inject(TuiOptionComponent)),
        __param(4, Inject(NgControl))
    ], TuiSelectOptionComponent);
    return TuiSelectOptionComponent;
}());
export { TuiSelectOptionComponent };
export var TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvc2VsZWN0LW9wdGlvbi8iLCJzb3VyY2VzIjpbInNlbGVjdC1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFDSCxTQUFTLEVBQ1QsNEJBQTRCLEVBRzVCLGNBQWMsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3JGLE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFRcEU7SUFVSSxrQ0FFYSxPQUFxRSxFQUU3RCxJQUF3QixFQUNKLFVBQW1DLEVBQ3pCLE1BQTZCLEVBQ3RDLE9BQWtCO1FBUDVELGlCQVFJOztRQU5TLFlBQU8sR0FBUCxPQUFPLENBQThEO1FBRTdELFNBQUksR0FBSixJQUFJLENBQW9CO1FBQ0osZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDekIsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFDdEMsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQWhCbkQsY0FBUyxHQUFHLEtBQUssT0FDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLG1DQUFJLEtBQUssRUFDbEMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQ2xFLENBQUMsSUFBSSxDQUNGLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLEVBQWIsQ0FBYSxDQUFDLEVBQ3hCLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7SUFVQyxDQUFDO0lBRUosc0JBQUksNkNBQU87YUFBWDtZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksNEJBQTRCLENBQUM7UUFDckUsQ0FBQzs7O09BQUE7SUFFRCwyQ0FBUSxHQUFSO1FBQUEsaUJBYUM7UUFaRzs7Ozs7V0FLRztRQUNILG1FQUFtRTtRQUNuRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ25CLElBQUksU0FBUyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZELEtBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDNUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxzQkFBYyw4Q0FBUTthQUF0QjtZQUNJLE9BQU8sQ0FDSCxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQzVCLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN0RCxDQUFDO1FBQ04sQ0FBQzs7O09BQUE7O2dEQWxDSSxNQUFNLFNBQUMsb0JBQW9CO2dEQUUzQixNQUFNLFNBQUMsa0JBQWtCO2dCQUV1QixVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTtnQkFDcUMsa0JBQWtCLHVCQUF4RSxNQUFNLFNBQUMsa0JBQWtCO2dCQUNxQixTQUFTLHVCQUF2RCxNQUFNLFNBQUMsU0FBUzs7SUFqQlosd0JBQXdCO1FBTnBDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsbVhBQTRDO1lBRTVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNsRCxDQUFDO1FBWU8sV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUU1QixXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBRTFCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDMUIsV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7T0FqQmIsd0JBQXdCLENBOENwQztJQUFELCtCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0E5Q1ksd0JBQXdCO0FBZ0RyQyxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLHdCQUF3QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEluamVjdCxcbiAgICBPbkluaXQsXG4gICAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gICAgaXNQcmVzZW50LFxuICAgIFRVSV9ERUZBVUxUX0lERU5USVRZX01BVENIRVIsXG4gICAgVHVpQ29udGV4dFdpdGhJbXBsaWNpdCxcbiAgICBUdWlJZGVudGl0eU1hdGNoZXIsXG4gICAgdHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0hPU1QsIFR1aURhdGFMaXN0SG9zdCwgVHVpT3B0aW9uQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhULCBQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0VNUFRZLCBtZXJnZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zZWxlY3Qtb3B0aW9uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LW9wdGlvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zZWxlY3Qtb3B0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICByZWFkb25seSBzZWxlY3RlZCQgPSBtZXJnZShcbiAgICAgICAgdGhpcy5jb250cm9sLnZhbHVlQ2hhbmdlcyA/PyBFTVBUWSxcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdhbmltYXRpb25zdGFydCcpLFxuICAgICkucGlwZShcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5zZWxlY3RlZCksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFBPTFlNT1JQSEVVU19DT05URVhUKVxuICAgICAgICByZWFkb25seSBjb250ZXh0OiBUdWlDb250ZXh0V2l0aEltcGxpY2l0PFRlbXBsYXRlUmVmPFJlY29yZDxzdHJpbmcsIHVua25vd24+Pj4sXG4gICAgICAgIEBJbmplY3QoVFVJX0RBVEFfTElTVF9IT1NUKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGhvc3Q6IFR1aURhdGFMaXN0SG9zdDxUPixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aU9wdGlvbkNvbXBvbmVudCkgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbjogVHVpT3B0aW9uQ29tcG9uZW50PFQ+LFxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbCkgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICApIHt9XG5cbiAgICBnZXQgbWF0Y2hlcigpOiBUdWlJZGVudGl0eU1hdGNoZXI8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmlkZW50aXR5TWF0Y2hlciB8fCBUVUlfREVGQVVMVF9JREVOVElUWV9NQVRDSEVSO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyB3b3VsZCBjYXVzZSBjaGFuZ2VzIGluc2lkZSBhbHJlYWR5IGNoZWNrZWQgcGFyZW50IGNvbXBvbmVudCAoZHVyaW5nIHRoZSBzYW1lIGNoYW5nZSBkZXRlY3Rpb24gY3ljbGUpLFxuICAgICAgICAgKiBhbmQgaXQgbWlnaHQgY2F1c2UgRXhwcmVzc2lvbkNoYW5nZWQgZXJyb3IgZHVlIHRvIHBvdGVudGlhbCBIb3N0QmluZGluZ1xuICAgICAgICAgKiAoZm9yIGV4YW1wbGUsIGluc2lkZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21haW4vcGFja2FnZXMvZm9ybXMvc3JjL2RpcmVjdGl2ZXMvbmdfY29udHJvbF9zdGF0dXMudHMjTDk5IE5nQ29udHJvbFN0YXR1c30pLlxuICAgICAgICAgKiBNaWNyb3Rhc2sga2VlcHMgaXQgaW4gdGhlIHNhbWUgZnJhbWUgYnV0IGFsbG93cyBjaGFuZ2UgZGV0ZWN0aW9uIHRvIHJ1bi5cbiAgICAgICAgICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMub3B0aW9uLnZhbHVlKSAmJiB0aGlzLmhvc3QuY2hlY2tPcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3QuY2hlY2tPcHRpb24odGhpcy5vcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNQcmVzZW50KHRoaXMub3B0aW9uLnZhbHVlKSAmJlxuICAgICAgICAgICAgaXNQcmVzZW50KHRoaXMuY29udHJvbC52YWx1ZSkgJiZcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlcih0aGlzLmNvbnRyb2wudmFsdWUsIHRoaXMub3B0aW9uLnZhbHVlKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9TRUxFQ1RfT1BUSU9OID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChUdWlTZWxlY3RPcHRpb25Db21wb25lbnQpO1xuIl19