import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Component, HostListener, Inject, Injector, Input, Optional, Self, Type, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, nullableSame, RANGE_SEPARATOR_CHAR, setNativeFocused, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_IS_MOBILE, TUI_LAST_DAY, TuiDayRange, tuiDefaultProp, TuiMonth, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_EXAMPLE_TEXT, TUI_TEXTFIELD_SIZE, TuiDialogService, TuiMarkerHandler, TuiPrimitiveTextfieldComponent, TuiTextfieldExampleTextDirective, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { EMPTY_MASK, MAX_DAY_RANGE_LENGTH_MAPPER } from '@taiga-ui/kit/constants';
import { TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_MOBILE_CALENDAR, } from '@taiga-ui/kit/tokens';
import { tuiCreateAutoCorrectedDateRangePipe, tuiCreateDateRangeMask, } from '@taiga-ui/kit/utils/mask';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { TUI_INPUT_DATE_RANGE_PROVIDERS } from './input-date-range.providers';
// @dynamic
var TuiInputDateRangeComponent = /** @class */ (function (_super) {
    __extends(TuiInputDateRangeComponent, _super);
    function TuiInputDateRangeComponent(control, changeDetectorRef, injector, isMobile, dialogService, mobileCalendar, textfieldSize, textfieldExampleText, dateFormat, dateSeparator, dateTexts$, valueTransformer) {
        var _this = _super.call(this, control, changeDetectorRef, valueTransformer) || this;
        _this.injector = injector;
        _this.isMobile = isMobile;
        _this.dialogService = dialogService;
        _this.mobileCalendar = mobileCalendar;
        _this.textfieldSize = textfieldSize;
        _this.textfieldExampleText = textfieldExampleText;
        _this.dateFormat = dateFormat;
        _this.dateSeparator = dateSeparator;
        _this.dateTexts$ = dateTexts$;
        _this.valueTransformer = valueTransformer;
        _this.textMaskOptions = {
            mask: tuiCreateDateRangeMask(_this.dateFormat, _this.dateSeparator),
            pipe: tuiCreateAutoCorrectedDateRangePipe(_this),
            guide: false,
        };
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        _this.defaultViewedMonth = TuiMonth.currentLocal();
        _this.items = [];
        _this.min = TUI_FIRST_DAY;
        _this.max = TUI_LAST_DAY;
        _this.minLength = null;
        _this.maxLength = null;
        _this.open = false;
        _this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
        _this.dateFiller$ = _this.dateTexts$.pipe(map(function (dateTexts) {
            return changeDateSeparator(dateTexts[_this.dateFormat], _this.dateSeparator);
        }));
        return _this;
    }
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.textfield ? this.textfield.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "computedMobile", {
        get: function () {
            return this.isMobile && !!this.mobileCalendar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "calendarIcon", {
        get: function () {
            return sizeBigger(this.textfieldSize.size)
                ? 'tuiIconCalendarLarge'
                : 'tuiIconCalendar';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "canOpen", {
        get: function () {
            return this.interactive && !this.computedMobile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "computedExampleText", {
        get: function () {
            return this.items.length ? this.textfieldExampleText.exampleText : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "computedMask", {
        get: function () {
            return (this.activePeriod
                ? EMPTY_MASK
                : this.textMaskOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "activePeriod", {
        get: function () {
            var _this = this;
            return (this.items.find(function (item) {
                return nullableSame(_this.value, item.range, function (a, b) {
                    return a.from.daySame(b.from.dayLimit(_this.min, _this.max)) &&
                        a.to.daySame(b.to.dayLimit(_this.min, _this.max));
                });
            }) || null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "computedValue", {
        get: function () {
            var _a = this, value = _a.value, nativeValue = _a.nativeValue, activePeriod = _a.activePeriod;
            if (activePeriod) {
                return String(activePeriod);
            }
            return value
                ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator)
                : nativeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "innerPseudoFocused", {
        get: function () {
            if (this.pseudoFocused === false) {
                return false;
            }
            if (this.open || this.computedFocused) {
                return true;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "nativeValue", {
        get: function () {
            return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
        },
        set: function (value) {
            if (!this.nativeFocusableElement) {
                return;
            }
            this.nativeFocusableElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputDateRangeComponent.prototype.onClick = function () {
        if (!this.isMobile) {
            this.toggle();
        }
    };
    TuiInputDateRangeComponent.prototype.getComputedRangeFiller = function (dateFiller) {
        return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);
    };
    TuiInputDateRangeComponent.prototype.onMobileClick = function () {
        var _this = this;
        if (!this.mobileCalendar) {
            this.toggle();
            return;
        }
        this.dialogService
            .open(new PolymorpheusComponent(this.mobileCalendar, this.injector), {
            size: 'fullscreen',
            closeable: false,
            data: {
                single: false,
                min: this.maxLengthMapper(this.min, this.value, this.maxLength, true),
                max: this.maxLengthMapper(this.max, this.value, this.maxLength, false),
                disabledItemHandler: this.disabledItemHandler,
            },
        })
            .pipe(takeUntil(this.destroy$))
            .subscribe(function (value) {
            _this.updateValue(value);
        });
    };
    TuiInputDateRangeComponent.prototype.onOpenChange = function (open) {
        this.open = open;
    };
    TuiInputDateRangeComponent.prototype.onValueChange = function (value) {
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length !== DATE_RANGE_FILLER_LENGTH) {
            this.updateValue(null);
            return;
        }
        var parsedValue = TuiDayRange.normalizeParse(value, this.dateFormat);
        this.updateValue(!this.minLength && !this.maxLength
            ? parsedValue
            : this.clampValue(parsedValue));
    };
    TuiInputDateRangeComponent.prototype.onRangeChange = function (range) {
        this.toggle();
        this.focusInput();
        if (!range) {
            this.nativeValue = '';
        }
        if (!nullableSame(this.value, range, function (a, b) { return a.daySame(b); })) {
            this.updateValue(range);
        }
    };
    TuiInputDateRangeComponent.prototype.onItemSelect = function (item) {
        this.toggle();
        this.focusInput();
        if (typeof item !== 'string') {
            this.updateValue(item.range.dayLimit(this.min, this.max));
            return;
        }
        if (this.activePeriod !== null) {
            this.updateValue(null);
            this.nativeValue = '';
        }
    };
    TuiInputDateRangeComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputDateRangeComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputDateRangeComponent.prototype.onActiveZone = function (focused) {
        this.updateFocused(focused);
        if (!focused &&
            !this.itemSelected &&
            (this.nativeValue.length === DATE_FILLER_LENGTH ||
                this.nativeValue.length ===
                    DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {
            this.updateValue(TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat));
        }
    };
    TuiInputDateRangeComponent.prototype.writeValue = function (value) {
        _super.prototype.writeValue.call(this, value);
        this.nativeValue = value ? this.computedValue : '';
    };
    Object.defineProperty(TuiInputDateRangeComponent.prototype, "itemSelected", {
        get: function () {
            var _this = this;
            return this.items.findIndex(function (item) { return String(item) === _this.nativeValue; }) !== -1;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputDateRangeComponent.prototype.toggle = function () {
        this.open = !this.open;
    };
    TuiInputDateRangeComponent.prototype.focusInput = function (preventScroll) {
        if (preventScroll === void 0) { preventScroll = false; }
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    };
    TuiInputDateRangeComponent.prototype.clampValue = function (value) {
        var clampedBottom = this.minLength && value.from.append(this.minLength).dayAfter(value.to)
            ? new TuiDayRange(value.from, value.from.append(this.minLength).append({ day: -1 }))
            : value;
        var availableMax = this.maxLength
            ? clampedBottom.from.append(this.maxLength).append({ day: -1 })
            : this.max;
        return clampedBottom.to.dayAfter(availableMax)
            ? new TuiDayRange(clampedBottom.from, availableMax)
            : clampedBottom;
    };
    TuiInputDateRangeComponent.prototype.getDateRangeFiller = function (dateFiller) {
        return "" + dateFiller + RANGE_SEPARATOR_CHAR + dateFiller;
    };
    TuiInputDateRangeComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: TuiDialogService, decorators: [{ type: Inject, args: [TuiDialogService,] }] },
        { type: Type, decorators: [{ type: Optional }, { type: Inject, args: [TUI_MOBILE_CALENDAR,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: TuiTextfieldExampleTextDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_EXAMPLE_TEXT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DATE_FORMAT,] }] },
        { type: String, decorators: [{ type: Inject, args: [TUI_DATE_SEPARATOR,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DATE_TEXTS,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATE_RANGE_VALUE_TRANSFORMER,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputDateRangeComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "markerHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "defaultViewedMonth", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "minLength", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateRangeComponent.prototype, "maxLength", void 0);
    __decorate([
        HostListener('click')
    ], TuiInputDateRangeComponent.prototype, "onClick", null);
    TuiInputDateRangeComponent = __decorate([
        Component({
            selector: 'tui-input-date-range',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"dropdown\"\n    [open]=\"open && canOpen\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"dateFiller$ | async as dateFiller\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        tuiTextfieldInputMode=\"numeric\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"innerPseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [pseudoPressed]=\"pseudoPressed\"\n        [invalid]=\"computedInvalid\"\n        [tuiTextfieldExampleText]=\"computedExampleText\"\n        [nativeId]=\"nativeId\"\n        [filler]=\"getComputedRangeFiller(dateFiller)\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"computedMobile ? mobileIconContent : iconContent\"\n        [disabled]=\"computedDisabled\"\n        [textMask]=\"computedMask\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (pressedChange)=\"onPressed($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #mobileIconContent>\n        <tui-svg\n            automation-id=\"tui-input-date-range__icon\"\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n            (click)=\"onMobileClick()\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #iconContent>\n        <tui-svg\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar-range\n            [defaultViewedMonth]=\"defaultViewedMonth\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [items]=\"items\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [markerHandler]=\"markerHandler\"\n            [minLength]=\"minLength\"\n            [maxLength]=\"maxLength\"\n            [value]=\"value\"\n            (valueChange)=\"onRangeChange($event)\"\n        ></tui-calendar-range>\n    </ng-template>\n</tui-hosted-dropdown>\n",
            providers: TUI_INPUT_DATE_RANGE_PROVIDERS,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(Injector)),
        __param(3, Inject(TUI_IS_MOBILE)),
        __param(4, Inject(TuiDialogService)),
        __param(5, Optional()),
        __param(5, Inject(TUI_MOBILE_CALENDAR)),
        __param(6, Inject(TUI_TEXTFIELD_SIZE)),
        __param(7, Inject(TUI_TEXTFIELD_EXAMPLE_TEXT)),
        __param(8, Inject(TUI_DATE_FORMAT)),
        __param(9, Inject(TUI_DATE_SEPARATOR)),
        __param(10, Inject(TUI_DATE_TEXTS)),
        __param(11, Optional()),
        __param(11, Inject(TUI_DATE_RANGE_VALUE_TRANSFORMER))
    ], TuiInputDateRangeComponent);
    return TuiInputDateRangeComponent;
}(AbstractTuiNullableControl));
export { TuiInputDateRangeComponent };
//# sourceMappingURL=data:application/json;base64,