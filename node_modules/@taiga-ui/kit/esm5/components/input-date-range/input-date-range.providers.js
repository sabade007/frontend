import { forwardRef, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, } from '@taiga-ui/cdk';
import { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_CALENDAR_DATA_STREAM, TUI_DATE_RANGE_VALUE_TRANSFORMER, } from '@taiga-ui/kit/tokens';
import { TuiReplayControlValueChangesFactory } from '@taiga-ui/kit/utils/miscellaneous';
import { TuiInputDateRangeComponent } from './input-date-range.component';
// TODO: 3.0 remove in ivy compilation
export var RANGE_STREAM_FACTORY = function (control, valueTransformer) {
    return TuiReplayControlValueChangesFactory(control, valueTransformer);
};
export var TUI_INPUT_DATE_RANGE_PROVIDERS = [
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(function () { return TuiInputDateRangeComponent; }),
    },
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(function () { return TuiInputDateRangeComponent; }),
    },
    {
        provide: TUI_CALENDAR_DATA_STREAM,
        deps: [
            [new Optional(), new Self(), NgControl],
            [new Optional(), forwardRef(function () { return TUI_DATE_RANGE_VALUE_TRANSFORMER; })],
        ],
        useFactory: RANGE_STREAM_FACTORY,
    },
    LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGF0ZS1yYW5nZS5wcm92aWRlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvaW5wdXQtZGF0ZS1yYW5nZS8iLCJzb3VyY2VzIjpbImlucHV0LWRhdGUtcmFuZ2UucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILGtCQUFrQixFQUNsQiwyQkFBMkIsR0FHOUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHlDQUF5QyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbEYsT0FBTyxFQUNILHdCQUF3QixFQUN4QixnQ0FBZ0MsR0FDbkMsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUMsbUNBQW1DLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUd0RixPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUV4RSxzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQUcsVUFDaEMsT0FBeUIsRUFDekIsZ0JBQStDO0lBRS9DLE9BQUEsbUNBQW1DLENBQUksT0FBTyxFQUFFLGdCQUFnQixDQUFDO0FBQWpFLENBQWlFLENBQUM7QUFFdEUsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQUc7SUFDMUM7UUFDSSxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDBCQUEwQixFQUExQixDQUEwQixDQUFDO0tBQzVEO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDBCQUEwQixFQUExQixDQUEwQixDQUFDO0tBQzVEO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRTtZQUNGLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQztZQUN2QyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxnQ0FBZ0MsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsVUFBVSxFQUFFLG9CQUFvQjtLQUNuQztJQUNELHlDQUF5QztDQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmb3J3YXJkUmVmLCBPcHRpb25hbCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aUNvbnRyb2wsXG4gICAgVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgIFR1aUNvbnRyb2xWYWx1ZVRyYW5zZm9ybWVyLFxuICAgIFR1aURheVJhbmdlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TEVGVF9BTElHTkVEX0RST1BET1dOX0NPTlRST0xMRVJfUFJPVklERVJ9IGZyb20gJ0B0YWlnYS11aS9raXQvcHJvdmlkZXJzJztcbmltcG9ydCB7XG4gICAgVFVJX0NBTEVOREFSX0RBVEFfU1RSRUFNLFxuICAgIFRVSV9EQVRFX1JBTkdFX1ZBTFVFX1RSQU5TRk9STUVSLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5pbXBvcnQge1R1aVJlcGxheUNvbnRyb2xWYWx1ZUNoYW5nZXNGYWN0b3J5fSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlJbnB1dERhdGVSYW5nZUNvbXBvbmVudH0gZnJvbSAnLi9pbnB1dC1kYXRlLXJhbmdlLmNvbXBvbmVudCc7XG5cbi8vIFRPRE86IDMuMCByZW1vdmUgaW4gaXZ5IGNvbXBpbGF0aW9uXG5leHBvcnQgY29uc3QgUkFOR0VfU1RSRUFNX0ZBQ1RPUlkgPSA8VCBleHRlbmRzIFR1aURheVJhbmdlPihcbiAgICBjb250cm9sOiBOZ0NvbnRyb2wgfCBudWxsLFxuICAgIHZhbHVlVHJhbnNmb3JtZXI6IFR1aUNvbnRyb2xWYWx1ZVRyYW5zZm9ybWVyPFQ+LFxuKTogT2JzZXJ2YWJsZTxUIHwgbnVsbD4gfCBudWxsID0+XG4gICAgVHVpUmVwbGF5Q29udHJvbFZhbHVlQ2hhbmdlc0ZhY3Rvcnk8VD4oY29udHJvbCwgdmFsdWVUcmFuc2Zvcm1lcik7XG5cbmV4cG9ydCBjb25zdCBUVUlfSU5QVVRfREFURV9SQU5HRV9QUk9WSURFUlMgPSBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBBYnN0cmFjdFR1aUNvbnRyb2wsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUlucHV0RGF0ZVJhbmdlQ29tcG9uZW50KSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlJbnB1dERhdGVSYW5nZUNvbXBvbmVudCksXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9DQUxFTkRBUl9EQVRBX1NUUkVBTSxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBuZXcgU2VsZigpLCBOZ0NvbnRyb2xdLFxuICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBmb3J3YXJkUmVmKCgpID0+IFRVSV9EQVRFX1JBTkdFX1ZBTFVFX1RSQU5TRk9STUVSKV0sXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IFJBTkdFX1NUUkVBTV9GQUNUT1JZLFxuICAgIH0sXG4gICAgTEVGVF9BTElHTkVEX0RST1BET1dOX0NPTlRST0xMRVJfUFJPVklERVIsXG5dO1xuIl19