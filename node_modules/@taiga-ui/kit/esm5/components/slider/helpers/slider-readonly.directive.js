import { __decorate, __param, __read } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, Input } from '@angular/core';
import { tuiCoerceBooleanProperty, tuiDefaultProp, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { combineLatest, merge, Observable } from 'rxjs';
import { filter, mapTo, takeUntil, tap } from 'rxjs/operators';
var SLIDER_INTERACTION_KEYS = new Set([
    'ArrowLeft',
    'ArrowRight',
    'ArrowUp',
    'ArrowDown',
    'Home',
    'End',
    'PageUp',
    'PageDown',
]);
/**
 * Native <input type='range' readonly> doesn't work.
 * This directive imitates this native behaviour.
 */
// @dynamic
var TuiSliderReadonlyDirective = /** @class */ (function () {
    function TuiSliderReadonlyDirective(elementRef, documentRef, destroy$) {
        var _this = this;
        this.readonly = true;
        var touchStart$ = typedFromEvent(elementRef.nativeElement, 'touchstart', {
            passive: false,
        });
        var touchMove$ = typedFromEvent(documentRef, 'touchmove', {
            passive: false,
        });
        var touchEnd$ = typedFromEvent(documentRef, 'touchend', {
            passive: true,
        });
        var shouldPreventMove$ = merge(touchStart$.pipe(tap(function (e) { return _this.preventEvent(e); }), mapTo(true)), touchEnd$.pipe(mapTo(false)));
        /**
         * @bad TODO think about another solution.
         * Keep in mind that preventing touch event (on slider) inside `@HostListener('touchstart')` doesn't work for mobile chrome.
         */
        combineLatest([touchMove$, shouldPreventMove$])
            .pipe(filter(function (_a) {
            var _b = __read(_a, 2), _ = _b[0], shouldPreventMove = _b[1];
            return shouldPreventMove;
        }), takeUntil(destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 1), moveEvent = _b[0];
            return _this.preventEvent(moveEvent);
        });
    }
    TuiSliderReadonlyDirective.prototype.preventEvent = function (event) {
        if (event.cancelable && tuiCoerceBooleanProperty(this.readonly)) {
            event.preventDefault();
        }
    };
    TuiSliderReadonlyDirective.prototype.preventKeyboardInteraction = function (event) {
        if (SLIDER_INTERACTION_KEYS.has(event.key)) {
            this.preventEvent(event);
        }
    };
    TuiSliderReadonlyDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiSliderReadonlyDirective.prototype, "readonly", void 0);
    __decorate([
        HostListener('mousedown', ['$event'])
    ], TuiSliderReadonlyDirective.prototype, "preventEvent", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], TuiSliderReadonlyDirective.prototype, "preventKeyboardInteraction", null);
    TuiSliderReadonlyDirective = __decorate([
        Directive({
            selector: 'input[tuiSlider][readonly]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(DOCUMENT)),
        __param(2, Inject(TuiDestroyService))
    ], TuiSliderReadonlyDirective);
    return TuiSliderReadonlyDirective;
}());
export { TuiSliderReadonlyDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLXJlYWRvbmx5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zbGlkZXIvIiwic291cmNlcyI6WyJoZWxwZXJzL3NsaWRlci1yZWFkb25seS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQ0gsd0JBQXdCLEVBQ3hCLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTdELElBQU0sdUJBQXVCLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDcEMsV0FBVztJQUNYLFlBQVk7SUFDWixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixLQUFLO0lBQ0wsUUFBUTtJQUNSLFVBQVU7Q0FDYixDQUFDLENBQUM7QUFFSDs7O0dBR0c7QUFDSCxXQUFXO0FBS1g7SUFLSSxvQ0FDd0IsVUFBd0MsRUFDMUMsV0FBcUIsRUFFdkMsUUFBNkI7UUFKakMsaUJBa0NDO1FBcENELGFBQVEsR0FBcUIsSUFBSSxDQUFDO1FBUTlCLElBQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRTtZQUN2RSxPQUFPLEVBQUUsS0FBSztTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRTtZQUN4RCxPQUFPLEVBQUUsS0FBSztTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRTtZQUN0RCxPQUFPLEVBQUUsSUFBSTtTQUNoQixDQUFDLENBQUM7UUFFSCxJQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FDNUIsV0FBVyxDQUFDLElBQUksQ0FDWixHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFwQixDQUFvQixDQUFDLEVBQzlCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDZCxFQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQy9CLENBQUM7UUFFRjs7O1dBR0c7UUFDSCxhQUFhLENBQUMsQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsQ0FBQzthQUMxQyxJQUFJLENBQ0QsTUFBTSxDQUFDLFVBQUMsRUFBc0I7Z0JBQXRCLGtCQUFzQixFQUFyQixTQUFDLEVBQUUseUJBQWlCO1lBQU0sT0FBQSxpQkFBaUI7UUFBakIsQ0FBaUIsQ0FBQyxFQUNyRCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQ3RCO2FBQ0EsU0FBUyxDQUFDLFVBQUMsRUFBVztnQkFBWCxrQkFBVyxFQUFWLGlCQUFTO1lBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUE1QixDQUE0QixDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUdELGlEQUFZLEdBQVosVUFBYSxLQUFZO1FBQ3JCLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDN0QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQztJQUdELCtEQUEwQixHQUExQixVQUEyQixLQUFvQjtRQUMzQyxJQUFJLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjtJQUNMLENBQUM7O2dCQS9DbUMsVUFBVSx1QkFBekMsTUFBTSxTQUFDLFVBQVU7Z0JBQ2EsUUFBUSx1QkFBdEMsTUFBTSxTQUFDLFFBQVE7Z0JBRU4sVUFBVSx1QkFEbkIsTUFBTSxTQUFDLGlCQUFpQjs7SUFMN0I7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7Z0VBQ2lCO0lBdUNsQztRQURDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztrRUFLckM7SUFHRDtRQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnRkFLbkM7SUFyRFEsMEJBQTBCO1FBSnRDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSw0QkFBNEI7WUFDdEMsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDakMsQ0FBQztRQU9PLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0FSckIsMEJBQTBCLENBc0R0QztJQUFELGlDQUFDO0NBQUEsQUF0REQsSUFzREM7U0F0RFksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICB0dWlDb2VyY2VCb29sZWFuUHJvcGVydHksXG4gICAgdHVpRGVmYXVsdFByb3AsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgdHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwVG8sIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IFNMSURFUl9JTlRFUkFDVElPTl9LRVlTID0gbmV3IFNldChbXG4gICAgJ0Fycm93TGVmdCcsXG4gICAgJ0Fycm93UmlnaHQnLFxuICAgICdBcnJvd1VwJyxcbiAgICAnQXJyb3dEb3duJyxcbiAgICAnSG9tZScsXG4gICAgJ0VuZCcsXG4gICAgJ1BhZ2VVcCcsXG4gICAgJ1BhZ2VEb3duJyxcbl0pO1xuXG4vKipcbiAqIE5hdGl2ZSA8aW5wdXQgdHlwZT0ncmFuZ2UnIHJlYWRvbmx5PiBkb2Vzbid0IHdvcmsuXG4gKiBUaGlzIGRpcmVjdGl2ZSBpbWl0YXRlcyB0aGlzIG5hdGl2ZSBiZWhhdmlvdXIuXG4gKi9cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aVNsaWRlcl1bcmVhZG9ubHldJyxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNsaWRlclJlYWRvbmx5RGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgcmVhZG9ubHk6IGJvb2xlYW4gfCBzdHJpbmcgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PixcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKVxuICAgICAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgY29uc3QgdG91Y2hTdGFydCQgPSB0eXBlZEZyb21FdmVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0b3VjaHN0YXJ0Jywge1xuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0b3VjaE1vdmUkID0gdHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsICd0b3VjaG1vdmUnLCB7XG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRvdWNoRW5kJCA9IHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAndG91Y2hlbmQnLCB7XG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzaG91bGRQcmV2ZW50TW92ZSQgPSBtZXJnZShcbiAgICAgICAgICAgIHRvdWNoU3RhcnQkLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFwKGUgPT4gdGhpcy5wcmV2ZW50RXZlbnQoZSkpLFxuICAgICAgICAgICAgICAgIG1hcFRvKHRydWUpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRvdWNoRW5kJC5waXBlKG1hcFRvKGZhbHNlKSksXG4gICAgICAgICk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBiYWQgVE9ETyB0aGluayBhYm91dCBhbm90aGVyIHNvbHV0aW9uLlxuICAgICAgICAgKiBLZWVwIGluIG1pbmQgdGhhdCBwcmV2ZW50aW5nIHRvdWNoIGV2ZW50IChvbiBzbGlkZXIpIGluc2lkZSBgQEhvc3RMaXN0ZW5lcigndG91Y2hzdGFydCcpYCBkb2Vzbid0IHdvcmsgZm9yIG1vYmlsZSBjaHJvbWUuXG4gICAgICAgICAqL1xuICAgICAgICBjb21iaW5lTGF0ZXN0KFt0b3VjaE1vdmUkLCBzaG91bGRQcmV2ZW50TW92ZSRdKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKChbXywgc2hvdWxkUHJldmVudE1vdmVdKSA9PiBzaG91bGRQcmV2ZW50TW92ZSksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKFttb3ZlRXZlbnRdKSA9PiB0aGlzLnByZXZlbnRFdmVudChtb3ZlRXZlbnQpKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxuICAgIHByZXZlbnRFdmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2ZW50LmNhbmNlbGFibGUgJiYgdHVpQ29lcmNlQm9vbGVhblByb3BlcnR5KHRoaXMucmVhZG9ubHkpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gICAgcHJldmVudEtleWJvYXJkSW50ZXJhY3Rpb24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKFNMSURFUl9JTlRFUkFDVElPTl9LRVlTLmhhcyhldmVudC5rZXkpKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnRFdmVudChldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=