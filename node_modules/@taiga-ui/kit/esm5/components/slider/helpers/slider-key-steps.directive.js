import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, Output, Pipe, PipeTransform, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, clamp, isNativeFocused, tuiAssert, tuiDefaultProp, typedFromEvent, } from '@taiga-ui/cdk';
import { tuiCheckKeyStepsHaveMinMaxPercents, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, } from '@taiga-ui/kit/utils';
import { map } from 'rxjs/operators';
import { TuiSliderComponent } from '../slider.component';
// @dynamic
var TuiSliderKeyStepsDirective = /** @class */ (function (_super) {
    __extends(TuiSliderKeyStepsDirective, _super);
    function TuiSliderKeyStepsDirective(control, changeDetectorRef, elementRef, slider) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.elementRef = elementRef;
        _this.slider = slider;
        _this.keySteps = [];
        _this.keyStepsInput = typedFromEvent(_this.elementRef.nativeElement, 'input').pipe(map(function () { return _this.controlValue; }));
        return _this;
    }
    Object.defineProperty(TuiSliderKeyStepsDirective.prototype, "nativeFocusableElement", {
        get: function () {
            return this.computedDisabled ? null : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSliderKeyStepsDirective.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSliderKeyStepsDirective.prototype, "min", {
        get: function () {
            var _a;
            return ((_a = this.keySteps[0]) === null || _a === void 0 ? void 0 : _a[1]) || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSliderKeyStepsDirective.prototype, "max", {
        get: function () {
            var _a;
            return ((_a = this.keySteps[this.keySteps.length - 1]) === null || _a === void 0 ? void 0 : _a[1]) || 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiSliderKeyStepsDirective.prototype, "controlValue", {
        get: function () {
            return tuiPercentageToKeyStepValue(this.slider.valuePercentage, this.keySteps);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * TODO: 3.0
     * ___
     * Also add @HostListener(`input`): to be similar to
     * {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/range_value_accessor.ts#L47-L48 RangeValueAccessor}
     * ___
     * Remove {@link keyStepsInput}
     */
    TuiSliderKeyStepsDirective.prototype.updateControlValue = function () {
        this.updateValue(this.controlValue);
    };
    TuiSliderKeyStepsDirective.prototype.writeValue = function (controlValue) {
        if (controlValue === null) {
            return;
        }
        var clampedControlValue = clamp(controlValue, this.min, this.max);
        tuiAssert.assert(controlValue === clampedControlValue, '\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max');
        this.slider.value = this.transformToNativeValue(clampedControlValue);
    };
    TuiSliderKeyStepsDirective.prototype.getFallbackValue = function () {
        return 0;
    };
    TuiSliderKeyStepsDirective.prototype.transformToNativeValue = function (controlValue) {
        var _a = this.slider, min = _a.min, max = _a.max;
        var newValuePercentage = tuiKeyStepValueToPercentage(controlValue, this.keySteps);
        return (newValuePercentage * (max - min)) / 100 + min;
    };
    TuiSliderKeyStepsDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiSliderComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiSliderComponent; }),] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp(tuiCheckKeyStepsHaveMinMaxPercents, 'Should contain min and max values')
    ], TuiSliderKeyStepsDirective.prototype, "keySteps", void 0);
    __decorate([
        Output()
    ], TuiSliderKeyStepsDirective.prototype, "keyStepsInput", void 0);
    __decorate([
        HostListener('change')
    ], TuiSliderKeyStepsDirective.prototype, "updateControlValue", null);
    TuiSliderKeyStepsDirective = __decorate([
        Directive({
            selector: 'input[tuiSlider][keySteps]',
            host: {
                '[attr.aria-valuenow]': 'safeCurrentValue',
                '[attr.aria-valuemin]': 'min',
                '[attr.aria-valuemax]': 'max',
            },
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(ElementRef)),
        __param(3, Inject(forwardRef(function () { return TuiSliderComponent; })))
    ], TuiSliderKeyStepsDirective);
    return TuiSliderKeyStepsDirective;
}(AbstractTuiControl));
export { TuiSliderKeyStepsDirective };
/**
 * @deprecated DONT USE IT! It is just temporary solution for internal purposes only. We will delete it in next major release.
 * TODO delete it in v3.0
 *
 */
var TuiSliderTickLabelPipe = /** @class */ (function () {
    function TuiSliderTickLabelPipe() {
    }
    TuiSliderTickLabelPipe.prototype.transform = function (tickIndex, totalSegments, keySteps) {
        var percentage = (100 / totalSegments) * tickIndex;
        return tuiPercentageToKeyStepValue(percentage, keySteps);
    };
    TuiSliderTickLabelPipe = __decorate([
        Pipe({ name: 'tuiSliderTickLabel' })
    ], TuiSliderTickLabelPipe);
    return TuiSliderTickLabelPipe;
}());
export { TuiSliderTickLabelPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWtleS1zdGVwcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvc2xpZGVyLyIsInNvdXJjZXMiOlsiaGVscGVycy9zbGlkZXIta2V5LXN0ZXBzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLElBQUksRUFDSixhQUFhLEVBQ2IsSUFBSSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUNULGNBQWMsRUFFZCxjQUFjLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFDSCxrQ0FBa0MsRUFDbEMsMkJBQTJCLEVBQzNCLDJCQUEyQixHQUM5QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxXQUFXO0FBU1g7SUFDWSw4Q0FBMEI7SUFtQ2xDLG9DQUlJLE9BQXlCLEVBQ0UsaUJBQW9DLEVBQzFCLFVBQXdDLEVBRTVELE1BQTBCO1FBUi9DLFlBVUksa0JBQU0sT0FBTyxFQUFFLGlCQUFpQixDQUFDLFNBQ3BDO1FBTHdDLGdCQUFVLEdBQVYsVUFBVSxDQUE4QjtRQUU1RCxZQUFNLEdBQU4sTUFBTSxDQUFvQjtRQW5DL0MsY0FBUSxHQUFnQixFQUFFLENBQUM7UUFHM0IsbUJBQWEsR0FBRyxjQUFjLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUs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LHNCQUFzQixFQUFFLGtCQUFrQjtnQkFDMUMsc0JBQXNCLEVBQUUsS0FBSztnQkFDN0Isc0JBQXNCLEVBQUUsS0FBSzthQUNoQztTQUNKLENBQUM7UUFzQ08sV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsSUFBSSxFQUFFLENBQUE7UUFDTixXQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUVqQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxDQUFBO09BM0N4QywwQkFBMEIsQ0EwRnRDO0lBQUQsaUNBQUM7Q0FBQSxBQTFGRCxDQUNZLGtCQUFrQixHQXlGN0I7U0ExRlksMEJBQTBCO0FBNEZ2Qzs7OztHQUlHO0FBRUg7SUFBQTtJQU1BLENBQUM7SUFMRywwQ0FBUyxHQUFULFVBQVUsU0FBaUIsRUFBRSxhQUFxQixFQUFFLFFBQXFCO1FBQ3JFLElBQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUVyRCxPQUFPLDJCQUEyQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBTFEsc0JBQXNCO1FBRGxDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBQyxDQUFDO09BQ3RCLHNCQUFzQixDQU1sQztJQUFELDZCQUFDO0NBQUEsQUFORCxJQU1DO1NBTlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0LFxuICAgIFBpcGUsXG4gICAgUGlwZVRyYW5zZm9ybSxcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0VHVpQ29udHJvbCxcbiAgICBjbGFtcCxcbiAgICBpc05hdGl2ZUZvY3VzZWQsXG4gICAgdHVpQXNzZXJ0LFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICB0eXBlZEZyb21FdmVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aUtleVN0ZXBzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcbmltcG9ydCB7XG4gICAgdHVpQ2hlY2tLZXlTdGVwc0hhdmVNaW5NYXhQZXJjZW50cyxcbiAgICB0dWlLZXlTdGVwVmFsdWVUb1BlcmNlbnRhZ2UsXG4gICAgdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpU2xpZGVyQ29tcG9uZW50fSBmcm9tICcuLi9zbGlkZXIuY29tcG9uZW50JztcblxuLy8gQGR5bmFtaWNcbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXRbdHVpU2xpZGVyXVtrZXlTdGVwc10nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtdmFsdWVub3ddJzogJ3NhZmVDdXJyZW50VmFsdWUnLFxuICAgICAgICAnW2F0dHIuYXJpYS12YWx1ZW1pbl0nOiAnbWluJyxcbiAgICAgICAgJ1thdHRyLmFyaWEtdmFsdWVtYXhdJzogJ21heCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2xpZGVyS2V5U3RlcHNEaXJlY3RpdmVcbiAgICBleHRlbmRzIEFic3RyYWN0VHVpQ29udHJvbDxudW1iZXI+XG4gICAgaW1wbGVtZW50cyBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3JcbntcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcChcbiAgICAgICAgdHVpQ2hlY2tLZXlTdGVwc0hhdmVNaW5NYXhQZXJjZW50cyxcbiAgICAgICAgJ1Nob3VsZCBjb250YWluIG1pbiBhbmQgbWF4IHZhbHVlcycsXG4gICAgKVxuICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyA9IFtdO1xuXG4gICAgQE91dHB1dCgpXG4gICAga2V5U3RlcHNJbnB1dCA9IHR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaW5wdXQnKS5waXBlKFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5jb250cm9sVmFsdWUpLFxuICAgICk7XG5cbiAgICBnZXQgbmF0aXZlRm9jdXNhYmxlRWxlbWVudCgpOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkRGlzYWJsZWQgPyBudWxsIDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc05hdGl2ZUZvY3VzZWQodGhpcy5uYXRpdmVGb2N1c2FibGVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBnZXQgbWluKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleVN0ZXBzWzBdPy5bMV0gfHwgMDtcbiAgICB9XG5cbiAgICBnZXQgbWF4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleVN0ZXBzW3RoaXMua2V5U3RlcHMubGVuZ3RoIC0gMV0/LlsxXSB8fCAxMDA7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRyb2xWYWx1ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlKHRoaXMuc2xpZGVyLnZhbHVlUGVyY2VudGFnZSwgdGhpcy5rZXlTdGVwcyk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpXG4gICAgICAgIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUdWlTbGlkZXJDb21wb25lbnQpKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNsaWRlcjogVHVpU2xpZGVyQ29tcG9uZW50LFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250cm9sLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogMy4wXG4gICAgICogX19fXG4gICAgICogQWxzbyBhZGQgQEhvc3RMaXN0ZW5lcihgaW5wdXRgKTogdG8gYmUgc2ltaWxhciB0b1xuICAgICAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvbWFpbi9wYWNrYWdlcy9mb3Jtcy9zcmMvZGlyZWN0aXZlcy9yYW5nZV92YWx1ZV9hY2Nlc3Nvci50cyNMNDctTDQ4IFJhbmdlVmFsdWVBY2Nlc3Nvcn1cbiAgICAgKiBfX19cbiAgICAgKiBSZW1vdmUge0BsaW5rIGtleVN0ZXBzSW5wdXR9XG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcignY2hhbmdlJylcbiAgICB1cGRhdGVDb250cm9sVmFsdWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodGhpcy5jb250cm9sVmFsdWUpO1xuICAgIH1cblxuICAgIHdyaXRlVmFsdWUoY29udHJvbFZhbHVlOiBudW1iZXIgfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGlmIChjb250cm9sVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNsYW1wZWRDb250cm9sVmFsdWUgPSBjbGFtcChjb250cm9sVmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCk7XG5cbiAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChcbiAgICAgICAgICAgIGNvbnRyb2xWYWx1ZSA9PT0gY2xhbXBlZENvbnRyb2xWYWx1ZSxcbiAgICAgICAgICAgICdcXG5bU2xpZGVyS2V5U3RlcHNdOiBZb3UgY2Fubm90IHByb2dyYW1tYXRpY2FsbHkgc2V0IHZhbHVlIHdoaWNoIGlzIGxlc3MvbW9yZSB0aGFuIG1pbi9tYXgnLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuc2xpZGVyLnZhbHVlID0gdGhpcy50cmFuc2Zvcm1Ub05hdGl2ZVZhbHVlKGNsYW1wZWRDb250cm9sVmFsdWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRGYWxsYmFja1ZhbHVlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtVG9OYXRpdmVWYWx1ZShjb250cm9sVmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLnNsaWRlcjtcbiAgICAgICAgY29uc3QgbmV3VmFsdWVQZXJjZW50YWdlID0gdHVpS2V5U3RlcFZhbHVlVG9QZXJjZW50YWdlKFxuICAgICAgICAgICAgY29udHJvbFZhbHVlLFxuICAgICAgICAgICAgdGhpcy5rZXlTdGVwcyxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gKG5ld1ZhbHVlUGVyY2VudGFnZSAqIChtYXggLSBtaW4pKSAvIDEwMCArIG1pbjtcbiAgICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgRE9OVCBVU0UgSVQhIEl0IGlzIGp1c3QgdGVtcG9yYXJ5IHNvbHV0aW9uIGZvciBpbnRlcm5hbCBwdXJwb3NlcyBvbmx5LiBXZSB3aWxsIGRlbGV0ZSBpdCBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gKiBUT0RPIGRlbGV0ZSBpdCBpbiB2My4wXG4gKlxuICovXG5AUGlwZSh7bmFtZTogJ3R1aVNsaWRlclRpY2tMYWJlbCd9KVxuZXhwb3J0IGNsYXNzIFR1aVNsaWRlclRpY2tMYWJlbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odGlja0luZGV4OiBudW1iZXIsIHRvdGFsU2VnbWVudHM6IG51bWJlciwga2V5U3RlcHM6IFR1aUtleVN0ZXBzKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9ICgxMDAgLyB0b3RhbFNlZ21lbnRzKSAqIHRpY2tJbmRleDtcblxuICAgICAgICByZXR1cm4gdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlKHBlcmNlbnRhZ2UsIGtleVN0ZXBzKTtcbiAgICB9XG59XG4iXX0=