import { __decorate, __extends, __param, __read } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { PAGE_VISIBILITY } from '@ng-web-apis/common';
import { typedFromEvent } from '@taiga-ui/cdk';
import { BehaviorSubject, combineLatest, EMPTY, interval, merge, Observable } from 'rxjs';
import { mapTo, switchMap } from 'rxjs/operators';
var TuiCarouselDirective = /** @class */ (function (_super) {
    __extends(TuiCarouselDirective, _super);
    function TuiCarouselDirective(elementRef, visible$) {
        var _this = _super.call(this, function (subscriber) { return _this.output$.subscribe(subscriber); }) || this;
        _this.elementRef = elementRef;
        _this.visible$ = visible$;
        _this.duration$ = new BehaviorSubject(0);
        _this.running$ = merge(typedFromEvent(_this.elementRef.nativeElement, 'mouseenter').pipe(mapTo(false)), typedFromEvent(_this.elementRef.nativeElement, 'touchstart').pipe(mapTo(false)), typedFromEvent(_this.elementRef.nativeElement, 'touchend').pipe(mapTo(true)), typedFromEvent(_this.elementRef.nativeElement, 'mouseleave').pipe(mapTo(true)), _this.visible$);
        _this.output$ = combineLatest([_this.duration$, _this.running$]).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), duration = _b[0], running = _b[1];
            return duration && running ? interval(duration) : EMPTY;
        }));
        return _this;
    }
    Object.defineProperty(TuiCarouselDirective.prototype, "duration", {
        set: function (duration) {
            this.duration$.next(duration);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiCarouselDirective.prototype, "index", {
        set: function (_) {
            this.duration$.next(this.duration$.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiCarouselDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [PAGE_VISIBILITY,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiCarouselDirective.prototype, "duration", null);
    __decorate([
        Input()
    ], TuiCarouselDirective.prototype, "index", null);
    TuiCarouselDirective = __decorate([
        Directive({
            selector: 'tui-carousel',
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(PAGE_VISIBILITY))
    ], TuiCarouselDirective);
    return TuiCarouselDirective;
}(Observable));
export { TuiCarouselDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2Nhcm91c2VsLyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN4RixPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBS2hEO0lBQTBDLHdDQUFtQjtJQTJCekQsOEJBQ3lDLFVBQW1DLEVBQzlCLFFBQTZCO1FBRjNFLFlBSUksa0JBQU0sVUFBQSxVQUFVLElBQUksT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxTQUMxRDtRQUp3QyxnQkFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDOUIsY0FBUSxHQUFSLFFBQVEsQ0FBcUI7UUE1QjFELGVBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQyxjQUFRLEdBQUcsS0FBSyxDQUM3QixjQUFjLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5RSxjQUFjLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5RSxjQUFjLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUMzRSxjQUFjLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM3RSxLQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO1FBRWUsYUFBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEtBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxRSxTQUFTLENBQUMsVUFBQyxFQUFtQjtnQkFBbkIsa0JBQW1CLEVBQWxCLGdCQUFRLEVBQUUsZUFBTztZQUN6QixPQUFBLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUFoRCxDQUFnRCxDQUNuRCxDQUNKLENBQUM7O0lBaUJGLENBQUM7SUFkRCxzQkFBSSwwQ0FBUTthQUFaLFVBQWEsUUFBZ0I7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSx1Q0FBSzthQUFULFVBQVUsQ0FBUztZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7O2dCQUdvRCxVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTtnQkFDa0MsVUFBVSx1QkFBN0QsTUFBTSxTQUFDLGVBQWU7O0lBWDNCO1FBREMsS0FBSyxFQUFFO3dEQUdQO0lBR0Q7UUFEQyxLQUFLLEVBQUU7cURBR1A7SUF6QlEsb0JBQW9CO1FBSGhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxjQUFjO1NBQzNCLENBQUM7UUE2Qk8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7T0E3Qm5CLG9CQUFvQixDQWlDaEM7SUFBRCwyQkFBQztDQUFBLEFBakNELENBQTBDLFVBQVUsR0FpQ25EO1NBakNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UEFHRV9WSVNJQklMSVRZfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIEVNUFRZLCBpbnRlcnZhbCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXBUbywgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndHVpLWNhcm91c2VsJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQ2Fyb3VzZWxEaXJlY3RpdmUgZXh0ZW5kcyBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGR1cmF0aW9uJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoMCk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJ1bm5pbmckID0gbWVyZ2UoXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbW91c2VlbnRlcicpLnBpcGUobWFwVG8oZmFsc2UpKSxcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0b3VjaHN0YXJ0JykucGlwZShtYXBUbyhmYWxzZSkpLFxuICAgICAgICB0eXBlZEZyb21FdmVudCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RvdWNoZW5kJykucGlwZShtYXBUbyh0cnVlKSksXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpLnBpcGUobWFwVG8odHJ1ZSkpLFxuICAgICAgICB0aGlzLnZpc2libGUkLFxuICAgICk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dCQgPSBjb21iaW5lTGF0ZXN0KFt0aGlzLmR1cmF0aW9uJCwgdGhpcy5ydW5uaW5nJF0pLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoW2R1cmF0aW9uLCBydW5uaW5nXSkgPT5cbiAgICAgICAgICAgIGR1cmF0aW9uICYmIHJ1bm5pbmcgPyBpbnRlcnZhbChkdXJhdGlvbikgOiBFTVBUWSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgZHVyYXRpb24oZHVyYXRpb246IG51bWJlcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uJC5uZXh0KGR1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBpbmRleChfOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiQubmV4dCh0aGlzLmR1cmF0aW9uJC52YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChQQUdFX1ZJU0lCSUxJVFkpIHByaXZhdGUgcmVhZG9ubHkgdmlzaWJsZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4gdGhpcy5vdXRwdXQkLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgfVxufVxuIl19