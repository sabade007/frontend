import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, QueryList, } from '@angular/core';
import { EMPTY_QUERY, tuiAssertIsHTMLElement, tuiDefaultProp, TuiDestroyService, tuiGetOriginalArrayFromQueryList, tuiItemsQueryListObservable, tuiMoveFocus, tuiPure, TuiResizeService, TuiScrollService, } from '@taiga-ui/cdk';
import { TUI_ANIMATIONS_DURATION } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { delay } from 'rxjs/operators';
import { TuiStepComponent } from './step/step.component';
var TuiStepperComponent = /** @class */ (function () {
    function TuiStepperComponent(changeDetectorRef, elementRef, scrollService, resize$, duration) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.scrollService = scrollService;
        this.duration = duration;
        this.steps = EMPTY_QUERY;
        this.orientation = 'horizontal';
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        resize$.subscribe(function () { return _this.scrollIntoView(_this.activeItemIndex); });
    }
    Object.defineProperty(TuiStepperComponent.prototype, "activeIndex", {
        set: function (index) {
            this.activeItemIndex = index;
            this.scrollIntoView(index);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiStepperComponent.prototype, "changes$", {
        get: function () {
            // Delay is required to trigger change detection after steps are rendered,
            // so they can update their "active" status
            return tuiItemsQueryListObservable(this.steps).pipe(delay(0));
        },
        enumerable: true,
        configurable: true
    });
    TuiStepperComponent.prototype.onHorizontal = function (event, step) {
        if (this.orientation !== 'horizontal' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    };
    TuiStepperComponent.prototype.onVertical = function (event, step) {
        if (this.orientation !== 'vertical' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    };
    TuiStepperComponent.prototype.indexOf = function (step) {
        return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(function (_a) {
            var nativeElement = _a.nativeElement;
            return nativeElement === step;
        });
    };
    TuiStepperComponent.prototype.isActive = function (index) {
        return index === this.activeItemIndex;
    };
    TuiStepperComponent.prototype.activate = function (index) {
        if (this.activeItemIndex === index) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
        this.changeDetectorRef.markForCheck();
        this.scrollIntoView(index);
    };
    TuiStepperComponent.prototype.getNativeElements = function (queryList) {
        return queryList.map(function (_a) {
            var nativeElement = _a.nativeElement;
            return nativeElement;
        });
    };
    TuiStepperComponent.prototype.moveFocus = function (current, step) {
        tuiAssertIsHTMLElement(current);
        var stepElements = this.getNativeElements(this.steps);
        tuiMoveFocus(stepElements.indexOf(current), stepElements, step);
    };
    TuiStepperComponent.prototype.scrollIntoView = function (index) {
        var step = this.getNativeElements(this.steps)[index];
        if (!step) {
            return;
        }
        var nativeElement = this.elementRef.nativeElement;
        var clientHeight = nativeElement.clientHeight, clientWidth = nativeElement.clientWidth, offsetTop = nativeElement.offsetTop, offsetLeft = nativeElement.offsetLeft;
        var offsetHeight = step.offsetHeight, offsetWidth = step.offsetWidth, stepOffsetTop = step.offsetTop, stepOffsetLeft = step.offsetLeft;
        var top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
        var left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
        this.scrollService
            .scroll$(nativeElement, Math.max(0, top), Math.max(0, left), this.duration / 3)
            .subscribe();
    };
    TuiStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiScrollService, decorators: [{ type: Inject, args: [TuiScrollService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
        { type: Number, decorators: [{ type: Inject, args: [TUI_ANIMATIONS_DURATION,] }] }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return TuiStepComponent; }), { read: ElementRef })
    ], TuiStepperComponent.prototype, "steps", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-orientation'),
        tuiDefaultProp()
    ], TuiStepperComponent.prototype, "orientation", void 0);
    __decorate([
        Input('activeItemIndex')
    ], TuiStepperComponent.prototype, "activeIndex", null);
    __decorate([
        Output()
    ], TuiStepperComponent.prototype, "activeItemIndexChange", void 0);
    __decorate([
        tuiPure
    ], TuiStepperComponent.prototype, "changes$", null);
    __decorate([
        HostListener('keydown.arrowRight', ['$event', '1']),
        HostListener('keydown.arrowLeft', ['$event', '-1'])
    ], TuiStepperComponent.prototype, "onHorizontal", null);
    __decorate([
        HostListener('keydown.arrowDown', ['$event', '1']),
        HostListener('keydown.arrowUp', ['$event', '-1'])
    ], TuiStepperComponent.prototype, "onVertical", null);
    __decorate([
        tuiPure
    ], TuiStepperComponent.prototype, "getNativeElements", null);
    TuiStepperComponent = __decorate([
        Component({
            selector: 'tui-stepper, nav[tuiStepper]',
            template: "<ng-container *ngIf=\"changes$ | async\"></ng-container>\n<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [TuiResizeService, TuiDestroyService],
            styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;counter-reset:steps;scroll-behavior:smooth}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host[data-orientation=vertical]{flex-direction:column}"]
        }),
        __param(0, Inject(ChangeDetectorRef)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiScrollService)),
        __param(3, Inject(TuiResizeService)),
        __param(4, Inject(TUI_ANIMATIONS_DURATION))
    ], TuiStepperComponent);
    return TuiStepperComponent;
}());
export { TuiStepperComponent };
//# sourceMappingURL=data:application/json;base64,