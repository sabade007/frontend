import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { CHROMIUM_EDGE_START_VERSION, isEdgeOlderThan, isIE, TuiDestroyService, tuiPure, TuiResizeService, } from '@taiga-ui/cdk';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { calculateColorSegments } from '../utils/calculate-color-segments';
var TuiProgressColorSegmentsDirective = /** @class */ (function () {
    function TuiProgressColorSegmentsDirective(elementRef, resize$, userAgent) {
        this.elementRef = elementRef;
        this.resize$ = resize$;
        this.userAgent = userAgent;
        this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) ||
            isIE(this.userAgent);
        this.colors = [];
    }
    Object.defineProperty(TuiProgressColorSegmentsDirective.prototype, "calcSegments$", {
        get: function () {
            var _this = this;
            return this.resize$.pipe(map(function () {
                return _this.isOldBrowsers
                    ? _this.colors[0]
                    : calculateColorSegments(_this.colors, _this.elementRef.nativeElement.offsetWidth);
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiProgressColorSegmentsDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
    ]; };
    __decorate([
        Input('tuiProgressColorSegments')
    ], TuiProgressColorSegmentsDirective.prototype, "colors", void 0);
    __decorate([
        tuiPure
    ], TuiProgressColorSegmentsDirective.prototype, "calcSegments$", null);
    TuiProgressColorSegmentsDirective = __decorate([
        Directive({
            selector: 'progress[tuiProgressBar][tuiProgressColorSegments]',
            host: {
                '[$.style.--tui-progress-color]': 'calcSegments$',
                '($.style.--tui-progress-color)': '0',
            },
            providers: [TuiDestroyService, TuiResizeService],
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiResizeService)),
        __param(2, Inject(USER_AGENT))
    ], TuiProgressColorSegmentsDirective);
    return TuiProgressColorSegmentsDirective;
}());
export { TuiProgressColorSegmentsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY29sb3Itc2VnbWVudHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3Byb2dyZXNzLyIsInNvdXJjZXMiOlsicHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWNvbG9yLXNlZ21lbnRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUNILDJCQUEyQixFQUMzQixlQUFlLEVBQ2YsSUFBSSxFQUNKLGlCQUFpQixFQUNqQixPQUFPLEVBQ1AsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBVXpFO0lBc0JJLDJDQUN5QyxVQUEyQyxFQUNyQyxPQUE0QixFQUNsQyxTQUFpQjtRQUZqQixlQUFVLEdBQVYsVUFBVSxDQUFpQztRQUNyQyxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUNsQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBeEJ6QyxrQkFBYSxHQUMxQixlQUFlLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR3pCLFdBQU0sR0FBYSxFQUFFLENBQUM7SUFvQm5CLENBQUM7SUFqQkosc0JBQUksNERBQWE7YUFBakI7WUFEQSxpQkFZQztZQVZHLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ3BCLEdBQUcsQ0FBQztnQkFDQSxPQUFBLEtBQUksQ0FBQyxhQUFhO29CQUNkLENBQUMsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDaEIsQ0FBQyxDQUFDLHNCQUFzQixDQUNsQixLQUFJLENBQUMsTUFBTSxFQUNYLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDNUM7WUFMUCxDQUtPLENBQ1YsQ0FDSixDQUFDO1FBQ04sQ0FBQzs7O09BQUE7O2dCQUdvRCxVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTtnQkFDa0MsVUFBVSx1QkFBN0QsTUFBTSxTQUFDLGdCQUFnQjs2Q0FDdkIsTUFBTSxTQUFDLFVBQVU7O0lBbkJ0QjtRQURDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQztxRUFDWjtJQUd0QjtRQURDLE9BQU87MEVBWVA7SUFwQlEsaUNBQWlDO1FBUjdDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvREFBb0Q7WUFDOUQsSUFBSSxFQUFFO2dCQUNGLGdDQUFnQyxFQUFFLGVBQWU7Z0JBQ2pELGdDQUFnQyxFQUFFLEdBQUc7YUFDeEM7WUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQztTQUNuRCxDQUFDO1FBd0JPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDeEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7T0F6QmQsaUNBQWlDLENBMkI3QztJQUFELHdDQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0EzQlksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtVU0VSX0FHRU5UfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgQ0hST01JVU1fRURHRV9TVEFSVF9WRVJTSU9OLFxuICAgIGlzRWRnZU9sZGVyVGhhbixcbiAgICBpc0lFLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIHR1aVB1cmUsXG4gICAgVHVpUmVzaXplU2VydmljZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtjYWxjdWxhdGVDb2xvclNlZ21lbnRzfSBmcm9tICcuLi91dGlscy9jYWxjdWxhdGUtY29sb3Itc2VnbWVudHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3Byb2dyZXNzW3R1aVByb2dyZXNzQmFyXVt0dWlQcm9ncmVzc0NvbG9yU2VnbWVudHNdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdbJC5zdHlsZS4tLXR1aS1wcm9ncmVzcy1jb2xvcl0nOiAnY2FsY1NlZ21lbnRzJCcsXG4gICAgICAgICcoJC5zdHlsZS4tLXR1aS1wcm9ncmVzcy1jb2xvciknOiAnMCcsXG4gICAgfSxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZSwgVHVpUmVzaXplU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByb2dyZXNzQ29sb3JTZWdtZW50c0RpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc09sZEJyb3dzZXJzID1cbiAgICAgICAgaXNFZGdlT2xkZXJUaGFuKENIUk9NSVVNX0VER0VfU1RBUlRfVkVSU0lPTiwgdGhpcy51c2VyQWdlbnQpIHx8XG4gICAgICAgIGlzSUUodGhpcy51c2VyQWdlbnQpO1xuXG4gICAgQElucHV0KCd0dWlQcm9ncmVzc0NvbG9yU2VnbWVudHMnKVxuICAgIGNvbG9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIEB0dWlQdXJlXG4gICAgZ2V0IGNhbGNTZWdtZW50cyQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplJC5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5pc09sZEJyb3dzZXJzXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jb2xvcnNbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBjYWxjdWxhdGVDb2xvclNlZ21lbnRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxQcm9ncmVzc0VsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aVJlc2l6ZVNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgcmVzaXplJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSBwcml2YXRlIHJlYWRvbmx5IHVzZXJBZ2VudDogc3RyaW5nLFxuICAgICkge31cbn1cbiJdfQ==