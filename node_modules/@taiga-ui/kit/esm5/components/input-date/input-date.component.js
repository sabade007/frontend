import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, Inject, Injector, Input, Optional, Self, Type, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, DATE_FILLER_LENGTH, nullableSame, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_IS_MOBILE, TUI_LAST_DAY, TuiDay, tuiDefaultProp, TuiMonth, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_SIZE, TuiDialogService, TuiMarkerHandler, TuiPrimitiveTextfieldComponent, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { EMPTY_MASK } from '@taiga-ui/kit/constants';
import { TUI_DATE_TEXTS, TUI_DATE_VALUE_TRANSFORMER, TUI_MOBILE_CALENDAR, } from '@taiga-ui/kit/tokens';
import { tuiCreateAutoCorrectedDatePipe, tuiCreateDateMask, } from '@taiga-ui/kit/utils/mask';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { TUI_INPUT_DATE_PROVIDERS } from './input-date.providers';
// @dynamic
var TuiInputDateComponent = /** @class */ (function (_super) {
    __extends(TuiInputDateComponent, _super);
    function TuiInputDateComponent(control, changeDetectorRef, injector, isMobile, dialogService, mobileCalendar, textfieldSize, dateFormat, dateSeparator, dateTexts$, valueTransformer) {
        var _this = _super.call(this, control, changeDetectorRef, valueTransformer) || this;
        _this.injector = injector;
        _this.isMobile = isMobile;
        _this.dialogService = dialogService;
        _this.mobileCalendar = mobileCalendar;
        _this.textfieldSize = textfieldSize;
        _this.dateFormat = dateFormat;
        _this.dateSeparator = dateSeparator;
        _this.dateTexts$ = dateTexts$;
        _this.valueTransformer = valueTransformer;
        _this.month = null;
        _this.textMaskOptions = {
            mask: tuiCreateDateMask(_this.dateFormat, _this.dateSeparator),
            pipe: tuiCreateAutoCorrectedDatePipe(_this),
            guide: false,
        };
        _this.min = TUI_FIRST_DAY;
        _this.max = TUI_LAST_DAY;
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        _this.items = [];
        _this.defaultActiveYearMonth = TuiMonth.currentLocal();
        _this.open = false;
        _this.filler$ = _this.dateTexts$.pipe(map(function (dateTexts) {
            return changeDateSeparator(dateTexts[_this.dateFormat], _this.dateSeparator);
        }));
        return _this;
    }
    Object.defineProperty(TuiInputDateComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.textfield ? this.textfield.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "computedMobile", {
        get: function () {
            return this.isMobile && !!this.mobileCalendar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "calendarIcon", {
        get: function () {
            return sizeBigger(this.textfieldSize.size)
                ? 'tuiIconCalendarLarge'
                : 'tuiIconCalendar';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "computedValue", {
        get: function () {
            var _a = this, value = _a.value, nativeValue = _a.nativeValue, activeItem = _a.activeItem;
            if (activeItem) {
                return String(activeItem);
            }
            return value ? value.toString(this.dateFormat, this.dateSeparator) : nativeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "computedActiveYearMonth", {
        get: function () {
            if (this.items[0] && this.value && this.value.daySame(this.items[0].day)) {
                return this.items[0].displayDay;
            }
            return this.month || this.value || this.defaultActiveYearMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "nativeValue", {
        get: function () {
            return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
        },
        set: function (value) {
            if (!this.nativeFocusableElement) {
                return;
            }
            this.nativeFocusableElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "canOpen", {
        get: function () {
            return this.interactive && !this.computedMobile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "computedMask", {
        get: function () {
            return (this.activeItem
                ? EMPTY_MASK
                : this.textMaskOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateComponent.prototype, "activeItem", {
        get: function () {
            var value = this.value;
            return (value && this.items.find(function (item) { return item.day.daySame(value); })) || null;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputDateComponent.prototype.onClick = function () {
        if (!this.isMobile) {
            this.open = !this.open;
        }
    };
    TuiInputDateComponent.prototype.getComputedFiller = function (filler) {
        return this.activeItem ? '' : filler;
    };
    TuiInputDateComponent.prototype.onMobileClick = function () {
        var _this = this;
        if (!this.mobileCalendar) {
            this.open = !this.open;
            return;
        }
        this.dialogService
            .open(new PolymorpheusComponent(this.mobileCalendar, this.injector), {
            size: 'fullscreen',
            closeable: false,
            data: {
                single: true,
                min: this.min,
                max: this.max,
                disabledItemHandler: this.disabledItemHandler,
            },
        })
            .pipe(takeUntil(this.destroy$))
            .subscribe(function (value) {
            _this.updateValue(value);
        });
    };
    TuiInputDateComponent.prototype.onValueChange = function (value) {
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value) {
            this.onOpenChange(true);
        }
        this.updateValue(value.length !== DATE_FILLER_LENGTH
            ? null
            : TuiDay.normalizeParse(value, this.dateFormat));
    };
    TuiInputDateComponent.prototype.onDayClick = function (value) {
        this.updateValue(value);
        this.open = false;
    };
    TuiInputDateComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputDateComponent.prototype.onMonthChange = function (month) {
        this.month = month;
    };
    TuiInputDateComponent.prototype.onOpenChange = function (open) {
        this.open = open;
    };
    TuiInputDateComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiInputDateComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.open = false;
    };
    TuiInputDateComponent.prototype.writeValue = function (value) {
        _super.prototype.writeValue.call(this, value);
        this.nativeValue = value ? this.computedValue : '';
    };
    TuiInputDateComponent.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return nullableSame(oldValue, newValue, function (a, b) { return a.daySame(b); });
    };
    TuiInputDateComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: TuiDialogService, decorators: [{ type: Inject, args: [TuiDialogService,] }] },
        { type: Type, decorators: [{ type: Optional }, { type: Inject, args: [TUI_MOBILE_CALENDAR,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DATE_FORMAT,] }] },
        { type: String, decorators: [{ type: Inject, args: [TUI_DATE_SEPARATOR,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DATE_TEXTS,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATE_VALUE_TRANSFORMER,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputDateComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "markerHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateComponent.prototype, "defaultActiveYearMonth", void 0);
    __decorate([
        HostListener('click')
    ], TuiInputDateComponent.prototype, "onClick", null);
    TuiInputDateComponent = __decorate([
        Component({
            selector: 'tui-input-date',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [open]=\"open && canOpen\"\n    [content]=\"dropdown\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"filler$ | async as filler\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        tuiTextfieldInputMode=\"numeric\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [filler]=\"getComputedFiller(filler)\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [focusable]=\"computedFocusable\"\n        [iconContent]=\"computedMobile ? mobileIconContent : iconContent\"\n        [disabled]=\"computedDisabled\"\n        [textMask]=\"computedMask\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #mobileIconContent>\n        <tui-svg\n            automation-id=\"tui-input-date-range__icon\"\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n            (click)=\"onMobileClick()\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #iconContent>\n        <tui-svg\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            tuiPreventDefault=\"mousedown\"\n            automation-id=\"tui-input-date__calendar\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [markerHandler]=\"markerHandler\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n        ></tui-calendar>\n        <div\n            *ngIf=\"items.length === 1\"\n            tuiPreventDefault=\"mousedown\"\n            class=\"t-button\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"onDayClick(items[0].day)\"\n            >\n                {{ items[0] }}\n            </button>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TUI_INPUT_DATE_PROVIDERS,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button button{flex:1;text-align:center}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(Injector)),
        __param(3, Inject(TUI_IS_MOBILE)),
        __param(4, Inject(TuiDialogService)),
        __param(5, Optional()),
        __param(5, Inject(TUI_MOBILE_CALENDAR)),
        __param(6, Inject(TUI_TEXTFIELD_SIZE)),
        __param(7, Inject(TUI_DATE_FORMAT)),
        __param(8, Inject(TUI_DATE_SEPARATOR)),
        __param(9, Inject(TUI_DATE_TEXTS)),
        __param(10, Optional()),
        __param(10, Inject(TUI_DATE_VALUE_TRANSFORMER))
    ], TuiInputDateComponent);
    return TuiInputDateComponent;
}(AbstractTuiNullableControl));
export { TuiInputDateComponent };
//# sourceMappingURL=data:application/json;base64,