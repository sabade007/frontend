import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { DEFAULT_ROUTER_LINK_OPTIONS } from '@taiga-ui/kit/constants';
/** @deprecated use `<tui-breadcrumbs>` from {@link TuiBreadcrumbsWrapperComponent} */
var TuiBreadcrumbsComponent = /** @class */ (function () {
    function TuiBreadcrumbsComponent() {
        this.items = [];
        this.size = 'm';
        this.routerLinkOptions = function (_a) {
            var routerLinkOptions = _a.routerLinkOptions;
            return routerLinkOptions || DEFAULT_ROUTER_LINK_OPTIONS;
        };
    }
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiBreadcrumbsComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiBreadcrumbsComponent.prototype, "size", void 0);
    TuiBreadcrumbsComponent = __decorate([
        Component({
            selector: 'tui-breadcrumbs[items]',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<ng-container *ngFor=\"let item of items; last as lastItem\">\n    <ng-container *tuiLet=\"item | tuiMapper: routerLinkOptions as options\">\n        <a\n            #rla=\"routerLinkActive\"\n            tuiLink\n            tuiMode=\"onLight\"\n            routerLinkActive=\"t-active-link\"\n            [attr.tabindex]=\"rla.isActive ? -1 : null\"\n            [fragment]=\"options.fragment\"\n            [preserveFragment]=\"options.preserveFragment\"\n            [replaceUrl]=\"options.replaceUrl\"\n            [routerLink]=\"item.routerLink\"\n            [routerLinkActiveOptions]=\"item.routerLinkActiveOptions || {exact: false}\"\n            [skipLocationChange]=\"options.skipLocationChange\"\n            [queryParams]=\"options.queryParams\"\n            [target]=\"options.target\"\n        >\n            {{ item.caption }}\n        </a>\n        <tui-svg\n            *ngIf=\"!lastItem\"\n            src=\"tuiIconChevronRight\"\n            class=\"t-icon\"\n        ></tui-svg>\n    </ng-container>\n</ng-container>\n",
            styles: [":host{display:flex;align-items:center;height:2.5rem}:host[data-size='m']{font:var(--tui-font-text-s)}:host[data-size='l']{font:var(--tui-font-text-m)}.t-icon{margin:0 .25rem;color:var(--tui-text-03)}a.t-active-link[data-mode=onLight]{color:var(--tui-text-03);pointer-events:none}"]
        })
    ], TuiBreadcrumbsComponent);
    return TuiBreadcrumbsComponent;
}());
export { TuiBreadcrumbsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2JyZWFkY3J1bWJzLyIsInNvdXJjZXMiOlsiYnJlYWRjcnVtYnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUdwRSxzRkFBc0Y7QUFPdEY7SUFBQTtRQUdJLFVBQUssR0FBa0MsRUFBRSxDQUFDO1FBSzFDLFNBQUksR0FBYSxHQUFHLENBQUM7UUFFWixzQkFBaUIsR0FBdUMsVUFBQyxFQUVqRTtnQkFERyx3Q0FBaUI7WUFDZixPQUFBLGlCQUFpQixJQUFJLDJCQUEyQjtRQUFoRCxDQUFnRCxDQUFDO0lBQzNELENBQUM7SUFWRztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTswREFDeUI7SUFLMUM7UUFIQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7UUFDN0IsY0FBYyxFQUFFO3lEQUNJO0lBUlosdUJBQXVCO1FBTm5DLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx3QkFBd0I7WUFDbEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsMmhDQUEwQzs7U0FFN0MsQ0FBQztPQUNXLHVCQUF1QixDQWFuQztJQUFELDhCQUFDO0NBQUEsQUFiRCxJQWFDO1NBYlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcCwgVHVpTWFwcGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpU2l6ZUx9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7REVGQVVMVF9ST1VURVJfTElOS19PUFRJT05TfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbnN0YW50cyc7XG5pbXBvcnQge1R1aUJyZWFkQ3J1bWJzSXRlbX0gZnJvbSAnQHRhaWdhLXVpL2tpdC9pbnRlcmZhY2VzJztcblxuLyoqIEBkZXByZWNhdGVkIHVzZSBgPHR1aS1icmVhZGNydW1icz5gIGZyb20ge0BsaW5rIFR1aUJyZWFkY3J1bWJzV3JhcHBlckNvbXBvbmVudH0gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWJyZWFkY3J1bWJzW2l0ZW1zXScsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWJzLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2JyZWFkY3J1bWJzLnN0eWxlLmxlc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQnJlYWRjcnVtYnNDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpdGVtczogcmVhZG9ubHkgVHVpQnJlYWRDcnVtYnNJdGVtW10gPSBbXTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplTCA9ICdtJztcblxuICAgIHJlYWRvbmx5IHJvdXRlckxpbmtPcHRpb25zOiBUdWlNYXBwZXI8VHVpQnJlYWRDcnVtYnNJdGVtLCBhbnk+ID0gKHtcbiAgICAgICAgcm91dGVyTGlua09wdGlvbnMsXG4gICAgfSkgPT4gcm91dGVyTGlua09wdGlvbnMgfHwgREVGQVVMVF9ST1VURVJfTElOS19PUFRJT05TO1xufVxuIl19