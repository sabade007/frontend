import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, HostBinding, Input, TemplateRef, } from '@angular/core';
import { EMPTY_QUERY, tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core';
import { Subject } from 'rxjs';
import { TuiBreadcrumbDirective } from './breadcrumb.directive';
var TuiBreadcrumbsWrapperComponent = /** @class */ (function () {
    function TuiBreadcrumbsWrapperComponent() {
        this.size = 'm';
        this.items = EMPTY_QUERY;
        this.change$ = new Subject();
        this.mode = 'onLight';
    }
    TuiBreadcrumbsWrapperComponent_1 = TuiBreadcrumbsWrapperComponent;
    TuiBreadcrumbsWrapperComponent.prototype.ngOnChanges = function () { };
    var TuiBreadcrumbsWrapperComponent_1;
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiBreadcrumbsWrapperComponent.prototype, "size", void 0);
    __decorate([
        ContentChildren(TuiBreadcrumbDirective, { read: TemplateRef })
    ], TuiBreadcrumbsWrapperComponent.prototype, "items", void 0);
    TuiBreadcrumbsWrapperComponent = TuiBreadcrumbsWrapperComponent_1 = __decorate([
        Component({
            selector: 'tui-breadcrumbs:not([items])',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<ng-container *ngFor=\"let item of items; let last = last\">\n    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n    <tui-svg\n        *ngIf=\"!last\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-icon\"\n    ></tui-svg>\n</ng-container>\n",
            providers: [
                {
                    provide: TuiModeDirective,
                    useExisting: forwardRef(function () { return TuiBreadcrumbsWrapperComponent_1; }),
                },
            ],
            styles: [":host{display:flex;align-items:center;height:2.5rem;font:var(--tui-font-text-s)}:host[data-size='l']{font:var(--tui-font-text-m)}.t-icon{margin:0 .25rem;color:var(--tui-text-03)}"]
        })
    ], TuiBreadcrumbsWrapperComponent);
    return TuiBreadcrumbsWrapperComponent;
}());
export { TuiBreadcrumbsWrapperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMtd3JhcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvYnJlYWRjcnVtYnMvIiwic291cmNlcyI6WyJicmVhZGNydW1icy13cmFwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUVMLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsV0FBVyxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRTdCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBYzlEO0lBQUE7UUFJSSxTQUFJLEdBQWEsR0FBRyxDQUFDO1FBR1osVUFBSyxHQUFvRCxXQUFXLENBQUM7UUFFckUsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDOUIsU0FBSSxHQUFHLFNBQVMsQ0FBQztJQUc5QixDQUFDO3VDQWJZLDhCQUE4QjtJQVl2QyxvREFBVyxHQUFYLGNBQXFCLENBQUM7O0lBUnRCO1FBSEMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQzdCLGNBQWMsRUFBRTtnRUFDSTtJQUdyQjtRQURDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQztpRUFDaUI7SUFQckUsOEJBQThCO1FBWjFDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSw4QkFBOEI7WUFDeEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsZ1ZBQWtEO1lBRWxELFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxnQ0FBOEIsRUFBOUIsQ0FBOEIsQ0FBQztpQkFDaEU7YUFDSjs7U0FDSixDQUFDO09BQ1csOEJBQThCLENBYTFDO0lBQUQscUNBQUM7Q0FBQSxBQWJELElBYUM7U0FiWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWSwgdHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlNb2RlRGlyZWN0aXZlLCBUdWlTaXplTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlCcmVhZGNydW1iRGlyZWN0aXZlfSBmcm9tICcuL2JyZWFkY3J1bWIuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktYnJlYWRjcnVtYnM6bm90KFtpdGVtc10pJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYnJlYWRjcnVtYnMtd3JhcHBlci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9icmVhZGNydW1icy13cmFwcGVyLnN0eWxlLmxlc3MnXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVHVpTW9kZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUJyZWFkY3J1bWJzV3JhcHBlckNvbXBvbmVudCksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQnJlYWRjcnVtYnNXcmFwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgVHVpTW9kZURpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gJ20nO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihUdWlCcmVhZGNydW1iRGlyZWN0aXZlLCB7cmVhZDogVGVtcGxhdGVSZWZ9KVxuICAgIHJlYWRvbmx5IGl0ZW1zOiBRdWVyeUxpc3Q8VGVtcGxhdGVSZWY8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+PiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgcmVhZG9ubHkgY2hhbmdlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gICAgcmVhZG9ubHkgbW9kZSA9ICdvbkxpZ2h0JztcblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge31cbn1cbiJdfQ==