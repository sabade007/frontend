import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, HostListener, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, CHAR_PLUS, setNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TUI_MASK_SYMBOLS_REGEXP, TUI_NON_DIGITS_REGEXP, TuiFlagPipe, TuiPrimitiveTextfieldComponent, TuiSizeL, TuiSizeM, TuiSizeS, } from '@taiga-ui/core';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_ARROW } from '@taiga-ui/kit/components/arrow';
import { TuiInputPhoneComponent } from '@taiga-ui/kit/components/input-phone';
import { TuiToCountryCodePipe } from '@taiga-ui/kit/pipes';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_COUNTRIES, TUI_COUNTRIES_MASKS } from '@taiga-ui/kit/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode } from '@taiga-ui/kit/utils';
import { Observable } from 'rxjs';
import { TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, } from './input-phone-international.options';
import { tuiExtractValueFromEvent } from './utils/extract-value-from-event';
// @dynamic
var TuiInputPhoneInternationalComponent = /** @class */ (function (_super) {
    __extends(TuiInputPhoneInternationalComponent, _super);
    function TuiInputPhoneInternationalComponent(control, changeDetectorRef, countriesNames$, countriesMasks, options, flagPipe, extractCountryCodePipe) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.countriesNames$ = countriesNames$;
        _this.countriesMasks = countriesMasks;
        _this.options = options;
        _this.flagPipe = flagPipe;
        _this.extractCountryCodePipe = extractCountryCodePipe;
        _this.countries = _this.options.countries;
        _this.countryIsoCodeChange = new EventEmitter();
        _this.countryIsoCode = _this.options.countryIsoCode;
        _this.open = false;
        _this.arrow = TUI_ARROW;
        _this.isoToCountryCodeMapper = function (item) {
            return tuiIsoToCountryCode(_this.countriesMasks, item);
        };
        return _this;
    }
    TuiInputPhoneInternationalComponent_1 = TuiInputPhoneInternationalComponent;
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "isoCode", {
        set: function (code) {
            var _a;
            (_a = this.inputPhoneComponent) === null || _a === void 0 ? void 0 : _a.writeValue(this.value);
            this.countryIsoCode = code;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.inputPhoneComponent && !this.computedDisabled
                ? this.inputPhoneComponent.nativeFocusableElement
                : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "focused", {
        get: function () {
            return ((!!this.primitiveTextfield && this.primitiveTextfield.focused) ||
                (!!this.inputPhoneComponent && this.inputPhoneComponent.focused));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "inputPhoneCountryCode", {
        get: function () {
            return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "phoneMaskAfterCountryCode", {
        get: function () {
            var countryCode = this.inputPhoneCountryCode;
            return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneInternationalComponent.prototype, "countryFlagPath", {
        /**
         * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
         * TODO drop in v4.0
         */
        get: function () {
            return this.getFlagPath(this.countryIsoCode);
        },
        enumerable: true,
        configurable: true
    });
    TuiInputPhoneInternationalComponent.prototype.onPaste = function (event) {
        var value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');
        var countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);
        if (!countryIsoCode) {
            this.updateValue(("" + this.inputPhoneCountryCode + value)
                .replace(TUI_MASK_SYMBOLS_REGEXP, '')
                .slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode)));
            return;
        }
        if (countryIsoCode === TuiCountryIsoCode.RU) {
            value = value.replace(/^8/, '7');
        }
        this.updateCountryIsoCode(countryIsoCode);
        this.updateValue("" + CHAR_PLUS + value);
    };
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    TuiInputPhoneInternationalComponent.prototype.getFlagPath = function (code) {
        return this.flagPipe.transform(code);
    };
    TuiInputPhoneInternationalComponent.prototype.onItemClick = function (isoCode) {
        this.open = false;
        this.updateCountryIsoCode(isoCode);
        // recalculates mask inside inputPhone to prevent isoCode conflict
        this.changeDetectorRef.detectChanges();
        var maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);
        if (this.value.length > maxLength) {
            this.updateValue(this.value.slice(0, maxLength));
        }
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement);
        }
    };
    TuiInputPhoneInternationalComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.close();
    };
    /**
     * @deprecated use `{{ countryIsoCode | tuiIsoToCountryCode }}`
     * TODO drop in v4.0
     */
    TuiInputPhoneInternationalComponent.prototype.isoToCountryCode = function (isoCode) {
        return tuiIsoToCountryCode(this.countriesMasks, isoCode);
    };
    TuiInputPhoneInternationalComponent.prototype.onModelChange = function (value) {
        this.updateValue(value);
    };
    TuiInputPhoneInternationalComponent.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
    };
    TuiInputPhoneInternationalComponent.prototype.getFallbackValue = function () {
        return '';
    };
    TuiInputPhoneInternationalComponent.prototype.calculateMaskAfterCountryCode = function (mask, countryCode) {
        return mask.replace(countryCode, '').trim();
    };
    TuiInputPhoneInternationalComponent.prototype.close = function () {
        this.open = false;
    };
    TuiInputPhoneInternationalComponent.prototype.updateCountryIsoCode = function (code) {
        this.countryIsoCode = code;
        this.countryIsoCodeChange.emit(code);
    };
    var TuiInputPhoneInternationalComponent_1;
    TuiInputPhoneInternationalComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_COUNTRIES,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_COUNTRIES_MASKS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS,] }] },
        { type: TuiFlagPipe, decorators: [{ type: Inject, args: [TuiFlagPipe,] }] },
        { type: TuiToCountryCodePipe, decorators: [{ type: Inject, args: [TuiToCountryCodePipe,] }] }
    ]; };
    __decorate([
        ViewChild(TuiInputPhoneComponent)
    ], TuiInputPhoneInternationalComponent.prototype, "inputPhoneComponent", void 0);
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputPhoneInternationalComponent.prototype, "primitiveTextfield", void 0);
    __decorate([
        Input('countryIsoCode'),
        tuiDefaultProp()
    ], TuiInputPhoneInternationalComponent.prototype, "isoCode", null);
    __decorate([
        Input()
    ], TuiInputPhoneInternationalComponent.prototype, "countries", void 0);
    __decorate([
        Output()
    ], TuiInputPhoneInternationalComponent.prototype, "countryIsoCodeChange", void 0);
    __decorate([
        HostListener('paste.capture.prevent.stop', ['$event']),
        HostListener('drop.capture.prevent.stop', ['$event'])
    ], TuiInputPhoneInternationalComponent.prototype, "onPaste", null);
    __decorate([
        tuiPure
    ], TuiInputPhoneInternationalComponent.prototype, "calculateMaskAfterCountryCode", null);
    TuiInputPhoneInternationalComponent = TuiInputPhoneInternationalComponent_1 = __decorate([
        Component({
            selector: 'tui-input-phone-international',
            template: "<tui-hosted-dropdown\n    *ngIf=\"countriesNames$ | async as countriesNames\"\n    class=\"t-hosted-dropdown\"\n    [content]=\"dropdown\"\n    [canOpen]=\"!readOnly\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <div tuiGroup>\n        <tui-primitive-textfield\n            tuiHostedDropdownHost\n            class=\"t-country-select tui-group__auto-width-item\"\n            [tuiTextfieldCustomContent]=\"countryValueContent\"\n            [tuiTextfieldLabelOutside]=\"true\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [editable]=\"false\"\n            [iconContent]=\"arrow\"\n            [pseudoFocused]=\"open || null\"\n            [readOnly]=\"readOnly\"\n            [tuiHintContent]=\"null\"\n        ></tui-primitive-textfield>\n        <tui-input-phone\n            tuiTextfieldAutocomplete=\"off\"\n            class=\"t-input-phone tui-group__auto-width-item\"\n            [ngModel]=\"value\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [countryCode]=\"inputPhoneCountryCode\"\n            [phoneMaskAfterCountryCode]=\"phoneMaskAfterCountryCode\"\n            [readOnly]=\"readOnly\"\n            [pseudoInvalid]=\"computedInvalid\"\n            [pseudoFocused]=\"pseudoFocused\"\n            [pseudoHovered]=\"pseudoHovered\"\n            (ngModelChange)=\"onModelChange($event)\"\n        >\n            <ng-content></ng-content>\n        </tui-input-phone>\n    </div>\n\n    <ng-template #dropdown>\n        <tui-data-list>\n            <button\n                *ngFor=\"let isoCode of countries\"\n                tuiOption\n                (click)=\"onItemClick(isoCode)\"\n            >\n                <img\n                    alt=\"\"\n                    class=\"t-country-item-flag\"\n                    [src]=\"getFlagPath(isoCode)\"\n                />\n                <span class=\"t-country-item-name\">\n                    {{ countriesNames[isoCode] }}\n                </span>\n                <span class=\"t-country-item-code\">\n                    {{ isoCode | tuiMapper: isoToCountryCodeMapper }}\n                </span>\n            </button>\n        </tui-data-list>\n    </ng-template>\n\n    <ng-template #countryValueContent>\n        <img\n            class=\"t-flag\"\n            [alt]=\"countriesNames[countryIsoCode]\"\n            [src]=\"countryFlagPath\"\n        />\n    </ng-template>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputPhoneInternationalComponent_1; }),
                },
                FIXED_DROPDOWN_CONTROLLER_PROVIDER,
                // TODO: for backward compatibility only. Drop in v4.0
                TuiFlagPipe,
                TuiToCountryCodePipe,
            ],
            styles: [":host{display:block}:host._disabled{pointer-events:none}.t-hosted-dropdown{display:block}.t-country-select{width:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-arrow-icon{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;color:var(--tui-text-03);position:relative;box-sizing:border-box;cursor:pointer;transition-property:color,transform}.t-arrow-icon:hover{color:var(--tui-text-02)}:host._disabled .t-arrow-icon,:host._readonly .t-arrow-icon{pointer-events:none}:host[data-mode=onDark] .t-arrow-icon{color:var(--tui-text-03-night)}:host[data-mode=onDark] .t-arrow-icon:hover{color:var(--tui-text-01-night)}.t-arrow-icon_open{transform:rotate(180deg)}.t-input-phone{flex:1}.t-flag{width:1.75rem;height:1.25rem;margin-left:-.5rem}.t-country-item-flag{width:1.75rem;height:1.25rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-02);margin-right:.25rem}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_COUNTRIES)),
        __param(3, Inject(TUI_COUNTRIES_MASKS)),
        __param(4, Inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS)),
        __param(5, Inject(TuiFlagPipe)),
        __param(6, Inject(TuiToCountryCodePipe))
    ], TuiInputPhoneInternationalComponent);
    return TuiInputPhoneInternationalComponent;
}(AbstractTuiControl));
export { TuiInputPhoneInternationalComponent };
//# sourceMappingURL=data:application/json;base64,