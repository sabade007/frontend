import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, clamp, DATE_FILLER_LENGTH, nullableSame, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, tuiDefaultProp, TuiMonth, tuiPure, TuiTime, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { DATE_TIME_SEPARATOR } from '@taiga-ui/kit/constants';
import { TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_TIME_TEXTS, } from '@taiga-ui/kit/tokens';
import { tuiCreateAutoCorrectedDateTimePipe, tuiCreateDateMask, tuiCreateTimeMask, } from '@taiga-ui/kit/utils/mask';
import { combineLatest, Observable } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import { TUI_INPUT_DATE_TIME_PROVIDERS } from './input-date-time.providers';
// @dynamic
var TuiInputDateTimeComponent = /** @class */ (function (_super) {
    __extends(TuiInputDateTimeComponent, _super);
    function TuiInputDateTimeComponent(control, changeDetectorRef, textfieldSize, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer) {
        var _this = _super.call(this, control, changeDetectorRef, valueTransformer) || this;
        _this.textfieldSize = textfieldSize;
        _this.dateFormat = dateFormat;
        _this.dateSeparator = dateSeparator;
        _this.timeTexts$ = timeTexts$;
        _this.dateTexts$ = dateTexts$;
        _this.valueTransformer = valueTransformer;
        _this.month = null;
        _this.min = TUI_FIRST_DAY;
        _this.max = TUI_LAST_DAY;
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.defaultActiveYearMonth = TuiMonth.currentLocal();
        _this.timeMode = 'HH:MM';
        _this.open = false;
        _this.filler$ = combineLatest([
            _this.dateTexts$.pipe(map(function (dateTexts) {
                return changeDateSeparator(dateTexts[_this.dateFormat], _this.dateSeparator);
            })),
            _this.timeTexts$.pipe(pluck(_this.timeMode)),
        ]).pipe(map(function (fillers) { return _this.getDateTimeString.apply(_this, __spread(fillers)); }));
        return _this;
    }
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "fillerLength", {
        get: function () {
            return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "textMaskOptions", {
        get: function () {
            return this.calculateMask(this.value[0], this.calendarMinDay, this.calendarMaxDay, this.timeMode, this.dateFormat, this.dateSeparator);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.textfield ? this.textfield.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "calendarIcon", {
        get: function () {
            return sizeBigger(this.textfieldSize.size)
                ? 'tuiIconCalendarLarge'
                : 'tuiIconCalendar';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "computedValue", {
        get: function () {
            var _a = this, value = _a.value, nativeValue = _a.nativeValue, timeMode = _a.timeMode;
            var _b = __read(value, 2), date = _b[0], time = _b[1];
            var hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;
            if (!date || (!time && hasTimeInputChars)) {
                return nativeValue;
            }
            return this.getDateTimeString(date, time, timeMode);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "calendarValue", {
        get: function () {
            return this.value[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "calendarMinDay", {
        get: function () {
            return Array.isArray(this.min) ? this.min[0] : this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "calendarMaxDay", {
        get: function () {
            return Array.isArray(this.max) ? this.max[0] : this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "computedActiveYearMonth", {
        get: function () {
            return this.month || this.value[0] || this.defaultActiveYearMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputDateTimeComponent.prototype, "nativeValue", {
        get: function () {
            return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
        },
        set: function (value) {
            if (!this.nativeFocusableElement) {
                return;
            }
            this.nativeFocusableElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputDateTimeComponent.prototype.onClick = function () {
        this.open = !this.open;
    };
    TuiInputDateTimeComponent.prototype.onValueChange = function (value) {
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length < DATE_FILLER_LENGTH) {
            this.updateValue([null, null]);
            return;
        }
        var _a = __read(value.split(DATE_TIME_SEPARATOR), 2), date = _a[0], time = _a[1];
        var parsedDate = TuiDay.normalizeParse(date, this.dateFormat);
        var parsedTime = time && time.length === this.timeMode.length
            ? this.clampTime(TuiTime.fromString(time), parsedDate)
            : null;
        this.open = false;
        this.updateValue([parsedDate, parsedTime]);
    };
    TuiInputDateTimeComponent.prototype.onDayClick = function (day) {
        var modifiedTime = this.value[1] && this.clampTime(this.value[1], day);
        this.updateValue([day, modifiedTime]);
        this.updateNativeValue(day);
        this.open = false;
    };
    TuiInputDateTimeComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputDateTimeComponent.prototype.onMonthChange = function (month) {
        this.month = month;
    };
    TuiInputDateTimeComponent.prototype.onOpenChange = function (open) {
        this.open = open;
    };
    TuiInputDateTimeComponent.prototype.onFocused = function (focused) {
        var _this = this;
        this.updateFocused(focused);
        if (focused ||
            this.value[0] === null ||
            this.value[1] !== null ||
            this.nativeValue.length <= this.fillerLength + DATE_TIME_SEPARATOR.length ||
            this.timeMode === 'HH:MM') {
            return;
        }
        var _a = __read(this.nativeValue.split(DATE_TIME_SEPARATOR), 2), time = _a[1];
        if (!time) {
            return;
        }
        var parsedTime = TuiTime.fromString(time);
        this.updateValue([this.value[0], parsedTime]);
        setTimeout(function () {
            if (_this.nativeValue.endsWith('.') || _this.nativeValue.endsWith(':')) {
                _this.nativeValue = _this.nativeValue.slice(0, -1);
            }
        });
    };
    TuiInputDateTimeComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.open = false;
    };
    TuiInputDateTimeComponent.prototype.writeValue = function (value) {
        _super.prototype.writeValue.call(this, value);
        this.nativeValue =
            this.value && (this.value[0] || this.value[1]) ? this.computedValue : '';
    };
    TuiInputDateTimeComponent.prototype.getFallbackValue = function () {
        return [null, null];
    };
    TuiInputDateTimeComponent.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return (nullableSame(oldValue[0], newValue[0], function (a, b) { return a.daySame(b); }) &&
            nullableSame(oldValue[1], newValue[1], function (a, b) { return String(a) === String(b); }));
    };
    TuiInputDateTimeComponent.prototype.calculateMask = function (day, min, max, timeMode, dateFormat, dateSeparator) {
        return {
            mask: __spread(tuiCreateDateMask(dateFormat, dateSeparator), [
                ',',
                ' '
            ], tuiCreateTimeMask(timeMode)),
            pipe: tuiCreateAutoCorrectedDateTimePipe({
                value: day,
                min: min,
                max: max,
                dateFormat: dateFormat,
                dateSeparator: dateSeparator,
                timeMode: timeMode,
            }),
            guide: false,
        };
    };
    TuiInputDateTimeComponent.prototype.getDateTimeString = function (date, time, timeMode) {
        if (timeMode === void 0) { timeMode = 'HH:MM'; }
        var dateString = date instanceof TuiDay
            ? date.toString(this.dateFormat, this.dateSeparator)
            : date;
        var timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';
        return "" + dateString + DATE_TIME_SEPARATOR + timeString;
    };
    TuiInputDateTimeComponent.prototype.updateNativeValue = function (day) {
        var time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || '';
        this.nativeValue = this.getDateTimeString(day, time);
    };
    TuiInputDateTimeComponent.prototype.clampTime = function (time, day) {
        var ms = time.toAbsoluteMilliseconds();
        var min = Array.isArray(this.min) && day.daySame(this.calendarMinDay)
            ? this.min[1].toAbsoluteMilliseconds()
            : -Infinity;
        var max = Array.isArray(this.max) && day.daySame(this.calendarMaxDay)
            ? this.max[1].toAbsoluteMilliseconds()
            : Infinity;
        return TuiTime.fromAbsoluteMilliseconds(clamp(ms, min, max));
    };
    TuiInputDateTimeComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DATE_FORMAT,] }] },
        { type: String, decorators: [{ type: Inject, args: [TUI_DATE_SEPARATOR,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_TIME_TEXTS,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DATE_TEXTS,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATE_TIME_VALUE_TRANSFORMER,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputDateTimeComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateTimeComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateTimeComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateTimeComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateTimeComponent.prototype, "defaultActiveYearMonth", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputDateTimeComponent.prototype, "timeMode", void 0);
    __decorate([
        HostListener('click')
    ], TuiInputDateTimeComponent.prototype, "onClick", null);
    __decorate([
        tuiPure
    ], TuiInputDateTimeComponent.prototype, "calculateMask", null);
    __decorate([
        tuiPure
    ], TuiInputDateTimeComponent.prototype, "getDateTimeString", null);
    TuiInputDateTimeComponent = __decorate([
        Component({
            selector: 'tui-input-date-time',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input-date-time__textfield\"\n        tuiValueAccessor\n        tuiTextfieldInputMode=\"numeric\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [filler]=\"(filler$ | async) || ''\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"iconContent\"\n        [disabled]=\"computedDisabled\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"calendarIcon\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            tuiPreventDefault=\"mousedown\"\n            automation-id=\"tui-input-date-time__calendar\"\n            [min]=\"calendarMinDay\"\n            [max]=\"calendarMaxDay\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"calendarValue\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n        ></tui-calendar>\n    </ng-template>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TUI_INPUT_DATE_TIME_PROVIDERS,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_TEXTFIELD_SIZE)),
        __param(3, Inject(TUI_DATE_FORMAT)),
        __param(4, Inject(TUI_DATE_SEPARATOR)),
        __param(5, Inject(TUI_TIME_TEXTS)),
        __param(6, Inject(TUI_DATE_TEXTS)),
        __param(7, Optional()),
        __param(7, Inject(TUI_DATE_TIME_VALUE_TRANSFORMER))
    ], TuiInputDateTimeComponent);
    return TuiInputDateTimeComponent;
}(AbstractTuiControl));
export { TuiInputDateTimeComponent };
//# sourceMappingURL=data:application/json;base64,