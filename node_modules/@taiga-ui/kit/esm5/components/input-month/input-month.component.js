import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, tuiDefaultProp, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiTextfieldSizeDirective, TuiWithOptionalMinMax, } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { TUI_INPUT_MONTH_PROVIDERS } from './input-month.providers';
// @dynamic
var TuiInputMonthComponent = /** @class */ (function (_super) {
    __extends(TuiInputMonthComponent, _super);
    function TuiInputMonthComponent(control, changeDetectorRef, textfieldSize, formatter) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.textfieldSize = textfieldSize;
        _this.formatter = formatter;
        _this.min = TUI_FIRST_DAY;
        _this.max = TUI_LAST_DAY;
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.open = false;
        _this.activeYear = _this.value || TuiDay.currentLocal();
        return _this;
    }
    Object.defineProperty(TuiInputMonthComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.textfield ? this.textfield.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthComponent.prototype, "calendarIcon", {
        get: function () {
            return sizeBigger(this.textfieldSize.size)
                ? 'tuiIconCalendarLarge'
                : 'tuiIconCalendar';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputMonthComponent.prototype.onValueChange = function (value) {
        if (value) {
            return;
        }
        this.updateValue(null);
        this.onOpenChange(true);
    };
    TuiInputMonthComponent.prototype.onMonthClick = function (month) {
        this.updateValue(month);
        this.close();
    };
    TuiInputMonthComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputMonthComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiInputMonthComponent.prototype.onOpenChange = function (open) {
        if (open && this.value) {
            this.activeYear = this.value;
        }
        this.open = open;
    };
    TuiInputMonthComponent.prototype.toggle = function () {
        this.open = !this.open;
    };
    TuiInputMonthComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.close();
    };
    TuiInputMonthComponent.prototype.close = function () {
        this.open = false;
    };
    TuiInputMonthComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputMonthComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthComponent.prototype, "disabledItemHandler", void 0);
    TuiInputMonthComponent = __decorate([
        Component({
            selector: 'tui-input-month',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"calendarIcon\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"(value | tuiMapper: formatter | async) || ''\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            [(year)]=\"activeYear\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n",
            providers: TUI_INPUT_MONTH_PROVIDERS,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_TEXTFIELD_SIZE)),
        __param(3, Inject(TUI_MONTH_FORMATTER))
    ], TuiInputMonthComponent);
    return TuiInputMonthComponent;
}(AbstractTuiNullableControl));
export { TuiInputMonthComponent };
//# sourceMappingURL=data:application/json;base64,