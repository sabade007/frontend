import { __decorate, __extends, __param } from "tslib";
import { Directive, forwardRef, Inject, Self } from '@angular/core';
import { AbstractTuiControl, TuiDestroyService } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { Observable, Subject } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { TuiInputMonthComponent } from './input-month.component';
var TuiInputMonthDirective = /** @class */ (function (_super) {
    __extends(TuiInputMonthDirective, _super);
    function TuiInputMonthDirective(host, formatter, destroy$) {
        var _this = _super.call(this, host) || this;
        _this.value$ = new Subject();
        _this.localizedValue = '';
        _this.value$
            .pipe(distinctUntilChanged(), switchMap(formatter), takeUntil(destroy$))
            .subscribe(function (localizedValue) {
            _this.localizedValue = localizedValue;
        });
        return _this;
    }
    TuiInputMonthDirective_1 = TuiInputMonthDirective;
    Object.defineProperty(TuiInputMonthDirective.prototype, "readOnly", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthDirective.prototype, "value", {
        get: function () {
            return this.localizedValue;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputMonthDirective.prototype.ngDoCheck = function () {
        this.value$.next(this.host.value);
    };
    TuiInputMonthDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    var TuiInputMonthDirective_1;
    TuiInputMonthDirective.ctorParameters = function () { return [
        { type: TuiInputMonthComponent, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
        { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiInputMonthDirective = TuiInputMonthDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-month',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputMonthDirective_1; }),
                },
                TuiDestroyService,
            ],
        }),
        __param(0, Inject(AbstractTuiControl)),
        __param(1, Inject(TUI_MONTH_FORMATTER)),
        __param(2, Self()), __param(2, Inject(TuiDestroyService))
    ], TuiInputMonthDirective);
    return TuiInputMonthDirective;
}(TuiAbstractTextfieldHost));
export { TuiInputMonthDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2lucHV0LW1vbnRoLyIsInNvdXJjZXMiOlsiaW5wdXQtbW9udGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFXLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFDLGtCQUFrQixFQUFFLHdCQUF3QixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUUsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQVkvRDtJQUNZLDBDQUFnRDtJQU94RCxnQ0FDZ0MsSUFBNEIsRUFFeEQsU0FBMEQsRUFDdkIsUUFBNkI7UUFKcEUsWUFNSSxrQkFBTSxJQUFJLENBQUMsU0FPZDtRQWpCZ0IsWUFBTSxHQUFHLElBQUksT0FBTyxFQUFtQixDQUFDO1FBRWpELG9CQUFjLEdBQUcsRUFBRSxDQUFDO1FBVXhCLEtBQUksQ0FBQyxNQUFNO2FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN2RSxTQUFTLENBQUMsVUFBQSxjQUFjO1lBQ3JCLEtBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDOztJQUNYLENBQUM7K0JBckJRLHNCQUFzQjtJQXVCL0Isc0JBQUksNENBQVE7YUFBWjtZQUNJLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBRUQsc0JBQUkseUNBQUs7YUFBVDtZQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQUVELDBDQUFTLEdBQVQ7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCw4Q0FBYSxHQUFiLFVBQWMsS0FBYTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Z0JBNUJxQyxzQkFBc0IsdUJBQXZELE1BQU0sU0FBQyxrQkFBa0I7Z0RBQ3pCLE1BQU0sU0FBQyxtQkFBbUI7Z0JBRWtCLFVBQVUsdUJBQXRELElBQUksWUFBSSxNQUFNLFNBQUMsaUJBQWlCOztJQVo1QixzQkFBc0I7UUFWbEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsd0JBQXNCLEVBQXRCLENBQXNCLENBQUM7aUJBQ3hEO2dCQUNELGlCQUFpQjthQUNwQjtTQUNKLENBQUM7UUFVTyxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQzFCLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFFM0IsV0FBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0FaN0Isc0JBQXNCLENBc0NsQztJQUFELDZCQUFDO0NBQUEsQUF0Q0QsQ0FDWSx3QkFBd0IsR0FxQ25DO1NBdENZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBEb0NoZWNrLCBmb3J3YXJkUmVmLCBJbmplY3QsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2wsIFR1aURlc3Ryb3lTZXJ2aWNlLCBUdWlIYW5kbGVyLCBUdWlNb250aH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9URVhURklFTERfSE9TVCwgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1RVSV9NT05USF9GT1JNQVRURVJ9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBzd2l0Y2hNYXAsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUlucHV0TW9udGhDb21wb25lbnR9IGZyb20gJy4vaW5wdXQtbW9udGguY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktaW5wdXQtbW9udGgnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVEVYVEZJRUxEX0hPU1QsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlJbnB1dE1vbnRoRGlyZWN0aXZlKSxcbiAgICAgICAgfSxcbiAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSW5wdXRNb250aERpcmVjdGl2ZVxuICAgIGV4dGVuZHMgVHVpQWJzdHJhY3RUZXh0ZmllbGRIb3N0PFR1aUlucHV0TW9udGhDb21wb25lbnQ+XG4gICAgaW1wbGVtZW50cyBEb0NoZWNrXG57XG4gICAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZSQgPSBuZXcgU3ViamVjdDxUdWlNb250aCB8IG51bGw+KCk7XG5cbiAgICBwcml2YXRlIGxvY2FsaXplZFZhbHVlID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChBYnN0cmFjdFR1aUNvbnRyb2wpIGhvc3Q6IFR1aUlucHV0TW9udGhDb21wb25lbnQsXG4gICAgICAgIEBJbmplY3QoVFVJX01PTlRIX0ZPUk1BVFRFUilcbiAgICAgICAgZm9ybWF0dGVyOiBUdWlIYW5kbGVyPFR1aU1vbnRoIHwgbnVsbCwgT2JzZXJ2YWJsZTxzdHJpbmc+PixcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoaG9zdCk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSRcbiAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHN3aXRjaE1hcChmb3JtYXR0ZXIpLCB0YWtlVW50aWwoZGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShsb2NhbGl6ZWRWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGl6ZWRWYWx1ZSA9IGxvY2FsaXplZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHJlYWRPbmx5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxpemVkVmFsdWU7XG4gICAgfVxuXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlJC5uZXh0KHRoaXMuaG9zdC52YWx1ZSk7XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaG9zdC5vblZhbHVlQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG59XG4iXX0=