import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostListener, Inject, Input, ViewChild, } from '@angular/core';
import { AbstractTuiInteractive, isNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiDefaultProp, TuiDestroyService, TuiFocusVisibleService, TuiNativeFocusableElement, } from '@taiga-ui/cdk';
// TODO: 3.0 Refactor to button[tuiAction]
var TuiActionComponent = /** @class */ (function (_super) {
    __extends(TuiActionComponent, _super);
    function TuiActionComponent(focusVisible$, elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.icon = '';
        _this.isLink = _this.elementRef.nativeElement.matches('a');
        _this.disabled = false;
        if (!_this.isLink) {
            return _this;
        }
        focusVisible$.subscribe(function (visible) {
            _this.updateFocusVisible(visible);
        });
        return _this;
    }
    TuiActionComponent_1 = TuiActionComponent;
    Object.defineProperty(TuiActionComponent.prototype, "nativeFocusableElement", {
        get: function () {
            if (this.isLink) {
                return this.elementRef.nativeElement;
            }
            return this.focusableElement ? this.focusableElement.nativeElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiActionComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    TuiActionComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiActionComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiActionComponent.prototype.onFocusVisible = function (focusVisible) {
        this.updateFocusVisible(focusVisible);
    };
    var TuiActionComponent_1;
    TuiActionComponent.ctorParameters = function () { return [
        { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        ViewChild('focusableElement')
    ], TuiActionComponent.prototype, "focusableElement", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiActionComponent.prototype, "icon", void 0);
    __decorate([
        HostListener('focusin', ['true']),
        HostListener('focusout', ['false'])
    ], TuiActionComponent.prototype, "onFocused", null);
    __decorate([
        HostListener('mouseenter', ['true']),
        HostListener('mouseleave', ['false'])
    ], TuiActionComponent.prototype, "onHovered", null);
    TuiActionComponent = TuiActionComponent_1 = __decorate([
        Component({
            selector: 'tui-action, a[tuiAction]',
            template: "<label\n    *ngIf=\"!isLink; else content\"\n    automation-id=\"tui-action__content\"\n    class=\"t-wrapper\"\n>\n    <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n    <button\n        #focusableElement\n        type=\"button\"\n        automation-id=\"tui-action__native\"\n        class=\"t-button\"\n        [id]=\"id\"\n        [tuiDescribedBy]=\"id\"\n        [tuiFocusable]=\"computedFocusable\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    ></button>\n</label>\n<ng-template #content>\n    <div class=\"t-wrapper\">\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n<tui-marker-icon\n    size=\"s\"\n    class=\"t-icon\"\n    [src]=\"icon\"\n></tui-marker-icon>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                TuiDestroyService,
                TuiFocusVisibleService,
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiActionComponent_1; }),
                },
            ],
            styles: [":host{box-shadow:0 .25rem 1.5rem rgba(0,0,0,.12);transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;cursor:pointer;transition-property:transform,box-shadow;will-change:transform,box-shadow;position:relative;display:flex;font:var(--tui-font-text-m);padding:.875rem;color:var(--tui-text-01);text-decoration:none;border:2px solid transparent;border-radius:var(--tui-radius-l);outline:0}:host:hover{box-shadow:0 .75rem 2.25rem rgba(0,0,0,.2);transform:translateY(-.25rem)}:host._focus-visible{border-color:var(--tui-focus)}.t-button{position:absolute;top:0;left:0;width:100%;height:100%;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;cursor:pointer;outline:0}.t-icon{margin-left:1.25rem;color:var(--tui-action-color,var(--tui-link));background-color:var(--tui-action-background,var(--tui-base-02))}.t-wrapper{flex:1}"]
        }),
        __param(0, Inject(TuiFocusVisibleService)),
        __param(1, Inject(ElementRef))
    ], TuiActionComponent);
    return TuiActionComponent;
}(AbstractTuiInteractive));
export { TuiActionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9hY3Rpb24vIiwic291cmNlcyI6WyJhY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLGVBQWUsRUFDZiwyQkFBMkIsRUFDM0IsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIseUJBQXlCLEdBQzVCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLDBDQUEwQztBQWUxQztJQUF3QyxzQ0FBc0I7SUFZMUQsNEJBQ29DLGFBQXFDLEVBQ2hDLFVBQW1DO1FBRjVFLFlBSUksaUJBQU8sU0FTVjtRQVh3QyxnQkFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFSNUUsVUFBSSxHQUFHLEVBQUUsQ0FBQztRQUVELFlBQU0sR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEQsY0FBUSxHQUFHLEtBQUssQ0FBQztRQVF0QixJQUFJLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRTs7U0FFakI7UUFFRCxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUEsT0FBTztZQUMzQixLQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7O0lBQ1AsQ0FBQzsyQkF6QlEsa0JBQWtCO0lBMkIzQixzQkFBSSxzREFBc0I7YUFBMUI7WUFDSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQzthQUN4QztZQUVELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUUsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx1Q0FBTzthQUFYO1lBQ0ksT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDeEQsQ0FBQzs7O09BQUE7SUFJRCxzQ0FBUyxHQUFULFVBQVUsT0FBZ0I7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBSUQsc0NBQVMsR0FBVCxVQUFVLE9BQWdCO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELDJDQUFjLEdBQWQsVUFBZSxZQUFxQjtRQUNoQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O2dCQXhDa0Qsc0JBQXNCLHVCQUFwRSxNQUFNLFNBQUMsc0JBQXNCO2dCQUNtQixVQUFVLHVCQUExRCxNQUFNLFNBQUMsVUFBVTs7SUFadEI7UUFEQyxTQUFTLENBQUMsa0JBQWtCLENBQUM7Z0VBQzRDO0lBSTFFO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO29EQUNQO0lBbUNWO1FBRkMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQzt1REFHbkM7SUFJRDtRQUZDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7dURBR3JDO0lBakRRLGtCQUFrQjtRQWQ5QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMEJBQTBCO1lBQ3BDLDh0QkFBcUM7WUFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFO2dCQUNQLGlCQUFpQjtnQkFDakIsc0JBQXNCO2dCQUN0QjtvQkFDSSxPQUFPLEVBQUUsMkJBQTJCO29CQUNwQyxXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxvQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQztpQkFDcEQ7YUFDSjs7U0FDSixDQUFDO1FBY08sV0FBQSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQTtRQUM5QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQWRkLGtCQUFrQixDQXNEOUI7SUFBRCx5QkFBQztDQUFBLEFBdERELENBQXdDLHNCQUFzQixHQXNEN0Q7U0F0RFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWJzdHJhY3RUdWlJbnRlcmFjdGl2ZSxcbiAgICBpc05hdGl2ZUZvY3VzZWQsXG4gICAgVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbi8vIFRPRE86IDMuMCBSZWZhY3RvciB0byBidXR0b25bdHVpQWN0aW9uXVxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktYWN0aW9uLCBhW3R1aUFjdGlvbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWN0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUixcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aUFjdGlvbkNvbXBvbmVudCksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RUdWlJbnRlcmFjdGl2ZSB7XG4gICAgQFZpZXdDaGlsZCgnZm9jdXNhYmxlRWxlbWVudCcpXG4gICAgcHJpdmF0ZSByZWFkb25seSBmb2N1c2FibGVFbGVtZW50PzogRWxlbWVudFJlZjxUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50PjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpY29uID0gJyc7XG5cbiAgICByZWFkb25seSBpc0xpbmsgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5tYXRjaGVzKCdhJyk7XG5cbiAgICByZWFkb25seSBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpRm9jdXNWaXNpYmxlU2VydmljZSkgZm9jdXNWaXNpYmxlJDogVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmICghdGhpcy5pc0xpbmspIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvY3VzVmlzaWJsZSQuc3Vic2NyaWJlKHZpc2libGUgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVGb2N1c1Zpc2libGUodmlzaWJsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBuYXRpdmVGb2N1c2FibGVFbGVtZW50KCk6IFR1aU5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQgfCBudWxsIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMaW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVFbGVtZW50ID8gdGhpcy5mb2N1c2FibGVFbGVtZW50Lm5hdGl2ZUVsZW1lbnQgOiBudWxsO1xuICAgIH1cblxuICAgIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNOYXRpdmVGb2N1c2VkKHRoaXMubmF0aXZlRm9jdXNhYmxlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZm9jdXNpbicsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgWydmYWxzZSddKVxuICAgIG9uRm9jdXNlZChmb2N1c2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlRm9jdXNlZChmb2N1c2VkKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJywgWyd0cnVlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScsIFsnZmFsc2UnXSlcbiAgICBvbkhvdmVyZWQoaG92ZXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyZWQoaG92ZXJlZCk7XG4gICAgfVxuXG4gICAgb25Gb2N1c1Zpc2libGUoZm9jdXNWaXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlRm9jdXNWaXNpYmxlKGZvY3VzVmlzaWJsZSk7XG4gICAgfVxufVxuIl19