import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, EMPTY_ARRAY, isNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE, } from '@taiga-ui/core';
import { TUI_DIGITAL_INFORMATION_UNITS, TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { formatSize } from '@taiga-ui/kit/utils/files';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
var DEFAULT_MAX_SIZE = 30 * 1000 * 1000; // 30 MB
// @dynamic
var TuiInputFileComponent = /** @class */ (function (_super) {
    __extends(TuiInputFileComponent, _super);
    function TuiInputFileComponent(control, changeDetectorRef, isMobile, inputFileTexts$, mode$, units$) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.isMobile = isMobile;
        _this.inputFileTexts$ = inputFileTexts$;
        _this.mode$ = mode$;
        _this.units$ = units$;
        _this.dataTransfer = null;
        _this.link = '';
        _this.label = '';
        _this.accept = '';
        _this.multiple = false;
        _this.size = 'm';
        _this.showSize = true;
        _this.maxFileSize = DEFAULT_MAX_SIZE;
        _this.loadingFiles = [];
        _this.rejectedFiles = [];
        _this.rejectedFilesChange = new EventEmitter();
        return _this;
    }
    TuiInputFileComponent_1 = TuiInputFileComponent;
    Object.defineProperty(TuiInputFileComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.input ? this.input.nativeElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "computedLink$", {
        get: function () {
            return this.computeLink$(this.fileDragged, this.multiple, this.link);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "computedLabel$", {
        get: function () {
            return this.computeLabel$(this.isMobile, this.fileDragged, this.multiple, this.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "fileDragged", {
        // @bad TODO: 3.0 refactor after IE is dropped
        get: function () {
            return (!!this.dataTransfer &&
                Array.prototype.indexOf.call(this.dataTransfer.types, 'Files') !== -1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "acceptArray", {
        get: function () {
            return this.getAcceptArray(this.accept);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "arrayValue", {
        get: function () {
            return this.getValueArray(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "readyFiles", {
        get: function () {
            return this.getReadyFiles(this.arrayValue, this.loadingFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "computedLoading", {
        get: function () {
            return this.getLoadingFiles(this.arrayValue, this.loadingFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFileComponent.prototype, "hasFiles", {
        get: function () {
            return !!this.rejectedFiles.length || !!this.arrayValue.length;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputFileComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputFileComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiInputFileComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    // TODO: refactor i18n messages
    TuiInputFileComponent.prototype.onFilesSelected = function (input, texts, units) {
        this.processSelectedFiles(input.files, texts, units);
        input.value = '';
    };
    TuiInputFileComponent.prototype.onDropped = function (event, texts, units) {
        this.processSelectedFiles(event.files, texts, units);
    };
    TuiInputFileComponent.prototype.onDragOver = function (dataTransfer) {
        this.dataTransfer = dataTransfer;
    };
    TuiInputFileComponent.prototype.removeFile = function (removedFile) {
        this.updateValue(this.multiple ? this.arrayValue.filter(function (file) { return file !== removedFile; }) : null);
    };
    TuiInputFileComponent.prototype.removeRejectedFile = function (removedFile) {
        this.updateRejectedFiles(this.rejectedFiles.filter(function (file) { return file !== removedFile; }));
    };
    TuiInputFileComponent.prototype.getAppearance = function (mode) {
        return mode === null ? '' : "outline" /* Outline */;
    };
    TuiInputFileComponent.prototype.computeLink$ = function (fileDragged, multiple, link) {
        if (fileDragged) {
            return of('');
        }
        return this.inputFileTexts$.pipe(map(function (texts) {
            return multiple && link === ''
                ? texts.defaultLinkMultiple
                : link || texts.defaultLinkSingle;
        }));
    };
    TuiInputFileComponent.prototype.computeLabel$ = function (isMobile, fileDragged, multiple, label) {
        if (isMobile) {
            return of('');
        }
        if (fileDragged) {
            return this.inputFileTexts$.pipe(map(function (texts) { return (multiple ? texts.dropMultiple : texts.drop); }));
        }
        return this.inputFileTexts$.pipe(map(function (texts) {
            return multiple && label === ''
                ? texts.defaultLabelMultiple
                : label || texts.defaultLabelSingle;
        }));
    };
    TuiInputFileComponent.prototype.getValueArray = function (value) {
        if (!value) {
            return EMPTY_ARRAY;
        }
        return value instanceof Array ? value : [value];
    };
    TuiInputFileComponent.prototype.getReadyFiles = function (value, loading) {
        return value.filter(function (file) { return !loading.includes(file); });
    };
    TuiInputFileComponent.prototype.getLoadingFiles = function (value, loading) {
        return loading.filter(function (file) { return value.includes(file); });
    };
    TuiInputFileComponent.prototype.getAcceptArray = function (accept) {
        return accept
            .toLowerCase()
            .split(',')
            .map(function (format) { return format.trim(); });
    };
    TuiInputFileComponent.prototype.processSelectedFiles = function (files, texts, units) {
        var _this = this;
        // IE11 after selecting a file through the open dialog generates a second event passing an empty FileList.
        if (files === null || files.length === 0) {
            return;
        }
        var newFiles = this.multiple ? Array.from(files) : [files[0]];
        var tooBigFiles = newFiles.filter(function (file) { return file.size > _this.maxFileSize; });
        var wrongFormatFiles = newFiles.filter(function (file) { return !_this.isFormatAcceptable(file) && !tooBigFiles.includes(file); });
        var acceptedFiles = newFiles.filter(function (file) { return !tooBigFiles.includes(file) && !wrongFormatFiles.includes(file); });
        this.updateRejectedFiles(__spread(tooBigFiles.map(function (file) { return ({
            name: file.name,
            type: file.type,
            size: file.size,
            content: texts.maxSizeRejectionReason + formatSize(units, _this.maxFileSize),
        }); }), wrongFormatFiles.map(function (file) { return ({
            name: file.name,
            type: file.type,
            size: file.size,
            content: texts.formatRejectionReason,
        }); })));
        this.updateValue(this.multiple
            ? __spread(this.arrayValue, acceptedFiles) : acceptedFiles[0] || null);
    };
    TuiInputFileComponent.prototype.isFormatAcceptable = function (file) {
        if (!this.accept) {
            return true;
        }
        var extension = "." + (file.name.split('.').pop() || '').toLowerCase();
        return this.acceptArray.some(function (format) {
            return format === extension ||
                format === file.type ||
                (format.split('/')[1] === '*' &&
                    file.type.split('/')[0] === format.split('/')[0]);
        });
    };
    TuiInputFileComponent.prototype.updateRejectedFiles = function (rejectedFiles) {
        this.rejectedFiles = rejectedFiles;
        this.rejectedFilesChange.emit(rejectedFiles);
    };
    var TuiInputFileComponent_1;
    TuiInputFileComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DIGITAL_INFORMATION_UNITS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "link", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "accept", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "multiple", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "showSize", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "maxFileSize", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "loadingFiles", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFileComponent.prototype, "rejectedFiles", void 0);
    __decorate([
        Output()
    ], TuiInputFileComponent.prototype, "rejectedFilesChange", void 0);
    __decorate([
        ViewChild('input')
    ], TuiInputFileComponent.prototype, "input", void 0);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "computeLink$", null);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "computeLabel$", null);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "getValueArray", null);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "getReadyFiles", null);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "getLoadingFiles", null);
    __decorate([
        tuiPure
    ], TuiInputFileComponent.prototype, "getAcceptArray", null);
    TuiInputFileComponent = TuiInputFileComponent_1 = __decorate([
        Component({
            selector: 'tui-input-file',
            template: "<tui-wrapper\n    *ngIf=\"multiple || !value\"\n    class=\"t-wrapper\"\n    [class.t-wrapper_mobile]=\"isMobile\"\n    [class.t-wrapper_has-files]=\"hasFiles\"\n    [appearance]=\"getAppearance(mode$ | async)\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered || fileDragged\"\n    [pressed]=\"computedPressed\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n>\n    <label\n        *ngIf=\"units$ | async as units\"\n        automation-id=\"tui-input-file__label\"\n    >\n        <a tuiLink>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLink$ | async\"\n            ></span>\n        </a>\n        <ng-container *ngIf=\"computedLabel$ | async as computedLabel\">\n            <span>&nbsp;</span>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLabel\"\n            ></span>\n        </ng-container>\n        <ng-container *ngIf=\"!readOnly && !computedDisabled\">\n            <input\n                *ngIf=\"inputFileTexts$ | async as texts\"\n                #input\n                type=\"file\"\n                tuiPreventDefault=\"mousedown\"\n                class=\"t-native\"\n                [id]=\"id\"\n                [accept]=\"accept\"\n                [multiple]=\"multiple\"\n                [tuiFocusable]=\"focusable\"\n                (change)=\"onFilesSelected(input, texts, units)\"\n                (tuiHoveredChange)=\"onHovered($event)\"\n                (tuiFocusedChange)=\"onFocused($event)\"\n                (tuiPressedChange)=\"onPressed($event)\"\n                (tuiDroppableDropped)=\"onDropped($event, texts, units)\"\n                (tuiDroppableDragOverChange)=\"onDragOver($event)\"\n            />\n        </ng-container>\n    </label>\n</tui-wrapper>\n\n<section\n    *tuiLet=\"mode$ | async as mode\"\n    tuiGroup\n    orientation=\"vertical\"\n    class=\"t-files\"\n    [collapsed]=\"true\"\n>\n    <tui-file\n        *ngFor=\"let file of rejectedFiles\"\n        automation-id=\"tui-input-file__error\"\n        state=\"error\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"interactive\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeRejectedFile(file)\"\n    ></tui-file>\n    <tui-file\n        *ngFor=\"let file of computedLoading\"\n        automation-id=\"tui-input-file__loading\"\n        state=\"loading\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"interactive\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeFile(file)\"\n    ></tui-file>\n    <tui-file\n        *ngFor=\"let file of readyFiles\"\n        automation-id=\"tui-input-file__file\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"interactive\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeFile(file)\"\n    ></tui-file>\n</section>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                MODE_PROVIDER,
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputFileComponent_1; }),
                },
            ],
            styles: [":host{display:block;font:var(--tui-font-text-m);word-wrap:break-word;color:var(--tui-text-02)}.t-native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native::-webkit-file-upload-button{display:none}.t-inline{display:inline}.t-wrapper{display:flex;flex:1;justify-content:center;align-items:center;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);padding:1rem .5rem;box-sizing:border-box}.t-wrapper:after{border:1px dashed;color:var(--tui-link)}.t-wrapper_mobile:after{border-style:solid}.t-wrapper_has-files{margin-bottom:.5rem}.t-wrapper[data-state=hovered]{background:var(--tui-secondary)}.t-wrapper[data-state=hovered]:after{color:var(--tui-link-hover)}.t-wrapper[data-state=pressed]{background:var(--tui-secondary-hover)}.t-wrapper[data-state=readonly]{pointer-events:none}.t-wrapper[data-state=readonly]:after{color:var(--tui-text-03)}.t-wrapper[data-state=disabled]{opacity:var(--tui-disabled-opacity);pointer-events:none}.t-wrapper[data-state=disabled]:after{color:var(--tui-text-03)}.t-wrapper._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}.t-files{display:flex}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_IS_MOBILE)),
        __param(3, Inject(TUI_INPUT_FILE_TEXTS)),
        __param(4, Inject(TUI_MODE)),
        __param(5, Inject(TUI_DIGITAL_INFORMATION_UNITS))
    ], TuiInputFileComponent);
    return TuiInputFileComponent;
}(AbstractTuiNullableControl));
export { TuiInputFileComponent };
//# sourceMappingURL=data:application/json;base64,