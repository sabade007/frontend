import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, ALWAYS_FALSE_HANDLER, isNativeFocusedIn, TUI_DEFAULT_IDENTITY_MATCHER, TUI_DEFAULT_STRINGIFY, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
// @bad TODO: Add active zone to track focus
var TuiFilterComponent = /** @class */ (function (_super) {
    __extends(TuiFilterComponent, _super);
    function TuiFilterComponent(control, changeDetectorRef, elementRef) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.elementRef = elementRef;
        _this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        _this.items = [];
        _this.size = 'm';
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.toggledItem = new EventEmitter();
        _this.content = function (_a) {
            var $implicit = _a.$implicit;
            return TUI_DEFAULT_STRINGIFY($implicit);
        };
        _this.badgeHandler = function (item) { return Number(item); };
        return _this;
    }
    Object.defineProperty(TuiFilterComponent.prototype, "focused", {
        get: function () {
            return isNativeFocusedIn(this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    TuiFilterComponent.prototype.getItemContentContext = function ($implicit) {
        return {
            $implicit: $implicit,
        };
    };
    TuiFilterComponent.prototype.onCheckbox = function (value, item) {
        var _this = this;
        this.toggledItem.emit(item);
        this.updateValue(value
            ? __spread(this.value, [item]) : this.value.filter(function (arrItem) { return !_this.identityMatcher(arrItem, item); }));
    };
    TuiFilterComponent.prototype.isCheckboxEnabled = function (item) {
        var _this = this;
        return this.value.some(function (arrItem) { return _this.identityMatcher(arrItem, item); });
    };
    TuiFilterComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "identityMatcher", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Output()
    ], TuiFilterComponent.prototype, "toggledItem", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "content", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiFilterComponent.prototype, "badgeHandler", void 0);
    __decorate([
        tuiPure
    ], TuiFilterComponent.prototype, "getItemContentContext", null);
    TuiFilterComponent = __decorate([
        Component({
            selector: 'tui-filter',
            template: "<ng-container *ngFor=\"let item of items\">\n    <tui-checkbox-block\n        automation-id=\"tui-filter__checkbox\"\n        class=\"t-item\"\n        [disabled]=\"disabledItemHandler(item)\"\n        [hideCheckbox]=\"true\"\n        [ngModel]=\"isCheckboxEnabled(item)\"\n        [size]=\"size\"\n        (ngModelChange)=\"onCheckbox($event, item)\"\n    >\n        <div\n            automation-id=\"tui-filter__content\"\n            class=\"t-content\"\n        >\n            <div\n                polymorpheus-outlet\n                [content]=\"content\"\n                [context]=\"getItemContentContext(item)\"\n            ></div>\n            <tui-badge\n                *ngIf=\"badgeHandler(item) as badgeValue\"\n                automation-id=\"tui-filter__badge\"\n                tuiMode=\"onLight\"\n                class=\"t-badge\"\n                [class.t-badge_disabled]=\"disabledItemHandler(item)\"\n                [size]=\"size\"\n                [value]=\"badgeValue\"\n            ></tui-badge>\n        </div>\n    </tui-checkbox-block>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;margin-bottom:-.25rem}.t-content{display:flex;align-items:center}.t-item{margin-right:.25rem;margin-bottom:.25rem}.t-item:last-child,:host[data-size='l'] .t-item:last-child{margin-right:0}:host[data-size='l'] .t-item{margin-right:.5rem;margin-bottom:.5rem}.t-badge{margin-left:.25rem}.t-badge_disabled{opacity:var(--tui-disabled-opacity)}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(ElementRef))
    ], TuiFilterComponent);
    return TuiFilterComponent;
}(AbstractTuiMultipleControl));
export { TuiFilterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9maWx0ZXIvIiwic291cmNlcyI6WyJmaWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsaUJBQWlCLEVBQ2pCLDRCQUE0QixFQUM1QixxQkFBcUIsRUFHckIsY0FBYyxFQUdkLE9BQU8sR0FDVixNQUFNLGVBQWUsQ0FBQztBQUl2Qiw0Q0FBNEM7QUFPNUM7SUFBMkMsc0NBQTZCO0lBcUJwRSw0QkFJSSxPQUF5QixFQUNFLGlCQUFvQyxFQUMxQixVQUFtQztRQU41RSxZQVFJLGtCQUFNLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxTQUNwQztRQUh3QyxnQkFBVSxHQUFWLFVBQVUsQ0FBeUI7UUF4QjVFLHFCQUFlLEdBQTBCLDRCQUE0QixDQUFDO1FBSXRFLFdBQUssR0FBaUIsRUFBRSxDQUFDO1FBS3pCLFVBQUksR0FBd0IsR0FBRyxDQUFDO1FBSWhDLHlCQUFtQixHQUF5QixvQkFBb0IsQ0FBQztRQUd4RCxpQkFBVyxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFlN0MsYUFBTyxHQUE2QixVQUFDLEVBQTRDO2dCQUEzQyx3QkFBUztZQUMzQyxPQUFBLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztRQUFoQyxDQUFnQyxDQUFDO1FBSXJDLGtCQUFZLEdBQTBCLFVBQUEsSUFBSSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFaLENBQVksQ0FBQzs7SUFUM0QsQ0FBQztJQVdELHNCQUFJLHVDQUFPO2FBQVg7WUFDSSxPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUQsQ0FBQzs7O09BQUE7SUFHRCxrREFBcUIsR0FBckIsVUFBc0IsU0FBWTtRQUM5QixPQUFPO1lBQ0gsU0FBUyxXQUFBO1NBQ1osQ0FBQztJQUNOLENBQUM7SUFFRCx1Q0FBVSxHQUFWLFVBQVcsS0FBYyxFQUFFLElBQU87UUFBbEMsaUJBT0M7UUFORyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxDQUNaLEtBQUs7WUFDRCxDQUFDLFVBQUssSUFBSSxDQUFDLEtBQUssR0FBRSxJQUFJLEdBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FDM0UsQ0FBQztJQUNOLENBQUM7SUFFRCw4Q0FBaUIsR0FBakIsVUFBa0IsSUFBTztRQUF6QixpQkFFQztRQURHLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxLQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7O2dCQXRDWSxTQUFTLHVCQUhqQixRQUFRLFlBQ1IsSUFBSSxZQUNKLE1BQU0sU0FBQyxTQUFTO2dCQUU2QixpQkFBaUIsdUJBQTlELE1BQU0sU0FBQyxpQkFBaUI7Z0JBQ3dCLFVBQVUsdUJBQTFELE1BQU0sU0FBQyxVQUFVOztJQXhCdEI7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7K0RBQ3FEO0lBSXRFO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO3FEQUNRO0lBS3pCO1FBSEMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQzdCLGNBQWMsRUFBRTtvREFDZTtJQUloQztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTttRUFDZ0Q7SUFHakU7UUFEQyxNQUFNLEVBQUU7MkRBQ29DO0lBZTdDO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO3VEQUVvQjtJQUlyQztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTs0REFDMEM7SUFPM0Q7UUFEQyxPQUFPO21FQUtQO0lBbERRLGtCQUFrQjtRQU45QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsWUFBWTtZQUN0Qix3a0NBQXFDO1lBRXJDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNsRCxDQUFDO1FBdUJPLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDVixXQUFBLElBQUksRUFBRSxDQUFBO1FBQ04sV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFakIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQTNCZCxrQkFBa0IsQ0FnRTlCO0lBQUQseUJBQUM7Q0FBQSxBQWhFRCxDQUEyQywwQkFBMEIsR0FnRXBFO1NBaEVZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aU11bHRpcGxlQ29udHJvbCxcbiAgICBBTFdBWVNfRkFMU0VfSEFORExFUixcbiAgICBpc05hdGl2ZUZvY3VzZWRJbixcbiAgICBUVUlfREVGQVVMVF9JREVOVElUWV9NQVRDSEVSLFxuICAgIFRVSV9ERUZBVUxUX1NUUklOR0lGWSxcbiAgICBUdWlCb29sZWFuSGFuZGxlcixcbiAgICBUdWlDb250ZXh0V2l0aEltcGxpY2l0LFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aUhhbmRsZXIsXG4gICAgVHVpSWRlbnRpdHlNYXRjaGVyLFxuICAgIHR1aVB1cmUsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplTCwgVHVpU2l6ZVN9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuLy8gQGJhZCBUT0RPOiBBZGQgYWN0aXZlIHpvbmUgdG8gdHJhY2sgZm9jdXNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9maWx0ZXIuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGaWx0ZXJDb21wb25lbnQ8VD4gZXh0ZW5kcyBBYnN0cmFjdFR1aU11bHRpcGxlQ29udHJvbDxUPiB7XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGlkZW50aXR5TWF0Y2hlcjogVHVpSWRlbnRpdHlNYXRjaGVyPFQ+ID0gVFVJX0RFRkFVTFRfSURFTlRJVFlfTUFUQ0hFUjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpdGVtczogcmVhZG9ubHkgVFtdID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgfCBUdWlTaXplUyA9ICdtJztcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlCb29sZWFuSGFuZGxlcjxUPiA9IEFMV0FZU19GQUxTRV9IQU5ETEVSO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdG9nZ2xlZEl0ZW0gPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbClcbiAgICAgICAgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyb2wsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxhbnk+ID0gKHskaW1wbGljaXR9OiBUdWlDb250ZXh0V2l0aEltcGxpY2l0PHVua25vd24+KSA9PlxuICAgICAgICBUVUlfREVGQVVMVF9TVFJJTkdJRlkoJGltcGxpY2l0KTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBiYWRnZUhhbmRsZXI6IFR1aUhhbmRsZXI8VCwgbnVtYmVyPiA9IGl0ZW0gPT4gTnVtYmVyKGl0ZW0pO1xuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc05hdGl2ZUZvY3VzZWRJbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBnZXRJdGVtQ29udGVudENvbnRleHQoJGltcGxpY2l0OiBUKTogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkaW1wbGljaXQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgb25DaGVja2JveCh2YWx1ZTogYm9vbGVhbiwgaXRlbTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRvZ2dsZWRJdGVtLmVtaXQoaXRlbSk7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgID8gWy4uLnRoaXMudmFsdWUsIGl0ZW1dXG4gICAgICAgICAgICAgICAgOiB0aGlzLnZhbHVlLmZpbHRlcihhcnJJdGVtID0+ICF0aGlzLmlkZW50aXR5TWF0Y2hlcihhcnJJdGVtLCBpdGVtKSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaXNDaGVja2JveEVuYWJsZWQoaXRlbTogVCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5zb21lKGFyckl0ZW0gPT4gdGhpcy5pZGVudGl0eU1hdGNoZXIoYXJySXRlbSwgaXRlbSkpO1xuICAgIH1cbn1cbiJdfQ==