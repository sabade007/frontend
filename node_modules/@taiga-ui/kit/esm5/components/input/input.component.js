import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Inject, Input, Optional, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, isNativeFocused, setNativeFocused, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_INPUT_PROVIDERS } from './input.providers';
var TuiInputComponent = /** @class */ (function (_super) {
    __extends(TuiInputComponent, _super);
    function TuiInputComponent(control, changeDetectorRef) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.icon = null;
        _this.iconAlign = 'left';
        _this.datalist = '';
        _this.open = false;
        return _this;
    }
    Object.defineProperty(TuiInputComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.computedDisabled || !this.textfield
                ? null
                : this.textfield.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputComponent.prototype, "focused", {
        get: function () {
            return (isNativeFocused(this.nativeFocusableElement) ||
                (!!this.hostedDropdown && this.hostedDropdown.focused));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputComponent.prototype, "canOpen", {
        get: function () {
            return this.interactive && !!this.datalist;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputComponent.prototype.onValueChange = function (value) {
        this.updateValue(value);
        this.open = true;
    };
    TuiInputComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputComponent.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
    };
    TuiInputComponent.prototype.handleOption = function (item) {
        this.setNativeValue(String(item));
        this.focusInput();
        this.updateValue(String(item));
        this.open = false;
    };
    TuiInputComponent.prototype.getFallbackValue = function () {
        return '';
    };
    TuiInputComponent.prototype.focusInput = function (preventScroll) {
        if (preventScroll === void 0) { preventScroll = false; }
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    };
    TuiInputComponent.prototype.setNativeValue = function (value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    };
    TuiInputComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    __decorate([
        ViewChild(TuiHostedDropdownComponent)
    ], TuiInputComponent.prototype, "hostedDropdown", void 0);
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputComponent.prototype, "iconAlign", void 0);
    __decorate([
        ContentChild(TuiDataListDirective, { read: TemplateRef })
    ], TuiInputComponent.prototype, "datalist", void 0);
    TuiInputComponent = __decorate([
        Component({
            selector: 'tui-input',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input__textfield\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoHovered]=\"computedHovered\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"icon\"\n        [iconAlign]=\"iconAlign\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [value]=\"value\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TUI_INPUT_PROVIDERS,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef))
    ], TuiInputComponent);
    return TuiInputComponent;
}(AbstractTuiControl));
export { TuiInputComponent };
//# sourceMappingURL=data:application/json;base64,