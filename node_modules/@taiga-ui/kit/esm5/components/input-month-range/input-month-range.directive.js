import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { Directive, forwardRef, Inject, Self } from '@angular/core';
import { AbstractTuiControl, TuiDestroyService, } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { combineLatest, Observable, Subject } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { TuiInputMonthRangeComponent } from './input-month-range.component';
var TuiInputMonthRangeDirective = /** @class */ (function (_super) {
    __extends(TuiInputMonthRangeDirective, _super);
    function TuiInputMonthRangeDirective(host, formatter, destroy$) {
        var _this = _super.call(this, host) || this;
        _this.value$ = new Subject();
        _this.localizedValue = ['', ''];
        _this.value$
            .pipe(distinctUntilChanged(), switchMap(function (value) {
            return combineLatest([
                formatter((value === null || value === void 0 ? void 0 : value.from) || null),
                formatter((value === null || value === void 0 ? void 0 : value.to) || null),
            ]);
        }), takeUntil(destroy$))
            .subscribe(function (localizedValue) {
            _this.localizedValue = localizedValue;
        });
        return _this;
    }
    TuiInputMonthRangeDirective_1 = TuiInputMonthRangeDirective;
    Object.defineProperty(TuiInputMonthRangeDirective.prototype, "readOnly", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthRangeDirective.prototype, "value", {
        get: function () {
            var _a;
            return this.localizedValue[0]
                ? (_a = this.host).computeValue.apply(_a, __spread(this.localizedValue)) : '';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputMonthRangeDirective.prototype.ngDoCheck = function () {
        this.value$.next(this.host.value);
    };
    TuiInputMonthRangeDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    var TuiInputMonthRangeDirective_1;
    TuiInputMonthRangeDirective.ctorParameters = function () { return [
        { type: TuiInputMonthRangeComponent, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
        { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-month-range',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputMonthRangeDirective_1; }),
                },
                TuiDestroyService,
            ],
        }),
        __param(0, Inject(AbstractTuiControl)),
        __param(1, Inject(TUI_MONTH_FORMATTER)),
        __param(2, Self()), __param(2, Inject(TuiDestroyService))
    ], TuiInputMonthRangeDirective);
    return TuiInputMonthRangeDirective;
}(TuiAbstractTextfieldHost));
export { TuiInputMonthRangeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL2lucHV0LW1vbnRoLXJhbmdlLyIsInNvdXJjZXMiOlsiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFXLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsaUJBQWlCLEdBSXBCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSx3QkFBd0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTFFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBWTFFO0lBQ1ksK0NBQXFEO0lBTzdELHFDQUNnQyxJQUFpQyxFQUU3RCxTQUEwRCxFQUN2QixRQUE2QjtRQUpwRSxZQU1JLGtCQUFNLElBQUksQ0FBQyxTQWdCZDtRQTFCZ0IsWUFBTSxHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO1FBRXRELG9CQUFjLEdBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBVWhELEtBQUksQ0FBQyxNQUFNO2FBQ04sSUFBSSxDQUNELG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxVQUFDLEtBQTJCO1lBQ2xDLE9BQUEsYUFBYSxDQUFDO2dCQUNWLFNBQVMsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxJQUFJLEtBQUksSUFBSSxDQUFDO2dCQUM5QixTQUFTLENBQUMsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsRUFBRSxLQUFJLElBQUksQ0FBQzthQUMvQixDQUFDO1FBSEYsQ0FHRSxDQUNMLEVBQ0QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjthQUNBLFNBQVMsQ0FBQyxVQUFBLGNBQWM7WUFDckIsS0FBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7O0lBQ1gsQ0FBQztvQ0E5QlEsMkJBQTJCO0lBZ0NwQyxzQkFBSSxpREFBUTthQUFaO1lBQ0ksT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw4Q0FBSzthQUFUOztZQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQyxDQUFBLEtBQUEsSUFBSSxDQUFDLElBQUksQ0FBQSxDQUFDLFlBQVksb0JBQUksSUFBSSxDQUFDLGNBQWMsR0FDL0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNiLENBQUM7OztPQUFBO0lBRUQsK0NBQVMsR0FBVDtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELG1EQUFhLEdBQWIsVUFBYyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7OztnQkF2Q3FDLDJCQUEyQix1QkFBNUQsTUFBTSxTQUFDLGtCQUFrQjtnREFDekIsTUFBTSxTQUFDLG1CQUFtQjtnQkFFa0IsVUFBVSx1QkFBdEQsSUFBSSxZQUFJLE1BQU0sU0FBQyxpQkFBaUI7O0lBWjVCLDJCQUEyQjtRQVZ2QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSw2QkFBMkIsRUFBM0IsQ0FBMkIsQ0FBQztpQkFDN0Q7Z0JBQ0QsaUJBQWlCO2FBQ3BCO1NBQ0osQ0FBQztRQVVPLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDMUIsV0FBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUUzQixXQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtPQVo3QiwyQkFBMkIsQ0FpRHZDO0lBQUQsa0NBQUM7Q0FBQSxBQWpERCxDQUNZLHdCQUF3QixHQWdEbkM7U0FqRFksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIERvQ2hlY2ssIGZvcndhcmRSZWYsIEluamVjdCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0VHVpQ29udHJvbCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlIYW5kbGVyLFxuICAgIFR1aU1vbnRoLFxuICAgIFR1aU1vbnRoUmFuZ2UsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0hPU1QsIFR1aUFic3RyYWN0VGV4dGZpZWxkSG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUVUlfTU9OVEhfRk9STUFUVEVSfSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5pbXBvcnQge2NvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgc3dpdGNoTWFwLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlJbnB1dE1vbnRoUmFuZ2VDb21wb25lbnR9IGZyb20gJy4vaW5wdXQtbW9udGgtcmFuZ2UuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktaW5wdXQtbW9udGgtcmFuZ2UnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVEVYVEZJRUxEX0hPU1QsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlJbnB1dE1vbnRoUmFuZ2VEaXJlY3RpdmUpLFxuICAgICAgICB9LFxuICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJbnB1dE1vbnRoUmFuZ2VEaXJlY3RpdmVcbiAgICBleHRlbmRzIFR1aUFic3RyYWN0VGV4dGZpZWxkSG9zdDxUdWlJbnB1dE1vbnRoUmFuZ2VDb21wb25lbnQ+XG4gICAgaW1wbGVtZW50cyBEb0NoZWNrXG57XG4gICAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZSQgPSBuZXcgU3ViamVjdDxUdWlNb250aFJhbmdlIHwgbnVsbD4oKTtcblxuICAgIHByaXZhdGUgbG9jYWxpemVkVmFsdWU6IFtzdHJpbmcsIHN0cmluZ10gPSBbJycsICcnXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEFic3RyYWN0VHVpQ29udHJvbCkgaG9zdDogVHVpSW5wdXRNb250aFJhbmdlQ29tcG9uZW50LFxuICAgICAgICBASW5qZWN0KFRVSV9NT05USF9GT1JNQVRURVIpXG4gICAgICAgIGZvcm1hdHRlcjogVHVpSGFuZGxlcjxUdWlNb250aCB8IG51bGwsIE9ic2VydmFibGU8c3RyaW5nPj4sXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGhvc3QpO1xuXG4gICAgICAgIHRoaXMudmFsdWUkXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgodmFsdWU6IFR1aU1vbnRoUmFuZ2UgfCBudWxsKSA9PlxuICAgICAgICAgICAgICAgICAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcih2YWx1ZT8uZnJvbSB8fCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcih2YWx1ZT8udG8gfHwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUobG9jYWxpemVkVmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxpemVkVmFsdWUgPSBsb2NhbGl6ZWRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCByZWFkT25seSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsaXplZFZhbHVlWzBdXG4gICAgICAgICAgICA/IHRoaXMuaG9zdC5jb21wdXRlVmFsdWUoLi4udGhpcy5sb2NhbGl6ZWRWYWx1ZSlcbiAgICAgICAgICAgIDogJyc7XG4gICAgfVxuXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlJC5uZXh0KHRoaXMuaG9zdC52YWx1ZSk7XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaG9zdC5vblZhbHVlQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG59XG4iXX0=