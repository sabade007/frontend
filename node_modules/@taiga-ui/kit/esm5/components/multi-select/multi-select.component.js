import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, forwardRef, HostBinding, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, ALWAYS_TRUE_HANDLER, EMPTY_ARRAY, isNativeFocused, setNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_DATA_LIST_ACCESSOR, TUI_DATA_LIST_HOST, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiDataListAccessor, TuiDataListDirective, TuiDataListHost, TuiHostedDropdownComponent, TuiSizeL, TuiSizeM, TuiSizeS, TuiSvgService, TuiTextfieldController, } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TUI_ARROW_MODE } from '@taiga-ui/kit/components/arrow';
import { TuiInputTagComponent } from '@taiga-ui/kit/components/input-tag';
import { iconBlank } from '@taiga-ui/kit/constants';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { TUI_MULTI_SELECT_OPTIONS } from './multi-select-options';
var TuiMultiSelectComponent = /** @class */ (function (_super) {
    __extends(TuiMultiSelectComponent, _super);
    function TuiMultiSelectComponent(control, changeDetectorRef, svgService, arrowMode, itemsHandlers, options, controller) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.arrowMode = arrowMode;
        _this.itemsHandlers = itemsHandlers;
        _this.options = options;
        _this.controller = controller;
        _this.stringify = _this.itemsHandlers.stringify;
        _this.identityMatcher = _this.itemsHandlers.identityMatcher;
        _this.expandable = _this.options.expandable;
        _this.search = '';
        _this.editable = true;
        _this.disabledItemHandler = _this.itemsHandlers.disabledItemHandler;
        _this.valueContent = _this.options.valueContent;
        _this.tagValidator = ALWAYS_TRUE_HANDLER;
        _this.searchChange = new EventEmitter();
        _this.datalist = '';
        _this.open = false;
        _this.valueMapper = function (value, stringify, group) {
            return group
                ? EMPTY_ARRAY
                : value.map(function (item) { return new TuiStringifiableItem(item, stringify); });
        };
        _this.disabledItemHandlerWrapper = function (handler) { return function (stringifiable) {
            return typeof stringifiable === 'string' || handler(stringifiable.item);
        }; };
        svgService.define({ iconBlank: iconBlank });
        return _this;
    }
    TuiMultiSelectComponent_1 = TuiMultiSelectComponent;
    Object.defineProperty(TuiMultiSelectComponent.prototype, "size", {
        get: function () {
            return this.controller.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "arrow", {
        get: function () {
            return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.input ? this.input.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "focused", {
        get: function () {
            return ((!!this.input && this.input.focused) ||
                (!!this.hostedDropdown && this.hostedDropdown.focused));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "computedValue", {
        get: function () {
            return this.computedGroup ? EMPTY_ARRAY : this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "searchOrSpace", {
        // @bad TODO: think of a better way
        get: function () {
            return this.computedGroup ? ' ' : this.searchString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "searchString", {
        get: function () {
            return this.search === null ? '' : this.search;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "tagIcon", {
        /**
         * Pass empty icon to InputTag (inside this component)
         * to prevent overflow of arrow icon by many tags
         */
        get: function () {
            return this.interactive ? 'iconBlank' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "inputHidden", {
        get: function () {
            return !this.editable && !this.computedGroup;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "computedGroup", {
        get: function () {
            return (!!this.valueContent &&
                this.value.length > 0 &&
                (!this.focused || !this.editable));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectComponent.prototype, "context", {
        get: function () {
            return this.getContext(this.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiMultiSelectComponent.prototype.getStringifier = function (stringify) {
        return function (_a) {
            var $implicit = _a.$implicit;
            return stringify($implicit);
        };
    };
    TuiMultiSelectComponent.prototype.onHoveredChange = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiMultiSelectComponent.prototype.onSpace = function (event) {
        if (!this.editable) {
            event.preventDefault();
        }
        if (!this.readOnly) {
            this.open = true;
        }
    };
    TuiMultiSelectComponent.prototype.handleOption = function (option) {
        var _a = this, value = _a.value, identityMatcher = _a.identityMatcher;
        var index = value.findIndex(function (item) { return identityMatcher(item, option); });
        this.updateValue(index === -1 ? __spread(value, [option]) : value.filter(function (_, i) { return i !== index; }));
        this.updateSearch(null);
    };
    TuiMultiSelectComponent.prototype.onEnter = function (event) {
        var value = this.value;
        var options = this.accessor ? this.accessor.getOptions() : [];
        if (options.length !== 1) {
            return;
        }
        var index = value.indexOf(options[0]);
        event.preventDefault();
        this.updateValue(index === -1
            ? __spread(value, [options[0]]) : __spread(value.slice(0, index), value.slice(index + 1)));
        this.updateSearch(null);
    };
    TuiMultiSelectComponent.prototype.onClick = function (_a) {
        var nativeFocusableElement = _a.nativeFocusableElement;
        var _b;
        if (this.editable &&
            this.interactive &&
            nativeFocusableElement &&
            isNativeFocused(nativeFocusableElement)) {
            (_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.updateOpen(!this.open);
        }
    };
    TuiMultiSelectComponent.prototype.onArrowClick = function () {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
        this.focusInput();
    };
    TuiMultiSelectComponent.prototype.onInput = function (value) {
        this.updateValue(value.map(function (_a) {
            var item = _a.item;
            return item;
        }));
    };
    TuiMultiSelectComponent.prototype.onSearch = function (search) {
        this.open = true;
        this.updateSearch(search);
    };
    TuiMultiSelectComponent.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
    };
    TuiMultiSelectComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.open = false;
    };
    TuiMultiSelectComponent.prototype.getContext = function ($implicit) {
        return { $implicit: $implicit };
    };
    TuiMultiSelectComponent.prototype.updateSearch = function (search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    };
    TuiMultiSelectComponent.prototype.focusInput = function (preventScroll) {
        if (preventScroll === void 0) { preventScroll = false; }
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    };
    var TuiMultiSelectComponent_1;
    TuiMultiSelectComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ARROW_MODE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MULTI_SELECT_OPTIONS,] }] },
        { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] }
    ]; };
    __decorate([
        ContentChild(TUI_DATA_LIST_ACCESSOR)
    ], TuiMultiSelectComponent.prototype, "accessor", void 0);
    __decorate([
        ViewChild(TuiHostedDropdownComponent)
    ], TuiMultiSelectComponent.prototype, "hostedDropdown", void 0);
    __decorate([
        ViewChild(TuiInputTagComponent)
    ], TuiMultiSelectComponent.prototype, "input", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "stringify", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "identityMatcher", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "expandable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "search", void 0);
    __decorate([
        Input(),
        HostBinding('class._editable'),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "editable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "valueContent", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectComponent.prototype, "tagValidator", void 0);
    __decorate([
        Output()
    ], TuiMultiSelectComponent.prototype, "searchChange", void 0);
    __decorate([
        ContentChild(TuiDataListDirective, { read: TemplateRef })
    ], TuiMultiSelectComponent.prototype, "datalist", void 0);
    __decorate([
        HostBinding('attr.data-size')
    ], TuiMultiSelectComponent.prototype, "size", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectComponent.prototype, "getStringifier", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectComponent.prototype, "getContext", null);
    TuiMultiSelectComponent = TuiMultiSelectComponent_1 = __decorate([
        Component({
            selector: 'tui-multi-select',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiHoveredChange)=\"onHoveredChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        tuiHostedDropdownHost\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [nativeId]=\"nativeId\"\n        [icon]=\"tagIcon\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [readOnly]=\"readOnly\"\n        [inputHidden]=\"!editable\"\n        [pseudoHovered]=\"computedHovered\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [editable]=\"false\"\n        [expandable]=\"expandable\"\n        [search]=\"searchOrSpace\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper:stringify\"\n        (ngModelChange)=\"onInput($event)\"\n        (searchChange)=\"onSearch($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (click.prevent)=\"onClick(inputTag)\"\n    >\n        <ng-content></ng-content>\n    </tui-input-tag>\n    <div\n        class=\"t-wrapper\"\n        [class.t-wrapper_disabled]=\"disabled\"\n    >\n        <div\n            *ngIf=\"computedGroup\"\n            polymorpheus-outlet\n            class=\"t-group\"\n            [class.t-group_fullsize]=\"inputTag.labelOutside\"\n            [context]=\"context\"\n            [content]=\"valueContent\"\n        ></div>\n\n        <div\n            *ngIf=\"arrow\"\n            polymorpheus-outlet\n            automation-id=\"tui-multi-select__arrow\"\n            tuiPreventDefault=\"mousedown\"\n            class=\"t-arrow\"\n            [content]=\"arrow\"\n            (click.prevent)=\"onArrowClick()\"\n        ></div>\n    </div>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiMultiSelectComponent_1; }),
                },
                {
                    provide: TUI_DATA_LIST_HOST,
                    useExisting: forwardRef(function () { return TuiMultiSelectComponent_1; }),
                },
                FIXED_DROPDOWN_CONTROLLER_PROVIDER,
                TEXTFIELD_CONTROLLER_PROVIDER,
            ],
            styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-wrapper{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;pointer-events:none;justify-content:flex-end}.t-wrapper_disabled{opacity:var(--tui-disabled-opacity)}:host[data-size='s'] .t-wrapper{height:var(--tui-height-s)}:host[data-size='m'] .t-wrapper{height:var(--tui-height-m)}:host[data-size='l'] .t-wrapper{height:var(--tui-height-l)}.t-group{display:flex;flex:1;align-items:center;padding:1.6875rem 0 .5625rem 1rem;overflow:hidden}.t-group_fullsize{padding-top:.0625rem;padding-bottom:0}:host[data-size='m'] .t-group_fullsize.t-group_fullsize{padding-top:0}:host[data-size='m'] .t-group{padding:1.1875rem 0 0 .75rem;font-size:.8125rem}.t-arrow{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center;color:var(--tui-text-03);position:relative;box-sizing:border-box;transition-property:color,transform;width:1.5rem;height:auto;margin:0 .75rem;pointer-events:auto;cursor:pointer}.t-arrow:hover{color:var(--tui-text-02)}:host._disabled .t-arrow,:host._readonly .t-arrow{pointer-events:none}:host[data-mode=onDark] .t-arrow{color:var(--tui-text-03-night)}:host[data-mode=onDark] .t-arrow:hover{color:var(--tui-text-01-night)}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TuiSvgService)),
        __param(3, Inject(TUI_ARROW_MODE)),
        __param(4, Inject(TUI_ITEMS_HANDLERS)),
        __param(5, Inject(TUI_MULTI_SELECT_OPTIONS)),
        __param(6, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER))
    ], TuiMultiSelectComponent);
    return TuiMultiSelectComponent;
}(AbstractTuiMultipleControl));
export { TuiMultiSelectComponent };
//# sourceMappingURL=data:application/json;base64,