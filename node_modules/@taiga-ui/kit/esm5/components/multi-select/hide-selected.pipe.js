import { __decorate, __param } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk';
import { isFlat } from '@taiga-ui/kit/utils';
import { TuiMultiSelectComponent } from './multi-select.component';
var TuiHideSelectedPipe = /** @class */ (function () {
    function TuiHideSelectedPipe(component) {
        this.component = component;
    }
    TuiHideSelectedPipe.prototype.transform = function (items, component) {
        var _a = component !== null && component !== void 0 ? component : this.component, value = _a.value, identityMatcher = _a.identityMatcher;
        if (!items) {
            return null;
        }
        return isFlat(items)
            ? this.filter(items, value, identityMatcher)
            : this.filter2d(items, value, identityMatcher);
    };
    TuiHideSelectedPipe.prototype.filter2d = function (items, value, matcher) {
        var _this = this;
        return items.map(function (subItems) { return _this.filter(subItems, value, matcher); });
    };
    TuiHideSelectedPipe.prototype.filter = function (items, value, matcher) {
        return items.filter(function (item) { return value.every(function (selected) { return !matcher(selected, item); }); });
    };
    TuiHideSelectedPipe.ctorParameters = function () { return [
        { type: TuiMultiSelectComponent, decorators: [{ type: Inject, args: [TuiMultiSelectComponent,] }] }
    ]; };
    __decorate([
        tuiPure
    ], TuiHideSelectedPipe.prototype, "filter2d", null);
    __decorate([
        tuiPure
    ], TuiHideSelectedPipe.prototype, "filter", null);
    TuiHideSelectedPipe = __decorate([
        Pipe({
            name: "tuiHideSelected",
            pure: false,
        }),
        __param(0, Inject(TuiMultiSelectComponent))
    ], TuiHideSelectedPipe);
    return TuiHideSelectedPipe;
}());
export { TuiHideSelectedPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS1zZWxlY3RlZC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC8iLCJzb3VyY2VzIjpbImhpZGUtc2VsZWN0ZWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBcUIsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQU1qRTtJQUNJLDZCQUVxQixTQUF1QztRQUF2QyxjQUFTLEdBQVQsU0FBUyxDQUE4QjtJQUN6RCxDQUFDO0lBVUosdUNBQVMsR0FBVCxVQUNJLEtBQXdELEVBQ3hELFNBQXNDO1FBRWhDLElBQUEsNEVBQXNELEVBQXJELGdCQUFLLEVBQUUsb0NBQThDLENBQUM7UUFFN0QsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDaEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUM7WUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBR08sc0NBQVEsR0FBaEIsVUFDSSxLQUFrQyxFQUNsQyxLQUFtQixFQUNuQixPQUE4QjtRQUpsQyxpQkFPQztRQURHLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBckMsQ0FBcUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFHTyxvQ0FBTSxHQUFkLFVBQ0ksS0FBbUIsRUFDbkIsS0FBbUIsRUFDbkIsT0FBOEI7UUFFOUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxFQUFqRCxDQUFpRCxDQUFDLENBQUM7SUFDbkYsQ0FBQzs7Z0JBMUMrQix1QkFBdUIsdUJBRGxELE1BQU0sU0FBQyx1QkFBdUI7O0lBNEJuQztRQURDLE9BQU87dURBT1A7SUFHRDtRQURDLE9BQU87cURBT1A7SUE3Q1EsbUJBQW1CO1FBSi9CLElBQUksQ0FBQztZQUNGLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsSUFBSSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBR08sV0FBQSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtPQUYzQixtQkFBbUIsQ0E4Qy9CO0lBQUQsMEJBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTlDWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUlkZW50aXR5TWF0Y2hlciwgdHVpUHVyZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge2lzRmxhdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbmltcG9ydCB7VHVpTXVsdGlTZWxlY3RDb21wb25lbnR9IGZyb20gJy4vbXVsdGktc2VsZWN0LmNvbXBvbmVudCc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiBgdHVpSGlkZVNlbGVjdGVkYCxcbiAgICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGlkZVNlbGVjdGVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aU11bHRpU2VsZWN0Q29tcG9uZW50KVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudDogVHVpTXVsdGlTZWxlY3RDb21wb25lbnQ8YW55PixcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm08VD4oXG4gICAgICAgIGl0ZW1zOiByZWFkb25seSBUW10gfCBudWxsLFxuICAgICAgICBjb21wb25lbnQ/OiBUdWlNdWx0aVNlbGVjdENvbXBvbmVudDxUPiwgLy8gVE9ETzogMy4wIEBkZXByZWNhdGVkIHJlbW92ZVxuICAgICk6IHJlYWRvbmx5IFRbXSB8IG51bGw7XG4gICAgdHJhbnNmb3JtPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgbnVsbCxcbiAgICAgICAgY29tcG9uZW50PzogVHVpTXVsdGlTZWxlY3RDb21wb25lbnQ8VD4sIC8vIFRPRE86IDMuMCBAZGVwcmVjYXRlZCByZW1vdmVcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCBudWxsO1xuICAgIHRyYW5zZm9ybTxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwsXG4gICAgICAgIGNvbXBvbmVudD86IFR1aU11bHRpU2VsZWN0Q29tcG9uZW50PFQ+LCAvLyBUT0RPOiAzLjAgQGRlcHJlY2F0ZWQgcmVtb3ZlXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHt2YWx1ZSwgaWRlbnRpdHlNYXRjaGVyfSA9IGNvbXBvbmVudCA/PyB0aGlzLmNvbXBvbmVudDtcblxuICAgICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0ZsYXQoaXRlbXMpXG4gICAgICAgICAgICA/IHRoaXMuZmlsdGVyKGl0ZW1zLCB2YWx1ZSwgaWRlbnRpdHlNYXRjaGVyKVxuICAgICAgICAgICAgOiB0aGlzLmZpbHRlcjJkKGl0ZW1zLCB2YWx1ZSwgaWRlbnRpdHlNYXRjaGVyKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgZmlsdGVyMmQ8VD4oXG4gICAgICAgIGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4sXG4gICAgICAgIHZhbHVlOiByZWFkb25seSBUW10sXG4gICAgICAgIG1hdGNoZXI6IFR1aUlkZW50aXR5TWF0Y2hlcjxUPixcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4ge1xuICAgICAgICByZXR1cm4gaXRlbXMubWFwKHN1Ykl0ZW1zID0+IHRoaXMuZmlsdGVyKHN1Ykl0ZW1zLCB2YWx1ZSwgbWF0Y2hlcikpO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBmaWx0ZXI8VD4oXG4gICAgICAgIGl0ZW1zOiByZWFkb25seSBUW10sXG4gICAgICAgIHZhbHVlOiByZWFkb25seSBUW10sXG4gICAgICAgIG1hdGNoZXI6IFR1aUlkZW50aXR5TWF0Y2hlcjxUPixcbiAgICApOiByZWFkb25seSBUW10ge1xuICAgICAgICByZXR1cm4gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gdmFsdWUuZXZlcnkoc2VsZWN0ZWQgPT4gIW1hdGNoZXIoc2VsZWN0ZWQsIGl0ZW0pKSk7XG4gICAgfVxufVxuIl19