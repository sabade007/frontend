import { __decorate, __read, __spread } from "tslib";
import { Directive, forwardRef, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core';
import { TuiMultiSelectOptionComponent } from '@taiga-ui/kit/components/multi-select-option';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TuiMultiSelectComponent } from '../multi-select.component';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function hostFallbackFactory(control, host) {
    return (host || {
        handleOption: function (option) {
            if (!control.control) {
                return;
            }
            var value = control.value || [];
            var index = value.indexOf(option);
            control.control.setValue(index === -1
                ? __spread(value, [option]) : __spread(value.slice(0, index), value.slice(index + 1)));
        },
    });
}
export var TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
// TODO: 3.0 remove in ivy compilation
export var MULTI_SELECT_ACCESSOR = {
    writeValue: EMPTY_FUNCTION,
    registerOnChange: EMPTY_FUNCTION,
    registerOnTouched: EMPTY_FUNCTION,
};
var TuiMultiSelectGroupDirective = /** @class */ (function () {
    function TuiMultiSelectGroupDirective() {
    }
    TuiMultiSelectGroupDirective = __decorate([
        Directive({
            selector: '[tuiMultiSelectGroup]',
            providers: [
                {
                    provide: TUI_OPTION_CONTENT,
                    useValue: TUI_MULTI_SELECT_OPTION,
                },
                {
                    provide: TUI_DATA_LIST_HOST,
                    deps: [
                        NgControl,
                        [new Optional(), forwardRef(function () { return TuiMultiSelectComponent; })],
                    ],
                    useFactory: hostFallbackFactory,
                },
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useValue: MULTI_SELECT_ACCESSOR,
                },
            ],
        })
    ], TuiMultiSelectGroupDirective);
    return TuiMultiSelectGroupDirective;
}());
export { TuiMultiSelectGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvIiwic291cmNlcyI6WyJtdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBa0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMzRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLG1CQUFtQixDQUMvQixPQUFrQixFQUNsQixJQUErQjtJQUUvQixPQUFPLENBQ0gsSUFBSSxJQUFJO1FBQ0osWUFBWSxFQUFFLFVBQUEsTUFBTTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsT0FBTzthQUNWO1lBRUQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDbEMsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVwQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDcEIsS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDUixDQUFDLFVBQUssS0FBSyxHQUFFLE1BQU0sR0FDbkIsQ0FBQyxVQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQzlELENBQUM7UUFDTixDQUFDO0tBQ0osQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLElBQUkscUJBQXFCLENBQzVELDZCQUE2QixDQUNoQyxDQUFDO0FBRUYsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHO0lBQ2pDLFVBQVUsRUFBRSxjQUFjO0lBQzFCLGdCQUFnQixFQUFFLGNBQWM7SUFDaEMsaUJBQWlCLEVBQUUsY0FBYztDQUNwQyxDQUFDO0FBd0JGO0lBQUE7SUFBMkMsQ0FBQztJQUEvQiw0QkFBNEI7UUF0QnhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLElBQUksRUFBRTt3QkFDRixTQUFTO3dCQUNULENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHVCQUF1QixFQUF2QixDQUF1QixDQUFDLENBQUM7cUJBQzlEO29CQUNELFVBQVUsRUFBRSxtQkFBbUI7aUJBQ2xDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLEtBQUssRUFBRSxJQUFJO29CQUNYLFFBQVEsRUFBRSxxQkFBcUI7aUJBQ2xDO2FBQ0o7U0FDSixDQUFDO09BQ1csNEJBQTRCLENBQUc7SUFBRCxtQ0FBQztDQUFBLEFBQTVDLElBQTRDO1NBQS9CLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SLCBOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RU1QVFlfRlVOQ1RJT059IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0hPU1QsIFRVSV9PUFRJT05fQ09OVEVOVCwgVHVpRGF0YUxpc3RIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1R1aU11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvbXVsdGktc2VsZWN0LW9wdGlvbic7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUdWlNdWx0aVNlbGVjdENvbXBvbmVudH0gZnJvbSAnLi4vbXVsdGktc2VsZWN0LmNvbXBvbmVudCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBob3N0RmFsbGJhY2tGYWN0b3J5PFQ+KFxuICAgIGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4gfCBudWxsLFxuKTogVHVpRGF0YUxpc3RIb3N0PFQ+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICBob3N0IHx8IHtcbiAgICAgICAgICAgIGhhbmRsZU9wdGlvbjogb3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRyb2wuY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlIHx8IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWUuaW5kZXhPZihvcHRpb24pO1xuXG4gICAgICAgICAgICAgICAgY29udHJvbC5jb250cm9sLnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gWy4uLnZhbHVlLCBvcHRpb25dXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFsuLi52YWx1ZS5zbGljZSgwLCBpbmRleCksIC4uLnZhbHVlLnNsaWNlKGluZGV4ICsgMSldLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9NVUxUSV9TRUxFQ1RfT1BUSU9OID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChcbiAgICBUdWlNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCxcbik7XG5cbi8vIFRPRE86IDMuMCByZW1vdmUgaW4gaXZ5IGNvbXBpbGF0aW9uXG5leHBvcnQgY29uc3QgTVVMVElfU0VMRUNUX0FDQ0VTU09SID0ge1xuICAgIHdyaXRlVmFsdWU6IEVNUFRZX0ZVTkNUSU9OLFxuICAgIHJlZ2lzdGVyT25DaGFuZ2U6IEVNUFRZX0ZVTkNUSU9OLFxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkOiBFTVBUWV9GVU5DVElPTixcbn07XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aU11bHRpU2VsZWN0R3JvdXBdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX09QVElPTl9DT05URU5ULFxuICAgICAgICAgICAgdXNlVmFsdWU6IFRVSV9NVUxUSV9TRUxFQ1RfT1BUSU9OLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfREFUQV9MSVNUX0hPU1QsXG4gICAgICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICAgICAgTmdDb250cm9sLFxuICAgICAgICAgICAgICAgIFtuZXcgT3B0aW9uYWwoKSwgZm9yd2FyZFJlZigoKSA9PiBUdWlNdWx0aVNlbGVjdENvbXBvbmVudCldLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGhvc3RGYWxsYmFja0ZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VWYWx1ZTogTVVMVElfU0VMRUNUX0FDQ0VTU09SLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU11bHRpU2VsZWN0R3JvdXBEaXJlY3RpdmUge31cbiJdfQ==