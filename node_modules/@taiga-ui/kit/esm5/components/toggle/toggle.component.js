import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, isNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiAppearance, TuiBrightness, TuiModeDirective, TuiSizeL, TuiSizeXS, } from '@taiga-ui/core';
import { TUI_TOGGLE_OPTIONS } from './toggle-options';
var TuiToggleComponent = /** @class */ (function (_super) {
    __extends(TuiToggleComponent, _super);
    function TuiToggleComponent(control, changeDetectorRef, modeDirective, options) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.modeDirective = modeDirective;
        _this.options = options;
        _this.singleColor = _this.options.singleColor;
        _this.showIcons = _this.options.showIcons;
        _this.showLoader = false;
        _this.size = _this.options.size;
        return _this;
    }
    TuiToggleComponent_1 = TuiToggleComponent;
    Object.defineProperty(TuiToggleComponent.prototype, "iconOn", {
        get: function () {
            return this.options.icons.toggleOn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "iconOff", {
        get: function () {
            return this.options.icons.toggleOff;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.focusableElement ? this.focusableElement.nativeElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "appearance", {
        get: function () {
            return this.singleColor || this.checked
                ? "primary" /* Primary */
                : "secondary" /* Secondary */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "sizeM", {
        get: function () {
            return this.size === 'm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "checked", {
        get: function () {
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "loaderSize", {
        get: function () {
            return this.sizeM ? 'xs' : 's';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "hostMode", {
        get: function () {
            return this.modeDirective ? this.modeDirective.mode : null;
        },
        enumerable: true,
        configurable: true
    });
    TuiToggleComponent.prototype.onChecked = function (checked) {
        this.updateValue(checked);
    };
    TuiToggleComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiToggleComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiToggleComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiToggleComponent.prototype.onFocusVisible = function (focusVisible) {
        this.updateFocusVisible(focusVisible);
    };
    TuiToggleComponent.prototype.getFallbackValue = function () {
        return false;
    };
    var TuiToggleComponent_1;
    TuiToggleComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiModeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiModeDirective,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TOGGLE_OPTIONS,] }] }
    ]; };
    __decorate([
        ViewChild('focusableElement')
    ], TuiToggleComponent.prototype, "focusableElement", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "singleColor", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "showIcons", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "showLoader", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "size", void 0);
    __decorate([
        HostBinding('class._checked')
    ], TuiToggleComponent.prototype, "checked", null);
    __decorate([
        HostBinding('attr.data-mode')
    ], TuiToggleComponent.prototype, "hostMode", null);
    TuiToggleComponent = TuiToggleComponent_1 = __decorate([
        Component({
            selector: 'tui-toggle',
            template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n    [focused]=\"computedFocusVisible\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [invalid]=\"computedInvalid\"\n>\n    <div class=\"t-toggle\">\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [size]=\"loaderSize\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"checked\"\n        ></tui-loader>\n        <span\n            polymorpheus-outlet\n            class=\"t-icon-wrapper\"\n            [content]=\"iconOn\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    *ngIf=\"showIcons && !showLoader\"\n                    automation-id=\"tui-toggle__check-icon\"\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n        <div class=\"t-circle\"></div>\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [size]=\"loaderSize\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"!checked\"\n        ></tui-loader>\n        <span\n            polymorpheus-outlet\n            class=\"t-icon-wrapper\"\n            [content]=\"iconOff\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    *ngIf=\"showIcons && !showLoader\"\n                    automation-id=\"tui-toggle__cancel-icon\"\n                    class=\"t-icon t-icon_off\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n    </div>\n    <input\n        #focusableElement\n        type=\"checkbox\"\n        role=\"switch\"\n        automation-id=\"tui-toggle__checkbox\"\n        class=\"t-checkbox\"\n        [attr.aria-checked]=\"value\"\n        [id]=\"id\"\n        [disabled]=\"disabled\"\n        [tuiChecked]=\"checked\"\n        [tuiFocusable]=\"focusable\"\n        (tuiCheckedChange)=\"onChecked($event)\"\n        (tuiFocusedChange)=\"onFocused($event)\"\n        (tuiHoveredChange)=\"onHovered($event)\"\n        (tuiPressedChange)=\"onPressed($event)\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    />\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiToggleComponent_1; }),
                },
            ],
            styles: [":host{position:relative;display:inline-block;vertical-align:middle;overflow:hidden;border-radius:6.25rem}:host[data-size='m']{width:2rem;height:1rem}:host[data-size='l']{width:3rem;height:1.5rem}.t-checkbox{padding:0;margin:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.t-checkbox:-webkit-autofill,.t-checkbox:-webkit-autofill:focus,.t-checkbox:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host._disabled .t-checkbox{pointer-events:none;cursor:default}.t-toggle{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}:host[data-size='m'] .t-toggle{width:3rem;height:1rem;transform:translateX(-1rem)}:host[data-size='l'] .t-toggle{width:4.5rem;height:1.5rem;transform:translateX(-1.5rem)}:host._checked .t-toggle{transform:translateX(0)}.t-circle{margin:.125rem 0;flex-shrink:0;border-radius:100%;background-color:var(--tui-base-01)}:host._disabled .t-circle_light{opacity:.24}:host[data-size='m'] .t-circle{width:.75rem;height:.75rem}:host[data-size='l'] .t-circle{width:1rem;height:1rem}:host._disabled .t-circle{background-color:var(--tui-base-01)}:host:not(._checked) .t-loader{color:var(--tui-base-06)}:host:not(._checked)._disabled .t-loader{color:var(--tui-base-05)}:host:not(._checked)[data-mode=onDark] .t-loader{color:var(--tui-text-03-night)}:host:not(._checked)[data-mode=onDark]._disabled .t-loader{color:var(--tui-clear-inverse-active)}:host:not(._checked)[data-mode=onLight] .t-loader{color:var(--tui-text-03)}:host:not(._checked)[data-mode=onLight]._disabled .t-loader{color:var(--tui-clear-active)}:host[data-size='m'] .t-loader{width:.75rem;margin:0 .2rem;transform:scale(.75)}:host[data-size='l'] .t-loader{width:1rem;margin:0 .25rem}.t-icon-wrapper{display:flex}.t-icon{opacity:.8}.t-icon_off{color:var(--tui-base-06)}:host._disabled .t-icon_off{color:var(--tui-base-05)}:host[data-mode=onDark] .t-icon_off{color:var(--tui-text-03-night)}:host[data-mode=onDark]._disabled .t-icon_off{color:var(--tui-clear-inverse-active)}:host[data-mode=onLight] .t-icon_off{color:var(--tui-text-03)}:host[data-mode=onLight]._disabled .t-icon_off{color:var(--tui-clear-active)}:host[data-size='m'] .t-icon{width:1rem;height:1rem;transform:scale(.75)}:host[data-size='l'] .t-icon{margin:0 .125rem;width:1.5rem;height:1.5rem}:host:hover .t-icon{opacity:1}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Optional()),
        __param(2, Inject(TuiModeDirective)),
        __param(3, Inject(TUI_TOGGLE_OPTIONS))
    ], TuiToggleComponent);
    return TuiToggleComponent;
}(AbstractTuiControl));
export { TuiToggleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90b2dnbGUvIiwic291cmNlcyI6WyJ0b2dnbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILGtCQUFrQixFQUNsQixlQUFlLEVBQ2YsMkJBQTJCLEVBRTNCLGNBQWMsR0FHakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILGFBQWEsRUFDYixhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLFFBQVEsRUFDUixTQUFTLEdBQ1osTUFBTSxnQkFBZ0IsQ0FBQztBQUd4QixPQUFPLEVBQUMsa0JBQWtCLEVBQW1CLE1BQU0sa0JBQWtCLENBQUM7QUFjdEU7SUFDWSxzQ0FBMkI7SUF1Qm5DLDRCQUlJLE9BQXlCLEVBQ0UsaUJBQW9DLEVBRzlDLGFBQXNDLEVBRTlDLE9BQXlCO1FBVnRDLFlBWUksa0JBQU0sT0FBTyxFQUFFLGlCQUFpQixDQUFDLFNBQ3BDO1FBTG9CLG1CQUFhLEdBQWIsYUFBYSxDQUF5QjtRQUU5QyxhQUFPLEdBQVAsT0FBTyxDQUFrQjtRQXpCdEMsaUJBQVcsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUl2QyxlQUFTLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFJbkMsZ0JBQVUsR0FBRyxLQUFLLENBQUM7UUFLbkIsVUFBSSxHQUFhLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDOztJQWVuQyxD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VyxDQUFDLGdCQUFnQixDQUFDO3FEQUc3QjtJQU9EO1FBREMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO3NEQUc3QjtJQTdFUSxrQkFBa0I7UUFaOUIsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFlBQVk7WUFDdEIscTRFQUFxQztZQUVyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLDJCQUEyQjtvQkFDcEMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsb0JBQWtCLEVBQWxCLENBQWtCLENBQUM7aUJBQ3BEO2FBQ0o7O1NBQ0osQ0FBQztRQTBCTyxXQUFBLFFBQVEsRUFBRSxDQUFBO1FBQ1YsV0FBQSxJQUFJLEVBQUUsQ0FBQTtRQUNOLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRWpCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDekIsV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFFeEIsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtPQWpDdEIsa0JBQWtCLENBc0c5QjtJQUFELHlCQUFDO0NBQUEsQUF0R0QsQ0FDWSxrQkFBa0IsR0FxRzdCO1NBdEdZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3B0aW9uYWwsXG4gICAgU2VsZixcbiAgICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gICAgQWJzdHJhY3RUdWlDb250cm9sLFxuICAgIGlzTmF0aXZlRm9jdXNlZCxcbiAgICBUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IsXG4gICAgVHVpQ29udGV4dFdpdGhJbXBsaWNpdCxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1xuICAgIFR1aUFwcGVhcmFuY2UsXG4gICAgVHVpQnJpZ2h0bmVzcyxcbiAgICBUdWlNb2RlRGlyZWN0aXZlLFxuICAgIFR1aVNpemVMLFxuICAgIFR1aVNpemVYUyxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1RVSV9UT0dHTEVfT1BUSU9OUywgVHVpVG9nZ2xlT3B0aW9uc30gZnJvbSAnLi90b2dnbGUtb3B0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRvZ2dsZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RvZ2dsZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90b2dnbGUuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlUb2dnbGVDb21wb25lbnQpLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRvZ2dsZUNvbXBvbmVudFxuICAgIGV4dGVuZHMgQWJzdHJhY3RUdWlDb250cm9sPGJvb2xlYW4+XG4gICAgaW1wbGVtZW50cyBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3JcbntcbiAgICBAVmlld0NoaWxkKCdmb2N1c2FibGVFbGVtZW50JylcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZvY3VzYWJsZUVsZW1lbnQ/OiBFbGVtZW50UmVmPFR1aU5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQ+O1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpbmdsZUNvbG9yID0gdGhpcy5vcHRpb25zLnNpbmdsZUNvbG9yO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNob3dJY29ucyA9IHRoaXMub3B0aW9ucy5zaG93SWNvbnM7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2hvd0xvYWRlciA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gdGhpcy5vcHRpb25zLnNpemU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbClcbiAgICAgICAgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFR1aU1vZGVEaXJlY3RpdmUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kZURpcmVjdGl2ZTogVHVpTW9kZURpcmVjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoVFVJX1RPR0dMRV9PUFRJT05TKVxuICAgICAgICByZWFkb25seSBvcHRpb25zOiBUdWlUb2dnbGVPcHRpb25zLFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250cm9sLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgfVxuXG4gICAgZ2V0IGljb25PbigpOiBQb2x5bW9ycGhldXNDb250ZW50PFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VHVpU2l6ZUw+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaWNvbnMudG9nZ2xlT247XG4gICAgfVxuXG4gICAgZ2V0IGljb25PZmYoKTogUG9seW1vcnBoZXVzQ29udGVudDxUdWlDb250ZXh0V2l0aEltcGxpY2l0PFR1aVNpemVMPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmljb25zLnRvZ2dsZU9mZjtcbiAgICB9XG5cbiAgICBnZXQgbmF0aXZlRm9jdXNhYmxlRWxlbWVudCgpOiBUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvY3VzYWJsZUVsZW1lbnQgPyB0aGlzLmZvY3VzYWJsZUVsZW1lbnQubmF0aXZlRWxlbWVudCA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc05hdGl2ZUZvY3VzZWQodGhpcy5uYXRpdmVGb2N1c2FibGVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBUdWlBcHBlYXJhbmNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlQ29sb3IgfHwgdGhpcy5jaGVja2VkXG4gICAgICAgICAgICA/IFR1aUFwcGVhcmFuY2UuUHJpbWFyeVxuICAgICAgICAgICAgOiBUdWlBcHBlYXJhbmNlLlNlY29uZGFyeTtcbiAgICB9XG5cbiAgICBnZXQgc2l6ZU0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemUgPT09ICdtJztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9jaGVja2VkJylcbiAgICBnZXQgY2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGxvYWRlclNpemUoKTogVHVpU2l6ZVhTIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZU0gPyAneHMnIDogJ3MnO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLW1vZGUnKVxuICAgIGdldCBob3N0TW9kZSgpOiBUdWlCcmlnaHRuZXNzIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVEaXJlY3RpdmUgPyB0aGlzLm1vZGVEaXJlY3RpdmUubW9kZSA6IG51bGw7XG4gICAgfVxuXG4gICAgb25DaGVja2VkKGNoZWNrZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShjaGVja2VkKTtcbiAgICB9XG5cbiAgICBvbkZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzZWQoZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgb25Ib3ZlcmVkKGhvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3ZlcmVkKGhvdmVyZWQpO1xuICAgIH1cblxuICAgIG9uUHJlc3NlZChwcmVzc2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJlc3NlZChwcmVzc2VkKTtcbiAgICB9XG5cbiAgICBvbkZvY3VzVmlzaWJsZShmb2N1c1Zpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVGb2N1c1Zpc2libGUoZm9jdXNWaXNpYmxlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RmFsbGJhY2tWYWx1ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==