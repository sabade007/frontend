import { __decorate } from "tslib";
import { Directive, forwardRef, Input, ViewChildren, } from '@angular/core';
import { EMPTY_QUERY, isNativeFocused, isPresent, tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiOptionComponent, } from '@taiga-ui/core';
var AbstractTuiDataListWrapper = /** @class */ (function () {
    function AbstractTuiDataListWrapper(itemsHandlers) {
        var _this = this;
        this.itemsHandlers = itemsHandlers;
        this.optionsQuery = EMPTY_QUERY;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.emptyContent = "";
        this.size = "m";
        this.itemContent = function (_a) {
            var $implicit = _a.$implicit;
            return _this.itemsHandlers.stringify($implicit);
        };
    }
    AbstractTuiDataListWrapper.prototype.getContext = function ($implicit, _a) {
        var nativeElement = _a.nativeElement;
        return { $implicit: $implicit, active: isNativeFocused(nativeElement) };
    };
    AbstractTuiDataListWrapper.prototype.getOptions = function (includeDisabled) {
        if (includeDisabled === void 0) { includeDisabled = false; }
        return this.optionsQuery
            .toArray()
            .filter(function (_a) {
            var disabled = _a.disabled;
            return includeDisabled || !disabled;
        })
            .map(function (_a) {
            var value = _a.value;
            return value;
        })
            .filter(isPresent);
    };
    AbstractTuiDataListWrapper.ctorParameters = function () { return [
        { type: undefined }
    ]; };
    __decorate([
        ViewChildren(forwardRef(function () { return TuiOptionComponent; }))
    ], AbstractTuiDataListWrapper.prototype, "optionsQuery", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiDataListWrapper.prototype, "disabledItemHandler", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiDataListWrapper.prototype, "emptyContent", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiDataListWrapper.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiDataListWrapper.prototype, "itemContent", void 0);
    AbstractTuiDataListWrapper = __decorate([
        Directive()
    ], AbstractTuiDataListWrapper);
    return AbstractTuiDataListWrapper;
}());
export { AbstractTuiDataListWrapper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LXdyYXBwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvZGF0YS1saXN0LXdyYXBwZXIvIiwic291cmNlcyI6WyJkYXRhLWxpc3Qtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxVQUFVLEVBQ1YsS0FBSyxFQUVMLFlBQVksR0FDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxrQkFBa0IsR0FJckIsTUFBTSxnQkFBZ0IsQ0FBQztBQUt4QjtJQWlCSSxvQ0FBeUMsYUFBa0M7UUFBM0UsaUJBQStFO1FBQXRDLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQWZ4RCxpQkFBWSxHQUFxQyxXQUFXLENBQUM7UUFJaEYsd0JBQW1CLEdBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztRQUkzQyxpQkFBWSxHQUF3QixFQUFFLENBQUM7UUFJdkMsU0FBSSxHQUF5QixHQUFHLENBQUM7UUFNakMsZ0JBQVcsR0FBbUQsVUFBQyxFQUFXO2dCQUFWLHdCQUFTO1lBQ3JFLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQXZDLENBQXVDLENBQUM7SUFMa0MsQ0FBQztJQU8vRSwrQ0FBVSxHQUFWLFVBQ0ksU0FBWSxFQUNaLEVBQXdDO1lBQXZDLGdDQUFhO1FBRWQsT0FBTyxFQUFDLFNBQVMsV0FBQSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsK0NBQVUsR0FBVixVQUFXLGVBQWdDO1FBQWhDLGdDQUFBLEVBQUEsdUJBQWdDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFlBQVk7YUFDbkIsT0FBTyxFQUFFO2FBQ1QsTUFBTSxDQUFDLFVBQUMsRUFBVTtnQkFBVCxzQkFBUTtZQUFNLE9BQUEsZUFBZSxJQUFJLENBQUMsUUFBUTtRQUE1QixDQUE0QixDQUFDO2FBQ3BELEdBQUcsQ0FBQyxVQUFDLEVBQU87Z0JBQU4sZ0JBQUs7WUFBTSxPQUFBLEtBQUs7UUFBTCxDQUFLLENBQUM7YUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFuQ0Q7UUFEQyxZQUFZLENBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDO29FQUM2QjtJQUloRjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTsyRUFFMEI7SUFJM0M7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7b0VBQ3NCO0lBSXZDO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFOzREQUNnQjtJQU1qQztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTttRUFFMkI7SUF0QjFCLDBCQUEwQjtRQUQvQyxTQUFTLEVBQUU7T0FDVSwwQkFBMEIsQ0FzQy9DO0lBQUQsaUNBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQXRDcUIsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBmb3J3YXJkUmVmLFxuICAgIElucHV0LFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBWaWV3Q2hpbGRyZW4sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWSwgaXNOYXRpdmVGb2N1c2VkLCBpc1ByZXNlbnQsIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVHVpT3B0aW9uQ29tcG9uZW50LFxuICAgIFR1aVNpemVMLFxuICAgIFR1aVNpemVYUyxcbiAgICBUdWlWYWx1ZUNvbnRlbnRDb250ZXh0LFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1R1aUl0ZW1zSGFuZGxlcnN9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlEYXRhTGlzdFdyYXBwZXI8VD4ge1xuICAgIEBWaWV3Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBUdWlPcHRpb25Db21wb25lbnQpKVxuICAgIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zUXVlcnk6IFF1ZXJ5TGlzdDxUdWlPcHRpb25Db21wb25lbnQ8VD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZGlzYWJsZWRJdGVtSGFuZGxlcjogVHVpSXRlbXNIYW5kbGVyczxUPlsnZGlzYWJsZWRJdGVtSGFuZGxlciddID1cbiAgICAgICAgdGhpcy5pdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZW1wdHlDb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gYGA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgfCBUdWlTaXplWFMgPSBgbWA7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRvbmx5IGl0ZW1zSGFuZGxlcnM6IFR1aUl0ZW1zSGFuZGxlcnM8VD4pIHt9XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaXRlbUNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpVmFsdWVDb250ZW50Q29udGV4dDxUPj4gPSAoeyRpbXBsaWNpdH0pID0+XG4gICAgICAgIHRoaXMuaXRlbXNIYW5kbGVycy5zdHJpbmdpZnkoJGltcGxpY2l0KTtcblxuICAgIGdldENvbnRleHQoXG4gICAgICAgICRpbXBsaWNpdDogVCxcbiAgICAgICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApOiBUdWlWYWx1ZUNvbnRlbnRDb250ZXh0PFQ+IHtcbiAgICAgICAgcmV0dXJuIHskaW1wbGljaXQsIGFjdGl2ZTogaXNOYXRpdmVGb2N1c2VkKG5hdGl2ZUVsZW1lbnQpfTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zKGluY2x1ZGVEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1F1ZXJ5XG4gICAgICAgICAgICAudG9BcnJheSgpXG4gICAgICAgICAgICAuZmlsdGVyKCh7ZGlzYWJsZWR9KSA9PiBpbmNsdWRlRGlzYWJsZWQgfHwgIWRpc2FibGVkKVxuICAgICAgICAgICAgLm1hcCgoe3ZhbHVlfSkgPT4gdmFsdWUpXG4gICAgICAgICAgICAuZmlsdGVyKGlzUHJlc2VudCk7XG4gICAgfVxufVxuIl19