import { __decorate, __param, __read } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Inject, Output } from '@angular/core';
import { clamp, round, TuiDestroyService, typedFromEvent } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { merge, Observable } from 'rxjs';
import { filter, map, repeat, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import { TuiRangeComponent } from './range.component';
// @dynamic
var TuiRangeChangeDirective = /** @class */ (function () {
    function TuiRangeChangeDirective(documentRef, elementRef, range, destroy$) {
        var _this = this;
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.range = range;
        /**
         * TODO replace with pointer events (when all supported browsers can handle them).
         * Dont forget to use setPointerCapture instead of listening all documentRef events
         */
        this.pointerDown$ = merge(typedFromEvent(this.elementRef.nativeElement, 'touchstart', { passive: true }).pipe(filter(function (_a) {
            var touches = _a.touches;
            return touches.length === 1;
        }), map(function (_a) {
            var touches = _a.touches;
            return touches[0];
        })), typedFromEvent(this.elementRef.nativeElement, 'mousedown', { passive: true }));
        this.pointerMove$ = merge(typedFromEvent(this.documentRef, 'touchmove').pipe(filter(function (_a) {
            var touches = _a.touches;
            return touches.length === 1;
        }), map(function (_a) {
            var touches = _a.touches;
            return touches[0];
        })), typedFromEvent(this.documentRef, 'mousemove'));
        this.pointerUp$ = merge(typedFromEvent(this.documentRef, 'touchend', { passive: true }), typedFromEvent(this.documentRef, 'mouseup', { passive: true }));
        this.activeThumbChange = new EventEmitter();
        var activeThumb;
        this.pointerDown$
            .pipe(tap(function (_a) {
            var clientX = _a.clientX, target = _a.target;
            activeThumb = _this.detectActiveThumb(clientX, target);
            _this.activeThumbChange.emit(activeThumb);
            if (_this.range.focusable) {
                elementRef.nativeElement.focus();
            }
        }), switchMap(function (event) { return _this.pointerMove$.pipe(startWith(event)); }), map(function (_a) {
            var clientX = _a.clientX;
            return clamp(_this.getFractionFromEvents(clientX), 0, 1);
        }), takeUntil(this.pointerUp$), repeat(), takeUntil(destroy$))
            .subscribe(function (fraction) {
            var value = _this.range.getValueFromFraction(_this.range.fractionGuard(fraction));
            _this.range.processValue(value, activeThumb === 'right');
        });
    }
    TuiRangeChangeDirective.prototype.getFractionFromEvents = function (clickClientX) {
        var hostRect = this.elementRef.nativeElement.getBoundingClientRect();
        var value = clickClientX - hostRect.left;
        var total = hostRect.width;
        return round(value / total, TUI_FLOATING_PRECISION);
    };
    TuiRangeChangeDirective.prototype.detectActiveThumb = function (clientX, target) {
        var _a = __read(this.range.slidersRefs, 2), leftSliderRef = _a[0], rightSliderRef = _a[1];
        switch (target) {
            case leftSliderRef.nativeElement:
                return 'left';
            case rightSliderRef.nativeElement:
                return 'right';
            default:
                return this.findNearestActiveThumb(clientX);
        }
    };
    TuiRangeChangeDirective.prototype.findNearestActiveThumb = function (clientX) {
        var fraction = this.getFractionFromEvents(clientX);
        var deltaLeft = fraction * 100 - this.range.left;
        var deltaRight = fraction * 100 - 100 + this.range.right;
        return Math.abs(deltaLeft) > Math.abs(deltaRight) ||
            deltaRight > 0 ||
            (this.range.left === 0 && this.range.right === 100)
            ? 'right'
            : 'left';
    };
    TuiRangeChangeDirective.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiRangeComponent, decorators: [{ type: Inject, args: [TuiRangeComponent,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiRangeChangeDirective.prototype, "activeThumbChange", void 0);
    TuiRangeChangeDirective = __decorate([
        Directive({
            selector: 'tui-range',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiRangeComponent)),
        __param(3, Inject(TuiDestroyService))
    ], TuiRangeChangeDirective);
    return TuiRangeChangeDirective;
}());
export { TuiRangeChangeDirective };
//# sourceMappingURL=data:application/json;base64,