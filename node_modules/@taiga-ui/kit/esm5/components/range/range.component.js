import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, Optional, QueryList, Self, ViewChildren, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { clamp, EMPTY_QUERY, isNativeFocusedIn, nonNegativeFiniteAssertion, quantize, round, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiAssert, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { AbstractTuiSlider, SLIDER_KEYBOARD_STEP } from '@taiga-ui/kit/abstract';
import { TuiSliderComponent } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiCheckKeyStepsHaveMinMaxPercents, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, } from '@taiga-ui/kit/utils';
import { Observable } from 'rxjs';
/**
 * Turn on new mode for `Range` and `InputRange`.
 * The new version of component will behave almost the same as the same component from the next major release.
 * @deprecated TODO remove me in v3.0 and make `Range` and `InputRange` always "new".
 */
var TuiNewRangeDirective = /** @class */ (function () {
    function TuiNewRangeDirective() {
    }
    TuiNewRangeDirective = __decorate([
        Directive({
            selector: 'tui-range[new], tui-input-range[new]',
        })
    ], TuiNewRangeDirective);
    return TuiNewRangeDirective;
}());
export { TuiNewRangeDirective };
// @dynamic
var TuiRangeComponent = /** @class */ (function (_super) {
    __extends(TuiRangeComponent, _super);
    function TuiRangeComponent(control, changeDetectorRef, documentRef, elementRef, fromToTexts$, isNew) {
        var _this = _super.call(this, control, changeDetectorRef, documentRef, fromToTexts$) || this;
        _this.elementRef = elementRef;
        _this.isNew = isNew;
        _this.min = 0;
        /**
         * TODO: make `100` as default value (to be like native sliders) in v3.0
         */
        _this.max = Infinity;
        /**
         * TODO: think about replacing this props by `step` (to be like native slider).
         * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
         */
        _this.steps = 0;
        /**
         * TODO: think about replacing this props by `step` (to be like native slider).
         * It can be done after removing backward compatibility code inside {@link computePureKeySteps} in v3.0
         * */
        _this.quantum = 0;
        _this.size = 'm';
        _this.segments = 0;
        _this.keySteps = null;
        _this.slidersRefs = EMPTY_QUERY;
        _this.lastActiveThumb = 'right';
        return _this;
    }
    TuiRangeComponent_1 = TuiRangeComponent;
    Object.defineProperty(TuiRangeComponent.prototype, "nativeFocusableElement", {
        get: function () {
            var _a = __read(this.slidersRefs, 2), sliderLeftRef = _a[0], sliderRightRef = _a[1];
            if (this.computedDisabled || !sliderLeftRef || !sliderRightRef) {
                return null;
            }
            return this.isLeftFocusable
                ? sliderLeftRef.nativeElement
                : sliderRightRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiRangeComponent.prototype, "focused", {
        get: function () {
            return isNativeFocusedIn(this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiRangeComponent.prototype, "fractionStep", {
        get: function () {
            if (this.steps) {
                return 1 / this.steps;
            }
            return this.quantum ? this.quantum / (this.max - this.min) : SLIDER_KEYBOARD_STEP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiRangeComponent.prototype, "computedKeySteps", {
        get: function () {
            return this.computePureKeySteps(this.keySteps, this.min, this.max);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiRangeComponent.prototype, "left", {
        get: function () {
            return this.getPercentageFromValue(this.value[0]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiRangeComponent.prototype, "right", {
        get: function () {
            return 100 - this.getPercentageFromValue(this.value[1]);
        },
        enumerable: true,
        configurable: true
    });
    TuiRangeComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiRangeComponent.prototype.changeByStep = function (coefficient, target) {
        var _a = __read(this.slidersRefs, 2), sliderLeftRef = _a[0], sliderRightRef = _a[1];
        var leftThumbElement = sliderLeftRef.nativeElement;
        var rightThumbElement = sliderRightRef.nativeElement;
        var isRightThumb = target === this.elementRef.nativeElement
            ? this.lastActiveThumb === 'right'
            : target === rightThumbElement;
        var activeThumbElement = isRightThumb ? rightThumbElement : leftThumbElement;
        var previousValue = isRightThumb ? this.value[1] : this.value[0];
        /** @bad TODO think about a solution without twice conversion */
        var previousFraction = this.getPercentageFromValue(previousValue) / 100;
        var newFractionValue = previousFraction + coefficient * this.fractionStep;
        this.processValue(this.getValueFromFraction(newFractionValue), isRightThumb);
        if (activeThumbElement) {
            activeThumbElement.focus();
        }
    };
    TuiRangeComponent.prototype.processValue = function (value, right) {
        var guardedValue = this.valueGuard(value);
        if (right) {
            this.updateEnd(guardedValue);
        }
        else {
            this.updateStart(guardedValue);
        }
        this.lastActiveThumb = right ? 'right' : 'left';
    };
    TuiRangeComponent.prototype.fractionGuard = function (fraction) {
        return clamp(quantize(fraction, this.fractionStep), 0, 1);
    };
    TuiRangeComponent.prototype.getValueFromFraction = function (fraction) {
        var percentage = this.fractionGuard(fraction) * 100;
        return tuiPercentageToKeyStepValue(percentage, this.computedKeySteps);
    };
    TuiRangeComponent.prototype.getPercentageFromValue = function (value) {
        return tuiKeyStepValueToPercentage(value, this.computedKeySteps);
    };
    TuiRangeComponent.prototype.valueGuard = function (value) {
        return clamp(this.quantum
            ? round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION)
            : value, this.min, this.max);
    };
    TuiRangeComponent.prototype.getFallbackValue = function () {
        return [0, 0];
    };
    TuiRangeComponent.prototype.computePureKeySteps = function (keySteps, min, max) {
        if (keySteps && tuiCheckKeyStepsHaveMinMaxPercents(keySteps)) {
            return keySteps;
        }
        // TODO replace all function by `return keySteps || [[0, min], [100, max]]` in v3.0
        tuiAssert.assert(!keySteps, '\n' +
            'Input property [keySteps] should contain min and max percents.\n' +
            'We have taken [min] and [max] properties of your component for now (but it will not work in v3.0).\n' +
            'See example how properly use [keySteps]: https://taiga-ui.dev/components/range#key-steps');
        return __spread([[0, min]], (keySteps || []), [[100, max]]);
    };
    TuiRangeComponent.prototype.updateStart = function (value) {
        this.updateValue([Math.min(value, this.value[1]), this.value[1]]);
    };
    TuiRangeComponent.prototype.updateEnd = function (value) {
        this.updateValue([this.value[0], Math.max(value, this.value[0])]);
    };
    var TuiRangeComponent_1;
    TuiRangeComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] },
        { type: TuiNewRangeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiNewRangeDirective,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "steps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp(nonNegativeFiniteAssertion, 'Quantum must be a non-negative number')
    ], TuiRangeComponent.prototype, "quantum", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "segments", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiRangeComponent.prototype, "keySteps", void 0);
    __decorate([
        ViewChildren(TuiSliderComponent, { read: ElementRef })
    ], TuiRangeComponent.prototype, "slidersRefs", void 0);
    __decorate([
        HostBinding('style.--left.%')
    ], TuiRangeComponent.prototype, "left", null);
    __decorate([
        HostBinding('style.--right.%')
    ], TuiRangeComponent.prototype, "right", null);
    __decorate([
        HostListener('focusin', ['true']),
        HostListener('focusout', ['false'])
    ], TuiRangeComponent.prototype, "onFocused", null);
    __decorate([
        HostListener('keydown.arrowUp.prevent', ['1', '$event.target']),
        HostListener('keydown.arrowRight.prevent', ['1', '$event.target']),
        HostListener('keydown.arrowLeft.prevent', ['-1', '$event.target']),
        HostListener('keydown.arrowDown.prevent', ['-1', '$event.target'])
    ], TuiRangeComponent.prototype, "changeByStep", null);
    __decorate([
        tuiPure
    ], TuiRangeComponent.prototype, "computePureKeySteps", null);
    TuiRangeComponent = TuiRangeComponent_1 = __decorate([
        Component({
            selector: 'tui-range',
            template: "<div class=\"t-track\">\n    <input\n        tuiSlider\n        readonly\n        type=\"range\"\n        step=\"any\"\n        automation-id=\"tui-range__left\"\n        class=\"t-thumb\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [ngModel]=\"value[0]\"\n        [size]=\"size\"\n        [keySteps]=\"computedKeySteps\"\n        [tuiFocusable]=\"focusable\"\n        [attr.disabled]=\"computedDisabled || null\"\n    />\n    <input\n        tuiSlider\n        readonly\n        type=\"range\"\n        step=\"any\"\n        automation-id=\"tui-range__right\"\n        class=\"t-thumb\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [ngModel]=\"value[1]\"\n        [size]=\"size\"\n        [keySteps]=\"computedKeySteps\"\n        [tuiFocusable]=\"focusable\"\n        [attr.disabled]=\"computedDisabled || null\"\n    />\n</div>\n\n<!-- TODO backward compatibility only (remove in v3.0) -->\n<div\n    *ngIf=\"segments > 0\"\n    class=\"t-segments\"\n>\n    <span\n        *tuiRepeatTimes=\"let tickIndex of segments + 1\"\n        automation-id=\"tui-slider__segment\"\n        class=\"t-segment\"\n    >\n        <ng-container *ngIf=\"fromToTexts$ | async as fromToText\">\n            <span\n                *ngIf=\"!isNew\"\n                class=\"t-number\"\n            >\n                {{ getSegmentPrefix(tickIndex, fromToText) }}\n                {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | tuiFormatNumber }}\n                <span *ngIf=\"pluralizeMap\">\n                    {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | i18nPlural: pluralizeMap }}\n                </span>\n            </span>\n        </ng-container>\n    </span>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[attr.tabindex]': '-1',
                '[attr.aria-disabled]': 'computedDisabled',
            },
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiRangeComponent_1; }),
                },
            ],
            styles: [":host{position:relative;display:block;height:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-base-03);cursor:pointer;outline:0;margin:.4375rem 0;touch-action:pan-x}:host:active{cursor:ew-resize}:host:after{content:'';position:absolute;top:-.4375rem;bottom:-.4375rem;width:100%}:host._disabled{opacity:var(--tui-disabled-opacity);cursor:auto}:host[data-size='s'] .t-track{position:relative;margin:0 .25rem;height:100%}:host[data-size='s'] .t-track:after{content:'';position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 -.25rem}:host[data-size='m'] .t-track{position:relative;margin:0 .5rem;height:100%}:host[data-size='m'] .t-track:after{content:'';position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 -.5rem}.t-thumb{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translate(0,-50%)}.t-thumb::-webkit-slider-thumb{pointer-events:all}.t-thumb::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb::-webkit-slider-runnable-track{background:0 0}input[type=range].t-thumb::-moz-range-track{background:0 0}input[type=range].t-thumb::-moz-range-progress{background:0 0}input[type=range].t-thumb::-ms-track{background:0 0}input[type=range].t-thumb::-ms-fill-lower{background:0 0}.t-thumb:last-of-type::-webkit-slider-thumb{transform:translate(50%,0)}.t-thumb:first-of-type::-webkit-slider-thumb{transform:translate(-50%,0)}.t-thumb:last-of-type::-moz-range-thumb{transform:translate(50%,0)}.t-thumb:first-of-type::-moz-range-thumb{transform:translate(-50%,0)}:host._disabled .t-thumb{opacity:1}.t-segments{position:absolute;top:0;left:0;bottom:0;right:0}:host[data-size='s'] .t-segments{display:flex;margin:0 .25rem;font:var(--tui-font-text-s);padding:0 .25rem}:host[data-size='s'] .t-segments>*{position:relative;flex:2;text-align:center}:host[data-size='s'] .t-segments>:first-child{left:-.25rem;flex:1;text-align:left}:host[data-size='s'] .t-segments>:last-child{right:-.25rem;flex:1;text-align:right}tui-input-slider+:host[data-size='s'] .t-segments{margin-left:calc(var(--tui-radius-m)/ 2 + .25rem)}tui-input-range+:host[data-size='s'] .t-segments,tui-range+:host[data-size='s'] .t-segments{margin-left:.5rem;margin-right:.5rem}tui-input-range+:host[data-size='s'] .t-segments>:first-child,tui-range+:host[data-size='s'] .t-segments>:first-child{left:-.5rem}tui-input-range+:host[data-size='s'] .t-segments>:last-child,tui-range+:host[data-size='s'] .t-segments>:last-child{right:-.5rem}:host[data-size='m'] .t-segments{display:flex;margin:0 .5rem;font:var(--tui-font-text-s);padding:0 .5rem}:host[data-size='m'] .t-segments>*{position:relative;flex:2;text-align:center}:host[data-size='m'] .t-segments>:first-child{left:-.5rem;flex:1;text-align:left}:host[data-size='m'] .t-segments>:last-child{right:-.5rem;flex:1;text-align:right}tui-input-slider+:host[data-size='m'] .t-segments{margin-left:calc(var(--tui-radius-m)/ 2 + .5rem)}tui-input-range+:host[data-size='m'] .t-segments,tui-range+:host[data-size='m'] .t-segments{margin-left:1rem;margin-right:1rem}tui-input-range+:host[data-size='m'] .t-segments>:first-child,tui-range+:host[data-size='m'] .t-segments>:first-child{left:-1rem}tui-input-range+:host[data-size='m'] .t-segments>:last-child,tui-range+:host[data-size='m'] .t-segments>:last-child{right:-1rem}.t-segment:not(:last-of-type):not(:first-of-type):before{content:'';position:absolute;left:0;right:0;margin:auto;background:var(--tui-base-07);width:.25rem;height:100%}.t-segment:last-of-type .t-number{margin-right:-.5rem}.t-segment:first-of-type .t-number{margin-left:-.5rem}.t-number{display:inline-block;margin-top:.5rem}"]
        })
        /**
         * `AbstractTuiSlider` includes all legacy code (it can be deleted in v3.0)
         * TODO replace `extends AbstractTuiSlider<[number, number]>` by `extends AbstractTuiControl<[number, number]> implements TuiWithOptionalMinMax<number>, TuiFocusableElementAccessor`
         */
        ,
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(ElementRef)),
        __param(4, Inject(TUI_FROM_TO_TEXTS)),
        __param(5, Optional()),
        __param(5, Inject(TuiNewRangeDirective))
    ], TuiRangeComponent);
    return TuiRangeComponent;
}(AbstractTuiSlider));
export { TuiRangeComponent };
//# sourceMappingURL=data:application/json;base64,