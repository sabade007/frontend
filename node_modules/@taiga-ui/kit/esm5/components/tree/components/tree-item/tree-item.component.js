import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, DoCheck, ElementRef, forwardRef, HostBinding, Inject, QueryList, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_LEVEL, TUI_TREE_NODE, } from '../../misc/tree.tokens';
import { TUI_TREE_ITEM_PROVIDERS } from './tree-item.providers';
var TuiTreeItemComponent = /** @class */ (function () {
    function TuiTreeItemComponent(elementRef, controller, level, content) {
        var _this = this;
        this.elementRef = elementRef;
        this.controller = controller;
        this.level = level;
        this.content = content;
        this.nested = EMPTY_QUERY;
        this.change$ = new Subject();
        this.expanded$ = this.change$.pipe(startWith(null), map(function () { return _this.isExpanded; }), distinctUntilChanged());
        this.attached$ = this.change$.pipe(map(function () { return _this.elementRef.nativeElement.isConnected; }), distinctUntilChanged());
    }
    Object.defineProperty(TuiTreeItemComponent.prototype, "isExpandable", {
        get: function () {
            return !!this.nested.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTreeItemComponent.prototype, "isExpanded", {
        get: function () {
            return this.controller.isExpanded(this);
        },
        enumerable: true,
        configurable: true
    });
    TuiTreeItemComponent.prototype.ngDoCheck = function () {
        this.change$.next();
    };
    TuiTreeItemComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_CONTROLLER; }),] }] },
        { type: Number, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_LEVEL; }),] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_CONTENT; }),] }] }
    ]; };
    __decorate([
        ContentChildren(TUI_TREE_NODE)
    ], TuiTreeItemComponent.prototype, "nested", void 0);
    __decorate([
        HostBinding('class._expandable')
    ], TuiTreeItemComponent.prototype, "isExpandable", null);
    TuiTreeItemComponent = __decorate([
        Component({
            selector: 'tui-tree-item',
            template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<div\n    polymorpheus-outlet\n    [content]=\"content\"\n    [context]=\"{$implicit: this, template: template}\"\n></div>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TUI_TREE_ITEM_PROVIDERS,
            host: {
                role: 'treeitem',
            },
            styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent,1.5rem)}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(forwardRef(function () { return TUI_TREE_CONTROLLER; }))),
        __param(2, Inject(forwardRef(function () { return TUI_TREE_LEVEL; }))),
        __param(3, Inject(forwardRef(function () { return TUI_TREE_CONTENT; })))
    ], TuiTreeItemComponent);
    return TuiTreeItemComponent;
}());
export { TuiTreeItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90cmVlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLE9BQU8sRUFDUCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3BFLE9BQU8sRUFDSCxnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLGNBQWMsRUFDZCxhQUFhLEdBQ2hCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFZOUQ7SUFpQkksOEJBRXFCLFVBQW1DLEVBRW5DLFVBQTZCLEVBRXJDLEtBQWEsRUFFYixPQUFnRDtRQVI3RCxpQkFTSTtRQVBpQixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUVuQyxlQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUVyQyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBRWIsWUFBTyxHQUFQLE9BQU8sQ0FBeUM7UUF2QjVDLFdBQU0sR0FBdUIsV0FBVyxDQUFDO1FBRXpDLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRXRDLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFVBQVUsRUFBZixDQUFlLENBQUMsRUFDMUIsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztRQUVPLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDbEMsR0FBRyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQXpDLENBQXlDLENBQUMsRUFDcEQsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztJQVdDLENBQUM7SUFHSixzQkFBSSw4Q0FBWTthQUFoQjtZQUNJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNENBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7SUFFRCx3Q0FBUyxHQUFUO1FBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkFwQmdDLFVBQVUsdUJBRHRDLE1BQU0sU0FBQyxVQUFVO2dEQUVqQixNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsQ0FBQzs2Q0FFNUMsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsY0FBYyxFQUFkLENBQWMsQ0FBQztnREFFdkMsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsZ0JBQWdCLEVBQWhCLENBQWdCLENBQUM7O0lBdEI5QztRQURDLGVBQWUsQ0FBQyxhQUFvQixDQUFDO3dEQUNvQjtJQTJCMUQ7UUFEQyxXQUFXLENBQUMsbUJBQW1CLENBQUM7NERBR2hDO0lBL0JRLG9CQUFvQjtRQVZoQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZUFBZTtZQUN6QixvaUJBQXdDO1lBRXhDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLFNBQVMsRUFBRSx1QkFBdUI7WUFDbEMsSUFBSSxFQUFFO2dCQUNGLElBQUksRUFBRSxVQUFVO2FBQ25COztTQUNKLENBQUM7UUFtQk8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFbEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDLENBQUE7UUFFN0MsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxjQUFjLEVBQWQsQ0FBYyxDQUFDLENBQUMsQ0FBQTtRQUV4QyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLGdCQUFnQixFQUFoQixDQUFnQixDQUFDLENBQUMsQ0FBQTtPQXhCdEMsb0JBQW9CLENBd0NoQztJQUFELDJCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0F4Q1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIERvQ2hlY2ssXG4gICAgRWxlbWVudFJlZixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbiAgICBRdWVyeUxpc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGh9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUcmVlQ29udHJvbGxlciwgVHVpVHJlZUl0ZW1Db250ZXh0fSBmcm9tICcuLi8uLi9taXNjL3RyZWUuaW50ZXJmYWNlcyc7XG5pbXBvcnQge1xuICAgIFRVSV9UUkVFX0NPTlRFTlQsXG4gICAgVFVJX1RSRUVfQ09OVFJPTExFUixcbiAgICBUVUlfVFJFRV9MRVZFTCxcbiAgICBUVUlfVFJFRV9OT0RFLFxufSBmcm9tICcuLi8uLi9taXNjL3RyZWUudG9rZW5zJztcbmltcG9ydCB7VFVJX1RSRUVfSVRFTV9QUk9WSURFUlN9IGZyb20gJy4vdHJlZS1pdGVtLnByb3ZpZGVycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRyZWUtaXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RyZWUtaXRlbS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90cmVlLWl0ZW0uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogVFVJX1RSRUVfSVRFTV9QUk9WSURFUlMsXG4gICAgaG9zdDoge1xuICAgICAgICByb2xlOiAndHJlZWl0ZW0nLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRyZWVJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgQENvbnRlbnRDaGlsZHJlbihUVUlfVFJFRV9OT0RFIGFzIGFueSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5lc3RlZDogUXVlcnlMaXN0PHVua25vd24+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgcmVhZG9ubHkgZXhwYW5kZWQkID0gdGhpcy5jaGFuZ2UkLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuaXNFeHBhbmRlZCksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcblxuICAgIHJlYWRvbmx5IGF0dGFjaGVkJCA9IHRoaXMuY2hhbmdlJC5waXBlKFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaXNDb25uZWN0ZWQpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVFVJX1RSRUVfQ09OVFJPTExFUikpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlcjogVHVpVHJlZUNvbnRyb2xsZXIsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9MRVZFTCkpXG4gICAgICAgIHJlYWRvbmx5IGxldmVsOiBudW1iZXIsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9DT05URU5UKSlcbiAgICAgICAgcmVhZG9ubHkgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlUcmVlSXRlbUNvbnRleHQ+LFxuICAgICkge31cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2V4cGFuZGFibGUnKVxuICAgIGdldCBpc0V4cGFuZGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMubmVzdGVkLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5pc0V4cGFuZGVkKHRoaXMpO1xuICAgIH1cblxuICAgIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoKTtcbiAgICB9XG59XG4iXX0=