import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { isPresent, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_TREE_ACCESSOR, TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
var TuiTreeControllerDirective = /** @class */ (function () {
    function TuiTreeControllerDirective() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    TuiTreeControllerDirective_1 = TuiTreeControllerDirective;
    TuiTreeControllerDirective.prototype.register = function (item, value) {
        this.items.set(item, value);
    };
    TuiTreeControllerDirective.prototype.unregister = function (item) {
        this.items.delete(item);
    };
    TuiTreeControllerDirective.prototype.isExpanded = function (item) {
        var _a;
        var value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    };
    TuiTreeControllerDirective.prototype.toggle = function (item) {
        var value = this.items.get(item);
        var expanded = this.isExpanded(item);
        if (!isPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    };
    var TuiTreeControllerDirective_1;
    __decorate([
        Input('tuiTreeController'),
        tuiDefaultProp()
    ], TuiTreeControllerDirective.prototype, "fallback", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTreeControllerDirective.prototype, "map", void 0);
    __decorate([
        Output()
    ], TuiTreeControllerDirective.prototype, "toggled", void 0);
    TuiTreeControllerDirective = TuiTreeControllerDirective_1 = __decorate([
        Directive({
            selector: '[tuiTreeController][map]',
            exportAs: 'tuiTreeController',
            providers: [
                {
                    provide: TUI_TREE_ACCESSOR,
                    useExisting: TuiTreeControllerDirective_1,
                },
                {
                    provide: TUI_TREE_CONTROLLER,
                    useExisting: TuiTreeControllerDirective_1,
                },
            ],
        })
    ], TuiTreeControllerDirective);
    return TuiTreeControllerDirective;
}());
export { TuiTreeControllerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90cmVlLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy90cmVlLWNvbnRyb2xsZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxTQUFTLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSXhELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBZ0IzRTtJQUFBO1FBS0ksYUFBUSxHQUFHLElBQUksQ0FBQztRQUloQixRQUFHLEdBQW9CLElBQUksR0FBRyxFQUFFLENBQUM7UUFHeEIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFFaEMsVUFBSyxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0lBMkJ4RCxDQUFDO21DQXpDWSwwQkFBMEI7SUFnQm5DLDZDQUFRLEdBQVIsVUFBUyxJQUEwQixFQUFFLEtBQVE7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCwrQ0FBVSxHQUFWLFVBQVcsSUFBMEI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELCtDQUFVLEdBQVYsVUFBVyxJQUEwQjs7UUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsYUFBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQ0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzNELENBQUM7SUFFRCwyQ0FBTSxHQUFOLFVBQU8sSUFBMEI7UUFDN0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O0lBbkNEO1FBRkMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO1FBQzFCLGNBQWMsRUFBRTtnRUFDRDtJQUloQjtRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTsyREFDZ0I7SUFHakM7UUFEQyxNQUFNLEVBQUU7K0RBQ2dDO0lBWmhDLDBCQUEwQjtRQWR0QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMEJBQTBCO1lBQ3BDLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFdBQVcsRUFBRSw0QkFBMEI7aUJBQzFDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxtQkFBbUI7b0JBQzVCLFdBQVcsRUFBRSw0QkFBMEI7aUJBQzFDO2FBQ0o7U0FDSixDQUFDO09BQ1csMEJBQTBCLENBeUN0QztJQUFELGlDQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F6Q1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2lzUHJlc2VudCwgdHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5pbXBvcnQge1R1aVRyZWVJdGVtQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7VHVpVHJlZUFjY2Vzc29yLCBUdWlUcmVlQ29udHJvbGxlcn0gZnJvbSAnLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9BQ0NFU1NPUiwgVFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRyZWVDb250cm9sbGVyXVttYXBdJyxcbiAgICBleHBvcnRBczogJ3R1aVRyZWVDb250cm9sbGVyJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9UUkVFX0NPTlRST0xMRVIsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmU8VD5cbiAgICBpbXBsZW1lbnRzIFR1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlQWNjZXNzb3I8VD5cbntcbiAgICBASW5wdXQoJ3R1aVRyZWVDb250cm9sbGVyJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGZhbGxiYWNrID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtYXA6IE1hcDxULCBib29sZWFuPiA9IG5ldyBNYXAoKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHRvZ2dsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XG5cbiAgICByZWFkb25seSBpdGVtcyA9IG5ldyBNYXA8VHVpVHJlZUl0ZW1Db21wb25lbnQsIFQ+KCk7XG5cbiAgICByZWdpc3RlcihpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zZXQoaXRlbSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHVucmVnaXN0ZXIoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5kZWxldGUoaXRlbSk7XG4gICAgfVxuXG4gICAgaXNFeHBhbmRlZChpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaXRlbXMuZ2V0KGl0ZW0pO1xuXG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdGhpcy5tYXAuZ2V0KHZhbHVlKSkgPz8gdGhpcy5mYWxsYmFjaztcbiAgICB9XG5cbiAgICB0b2dnbGUoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLml0ZW1zLmdldChpdGVtKTtcbiAgICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmlzRXhwYW5kZWQoaXRlbSk7XG5cbiAgICAgICAgaWYgKCFpc1ByZXNlbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZWQuZW1pdCh2YWx1ZSk7XG4gICAgICAgIHRoaXMubWFwLnNldCh2YWx1ZSwgIWV4cGFuZGVkKTtcbiAgICB9XG59XG4iXX0=