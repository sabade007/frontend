import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';
import { TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_START } from './tree.tokens';
// @dynamic
var TuiTreeService = /** @class */ (function () {
    function TuiTreeService(loading, start, loader) {
        var _this = this;
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(function (item) {
            return _this.loader.loadChildren(item).pipe(tap(function (children) { return _this.map.set(item, children); }), map(function (children) { return children.filter(function (item) { return !_this.loader.hasChildren(item); }); }), tap(function (children) { return children.forEach(function (child) { return _this.map.set(child, []); }); }));
        }), startWith(null), mapTo(this.start));
    }
    TuiTreeService.prototype.getChildren = function (item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : [this.loading];
    };
    TuiTreeService.prototype.loadChildren = function (item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    };
    TuiTreeService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADING,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_START,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADER,] }] }
    ]; };
    TuiTreeService = __decorate([
        Injectable(),
        __param(0, Inject(TUI_TREE_LOADING)),
        __param(1, Inject(TUI_TREE_START)),
        __param(2, Inject(TUI_TREE_LOADER))
    ], TuiTreeService);
    return TuiTreeService;
}());
export { TuiTreeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3RyZWUvIiwic291cmNlcyI6WyJtaXNjL3RyZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3JFLE9BQU8sRUFBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhGLFdBQVc7QUFFWDtJQWlCSSx3QkFDK0MsT0FBVSxFQUNaLEtBQVEsRUFDUCxNQUF3QjtRQUh0RSxpQkFJSTtRQUgyQyxZQUFPLEdBQVAsT0FBTyxDQUFHO1FBQ1osVUFBSyxHQUFMLEtBQUssQ0FBRztRQUNQLFdBQU0sR0FBTixNQUFNLENBQWtCO1FBbkJyRCxRQUFHLEdBQUcsSUFBSSxHQUFHLENBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyRCxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQUssQ0FBQztRQUVqQyxVQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzVCLFNBQVMsQ0FBQyxVQUFBLElBQUk7WUFDVixPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDL0IsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsS0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUE1QixDQUE0QixDQUFDLEVBQzdDLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUE5QixDQUE4QixDQUFDLEVBQXZELENBQXVELENBQUMsRUFDeEUsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLENBQ3RFO1FBSkQsQ0FJQyxDQUNKLEVBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ3BCLENBQUM7SUFNQyxDQUFDO0lBRUosb0NBQVcsR0FBWCxVQUFZLElBQU87O1FBQ2YsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHFDQUFZLEdBQVosVUFBYSxJQUFPO1FBQ2hCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Z0RBaEJJLE1BQU0sU0FBQyxnQkFBZ0I7Z0RBQ3ZCLE1BQU0sU0FBQyxjQUFjO2dEQUNyQixNQUFNLFNBQUMsZUFBZTs7SUFwQmxCLGNBQWM7UUFEMUIsVUFBVSxFQUFFO1FBbUJKLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDeEIsV0FBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDdEIsV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7T0FwQm5CLGNBQWMsQ0FtQzFCO0lBQUQscUJBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQW5DWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBtYXBUbywgc3RhcnRXaXRoLCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVRyZWVMb2FkZXJ9IGZyb20gJy4vdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfTE9BREVSLCBUVUlfVFJFRV9MT0FESU5HLCBUVUlfVFJFRV9TVEFSVH0gZnJvbSAnLi90cmVlLnRva2Vucyc7XG5cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHVpVHJlZVNlcnZpY2U8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFwID0gbmV3IE1hcDxULCByZWFkb25seSBUW10+KFtbdGhpcy5sb2FkaW5nLCBbXV1dKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9hZCQgPSBuZXcgU3ViamVjdDxUPigpO1xuXG4gICAgcmVhZG9ubHkgZGF0YSQgPSB0aGlzLmxvYWQkLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChpdGVtID0+XG4gICAgICAgICAgICB0aGlzLmxvYWRlci5sb2FkQ2hpbGRyZW4oaXRlbSkucGlwZShcbiAgICAgICAgICAgICAgICB0YXAoY2hpbGRyZW4gPT4gdGhpcy5tYXAuc2V0KGl0ZW0sIGNoaWxkcmVuKSksXG4gICAgICAgICAgICAgICAgbWFwKGNoaWxkcmVuID0+IGNoaWxkcmVuLmZpbHRlcihpdGVtID0+ICF0aGlzLmxvYWRlci5oYXNDaGlsZHJlbihpdGVtKSkpLFxuICAgICAgICAgICAgICAgIHRhcChjaGlsZHJlbiA9PiBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHRoaXMubWFwLnNldChjaGlsZCwgW10pKSksXG4gICAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIG1hcFRvKHRoaXMuc3RhcnQpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfVFJFRV9MT0FESU5HKSBwcml2YXRlIHJlYWRvbmx5IGxvYWRpbmc6IFQsXG4gICAgICAgIEBJbmplY3QoVFVJX1RSRUVfU1RBUlQpIHByaXZhdGUgcmVhZG9ubHkgc3RhcnQ6IFQsXG4gICAgICAgIEBJbmplY3QoVFVJX1RSRUVfTE9BREVSKSBwcml2YXRlIHJlYWRvbmx5IGxvYWRlcjogVHVpVHJlZUxvYWRlcjxUPixcbiAgICApIHt9XG5cbiAgICBnZXRDaGlsZHJlbihpdGVtOiBUKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChpdGVtKSA/PyBbdGhpcy5sb2FkaW5nXTtcbiAgICB9XG5cbiAgICBsb2FkQ2hpbGRyZW4oaXRlbTogVCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tYXAuZ2V0KGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC5zZXQoaXRlbSwgW3RoaXMubG9hZGluZ10pO1xuICAgICAgICB0aGlzLmxvYWQkLm5leHQoaXRlbSk7XG4gICAgfVxufVxuIl19