import { ChangeDetectorRef, ElementRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiPluralize, TuiSizeS, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiKeySteps } from '@taiga-ui/kit/types';
import { Observable } from 'rxjs';
export declare const SLIDER_KEYBOARD_STEP = 0.05;
export declare const DOT_WIDTH: {
    [key: string]: number;
};
/**
 * @awful TODO: 3.0 remove
 * @internal
 * @dynamic
 */
export declare abstract class AbstractTuiSlider<T> extends AbstractTuiControl<T> implements TuiWithOptionalMinMax<number> {
    private readonly documentRef;
    readonly fromToTexts$: Observable<[string, string]>;
    private readonly pointerDown$;
    protected dotLeft?: ElementRef<TuiNativeFocusableElement>;
    protected dotRight?: ElementRef<TuiNativeFocusableElement>;
    min: number;
    max: number;
    segments: number;
    steps: number;
    quantum: number;
    set pluralize(pluralize: Record<string, string> | TuiPluralize | null);
    size: TuiSizeS;
    keySteps: TuiKeySteps | null;
    focusVisibleLeft: boolean;
    focusVisibleRight: boolean;
    pluralizeMap: Record<string, string> | null;
    protected constructor(ngControl: NgControl | null, changeDetectorRef: ChangeDetectorRef, documentRef: Document, fromToTexts$: Observable<[string, string]>);
    get segmented(): boolean;
    get discrete(): boolean;
    get length(): number;
    get computedStep(): number;
    get isLeftFocusable(): boolean;
    get isRightFocusable(): boolean;
    abstract get left(): number;
    abstract get right(): number;
    abstract processValue(value: number, right?: boolean): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onMouseDown(event: MouseEvent): void;
    onTouchStart(event: TouchEvent): void;
    getSegmentLabel(segment: number): number;
    getSegmentPrefix(segment: number, texts: [string, string]): string;
    onActiveZone(active: boolean): void;
    onLeftFocusVisible(focusVisible: boolean): void;
    onRightFocusVisible(focusVisible: boolean): void;
    getValueFromFraction(fraction: number): number;
    fractionGuard(fraction: number): number;
    protected getFractionFromValue(value: number): number;
    protected getCalibratedFractionFromEvents(rect: ClientRect, clientX: number, _: boolean): number;
    protected valueGuard(value: number): number;
    private processFocus;
    /**
     * Function for converting the fullness of the slider to a value and vice versa
     * taking into account the steps of linear dependence.
     *
     * @param value passed value
     * @param isFraction translation is carried out from fullness to value
     */
    private fractionValueKeyStepConverter;
    private getFractionFromEvents;
}
