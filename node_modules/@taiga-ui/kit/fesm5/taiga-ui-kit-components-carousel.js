import { __decorate, __param, __extends, __read } from 'tslib';
import { EventEmitter, ChangeDetectorRef, Inject, ElementRef, Input, HostBinding, Output, ContentChildren, TemplateRef, HostListener, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { EMPTY_QUERY, clamp, TUI_IS_MOBILE, tuiDefaultProp, TuiItemDirective, tuiPure, typedFromEvent, TuiPanModule, TuiSwipeModule, TuiItemModule } from '@taiga-ui/cdk';
import { PAGE_VISIBILITY } from '@ng-web-apis/common';
import { BehaviorSubject, merge, combineLatest, interval, EMPTY, Observable } from 'rxjs';
import { mapTo, switchMap, filter, throttleTime, map, tap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { IntersectionObserverModule } from '@ng-web-apis/intersection-observer';
import { TUI_BUTTON_OPTIONS } from '@taiga-ui/core';

// @dynamic
var TuiCarouselComponent = /** @class */ (function () {
    function TuiCarouselComponent(changeDetectorRef, elementRef, isMobile) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.isMobile = isMobile;
        this.translate = 0;
        this.draggable = false;
        this.itemsCount = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.transitioned = true;
    }
    Object.defineProperty(TuiCarouselComponent.prototype, "transform", {
        get: function () {
            var x = this.transitioned ? this.computedTranslate : this.translate;
            return "translateX(" + 100 * x + "%)";
        },
        enumerable: true,
        configurable: true
    });
    TuiCarouselComponent.prototype.onTransitioned = function (transitioned) {
        this.transitioned = transitioned;
        if (!transitioned) {
            this.translate = this.computedTranslate;
        }
    };
    TuiCarouselComponent.prototype.getStyle = function (itemsCount) {
        var percent = 100 / itemsCount + "%";
        return {
            flexBasis: percent,
            minWidth: percent,
            maxWidth: percent,
        };
    };
    TuiCarouselComponent.prototype.next = function () {
        this.updateIndex(this.index + 1);
    };
    TuiCarouselComponent.prototype.prev = function () {
        this.updateIndex(this.index - 1);
    };
    TuiCarouselComponent.prototype.isDisabled = function (index) {
        return index < this.index || index > this.index + this.itemsCount;
    };
    TuiCarouselComponent.prototype.onIntersection = function (_a, index) {
        var intersectionRatio = _a.intersectionRatio;
        if (intersectionRatio && intersectionRatio !== 1 && !this.transitioned) {
            this.updateIndex(index - Math.floor(this.itemsCount / 2));
        }
    };
    TuiCarouselComponent.prototype.onScroll = function (delta) {
        if (!this.isMobile) {
            this.updateIndex(this.index + delta);
        }
    };
    TuiCarouselComponent.prototype.onPan = function (x) {
        if (!this.computedDraggable) {
            return;
        }
        var clientWidth = this.elementRef.nativeElement.clientWidth;
        var min = 1 - this.items.length / this.itemsCount;
        this.translate = clamp(x / clientWidth + this.translate, min, 0);
    };
    TuiCarouselComponent.prototype.onSwipe = function (direction) {
        if (direction === 'left') {
            this.next();
        }
        else if (direction === 'right') {
            this.prev();
        }
    };
    TuiCarouselComponent.prototype.onAutoscroll = function () {
        this.updateIndex(this.index === this.items.length - 1 ? 0 : this.index + 1);
    };
    Object.defineProperty(TuiCarouselComponent.prototype, "computedTranslate", {
        get: function () {
            return -this.index / this.itemsCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiCarouselComponent.prototype, "computedDraggable", {
        get: function () {
            return this.isMobile || this.draggable;
        },
        enumerable: true,
        configurable: true
    });
    TuiCarouselComponent.prototype.updateIndex = function (index) {
        this.index = clamp(index, 0, this.items.length - 1);
        this.indexChange.emit(this.index);
        this.changeDetectorRef.markForCheck();
    };
    TuiCarouselComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('class._draggable'),
        tuiDefaultProp()
    ], TuiCarouselComponent.prototype, "draggable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiCarouselComponent.prototype, "itemsCount", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiCarouselComponent.prototype, "index", void 0);
    __decorate([
        Output()
    ], TuiCarouselComponent.prototype, "indexChange", void 0);
    __decorate([
        ContentChildren(TuiItemDirective, { read: TemplateRef })
    ], TuiCarouselComponent.prototype, "items", void 0);
    __decorate([
        HostBinding('class._transitioned')
    ], TuiCarouselComponent.prototype, "transitioned", void 0);
    __decorate([
        HostListener('touchstart', ['false']),
        HostListener('touchend', ['true']),
        HostListener('mousedown', ['false']),
        HostListener('document:mouseup.silent', ['true'])
    ], TuiCarouselComponent.prototype, "onTransitioned", null);
    __decorate([
        tuiPure
    ], TuiCarouselComponent.prototype, "getStyle", null);
    TuiCarouselComponent = __decorate([
        Component({
            selector: 'tui-carousel',
            template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div\n    class=\"t-scroller\"\n    (tuiCarouselScroll)=\"onScroll($event)\"\n>\n    <div\n        waIntersectionRoot\n        waIntersectionObserver\n        waIntersectionThreshold=\"0,1\"\n        waIntersectionRootMargin=\"100px 1000000px 100px -51%\"\n        class=\"t-wrapper\"\n    >\n        <div\n            class=\"t-items\"\n            [style.transform]=\"transform\"\n            (tuiPan)=\"onPan($event[0])\"\n            (tuiSwipe)=\"onSwipe($event.direction)\"\n            (tuiCarouselAutoscroll)=\"onAutoscroll()\"\n        >\n            <fieldset\n                *ngFor=\"let item of items; let i = index\"\n                class=\"t-item\"\n                [disabled]=\"isDisabled(i)\"\n                [ngStyle]=\"getStyle(itemsCount)\"\n                (waIntersectionObservee)=\"onIntersection($event[0], i)\"\n            >\n                <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n            </fieldset>\n        </div>\n    </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:block;overflow:hidden}:host._draggable{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host._draggable:hover{cursor:-webkit-grab;cursor:grab}:host._draggable:active{cursor:-webkit-grabbing;cursor:grabbing}.t-items{display:flex}:host._transitioned .t-items{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out}.t-item{display:flex;flex-direction:column;justify-content:center;padding:0 1.25rem;flex:1;min-width:100%;max-width:100%;box-sizing:border-box;border:none;margin:0}.t-wrapper{position:-webkit-sticky;position:sticky;left:0;right:0;min-width:100%;overflow:hidden}.t-scroller{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;overscroll-behavior-x:none;padding-bottom:2rem;margin-bottom:-2rem}.t-scroller::-webkit-scrollbar,.t-scroller::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}.t-scroller:after,.t-scroller:before{content:'';display:block;min-width:1rem}"]
        }),
        __param(0, Inject(ChangeDetectorRef)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TUI_IS_MOBILE))
    ], TuiCarouselComponent);
    return TuiCarouselComponent;
}());

var TuiCarouselDirective = /** @class */ (function (_super) {
    __extends(TuiCarouselDirective, _super);
    function TuiCarouselDirective(elementRef, visible$) {
        var _this = _super.call(this, function (subscriber) { return _this.output$.subscribe(subscriber); }) || this;
        _this.elementRef = elementRef;
        _this.visible$ = visible$;
        _this.duration$ = new BehaviorSubject(0);
        _this.running$ = merge(typedFromEvent(_this.elementRef.nativeElement, 'mouseenter').pipe(mapTo(false)), typedFromEvent(_this.elementRef.nativeElement, 'touchstart').pipe(mapTo(false)), typedFromEvent(_this.elementRef.nativeElement, 'touchend').pipe(mapTo(true)), typedFromEvent(_this.elementRef.nativeElement, 'mouseleave').pipe(mapTo(true)), _this.visible$);
        _this.output$ = combineLatest([_this.duration$, _this.running$]).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), duration = _b[0], running = _b[1];
            return duration && running ? interval(duration) : EMPTY;
        }));
        return _this;
    }
    Object.defineProperty(TuiCarouselDirective.prototype, "duration", {
        set: function (duration) {
            this.duration$.next(duration);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiCarouselDirective.prototype, "index", {
        set: function (_) {
            this.duration$.next(this.duration$.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiCarouselDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [PAGE_VISIBILITY,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiCarouselDirective.prototype, "duration", null);
    __decorate([
        Input()
    ], TuiCarouselDirective.prototype, "index", null);
    TuiCarouselDirective = __decorate([
        Directive({
            selector: 'tui-carousel',
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(PAGE_VISIBILITY))
    ], TuiCarouselDirective);
    return TuiCarouselDirective;
}(Observable));

var TuiCarouselAutoscrollDirective = /** @class */ (function () {
    function TuiCarouselAutoscrollDirective(tuiCarouselAutoscroll) {
        this.tuiCarouselAutoscroll = tuiCarouselAutoscroll;
    }
    TuiCarouselAutoscrollDirective.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TuiCarouselDirective,] }] }
    ]; };
    TuiCarouselAutoscrollDirective = __decorate([
        Directive({
            selector: '[tuiCarouselAutoscroll]',
            outputs: ['tuiCarouselAutoscroll'],
        }),
        __param(0, Inject(TuiCarouselDirective))
    ], TuiCarouselAutoscrollDirective);
    return TuiCarouselAutoscrollDirective;
}());

// TODO: 3.0 remove in ivy compilation
var CAROUSEL_BUTTON_OPTIONS = {
    appearance: "secondary" /* Secondary */,
    shape: 'rounded',
    size: 'm',
};
var TuiCarouselButtonsDirective = /** @class */ (function () {
    function TuiCarouselButtonsDirective() {
    }
    TuiCarouselButtonsDirective = __decorate([
        Directive({
            selector: '[tuiCarouselButtons]',
            providers: [
                {
                    provide: TUI_BUTTON_OPTIONS,
                    useValue: CAROUSEL_BUTTON_OPTIONS,
                },
            ],
        })
    ], TuiCarouselButtonsDirective);
    return TuiCarouselButtonsDirective;
}());

var TuiCarouselScrollDirective = /** @class */ (function () {
    function TuiCarouselScrollDirective(elementRef) {
        var _this = this;
        this.elementRef = elementRef;
        this.tuiCarouselScroll = typedFromEvent(this.elementRef.nativeElement, 'wheel').pipe(filter(function (_a) {
            var deltaX = _a.deltaX;
            return Math.abs(deltaX) > 20;
        }), throttleTime(500), map(function (_a) {
            var deltaX = _a.deltaX;
            return Math.sign(deltaX);
        }), tap(function () {
            // So we always have space to scroll and overflow-behavior saves us from back nav
            _this.elementRef.nativeElement.scrollLeft = 10;
        }));
    }
    TuiCarouselScrollDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiCarouselScrollDirective.prototype, "tuiCarouselScroll", void 0);
    TuiCarouselScrollDirective = __decorate([
        Directive({
            selector: '[tuiCarouselScroll]',
        }),
        __param(0, Inject(ElementRef))
    ], TuiCarouselScrollDirective);
    return TuiCarouselScrollDirective;
}());

var TuiCarouselModule = /** @class */ (function () {
    function TuiCarouselModule() {
    }
    TuiCarouselModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                IntersectionObserverModule,
                TuiPanModule,
                TuiSwipeModule,
                TuiItemModule,
            ],
            declarations: [
                TuiCarouselComponent,
                TuiCarouselDirective,
                TuiCarouselButtonsDirective,
                TuiCarouselAutoscrollDirective,
                TuiCarouselScrollDirective,
            ],
            exports: [
                TuiCarouselComponent,
                TuiCarouselDirective,
                TuiCarouselButtonsDirective,
                TuiItemDirective,
            ],
        })
    ], TuiCarouselModule);
    return TuiCarouselModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { CAROUSEL_BUTTON_OPTIONS, TuiCarouselAutoscrollDirective, TuiCarouselButtonsDirective, TuiCarouselComponent, TuiCarouselDirective, TuiCarouselModule, TuiCarouselScrollDirective };
//# sourceMappingURL=taiga-ui-kit-components-carousel.js.map
