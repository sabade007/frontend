import { __assign, __extends, __read, __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';
import { NgControl, FormsModule } from '@angular/forms';
import { tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl } from '@taiga-ui/cdk';
import { TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiHintControllerDirective, TUI_HINT_WATCHED_CONTROLLER, TUI_MODE, TuiPrimitiveTextfieldComponent, HINT_CONTROLLER_PROVIDER, MODE_PROVIDER, TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';
import { combineLatest, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// TODO: 3.0 remove in ivy compilation
var PASSWORD_ICON_HIDE = function (_a) {
    var $implicit = _a.$implicit;
    return ($implicit === "s" ? "tuiIconEyeClosed" : "tuiIconHideLarge");
};
var PASSWORD_ICON_SHOW = function (_a) {
    var $implicit = _a.$implicit;
    return $implicit === "s" ? "tuiIconEyeOpen" : "tuiIconShowLarge";
};
/** Default values for the input password options. */
var TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {
    icons: {
        hide: PASSWORD_ICON_HIDE,
        show: PASSWORD_ICON_SHOW,
    },
};
var TUI_INPUT_PASSWORD_OPTIONS = new InjectionToken("Default parameters for input password component", {
    factory: function () { return TUI_INPUT_PASSWORD_DEFAULT_OPTIONS; },
});
var tuiInputPasswordOptionsProvider = function (options) { return ({
    provide: TUI_INPUT_PASSWORD_OPTIONS,
    useValue: __assign(__assign({}, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS), options),
}); };

// @dynamic
var TuiInputPasswordComponent = /** @class */ (function (_super) {
    __extends(TuiInputPasswordComponent, _super);
    function TuiInputPasswordComponent(control, changeDetectorRef, textfieldSize, passwordTexts$, options, hintController, mode$) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.textfieldSize = textfieldSize;
        _this.passwordTexts$ = passwordTexts$;
        _this.options = options;
        _this.hintController = hintController;
        _this.mode$ = mode$;
        _this.isPasswordHidden = true;
        _this.computedMode$ = combineLatest([
            _this.mode$.pipe(map(function (val) { return (val === 'onDark' ? 'onDark' : null); })),
            _this.hintController.change$.pipe(startWith(null), map(function () { return _this.hintController.mode; })),
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), mode = _b[0], controller = _b[1];
            return controller || mode;
        }), startWith(null));
        return _this;
    }
    TuiInputPasswordComponent_1 = TuiInputPasswordComponent;
    Object.defineProperty(TuiInputPasswordComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.computedDisabled || !this.textfield
                ? null
                : this.textfield.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPasswordComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPasswordComponent.prototype, "icon", {
        get: function () {
            return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPasswordComponent.prototype, "context", {
        get: function () {
            return this.getContext(this.textfieldSize.size);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPasswordComponent.prototype, "inputType", {
        get: function () {
            return this.isPasswordHidden || !this.interactive ? 'password' : 'text';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputPasswordComponent.prototype.onValueChange = function (textValue) {
        this.updateValue(textValue);
    };
    TuiInputPasswordComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiInputPasswordComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputPasswordComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputPasswordComponent.prototype.togglePasswordVisibility = function () {
        this.isPasswordHidden = !this.isPasswordHidden;
    };
    TuiInputPasswordComponent.prototype.getFallbackValue = function () {
        return '';
    };
    TuiInputPasswordComponent.prototype.getContext = function ($implicit) {
        return { $implicit: $implicit };
    };
    var TuiInputPasswordComponent_1;
    TuiInputPasswordComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PASSWORD_TEXTS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PASSWORD_OPTIONS,] }] },
        { type: TuiHintControllerDirective, decorators: [{ type: Inject, args: [TUI_HINT_WATCHED_CONTROLLER,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputPasswordComponent.prototype, "textfield", void 0);
    __decorate([
        tuiPure
    ], TuiInputPasswordComponent.prototype, "getContext", null);
    TuiInputPasswordComponent = TuiInputPasswordComponent_1 = __decorate([
        Component({
            selector: 'tui-input-password',
            template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [pseudoFocused]=\"pseudoFocused\"\n    [pseudoHovered]=\"pseudoHovered\"\n    [pseudoPressed]=\"pseudoPressed\"\n    [invalid]=\"computedInvalid\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [tuiTextfieldType]=\"inputType\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [iconContent]=\"interactive ? iconContent : null\"\n    [value]=\"value\"\n    (valueChange)=\"onValueChange($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n\n<ng-template\n    #iconContent=\"polymorpheus\"\n    [polymorpheus]=\"type\"\n>\n    <span\n        *ngIf=\"passwordTexts$ | async as texts\"\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"context\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                automation-id=\"tui-password__icon\"\n                tuiHintId=\"not_required\"\n                class=\"t-icon\"\n                [tuiHint]=\"texts[0] && texts[1] && hintContent\"\n                [tuiHintDirection]=\"hintController.direction\"\n                [tuiHintMode]=\"computedMode$ | async\"\n                [src]=\"icon\"\n                (click)=\"togglePasswordVisibility()\"\n            ></tui-svg>\n        </ng-template>\n\n        <ng-template\n            #hintContent=\"polymorpheus\"\n            polymorpheus\n        >\n            {{ isPasswordHidden ? texts[0] : texts[1] }}\n        </ng-template>\n    </span>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputPasswordComponent_1; }),
                },
                {
                    provide: AbstractTuiControl,
                    useExisting: forwardRef(function () { return TuiInputPasswordComponent_1; }),
                },
                HINT_CONTROLLER_PROVIDER,
                MODE_PROVIDER,
            ],
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon{cursor:pointer;pointer-events:auto}.t-textfield{border-radius:inherit;text-align:inherit}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_TEXTFIELD_SIZE)),
        __param(3, Inject(TUI_PASSWORD_TEXTS)),
        __param(4, Inject(TUI_INPUT_PASSWORD_OPTIONS)),
        __param(5, Inject(TUI_HINT_WATCHED_CONTROLLER)),
        __param(6, Inject(TUI_MODE))
    ], TuiInputPasswordComponent);
    return TuiInputPasswordComponent;
}(AbstractTuiControl));

var TuiInputPasswordDirective = /** @class */ (function (_super) {
    __extends(TuiInputPasswordDirective, _super);
    function TuiInputPasswordDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiInputPasswordDirective_1 = TuiInputPasswordDirective;
    TuiInputPasswordDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    TuiInputPasswordDirective.prototype.process = function (input) {
        this.input = input;
    };
    TuiInputPasswordDirective.prototype.ngDoCheck = function () {
        if (this.input) {
            this.input.type = this.host.isPasswordHidden ? 'password' : 'text';
        }
    };
    var TuiInputPasswordDirective_1;
    TuiInputPasswordDirective = TuiInputPasswordDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-password',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputPasswordDirective_1; }),
                },
            ],
        })
    ], TuiInputPasswordDirective);
    return TuiInputPasswordDirective;
}(TuiAbstractTextfieldHost));

var TuiInputPasswordModule = /** @class */ (function () {
    function TuiInputPasswordModule() {
    }
    TuiInputPasswordModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule,
                PolymorpheusModule,
                TuiSvgModule,
                TuiHintModule,
                TuiPrimitiveTextfieldModule,
                TuiTextfieldControllerModule,
            ],
            declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective],
            exports: [
                TuiInputPasswordComponent,
                TuiInputPasswordDirective,
                TuiTextfieldComponent,
            ],
        })
    ], TuiInputPasswordModule);
    return TuiInputPasswordModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { PASSWORD_ICON_HIDE, PASSWORD_ICON_SHOW, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS, TUI_INPUT_PASSWORD_OPTIONS, TuiInputPasswordComponent, TuiInputPasswordDirective, TuiInputPasswordModule, tuiInputPasswordOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-password.js.map
