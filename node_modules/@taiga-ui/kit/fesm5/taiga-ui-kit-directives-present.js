import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, Output, HostListener, Directive, NgModule } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { isFirefox, isCurrentTarget } from '@taiga-ui/cdk';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, skip } from 'rxjs/operators';

var TuiPresentDirective = /** @class */ (function () {
    function TuiPresentDirective(_a, userAgent) {
        var _this = this;
        var nativeElement = _a.nativeElement;
        this.visibility$ = new BehaviorSubject(false);
        this.tuiPresentChange = this.visibility$.pipe(distinctUntilChanged(), skip(1));
        if (isFirefox(userAgent)) {
            return;
        }
        var observer = new MutationObserver(function () {
            if (!nativeElement.offsetParent &&
                nativeElement.offsetWidth === 0 &&
                nativeElement.offsetHeight === 0) {
                _this.visibility$.next(false);
            }
        });
        observer.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['style', 'class'],
        });
    }
    /**
     * Someday animationcancel would work and mutation observer would not be needed:
     * https://drafts.csswg.org/css-animations/#eventdef-animationevent-animationcancel
     * It would also trigger on CSS like display: none on parent nodes which is awesome
     * but currently only works in Firefox
     * ___
     * TODO: remove MutationObserver when we bump versions of supported browsers:
     *** Safari 12+
     *** Chrome 83+
     * See: {@link https://caniuse.com/mdn-api_window_animationcancel_event}
     */
    TuiPresentDirective.prototype.onAnimation = function (event, visibility) {
        if (isCurrentTarget(event)) {
            this.visibility$.next(visibility);
        }
    };
    TuiPresentDirective.prototype.ngOnDestroy = function () {
        this.visibility$.next(false);
    };
    TuiPresentDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiPresentDirective.prototype, "tuiPresentChange", void 0);
    __decorate([
        HostListener('animationcancel', ['$event', 'false']),
        HostListener('animationstart', ['$event', 'true'])
    ], TuiPresentDirective.prototype, "onAnimation", null);
    TuiPresentDirective = __decorate([
        Directive({
            selector: '[tuiPresentChange]',
            host: {
                '[style.animation]': '"tuiPresent 1s infinite"',
            },
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(USER_AGENT))
    ], TuiPresentDirective);
    return TuiPresentDirective;
}());

var TuiPresentModule = /** @class */ (function () {
    function TuiPresentModule() {
    }
    TuiPresentModule = __decorate([
        NgModule({
            declarations: [TuiPresentDirective],
            exports: [TuiPresentDirective],
        })
    ], TuiPresentModule);
    return TuiPresentModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPresentDirective, TuiPresentModule };
//# sourceMappingURL=taiga-ui-kit-directives-present.js.map
