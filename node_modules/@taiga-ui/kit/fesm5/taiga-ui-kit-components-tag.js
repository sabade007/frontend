import { __assign, __decorate, __param } from 'tslib';
import { InjectionToken, EventEmitter, ElementRef, Inject, Input, HostBinding, Output, ViewChild, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { setNativeFocused, tuiDefaultProp, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import { sizeBigger, TUI_MODE, MODE_PROVIDER, TuiSvgModule, TuiLoaderModule } from '@taiga-ui/core';
import { stringHashToHsl } from '@taiga-ui/kit/utils/format';
import { Observable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the tag options. */
var TUI_TAG_DEFAULT_OPTIONS = {
    size: "m",
    status: "default",
    autoColor: false,
};
var TUI_TAG_OPTIONS = new InjectionToken("Default parameters for tag component", {
    factory: function () { return TUI_TAG_DEFAULT_OPTIONS; },
});
var tuiTagOptionsProvider = function (options) { return ({
    provide: TUI_TAG_OPTIONS,
    useValue: __assign(__assign({}, TUI_TAG_DEFAULT_OPTIONS), options),
}); };

var ALLOWED_SPACE_REGEXP = new RegExp(',|[\\s]');
var TuiTagComponent = /** @class */ (function () {
    function TuiTagComponent(elementRef, mode$, options) {
        this.elementRef = elementRef;
        this.mode$ = mode$;
        this.options = options;
        // TODO: Possibly implement standard focus mechanisms and outline
        this.value = '';
        this.editable = false;
        // TODO: 3.0: Remove
        this.allowSpaces = true;
        this.separator = ',';
        this.maxLength = null;
        this.size = this.options.size;
        this.showLoader = false;
        this.status = this.options.status;
        this.hoverable = false;
        this.removable = false;
        this.disabled = false;
        this.autoColor = this.options.autoColor;
        // TODO: 3.0 Remove null
        this.leftContent = null;
        this.edited = new EventEmitter();
        this.editing = false;
        this.editedText = null;
    }
    Object.defineProperty(TuiTagComponent.prototype, "input", {
        set: function (input) {
            if (input) {
                setNativeFocused(input.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTagComponent.prototype, "backgroundColor", {
        get: function () {
            return this.autoColor ? stringHashToHsl(this.value) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTagComponent.prototype, "canRemove", {
        get: function () {
            return this.removable && !this.disabled && !this.showLoader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTagComponent.prototype, "displayText", {
        get: function () {
            return this.editedText === null ? this.value : this.editedText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTagComponent.prototype, "loaderSize", {
        get: function () {
            return sizeBigger(this.size) ? 's' : 'xs';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTagComponent.prototype, "hasIcon", {
        get: function () {
            return this.showLoader || this.removable;
        },
        enumerable: true,
        configurable: true
    });
    TuiTagComponent.prototype.edit = function (event) {
        if (!this.canEdit) {
            return;
        }
        event.preventDefault();
        this.editing = true;
        this.editedText = this.value;
    };
    TuiTagComponent.prototype.remove = function (event) {
        if (!this.canRemove) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.edited.emit('');
    };
    TuiTagComponent.prototype.onInput = function (value) {
        var newTags = this.allowSpaces
            ? value.split(this.separator)
            : value.split(ALLOWED_SPACE_REGEXP);
        if (newTags.length > 1) {
            this.save(String(newTags));
            return;
        }
        this.editedText = value;
    };
    TuiTagComponent.prototype.onKeyDown = function (event) {
        event.stopPropagation();
        switch (event.key.toLowerCase()) {
            case 'enter':
                event.preventDefault();
                this.save(this.editedText || '');
                break;
            case 'escape':
            case 'esc':
                event.preventDefault();
                this.stopEditing();
                setNativeFocused(this.elementRef.nativeElement);
                break;
            default:
                break;
        }
    };
    TuiTagComponent.prototype.onBlur = function () {
        if (this.editedText !== null) {
            this.save(this.editedText);
        }
    };
    Object.defineProperty(TuiTagComponent.prototype, "canEdit", {
        get: function () {
            return this.editable && !this.disabled && !this.showLoader;
        },
        enumerable: true,
        configurable: true
    });
    TuiTagComponent.prototype.stopEditing = function () {
        this.editing = false;
        this.editedText = null;
    };
    TuiTagComponent.prototype.save = function (value) {
        this.stopEditing();
        this.edited.emit(value.trim());
    };
    TuiTagComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TAG_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "editable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "allowSpaces", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "separator", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "maxLength", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "showLoader", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-status'),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "status", void 0);
    __decorate([
        Input(),
        HostBinding('class._hoverable'),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "hoverable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "removable", void 0);
    __decorate([
        Input(),
        HostBinding('class._disabled'),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        HostBinding('class._autocolor'),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "autoColor", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTagComponent.prototype, "leftContent", void 0);
    __decorate([
        Output()
    ], TuiTagComponent.prototype, "edited", void 0);
    __decorate([
        HostBinding('class._editing')
    ], TuiTagComponent.prototype, "editing", void 0);
    __decorate([
        ViewChild('input', { read: ElementRef })
    ], TuiTagComponent.prototype, "input", null);
    __decorate([
        HostBinding('class._has-icon')
    ], TuiTagComponent.prototype, "hasIcon", null);
    __decorate([
        HostListener('keydown.enter', ['$event'])
    ], TuiTagComponent.prototype, "edit", null);
    __decorate([
        HostListener('keydown.delete', ['$event']),
        HostListener('keydown.backspace', ['$event'])
    ], TuiTagComponent.prototype, "remove", null);
    TuiTagComponent = __decorate([
        Component({
            selector: 'tui-tag, a[tuiTag]',
            template: "<div\n    class=\"t-tag\"\n    [style.backgroundColor]=\"backgroundColor\"\n    (dblclick)=\"edit($event)\"\n>\n    <div\n        *ngIf=\"leftContent\"\n        polymorpheus-outlet\n        class=\"t-left-content\"\n        [content]=\"leftContent\"\n    ></div>\n    <span\n        automation-id=\"tui-tag__text\"\n        class=\"t-text\"\n    >\n        {{ displayText }}\n    </span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-icon t-icon_loader\"\n        [inheritColor]=\"true\"\n        [size]=\"loaderSize\"\n    ></tui-loader>\n    <tui-svg\n        *ngIf=\"canRemove\"\n        tuiPreventDefault=\"mousedown\"\n        automation-id=\"tui-tag__remove\"\n        src=\"tuiIconCloseLarge\"\n        class=\"t-icon\"\n        (click)=\"remove($event)\"\n    ></tui-svg>\n</div>\n<input\n    *ngIf=\"editing\"\n    #input\n    automation-id=\"tui-tag__edit\"\n    type=\"text\"\n    class=\"t-edit\"\n    [attr.maxLength]=\"maxLength\"\n    [ngModel]=\"editedText\"\n    (ngModelChange)=\"onInput($event)\"\n    (blur)=\"onBlur()\"\n    (keydown)=\"onKeyDown($event)\"\n/>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [MODE_PROVIDER],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
            styles: [":host{transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);border-radius:var(--tui-radius-s);max-width:100%;cursor:default;outline:0;text-decoration:none}:host:after{transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:'';box-sizing:border-box;border-radius:inherit;pointer-events:none}:host._hoverable:active[data-tui-host-status=custom]:after,:host._hoverable:hover[data-tui-host-status=custom]:after{background-color:var(--tui-clear)}:host:focus:after{border:2px solid var(--tui-focus)}:host[data-tui-host-status=primary]{background-color:var(--tui-primary);color:var(--tui-primary-text)}:host[data-tui-host-status=primary]._hoverable:hover{background-color:var(--tui-primary-hover)}:host[data-tui-host-status=primary]._hoverable:active{background-color:var(--tui-primary-active)}:host[data-tui-host-status=error]{background-color:var(--tui-error-bg);color:var(--tui-text-01)}:host[data-tui-host-status=error]._hoverable:active,:host[data-tui-host-status=error]._hoverable:hover{background-color:var(--tui-error-bg-hover)}:host[data-tui-host-status=error][data-mode=onDark]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}:host[data-tui-host-status=error][data-mode=onDark]._hoverable:active,:host[data-tui-host-status=error][data-mode=onDark]._hoverable:hover{background-color:var(--tui-error-bg-night-hover)}:host[data-tui-host-status=success]{background-color:var(--tui-success-bg);color:var(--tui-text-01)}:host[data-tui-host-status=success]._hoverable:active,:host[data-tui-host-status=success]._hoverable:hover{background-color:var(--tui-success-bg-hover)}:host[data-tui-host-status=success][data-mode=onDark]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}:host[data-tui-host-status=success][data-mode=onDark]._hoverable:active,:host[data-tui-host-status=success][data-mode=onDark]._hoverable:hover{background-color:var(--tui-success-bg-night-hover)}:host[data-tui-host-status=warning]{background-color:var(--tui-warning-bg);color:var(--tui-text-01)}:host[data-tui-host-status=warning]._hoverable:active,:host[data-tui-host-status=warning]._hoverable:hover{background-color:var(--tui-warning-bg-hover)}:host[data-tui-host-status=warning][data-mode=onDark]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}:host[data-tui-host-status=warning][data-mode=onDark]._hoverable:active,:host[data-tui-host-status=warning][data-mode=onDark]._hoverable:hover{background-color:var(--tui-warning-bg-night-hover)}:host[data-tui-host-status=default]{color:var(--tui-text-01-night);background-color:var(--tui-base-06)}:host[data-tui-host-status=default]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}:host[data-tui-host-status=default]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}:host[data-tui-host-status=default][data-mode=onDark]{color:var(--tui-text-01-night);background-color:var(--tui-clear-inverse)}:host[data-tui-host-status=default][data-mode=onDark]._hoverable:hover{background-color:var(--tui-clear-inverse-hover)}:host[data-tui-host-status=default][data-mode=onDark]._hoverable:active{background-color:var(--tui-clear-inverse-active)}:host[data-tui-host-status=default][data-mode=onDark]:focus:after{border:2px solid var(--tui-base-01)}:host[data-tui-host-status=default][data-mode=onLight]{background-color:var(--tui-clear);color:var(--tui-text-01)}:host[data-tui-host-status=default][data-mode=onLight]._hoverable:hover{background-color:var(--tui-clear-hover)}:host[data-tui-host-status=default][data-mode=onLight]._hoverable:active{background-color:var(--tui-clear-active)}:host._editing{background:0 0!important}:host._disabled{pointer-events:none;opacity:var(--tui-disabled-opacity)}:host._hoverable{cursor:pointer}:host._autocolor{color:var(--tui-text-01)}.t-text{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;width:auto;align-items:center;border-radius:inherit}:host[data-size='s'] .t-tag{font:var(--tui-font-text-xs);height:1.25rem;padding:0 .5rem}:host[data-size='m'] .t-tag{height:var(--tui-height-xs);padding:0 .5rem}:host[data-size='l'] .t-tag{height:var(--tui-height-s);padding:0 .75rem}:host._has-icon[data-size='s'] .t-tag{padding:0 .125rem 0 .75rem;-webkit-padding-start:.75rem;padding-inline-start:.75rem;-webkit-padding-end:.125rem;padding-inline-end:.125rem}:host._has-icon[data-size='m'] .t-tag{padding:0 0 0 .75rem;-webkit-padding-start:.75rem;padding-inline-start:.75rem;-webkit-padding-end:0;padding-inline-end:0}:host._has-icon[data-size='l'] .t-tag{padding:0 .25rem 0 .75rem;-webkit-padding-start:.75rem;padding-inline-start:.75rem;-webkit-padding-end:.25rem;padding-inline-end:.25rem}:host._editing .t-tag{visibility:hidden}:host._disabled._has-icon[data-size='m'] .t-tag,:host._disabled._has-icon[data-size='s'] .t-tag{padding:0 .5rem 0 .75rem;-webkit-padding-start:.75rem;padding-inline-start:.75rem;-webkit-padding-end:.5rem;padding-inline-end:.5rem}:host._disabled._has-icon[data-size='l'] .t-tag{padding:0 .75rem}.t-edit{padding:0 0 0 .5rem;margin:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:var(--tui-font-text-s);color:var(--tui-text-01);width:100%;box-sizing:border-box;-webkit-padding-start:.5rem;padding-inline-start:.5rem;-webkit-padding-end:0;padding-inline-end:0}.t-edit:-webkit-autofill,.t-edit:-webkit-autofill:focus,.t-edit:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host[data-size='s'] .t-edit{height:1.25rem;line-height:1.25rem}:host[data-size='m'] .t-edit{height:var(--tui-height-xs);line-height:var(--tui-height-xs)}:host[data-size='l'] .t-edit{height:var(--tui-height-s);line-height:var(--tui-height-s);padding:0 0 0 .75rem;-webkit-padding-start:.75rem;padding-inline-start:.75rem;-webkit-padding-end:0;padding-inline-end:0}.t-icon{margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0;height:100%}.t-icon:not(.t-icon_loader){cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity)}.t-icon:hover{opacity:1}.t-icon_loader{width:1rem;height:1rem;margin:0 .25rem}:host[data-size='s'] .t-icon_loader{margin:0 .375rem 0 .75rem;-webkit-margin-start:.75rem;margin-inline-start:.75rem;-webkit-margin-end:.375rem;margin-inline-end:.375rem;width:.5rem;height:.5rem}:host[data-size='l'] .t-icon_loader{margin:0 .25rem 0 .5rem;-webkit-margin-start:.5rem;margin-inline-start:.5rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem}.t-left-content{margin:0 .25rem 0 0;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:.25rem;margin-inline-end:.25rem;width:1rem;height:1rem}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TUI_MODE)),
        __param(2, Inject(TUI_TAG_OPTIONS))
    ], TuiTagComponent);
    return TuiTagComponent;
}());

var TuiTagModule = /** @class */ (function () {
    function TuiTagModule() {
    }
    TuiTagModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule,
                TuiPreventDefaultModule,
                TuiSvgModule,
                TuiLoaderModule,
                PolymorpheusModule,
            ],
            declarations: [TuiTagComponent],
            exports: [TuiTagComponent],
        })
    ], TuiTagModule);
    return TuiTagModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ALLOWED_SPACE_REGEXP, TUI_TAG_DEFAULT_OPTIONS, TUI_TAG_OPTIONS, TuiTagComponent, TuiTagModule, tuiTagOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-tag.js.map
