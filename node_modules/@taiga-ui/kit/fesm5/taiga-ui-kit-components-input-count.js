import { __assign, __extends, __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isNativeFocused, isPresent, setNativeFocused, clamp, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl } from '@taiga-ui/cdk';
import { tuiCreateNumberMask, tuiMaskedNumberStringToNumber, formatNumber, TUI_TEXTFIELD_APPEARANCE, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { TextMaskModule } from 'angular2-text-mask';

// TODO: 3.0 remove in ivy compilation
var PASSWORD_ICON_UP = "tuiIconPlus";
var PASSWORD_ICON_DOWN = "tuiIconMinus";
/** Default values for the input count options. */
var TUI_INPUT_COUNT_DEFAULT_OPTIONS = {
    icons: {
        up: PASSWORD_ICON_UP,
        down: PASSWORD_ICON_DOWN,
    },
    appearance: "textfield",
    hideButtons: false,
    min: 0,
    max: Infinity,
    step: 1,
    postfix: "",
};
var TUI_INPUT_COUNT_OPTIONS = new InjectionToken("Default parameters for input count component", {
    factory: function () { return TUI_INPUT_COUNT_DEFAULT_OPTIONS; },
});
var tuiInputCountOptionsProvider = function (options) { return ({
    provide: TUI_INPUT_COUNT_OPTIONS,
    useValue: __assign(__assign({}, TUI_INPUT_COUNT_DEFAULT_OPTIONS), options),
}); };

// @dynamic
var TuiInputCountComponent = /** @class */ (function (_super) {
    __extends(TuiInputCountComponent, _super);
    function TuiInputCountComponent(control, changeDetectorRef, appearance, textfieldSize, minusTexts$, isMobile, options, numberFormat) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.appearance = appearance;
        _this.textfieldSize = textfieldSize;
        _this.minusTexts$ = minusTexts$;
        _this.isMobile = isMobile;
        _this.options = options;
        _this.numberFormat = numberFormat;
        _this.unfinishedValue = '';
        _this.step = _this.options.step;
        _this.min = _this.options.min;
        _this.max = _this.options.max;
        _this.hideButtons = _this.options.hideButtons;
        _this.prefix = '';
        _this.postfix = _this.options.postfix;
        return _this;
    }
    TuiInputCountComponent_1 = TuiInputCountComponent;
    TuiInputCountComponent.prototype.getMask = function (allowNegative) {
        return {
            mask: tuiCreateNumberMask({
                allowNegative: allowNegative,
                decimalSymbol: this.numberFormat.decimalSeparator,
                thousandSymbol: this.numberFormat.thousandSeparator,
            }),
            guide: false,
        };
    };
    Object.defineProperty(TuiInputCountComponent.prototype, "buttonsHidden", {
        // TODO: 3.0 Remove in v.3
        get: function () {
            return this.hideButtons || this.appearance === 'table';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "iconUp", {
        get: function () {
            return this.options.icons.up;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "iconDown", {
        get: function () {
            return this.options.icons.down;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return !this.primitiveTextfield || this.computedDisabled
                ? null
                : this.primitiveTextfield.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "size", {
        get: function () {
            return this.textfieldSize.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "exampleText", {
        get: function () {
            return String(this.min);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "computedValue", {
        get: function () {
            return this.focused ? this.nativeValue : this.formatNumber(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "minusButtonDisabled", {
        get: function () {
            return !this.interactive || (isPresent(this.value) && this.value <= this.min);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "plusButtonDisabled", {
        get: function () {
            return !this.interactive || (isPresent(this.value) && this.value >= this.max);
        },
        enumerable: true,
        configurable: true
    });
    TuiInputCountComponent.prototype.onButtonMouseDown = function (event, disabled) {
        if (disabled === void 0) { disabled = false; }
        if (disabled || !this.nativeFocusableElement || this.isMobile) {
            return;
        }
        event.preventDefault();
        setNativeFocused(this.nativeFocusableElement);
    };
    TuiInputCountComponent.prototype.onFocused = function (focused) {
        if (!focused) {
            this.onBlur();
        }
        this.updateFocused(focused);
    };
    TuiInputCountComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputCountComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputCountComponent.prototype.onValueChange = function () {
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = this.nativeValue;
            return;
        }
        this.unfinishedValue = null;
        var capped = this.capValue(this.nativeNumberValue);
        if (this.isNotNumber(capped)) {
            this.updateValue(null);
            return;
        }
        var newValue = this.formatNumber(capped);
        if (this.nativeValue !== newValue) {
            this.nativeValue = newValue;
        }
        this.updateValue(capped);
    };
    TuiInputCountComponent.prototype.decreaseValue = function () {
        if (this.readOnly) {
            return;
        }
        var newValue = (this.value || 0) - this.step;
        this.safeUpdateValue(newValue);
    };
    TuiInputCountComponent.prototype.increaseValue = function () {
        if (this.readOnly) {
            return;
        }
        var newValue = (this.value || 0) + this.step;
        this.safeUpdateValue(newValue);
    };
    TuiInputCountComponent.prototype.onKeydown = function (event) {
        switch (event.key) {
            case 'ArrowUp':
            case 'Up':
                this.increaseValue();
                event.preventDefault();
                break;
            case 'ArrowDown':
            case 'Down':
                this.decreaseValue();
                event.preventDefault();
                break;
            default:
                break;
        }
    };
    Object.defineProperty(TuiInputCountComponent.prototype, "nativeNumberValue", {
        get: function () {
            return parseInt(this.nativeValue.split(this.numberFormat.thousandSeparator).join(''), 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputCountComponent.prototype, "nativeValue", {
        get: function () {
            return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
        },
        set: function (value) {
            if (!this.nativeFocusableElement) {
                return;
            }
            this.nativeFocusableElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputCountComponent.prototype.safeUpdateValue = function (newValue) {
        var value = clamp(newValue, this.min, this.max);
        this.updateValue(value);
        this.nativeValue = this.formatNumber(value);
    };
    TuiInputCountComponent.prototype.capValue = function (value) {
        var capped = Math.min(value, this.max);
        return Number.isNaN(capped) || capped < this.min ? null : capped;
    };
    TuiInputCountComponent.prototype.onBlur = function () {
        var nativeNumberValue = this.unfinishedValue
            ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (this.isNotNumber(nativeNumberValue)) {
            this.updateValue(null);
            return;
        }
        var value = Math.max(nativeNumberValue || 0, this.min);
        var formattedValue = this.formatNumber(value);
        this.nativeValue = formattedValue;
        this.updateValue(value);
        if (this.primitiveTextfield) {
            this.primitiveTextfield.value = formattedValue;
        }
    };
    TuiInputCountComponent.prototype.formatNumber = function (value) {
        return this.isNotNumber(value)
            ? ''
            : formatNumber(value, null, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
    };
    TuiInputCountComponent.prototype.isNotNumber = function (value) {
        return !isPresent(value) || Number.isNaN(value);
    };
    Object.defineProperty(TuiInputCountComponent.prototype, "isNativeValueNotFinished", {
        get: function () {
            var nativeNumberValue = this.nativeNumberValue;
            return nativeNumberValue < 0
                ? nativeNumberValue > this.max
                : nativeNumberValue < this.min;
        },
        enumerable: true,
        configurable: true
    });
    var TuiInputCountComponent_1;
    TuiInputCountComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_APPEARANCE,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_PLUS_MINUS_TEXTS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_COUNT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_NUMBER_FORMAT,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputCountComponent.prototype, "primitiveTextfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "step", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "hideButtons", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "prefix", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputCountComponent.prototype, "postfix", void 0);
    __decorate([
        tuiPure
    ], TuiInputCountComponent.prototype, "getMask", null);
    __decorate([
        HostBinding('class._hide-buttons')
    ], TuiInputCountComponent.prototype, "buttonsHidden", null);
    __decorate([
        HostBinding('attr.data-size')
    ], TuiInputCountComponent.prototype, "size", null);
    TuiInputCountComponent = TuiInputCountComponent_1 = __decorate([
        Component({
            selector: 'tui-input-count',
            template: "<tui-primitive-textfield\n    tuiValueAccessor\n    tuiTextfieldAutocomplete=\"off\"\n    tuiTextfieldInputMode=\"numeric\"\n    class=\"t-textfield\"\n    [tuiTextfieldMaxLength]=\"18\"\n    [pseudoFocused]=\"pseudoFocused\"\n    [pseudoHovered]=\"pseudoHovered\"\n    [pseudoPressed]=\"pseudoPressed\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [prefix]=\"prefix\"\n    [postfix]=\"postfix\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [textMask]=\"getMask(min < 0)\"\n    [invalid]=\"computedInvalid\"\n    [value]=\"computedValue\"\n    (valueChange)=\"onValueChange()\"\n    (keydown)=\"onKeydown($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n<ng-container *ngIf=\"!buttonsHidden\">\n    <ng-container *ngIf=\"minusTexts$ | async as texts\">\n        <section class=\"t-buttons\">\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__plus-button\"\n                size=\"s\"\n                class=\"t-button t-button_plus\"\n                [icon]=\"iconUp\"\n                [appearance]=\"options.appearance\"\n                [title]=\"texts[0]\"\n                [disabled]=\"plusButtonDisabled\"\n                [focusable]=\"false\"\n                (mousedown)=\"onButtonMouseDown($event, plusButtonDisabled)\"\n                (click)=\"increaseValue()\"\n            ></button>\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__minus-button\"\n                size=\"s\"\n                class=\"t-button t-button_minus\"\n                [icon]=\"iconDown\"\n                [appearance]=\"options.appearance\"\n                [disabled]=\"minusButtonDisabled\"\n                [focusable]=\"false\"\n                [title]=\"texts[1]\"\n                (mousedown)=\"onButtonMouseDown($event, minusButtonDisabled)\"\n                (click)=\"decreaseValue()\"\n            ></button>\n        </section>\n    </ng-container>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputCountComponent_1; }),
                },
                {
                    provide: AbstractTuiControl,
                    useExisting: forwardRef(function () { return TuiInputCountComponent_1; }),
                },
            ],
            styles: [":host{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}:host._disabled{pointer-events:none}:host[data-size='l']{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}:host:not(._hide-buttons) .t-textfield{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons{display:flex;flex-direction:column;margin-left:.125rem;height:100%}.t-buttons .t-button{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem)}.t-buttons .t-button_plus{margin-bottom:.125rem;border-radius:0 var(--tui-radius-m) 0 0}.t-buttons .t-button_minus{border-radius:0 0 var(--tui-radius-m)}:host[data-size='l'] .t-buttons .t-button{width:calc(var(--tui-height-l) * .75)}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_TEXTFIELD_APPEARANCE)),
        __param(3, Inject(TUI_TEXTFIELD_SIZE)),
        __param(4, Inject(TUI_PLUS_MINUS_TEXTS)),
        __param(5, Inject(TUI_IS_MOBILE)),
        __param(6, Inject(TUI_INPUT_COUNT_OPTIONS)),
        __param(7, Inject(TUI_NUMBER_FORMAT))
    ], TuiInputCountComponent);
    return TuiInputCountComponent;
}(AbstractTuiNullableControl));

var TuiInputCountDirective = /** @class */ (function (_super) {
    __extends(TuiInputCountDirective, _super);
    function TuiInputCountDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiInputCountDirective_1 = TuiInputCountDirective;
    TuiInputCountDirective.prototype.onValueChange = function () {
        this.host.onValueChange();
    };
    TuiInputCountDirective.prototype.process = function (input) {
        input.autocomplete = 'off';
        input.inputMode = 'numeric';
    };
    var TuiInputCountDirective_1;
    TuiInputCountDirective = TuiInputCountDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-count',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputCountDirective_1; }),
                },
            ],
        })
    ], TuiInputCountDirective);
    return TuiInputCountDirective;
}(TuiAbstractTextfieldHost));

var TuiInputCountModule = /** @class */ (function () {
    function TuiInputCountModule() {
    }
    TuiInputCountModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TextMaskModule,
                TuiButtonModule,
                TuiPrimitiveTextfieldModule,
                TuiTextfieldControllerModule,
                TuiValueAccessorModule,
                PolymorpheusModule,
            ],
            declarations: [TuiInputCountComponent, TuiInputCountDirective],
            exports: [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent],
        })
    ], TuiInputCountModule);
    return TuiInputCountModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { PASSWORD_ICON_DOWN, PASSWORD_ICON_UP, TUI_INPUT_COUNT_DEFAULT_OPTIONS, TUI_INPUT_COUNT_OPTIONS, TuiInputCountComponent, TuiInputCountDirective, TuiInputCountModule, tuiInputCountOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-count.js.map
