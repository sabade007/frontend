import { TuiDay, TuiDayRange, TUI_FIRST_DAY, HOURS_IN_DAY, TuiTime, tuiReplayedValueChangesFrom } from '@taiga-ui/cdk';
import { TuiDayRangePeriod } from '@taiga-ui/kit/classes';
import { __read } from 'tslib';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';

function tuiCreateDefaultDayRangePeriods(periodTitles) {
    if (periodTitles === void 0) { periodTitles = [
        "For all the time",
        "Today",
        "Yesterday",
        "Current week",
        "Current month",
        "Previous month",
    ]; }
    var today = TuiDay.currentLocal();
    var yesterday = today.append({ day: -1 });
    var startOfWeek = today.append({ day: -today.dayOfWeek() });
    var endOfWeek = startOfWeek.append({ day: 6 });
    var startOfMonth = today.append({ day: 1 - today.day });
    var endOfMonth = startOfMonth.append({ month: 1, day: -1 });
    var startOfLastMonth = startOfMonth.append({ month: -1 });
    return [
        new TuiDayRangePeriod(new TuiDayRange(TUI_FIRST_DAY, today), periodTitles[0]),
        new TuiDayRangePeriod(new TuiDayRange(today, today), periodTitles[1]),
        new TuiDayRangePeriod(new TuiDayRange(yesterday, yesterday), periodTitles[2]),
        new TuiDayRangePeriod(new TuiDayRange(startOfWeek, endOfWeek), periodTitles[3]),
        new TuiDayRangePeriod(new TuiDayRange(startOfMonth, endOfMonth), periodTitles[4]),
        new TuiDayRangePeriod(new TuiDayRange(startOfLastMonth, startOfMonth.append({ day: -1 })), periodTitles[5]),
    ];
}

function tuiCreateTimePeriods(minHour, maxHour, minutes) {
    if (minHour === void 0) { minHour = 0; }
    if (maxHour === void 0) { maxHour = HOURS_IN_DAY; }
    if (minutes === void 0) { minutes = [0, 30]; }
    var timeArray = [];
    for (var i = minHour; i < maxHour; i++) {
        for (var j = 0; j < minutes.length; j++) {
            var time = new TuiTime(i, minutes[j]);
            timeArray.push(time);
        }
    }
    return timeArray;
}

/**
 * @deprecated: use {@link tuiGetPrecision} instead
 * @return fractional length
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getPrecision(num) {
    var _a = __read(String(num).split("."), 2), _b = _a[1], fractionPart = _b === void 0 ? "" : _b;
    return fractionPart.length;
}
var tuiGetPrecision = getPrecision;

/**
 * @deprecated: use {@link tuiIsFlat} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function isFlat(items) {
    return !Array.isArray(items[0]);
}
var tuiIsFlat = isFlat;

/**
 * @internal
 * @deprecated use {@link tuiReplayControlValueChangesFactory}
 * TODO: 3.0 name should be shorter and start with lowercase letter.
 */
function TuiReplayControlValueChangesFactory(control, valueTransformer) {
    return control
        ? tuiReplayedValueChangesFrom(control).pipe(map(function (value) {
            return valueTransformer
                ? valueTransformer.fromControlValue(value)
                : value;
        }))
        : of(null);
}
var tuiReplayControlValueChangesFactory = TuiReplayControlValueChangesFactory;

/**
 * Generated bundle index. Do not edit.
 */

export { TuiReplayControlValueChangesFactory, getPrecision, isFlat, tuiCreateDefaultDayRangePeriods, tuiCreateTimePeriods, tuiGetPrecision, tuiIsFlat, tuiReplayControlValueChangesFactory };
//# sourceMappingURL=taiga-ui-kit-utils-miscellaneous.js.map
