import { __extends, __decorate, __param, __spread } from 'tslib';
import { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, CHAR_EN_DASH, TuiMonthRange, tuiDefaultProp, AbstractTuiNullableControl, TuiDestroyService, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule } from '@taiga-ui/cdk';
import { TuiMonthPipe, sizeBigger, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER, TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';
import { Subject, combineLatest, Observable } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiCalendarMonthModule } from '@taiga-ui/kit/components/calendar-month';

var TUI_INPUT_MONTH_RANGE_PROVIDERS = [
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(function () { return TuiInputMonthRangeComponent; }),
    },
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(function () { return TuiInputMonthRangeComponent; }),
    },
    LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER,
    TUI_MONTH_FORMATTER_PROVIDER,
    TuiMonthPipe,
];

// @dynamic
var TuiInputMonthRangeComponent = /** @class */ (function (_super) {
    __extends(TuiInputMonthRangeComponent, _super);
    function TuiInputMonthRangeComponent(control, changeDetectorRef, formatter, textfieldSize) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.formatter = formatter;
        _this.textfieldSize = textfieldSize;
        _this.min = TUI_FIRST_DAY;
        _this.max = TUI_LAST_DAY;
        _this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        _this.open = false;
        return _this;
    }
    Object.defineProperty(TuiInputMonthRangeComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.textfield ? this.textfield.nativeFocusableElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthRangeComponent.prototype, "focused", {
        get: function () {
            return !!this.textfield && this.textfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthRangeComponent.prototype, "calendarIcon", {
        get: function () {
            return sizeBigger(this.textfieldSize.size)
                ? 'tuiIconCalendarLarge'
                : 'tuiIconCalendar';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputMonthRangeComponent.prototype.computeValue = function (from, to) {
        var formattedTo = from === to && this.focused && !this.readOnly ? '' : to;
        return from + " " + CHAR_EN_DASH + " " + formattedTo;
    };
    TuiInputMonthRangeComponent.prototype.onValueChange = function (value) {
        if (value) {
            return;
        }
        this.updateValue(null);
        this.onOpenChange(true);
    };
    TuiInputMonthRangeComponent.prototype.onMonthClick = function (month) {
        if (this.value === null || !this.value.isSingleMonth) {
            this.writeValue(new TuiMonthRange(month, month));
            return;
        }
        this.updateValue(TuiMonthRange.sort(this.value.from, month));
        this.close();
    };
    TuiInputMonthRangeComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputMonthRangeComponent.prototype.onOpenChange = function (open) {
        this.open = open;
    };
    TuiInputMonthRangeComponent.prototype.onActiveZone = function (focused) {
        var _a;
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleMonth) {
            this.updateValue(new TuiMonthRange(this.value.from, this.value.from));
        }
    };
    TuiInputMonthRangeComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.close();
    };
    TuiInputMonthRangeComponent.prototype.close = function () {
        this.open = false;
    };
    TuiInputMonthRangeComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
        { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputMonthRangeComponent.prototype, "textfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthRangeComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthRangeComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputMonthRangeComponent.prototype, "disabledItemHandler", void 0);
    TuiInputMonthRangeComponent = __decorate([
        Component({
            selector: 'tui-input-month-range',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"calendarIcon\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"\n            value\n                ? computeValue(value.from | tuiMapper: formatter | async, value.to | tuiMapper: formatter | async)\n                : ''\n        \"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n",
            providers: TUI_INPUT_MONTH_RANGE_PROVIDERS,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_MONTH_FORMATTER)),
        __param(3, Inject(TUI_TEXTFIELD_SIZE))
    ], TuiInputMonthRangeComponent);
    return TuiInputMonthRangeComponent;
}(AbstractTuiNullableControl));

var TuiInputMonthRangeDirective = /** @class */ (function (_super) {
    __extends(TuiInputMonthRangeDirective, _super);
    function TuiInputMonthRangeDirective(host, formatter, destroy$) {
        var _this = _super.call(this, host) || this;
        _this.value$ = new Subject();
        _this.localizedValue = ['', ''];
        _this.value$
            .pipe(distinctUntilChanged(), switchMap(function (value) {
            return combineLatest([
                formatter((value === null || value === void 0 ? void 0 : value.from) || null),
                formatter((value === null || value === void 0 ? void 0 : value.to) || null),
            ]);
        }), takeUntil(destroy$))
            .subscribe(function (localizedValue) {
            _this.localizedValue = localizedValue;
        });
        return _this;
    }
    TuiInputMonthRangeDirective_1 = TuiInputMonthRangeDirective;
    Object.defineProperty(TuiInputMonthRangeDirective.prototype, "readOnly", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputMonthRangeDirective.prototype, "value", {
        get: function () {
            var _a;
            return this.localizedValue[0]
                ? (_a = this.host).computeValue.apply(_a, __spread(this.localizedValue)) : '';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputMonthRangeDirective.prototype.ngDoCheck = function () {
        this.value$.next(this.host.value);
    };
    TuiInputMonthRangeDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    var TuiInputMonthRangeDirective_1;
    TuiInputMonthRangeDirective.ctorParameters = function () { return [
        { type: TuiInputMonthRangeComponent, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
        { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-month-range',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputMonthRangeDirective_1; }),
                },
                TuiDestroyService,
            ],
        }),
        __param(0, Inject(AbstractTuiControl)),
        __param(1, Inject(TUI_MONTH_FORMATTER)),
        __param(2, Self()), __param(2, Inject(TuiDestroyService))
    ], TuiInputMonthRangeDirective);
    return TuiInputMonthRangeDirective;
}(TuiAbstractTextfieldHost));

var TuiInputMonthRangeModule = /** @class */ (function () {
    function TuiInputMonthRangeModule() {
    }
    TuiInputMonthRangeModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TuiCalendarMonthModule,
                TuiHostedDropdownModule,
                TuiPrimitiveTextfieldModule,
                TuiSvgModule,
                TuiPreventDefaultModule,
                TuiActiveZoneModule,
                TuiMapperPipeModule,
            ],
            declarations: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective],
            exports: [
                TuiInputMonthRangeComponent,
                TuiInputMonthRangeDirective,
                TuiTextfieldComponent,
            ],
        })
    ], TuiInputMonthRangeModule);
    return TuiInputMonthRangeModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_MONTH_RANGE_PROVIDERS, TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiInputMonthRangeModule };
//# sourceMappingURL=taiga-ui-kit-components-input-month-range.js.map
