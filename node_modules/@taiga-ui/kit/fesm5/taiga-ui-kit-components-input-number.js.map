{"version":3,"file":"taiga-ui-kit-components-input-number.js","sources":["ng://@taiga-ui/kit/components/input-number/input-number.component.ts","ng://@taiga-ui/kit/components/input-number/input-number.directive.ts","ng://@taiga-ui/kit/components/input-number/input-number.module.ts","ng://@taiga-ui/kit/components/input-number/taiga-ui-kit-components-input-number.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    forwardRef,\n    HostListener,\n    Inject,\n    Input,\n    Optional,\n    QueryList,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {\n    AbstractTuiControl,\n    AbstractTuiNullableControl,\n    EMPTY_QUERY,\n    TUI_FOCUSABLE_ITEM_ACCESSOR,\n    TUI_IS_IOS,\n    tuiDefaultProp,\n    TuiFocusableElementAccessor,\n    TuiInputModeT,\n    TuiMapper,\n} from '@taiga-ui/cdk';\nimport {\n    formatNumber,\n    getFractionPartPadded,\n    maskedMoneyValueIsEmpty,\n    TUI_DECIMAL_SYMBOLS,\n    TUI_NUMBER_FORMAT,\n    tuiCreateAutoCorrectedNumberPipe,\n    tuiCreateNumberMask,\n    TuiDecimalT,\n    tuiEnableAutoCorrectDecimalSymbol,\n    tuiMaskedNumberStringToNumber,\n    TuiNumberFormatSettings,\n    TuiPrimitiveTextfieldComponent,\n    TuiTextMaskOptions,\n} from '@taiga-ui/core';\nimport {PolymorpheusOutletComponent} from '@tinkoff/ng-polymorpheus';\nimport {TextMaskConfig} from 'angular2-text-mask';\n\nconst DEFAULT_MAX_LENGTH = 18;\n\n// @dynamic\n@Component({\n    selector: 'tui-input-number',\n    templateUrl: './input-number.template.html',\n    styleUrls: ['./input-number.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n            useExisting: forwardRef(() => TuiInputNumberComponent),\n        },\n        {\n            provide: AbstractTuiControl,\n            useExisting: forwardRef(() => TuiInputNumberComponent),\n        },\n    ],\n})\nexport class TuiInputNumberComponent\n    extends AbstractTuiNullableControl<number>\n    implements TuiFocusableElementAccessor\n{\n    @ViewChild(TuiPrimitiveTextfieldComponent)\n    private readonly primitiveTextfield?: TuiPrimitiveTextfieldComponent;\n\n    private unfinishedValue: string | null = '';\n\n    @Input()\n    @tuiDefaultProp()\n    min = -Infinity;\n\n    @Input()\n    @tuiDefaultProp()\n    max = Infinity;\n\n    @Input()\n    @tuiDefaultProp()\n    decimal: TuiDecimalT = 'not-zero';\n\n    @Input()\n    @tuiDefaultProp()\n    precision = 2;\n\n    @Input()\n    @tuiDefaultProp()\n    prefix = '';\n\n    @Input()\n    @tuiDefaultProp()\n    postfix = '';\n\n    @ContentChildren(PolymorpheusOutletComponent)\n    readonly polymorpheusValueContent: QueryList<unknown> = EMPTY_QUERY;\n\n    constructor(\n        @Optional()\n        @Self()\n        @Inject(NgControl)\n        control: NgControl | null,\n        @Inject(ChangeDetectorRef)\n        changeDetectorRef: ChangeDetectorRef,\n        @Inject(TUI_NUMBER_FORMAT)\n        private readonly numberFormat: TuiNumberFormatSettings,\n        @Inject(TUI_IS_IOS) private readonly isIOS: boolean,\n    ) {\n        super(control, changeDetectorRef);\n    }\n\n    get nativeFocusableElement(): HTMLInputElement | null {\n        return !this.primitiveTextfield || this.computedDisabled\n            ? null\n            : this.primitiveTextfield.nativeFocusableElement;\n    }\n\n    get focused(): boolean {\n        return !!this.primitiveTextfield && this.primitiveTextfield.focused;\n    }\n\n    get isNegativeAllowed(): boolean {\n        return this.min < 0;\n    }\n\n    get inputMode(): TuiInputModeT {\n        if (this.isIOS && this.isNegativeAllowed) {\n            // iphones do not have minus sign if inputMode is equal to 'numeric' / 'decimal'\n            return 'text';\n        }\n\n        return this.decimal === 'never' ? 'numeric' : 'decimal';\n    }\n\n    get calculatedMaxLength(): number {\n        const decimalPart =\n            this.decimal !== 'never' &&\n            this.nativeValue.includes(this.numberFormat.decimalSeparator);\n        const precision = decimalPart ? this.precision + 1 : 0;\n        const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;\n\n        return DEFAULT_MAX_LENGTH + precision + takeThousand;\n    }\n\n    get formattedValue(): string {\n        return this.getFormattedValue(this.value || 0);\n    }\n\n    get computedValue(): string {\n        if (this.focused) {\n            return this.nativeValue;\n        }\n\n        return this.value === null ? '' : this.formattedValue;\n    }\n\n    @HostListener('keydown.0', ['$event'])\n    onZero(event: KeyboardEvent): void {\n        const decimal =\n            this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';\n        const {nativeFocusableElement} = this;\n\n        if (\n            decimal.length < this.precision ||\n            !nativeFocusableElement ||\n            !nativeFocusableElement.selectionStart ||\n            this.nativeValue[nativeFocusableElement.selectionStart] !== '0'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        nativeFocusableElement.selectionStart++;\n    }\n\n    mask: TuiMapper<boolean, TextMaskConfig> = (\n        allowNegative: boolean,\n        decimal: TuiDecimalT,\n        decimalLimit: number,\n        nativeFocusableElement: HTMLInputElement | null,\n    ) =>\n        ({\n            mask: tuiCreateNumberMask({\n                allowNegative,\n                decimalLimit,\n                allowDecimal: decimal !== 'never',\n                requireDecimal: decimal === 'always',\n                decimalSymbol: this.numberFormat.decimalSeparator,\n                thousandSymbol: this.numberFormat.thousandSeparator,\n                autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(\n                    this.numberFormat,\n                ),\n            }),\n            pipe: tuiCreateAutoCorrectedNumberPipe(\n                decimal === 'always' ? decimalLimit : 0,\n                this.numberFormat.decimalSeparator,\n                this.numberFormat.thousandSeparator,\n                nativeFocusableElement,\n                allowNegative,\n                this.isIOS,\n            ),\n            guide: false,\n        } as TuiTextMaskOptions as unknown as TextMaskConfig);\n\n    onValueChange(value: string): void {\n        if (maskedMoneyValueIsEmpty(value)) {\n            this.updateValue(null);\n\n            return;\n        }\n\n        if (this.isNativeValueNotFinished) {\n            this.unfinishedValue = value;\n\n            return;\n        }\n\n        this.unfinishedValue = null;\n        const capped = this.absoluteCapInputValue(value);\n\n        if (capped === null || Number.isNaN(capped)) {\n            return;\n        }\n\n        this.updateValue(capped);\n\n        if (\n            capped !==\n            tuiMaskedNumberStringToNumber(\n                value,\n                this.numberFormat.decimalSeparator,\n                this.numberFormat.thousandSeparator,\n            )\n        ) {\n            this.nativeValue = this.formattedValue;\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {\n            return;\n        }\n\n        if (this.decimal === 'never') {\n            event.preventDefault();\n\n            return;\n        }\n\n        if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {\n            event.preventDefault();\n            this.setCaretAfterComma();\n        }\n    }\n\n    onFocused(focused: boolean): void {\n        this.updateFocused(focused);\n\n        if (focused) {\n            return;\n        }\n\n        const nativeNumberValue = this.unfinishedValue\n            ? tuiMaskedNumberStringToNumber(\n                  this.unfinishedValue,\n                  this.numberFormat.decimalSeparator,\n                  this.numberFormat.thousandSeparator,\n              )\n            : this.nativeNumberValue;\n\n        this.unfinishedValue = null;\n\n        if (Number.isNaN(nativeNumberValue)) {\n            this.clear();\n\n            return;\n        }\n\n        const clamped = Math.min(this.max, Math.max(this.min, nativeNumberValue));\n\n        this.updateValue(clamped);\n        this.nativeValue = this.formattedValue;\n    }\n\n    onHovered(hovered: boolean): void {\n        this.updateHovered(hovered);\n    }\n\n    onPressed(pressed: boolean): void {\n        this.updatePressed(pressed);\n    }\n\n    getFormattedValue(value: number): string {\n        const absValue = Math.abs(value);\n        const hasFraction = absValue % 1 > 0;\n        let limit =\n            this.decimal === 'always' || (hasFraction && this.decimal !== 'never')\n                ? this.precision\n                : 0;\n\n        const fraction = hasFraction ? getFractionPartPadded(value, this.precision) : '';\n\n        if (this.focused && this.decimal !== 'always') {\n            limit = fraction.length;\n        }\n\n        return formatNumber(\n            value,\n            limit,\n            this.numberFormat.decimalSeparator,\n            this.numberFormat.thousandSeparator,\n            this.numberFormat.zeroPadding,\n        );\n    }\n\n    private get isNativeValueNotFinished(): boolean {\n        const nativeNumberValue = this.nativeNumberValue;\n\n        return nativeNumberValue < 0\n            ? nativeNumberValue > this.max\n            : nativeNumberValue < this.min;\n    }\n\n    get nativeValue(): string {\n        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n    }\n\n    set nativeValue(value: string) {\n        if (!this.primitiveTextfield || !this.nativeFocusableElement) {\n            return;\n        }\n\n        this.primitiveTextfield.value = value;\n        this.nativeFocusableElement.value = value;\n    }\n\n    private get nativeNumberValue(): number {\n        return tuiMaskedNumberStringToNumber(\n            this.nativeValue,\n            this.numberFormat.decimalSeparator,\n            this.numberFormat.thousandSeparator,\n        );\n    }\n\n    private clear(): void {\n        this.nativeValue = '';\n        this.updateValue(null);\n    }\n\n    private absoluteCapInputValue(inputValue: string): number | null {\n        const value = tuiMaskedNumberStringToNumber(\n            inputValue,\n            this.numberFormat.decimalSeparator,\n            this.numberFormat.thousandSeparator,\n        );\n        const capped =\n            value < 0\n                ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value)\n                : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));\n        const ineligibleValue =\n            Number.isNaN(capped) || capped < this.min || capped > this.max;\n\n        return ineligibleValue ? null : capped;\n    }\n\n    private setCaretAfterComma(): void {\n        if (!this.nativeFocusableElement) {\n            return;\n        }\n\n        const afterCommaPosition = this.nativeValue.length - this.precision;\n\n        this.nativeFocusableElement.setSelectionRange(\n            afterCommaPosition,\n            afterCommaPosition,\n        );\n    }\n}\n","import {Directive, DoCheck, forwardRef} from '@angular/core';\nimport {TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost} from '@taiga-ui/core';\n\nimport {TuiInputNumberComponent} from './input-number.component';\n\n@Directive({\n    selector: 'tui-input-number',\n    providers: [\n        {\n            provide: TUI_TEXTFIELD_HOST,\n            useExisting: forwardRef(() => TuiInputNumberDirective),\n        },\n    ],\n})\nexport class TuiInputNumberDirective\n    extends TuiAbstractTextfieldHost<TuiInputNumberComponent>\n    implements DoCheck\n{\n    input?: HTMLInputElement;\n\n    get value(): string {\n        return this.host.computedValue;\n    }\n\n    onValueChange(value: string): void {\n        this.host.onValueChange(value);\n    }\n\n    process(input: HTMLInputElement): void {\n        this.input = input;\n    }\n\n    ngDoCheck(): void {\n        if (!this.input) {\n            return;\n        }\n\n        this.input.maxLength = this.host.calculatedMaxLength;\n        this.input.inputMode = 'decimal';\n    }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {TuiMapperPipeModule} from '@taiga-ui/cdk';\nimport {\n    TuiPrimitiveTextfieldModule,\n    TuiTextfieldComponent,\n    TuiTextfieldControllerModule,\n} from '@taiga-ui/core';\nimport {TuiValueAccessorModule} from '@taiga-ui/kit/directives';\nimport {PolymorpheusModule} from '@tinkoff/ng-polymorpheus';\nimport {TextMaskModule} from 'angular2-text-mask';\n\nimport {TuiInputNumberComponent} from './input-number.component';\nimport {TuiInputNumberDirective} from './input-number.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TextMaskModule,\n        TuiMapperPipeModule,\n        TuiPrimitiveTextfieldModule,\n        TuiTextfieldControllerModule,\n        TuiValueAccessorModule,\n        PolymorpheusModule,\n    ],\n    declarations: [TuiInputNumberComponent, TuiInputNumberDirective],\n    exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent],\n})\nexport class TuiInputNumberModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}