import { __extends, __decorate, __param, __read, __spread } from 'tslib';
import { TemplateRef, Inject, Self, ChangeDetectorRef, Directive, EventEmitter, ViewChild, Input, HostBinding, Output, ContentChild, Component, ChangeDetectionStrategy, forwardRef, ContentChildren, NgModule } from '@angular/core';
import { isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiInteractive, EMPTY_QUERY, itemsQueryListObservable, isPresent, TuiDestroyService, TuiFocusedModule, TuiFocusVisibleModule, TuiFocusableModule, TuiHoveredModule } from '@taiga-ui/cdk';
import { Observable, merge, identity } from 'rxjs';
import { pairwise, map, filter, switchMap, mapTo, takeUntil } from 'rxjs/operators';
import { TUI_MODE, MODE_PROVIDER, TuiSvgModule, TuiGroupModule, TuiExpandModule } from '@taiga-ui/core';
import { PolymorpheusTemplate, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { CommonModule } from '@angular/common';

var TuiAccordionItemContentDirective = /** @class */ (function (_super) {
    __extends(TuiAccordionItemContentDirective, _super);
    function TuiAccordionItemContentDirective(templateRef, changeDetectorRef) {
        return _super.call(this, templateRef, changeDetectorRef) || this;
    }
    TuiAccordionItemContentDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    TuiAccordionItemContentDirective = __decorate([
        Directive({
            selector: 'ng-template[tuiAccordionItemContent]',
        }),
        __param(0, Inject(TemplateRef)),
        __param(0, Self()),
        __param(1, Inject(ChangeDetectorRef))
    ], TuiAccordionItemContentDirective);
    return TuiAccordionItemContentDirective;
}(PolymorpheusTemplate));

var TuiAccordionItemEagerContentDirective = /** @class */ (function () {
    function TuiAccordionItemEagerContentDirective() {
    }
    TuiAccordionItemEagerContentDirective = __decorate([
        Directive({
            selector: '[tuiAccordionItemContent]:not(ng-template)',
        })
    ], TuiAccordionItemEagerContentDirective);
    return TuiAccordionItemEagerContentDirective;
}());

var TuiAccordionItemComponent = /** @class */ (function (_super) {
    __extends(TuiAccordionItemComponent, _super);
    function TuiAccordionItemComponent(changeDetectorRef, mode$) {
        var _this = _super.call(this) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.mode$ = mode$;
        _this.noPadding = false;
        _this.showArrow = true;
        _this.borders = 'all';
        _this.size = 'm';
        _this.disabled = false;
        _this.disableHover = false;
        _this.open = false;
        _this.async = false;
        _this.openChange = new EventEmitter();
        return _this;
    }
    TuiAccordionItemComponent_1 = TuiAccordionItemComponent;
    Object.defineProperty(TuiAccordionItemComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.disabled || !this.focusableElement
                ? null
                : this.focusableElement.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiAccordionItemComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    TuiAccordionItemComponent.prototype.onHovered = function (hovered) {
        if (!this.disableHover) {
            this.updateHovered(hovered);
        }
    };
    TuiAccordionItemComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiAccordionItemComponent.prototype.onFocusVisible = function (focusVisible) {
        this.updateFocusVisible(focusVisible);
    };
    TuiAccordionItemComponent.prototype.onRowToggle = function () {
        if (!this.disabled) {
            this.updateOpen(!this.open);
        }
    };
    TuiAccordionItemComponent.prototype.onItemKeyDownEsc = function (event) {
        if (!this.focused || !this.open) {
            return;
        }
        event.stopPropagation();
        this.updateOpen(false);
    };
    TuiAccordionItemComponent.prototype.onItemKeyDownSpace = function (event) {
        if (!this.focused) {
            return;
        }
        event.preventDefault();
        this.onRowToggle();
    };
    TuiAccordionItemComponent.prototype.close = function () {
        this.updateOpen(false);
        this.changeDetectorRef.markForCheck();
    };
    TuiAccordionItemComponent.prototype.updateOpen = function (open) {
        if (this.open === open) {
            return;
        }
        this.open = open;
        this.openChange.emit(open);
    };
    var TuiAccordionItemComponent_1;
    TuiAccordionItemComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    __decorate([
        ViewChild('focusableElement')
    ], TuiAccordionItemComponent.prototype, "focusableElement", void 0);
    __decorate([
        Input(),
        HostBinding('class._no-padding'),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "noPadding", void 0);
    __decorate([
        Input(),
        HostBinding('class._has-arrow'),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "showArrow", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-borders'),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "borders", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        HostBinding('class._disabled'),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "disableHover", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "open", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiAccordionItemComponent.prototype, "async", void 0);
    __decorate([
        Output()
    ], TuiAccordionItemComponent.prototype, "openChange", void 0);
    __decorate([
        ContentChild(TuiAccordionItemEagerContentDirective)
    ], TuiAccordionItemComponent.prototype, "eagerContent", void 0);
    __decorate([
        ContentChild(TuiAccordionItemContentDirective)
    ], TuiAccordionItemComponent.prototype, "lazyContent", void 0);
    TuiAccordionItemComponent = TuiAccordionItemComponent_1 = __decorate([
        Component({
            selector: 'tui-accordion-item',
            template: "<div\n    #focusableElement\n    automation-id=\"tui-accordion__item-wrapper\"\n    class=\"t-wrapper\"\n    [tuiFocusable]=\"computedFocusable\"\n    (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    (tuiFocusedChange)=\"onFocused($event)\"\n    (keydown.space)=\"onItemKeyDownSpace($event)\"\n    (keydown.enter)=\"onItemKeyDownSpace($event)\"\n    (keydown.esc)=\"onItemKeyDownEsc($event)\"\n>\n    <div\n        automation-id=\"tui-accordion__item-header\"\n        class=\"t-header\"\n        [class.t-header_open]=\"open\"\n        [class.t-header_hoverable]=\"!disableHover\"\n        (tuiHoveredChange)=\"onHovered($event)\"\n        (click)=\"onRowToggle()\"\n    >\n        <div\n            automation-id=\"tui-accordion__item-title\"\n            class=\"t-title\"\n        >\n            <ng-content></ng-content>\n        </div>\n        <tui-svg\n            *ngIf=\"showArrow\"\n            automation-id=\"tui-accordion__item-arrow\"\n            src=\"tuiIconChevronDownLarge\"\n            class=\"t-icon\"\n            [class.t-icon_open]=\"open\"\n        ></tui-svg>\n    </div>\n    <tui-expand\n        [async]=\"async\"\n        [expanded]=\"open\"\n    >\n        <div\n            *ngIf=\"eagerContent\"\n            class=\"t-content\"\n        >\n            <ng-content select=\"[tuiAccordionItemContent]\"></ng-content>\n        </div>\n        <ng-template tuiExpandContent>\n            <div\n                *ngIf=\"lazyContent\"\n                polymorpheus-outlet\n                automation-id=\"tui-accordion__item-content\"\n                class=\"t-content\"\n                [content]=\"lazyContent\"\n            ></div>\n        </ng-template>\n    </tui-expand>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiAccordionItemComponent_1; }),
                },
                MODE_PROVIDER,
            ],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
            styles: [":host{position:relative;display:block;overflow:hidden;border-radius:var(--tui-radius-l)}:host[data-tui-host-borders=top-bottom]{border-radius:0!important}.t-wrapper{position:relative;border-radius:inherit}.t-wrapper:focus{outline:0}.t-wrapper:after{position:absolute;top:0;left:0;width:100%;height:100%;content:'';box-sizing:border-box;border-radius:inherit;border:1px solid var(--tui-base-04);pointer-events:none}:host:not([data-tui-host-borders]) .t-wrapper:after{border-width:0}:host[data-tui-host-borders=all] .t-wrapper:after{border-width:1px}:host[data-tui-host-borders=top-bottom] .t-wrapper:after{border-left-width:0;border-right-width:0}:host[data-tui-host-borders=top] .t-wrapper:after{border-left-width:0;border-right-width:0;border-bottom-width:0}:host[data-tui-host-borders=bottom] .t-wrapper:after{border-left-width:0;border-right-width:0;border-top-width:0}:host[data-mode=onDark] .t-wrapper:after{border-color:var(--tui-base-03)}:host[data-mode=onLight] .t-wrapper:after{border-color:var(--tui-text-01)}:host._focus-visible .t-wrapper:after{border:2px solid var(--tui-focus)}:host:not([data-mode]) .t-wrapper{background:var(--tui-base-01)}.t-header{transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;font:var(--tui-font-text-l);align-items:center;box-sizing:border-box;border-bottom:1px solid var(--tui-base-04);min-height:var(--tui-height-l);padding:.75rem 1.25rem;color:var(--tui-text-01);cursor:pointer}:host[data-mode=onDark] .t-header{color:var(--tui-text-01-night);border-color:var(--tui-base-03)}:host[data-mode=onLight] .t-header{border-color:var(--tui-text-01)}:host:not([data-tui-host-borders]) .t-header{border-bottom-width:0;box-shadow:none}:host._has-arrow .t-header{padding-right:.75rem}:host[data-mode=onDark] .t-header_open{background:var(--tui-clear-inverse)}:host[data-mode=onLight] .t-header_open{background:var(--tui-clear)}:host[data-size='s'] .t-header{font:var(--tui-font-text-m);min-height:var(--tui-height-m);padding:.625rem .75rem .625rem 1rem}:host._no-padding .t-header{padding-left:0;padding-right:0}:host._disabled .t-header{cursor:default}:host:hover:not([data-mode]) .t-header_hoverable{background:var(--tui-base-02)}:host:hover[data-mode=onDark] .t-header_hoverable{background:var(--tui-clear-inverse)}:host:hover[data-mode=onLight] .t-header_hoverable{background:var(--tui-clear)}.t-title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-right:0;flex-grow:1}:host._has-arrow .t-title{margin-right:.5rem}.t-icon{transition-property:transform,color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;width:1.5rem;height:1.5rem;margin-left:auto;color:var(--tui-base-06)}.t-icon_open{transform:rotate(180deg)}:host[data-mode] .t-icon{opacity:var(--tui-disabled-opacity)}:host:hover[data-mode] .t-icon{opacity:.8}:host[data-mode=onDark] .t-icon{color:var(--tui-text-01-night)}:host[data-mode=onLight] .t-icon{color:var(--tui-text-01)}:host:hover:not([data-mode]) .t-icon{color:var(--tui-base-07)}.t-content{font:var(--tui-font-text-m);padding:1.25rem;word-wrap:break-word}:host[data-size='s'] .t-content{font:var(--tui-font-text-s);padding:1rem}"]
        }),
        __param(0, Inject(ChangeDetectorRef)),
        __param(1, Inject(TUI_MODE))
    ], TuiAccordionItemComponent);
    return TuiAccordionItemComponent;
}(AbstractTuiInteractive));

var TuiAccordionComponent = /** @class */ (function () {
    function TuiAccordionComponent(destroy$) {
        this.destroy$ = destroy$;
        this.closeOthers = true;
        this.rounded = true;
        this.accordionItems = EMPTY_QUERY;
    }
    TuiAccordionComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var accordionItems = this.accordionItems;
        var rows$ = itemsQueryListObservable(accordionItems);
        var newOpenRow$ = rows$.pipe(pairwise(), map(function (_a) {
            var _b = __read(_a, 2), previous = _b[0], current = _b[1];
            return current.find(function (item) { return !previous.includes(item) && item.open; });
        }), filter(isPresent));
        var rowsOpen$ = merge(rows$.pipe(switchMap(function (rows) {
            return merge.apply(void 0, __spread(rows.map(function (row) {
                return row.openChange.pipe(filter(identity), mapTo(row));
            })));
        })), newOpenRow$).pipe(filter(function () { return _this.closeOthers; }), takeUntil(this.destroy$));
        rowsOpen$.subscribe(function (currentRow) {
            accordionItems.forEach(function (row) {
                if (currentRow !== row) {
                    row.close();
                }
            });
        });
    };
    TuiAccordionComponent.ctorParameters = function () { return [
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiAccordionComponent.prototype, "closeOthers", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiAccordionComponent.prototype, "rounded", void 0);
    __decorate([
        ContentChildren(TuiAccordionItemComponent)
    ], TuiAccordionComponent.prototype, "accordionItems", void 0);
    TuiAccordionComponent = __decorate([
        Component({
            selector: 'tui-accordion',
            template: "<!--TODO: Unnecessary nesting, probably accordion can be a directive-->\n<div\n    tuiGroup\n    automation-id=\"tui-accordion__group\"\n    orientation=\"vertical\"\n    size=\"l\"\n    class=\"t-group\"\n    [collapsed]=\"true\"\n    [rounded]=\"rounded\"\n>\n    <ng-content select=\"tui-accordion-item\"></ng-content>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [TuiDestroyService],
            styles: [":host{display:block}.t-group{display:flex}"]
        }),
        __param(0, Inject(TuiDestroyService))
    ], TuiAccordionComponent);
    return TuiAccordionComponent;
}());

var TuiAccordionModule = /** @class */ (function () {
    function TuiAccordionModule() {
    }
    TuiAccordionModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TuiFocusedModule,
                TuiFocusVisibleModule,
                TuiFocusableModule,
                TuiHoveredModule,
                PolymorpheusModule,
                TuiSvgModule,
                TuiGroupModule,
                TuiExpandModule,
            ],
            declarations: [
                TuiAccordionComponent,
                TuiAccordionItemComponent,
                TuiAccordionItemContentDirective,
                TuiAccordionItemEagerContentDirective,
            ],
            exports: [
                TuiAccordionComponent,
                TuiAccordionItemComponent,
                TuiAccordionItemContentDirective,
                TuiAccordionItemEagerContentDirective,
            ],
        })
    ], TuiAccordionModule);
    return TuiAccordionModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiAccordionComponent, TuiAccordionItemComponent, TuiAccordionItemContentDirective, TuiAccordionItemEagerContentDirective, TuiAccordionModule };
//# sourceMappingURL=taiga-ui-kit-components-accordion.js.map
