import { __decorate, __param } from 'tslib';
import { Input, Directive, Inject, forwardRef, HostBinding, Component, ChangeDetectionStrategy, InjectionToken, SkipSelf, ElementRef, ContentChildren, Optional, ViewChild, EventEmitter, Output, Injectable, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, map, distinctUntilChanged, switchMap, tap, mapTo } from 'rxjs/operators';
import { EMPTY_ARRAY, tuiDefaultProp, ALWAYS_TRUE_HANDLER, EMPTY_FUNCTION, EMPTY_QUERY, isPresent, TuiLetModule } from '@taiga-ui/cdk';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { CommonModule } from '@angular/common';
import { TuiExpandModule, TuiButtonModule } from '@taiga-ui/core';

var TuiTreeChildrenDirective = /** @class */ (function () {
    function TuiTreeChildrenDirective() {
        this.childrenHandler = TuiTreeChildrenDirective_1.defaultHandler;
    }
    TuiTreeChildrenDirective_1 = TuiTreeChildrenDirective;
    TuiTreeChildrenDirective.defaultHandler = function (item) {
        return Array.isArray(item) ? item : EMPTY_ARRAY;
    };
    var TuiTreeChildrenDirective_1;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTreeChildrenDirective.prototype, "childrenHandler", void 0);
    TuiTreeChildrenDirective = TuiTreeChildrenDirective_1 = __decorate([
        Directive({
            selector: 'tui-tree[childrenHandler]',
        })
    ], TuiTreeChildrenDirective);
    return TuiTreeChildrenDirective;
}());

var TuiTreeItemContentComponent = /** @class */ (function () {
    function TuiTreeItemContentComponent(context, controller) {
        this.context = context;
        this.controller = controller;
    }
    Object.defineProperty(TuiTreeItemContentComponent.prototype, "isExpanded", {
        get: function () {
            return this.context.$implicit.isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTreeItemContentComponent.prototype, "isExpandable", {
        get: function () {
            return (this.context.$implicit.isExpandable &&
                this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
        },
        enumerable: true,
        configurable: true
    });
    TuiTreeItemContentComponent.prototype.onClick = function () {
        this.controller.toggle(this.context.$implicit);
    };
    TuiTreeItemContentComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_CONTROLLER; }),] }] }
    ]; };
    __decorate([
        HostBinding('class._expandable')
    ], TuiTreeItemContentComponent.prototype, "isExpandable", null);
    TuiTreeItemContentComponent = __decorate([
        Component({
            selector: 'tui-tree-item-content',
            template: "<button\n    *ngIf=\"isExpandable\"\n    tuiIconButton\n    size=\"xs\"\n    appearance=\"flat\"\n    icon=\"tuiIconChevronRight\"\n    shape=\"rounded\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}"]
        }),
        __param(0, Inject(POLYMORPHEUS_CONTEXT)),
        __param(1, Inject(forwardRef(function () { return TUI_TREE_CONTROLLER; })))
    ], TuiTreeItemContentComponent);
    return TuiTreeItemContentComponent;
}());

var TUI_TREE_ITEM_CONTENT = new PolymorpheusComponent(TuiTreeItemContentComponent);
var TUI_DEFAULT_TREE_CONTROLLER = {
    isExpanded: ALWAYS_TRUE_HANDLER,
    toggle: EMPTY_FUNCTION,
};

var TUI_TREE_ACCESSOR = new InjectionToken("Controller for tracking value - TuiTreeItemComponent pairs");
var TUI_TREE_CONTROLLER = new InjectionToken("Controller for expanding the tree", {
    factory: function () { return TUI_DEFAULT_TREE_CONTROLLER; },
});
var TUI_TREE_NODE = new InjectionToken("A node of a tree view");
var TUI_TREE_LOADING = new InjectionToken("A tree node placeholder for loading", { factory: function () { return ({}); } });
var TUI_TREE_START = new InjectionToken("A tree node starting point");
var TUI_TREE_LOADER = new InjectionToken("A service to load tree progressively");
var TUI_TREE_CONTENT = new InjectionToken("Content for a tree item", {
    factory: function () { return TUI_TREE_ITEM_CONTENT; },
});
var TUI_TREE_LEVEL = new InjectionToken("Nesting level of current TreeView node", {
    factory: function () { return -1; },
});

var TUI_TREE_ITEM_PROVIDERS = [
    {
        provide: TUI_TREE_LEVEL,
        deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
        useFactory: treeLevelFactory,
    },
    {
        provide: TUI_TREE_NODE,
        useExisting: forwardRef(function () { return TuiTreeItemComponent; }),
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
function treeLevelFactory(level) {
    return ++level;
}

var TuiTreeItemComponent = /** @class */ (function () {
    function TuiTreeItemComponent(elementRef, controller, level, content) {
        var _this = this;
        this.elementRef = elementRef;
        this.controller = controller;
        this.level = level;
        this.content = content;
        this.nested = EMPTY_QUERY;
        this.change$ = new Subject();
        this.expanded$ = this.change$.pipe(startWith(null), map(function () { return _this.isExpanded; }), distinctUntilChanged());
        this.attached$ = this.change$.pipe(map(function () { return _this.elementRef.nativeElement.isConnected; }), distinctUntilChanged());
    }
    Object.defineProperty(TuiTreeItemComponent.prototype, "isExpandable", {
        get: function () {
            return !!this.nested.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTreeItemComponent.prototype, "isExpanded", {
        get: function () {
            return this.controller.isExpanded(this);
        },
        enumerable: true,
        configurable: true
    });
    TuiTreeItemComponent.prototype.ngDoCheck = function () {
        this.change$.next();
    };
    TuiTreeItemComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_CONTROLLER; }),] }] },
        { type: Number, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_LEVEL; }),] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TUI_TREE_CONTENT; }),] }] }
    ]; };
    __decorate([
        ContentChildren(TUI_TREE_NODE)
    ], TuiTreeItemComponent.prototype, "nested", void 0);
    __decorate([
        HostBinding('class._expandable')
    ], TuiTreeItemComponent.prototype, "isExpandable", null);
    TuiTreeItemComponent = __decorate([
        Component({
            selector: 'tui-tree-item',
            template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<div\n    polymorpheus-outlet\n    [content]=\"content\"\n    [context]=\"{$implicit: this, template: template}\"\n></div>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TUI_TREE_ITEM_PROVIDERS,
            host: {
                role: 'treeitem',
            },
            styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent,1.5rem)}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(forwardRef(function () { return TUI_TREE_CONTROLLER; }))),
        __param(2, Inject(forwardRef(function () { return TUI_TREE_LEVEL; }))),
        __param(3, Inject(forwardRef(function () { return TUI_TREE_CONTENT; })))
    ], TuiTreeItemComponent);
    return TuiTreeItemComponent;
}());

var TuiTreeComponent = /** @class */ (function () {
    function TuiTreeComponent(directive) {
        var _this = this;
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(function () { return _this.handler(_this.value); }), distinctUntilChanged());
        this.content = function (_a) {
            var $implicit = _a.$implicit;
            return String($implicit);
        };
    }
    TuiTreeComponent_1 = TuiTreeComponent;
    TuiTreeComponent.prototype.ngDoCheck = function () {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.ngDoCheck();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.ngDoCheck();
    };
    Object.defineProperty(TuiTreeComponent.prototype, "handler", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) !== null && _b !== void 0 ? _b : TuiTreeChildrenDirective.defaultHandler;
        },
        enumerable: true,
        configurable: true
    });
    var TuiTreeComponent_1;
    TuiTreeComponent.ctorParameters = function () { return [
        { type: TuiTreeChildrenDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiTreeChildrenDirective,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiTreeComponent.prototype, "value", void 0);
    __decorate([
        ViewChild(TuiTreeItemComponent)
    ], TuiTreeComponent.prototype, "item", void 0);
    __decorate([
        ViewChild(TuiTreeComponent_1)
    ], TuiTreeComponent.prototype, "child", void 0);
    __decorate([
        Input()
    ], TuiTreeComponent.prototype, "content", void 0);
    TuiTreeComponent = TuiTreeComponent_1 = __decorate([
        Component({
            selector: 'tui-tree[value]',
            template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <div\n        *ngIf=\"$any(value) !== children\"\n        polymorpheus-outlet\n        [content]=\"content\"\n        [context]=\"{$implicit: value, node: view}\"\n    ></div>\n    <tui-tree\n        *ngFor=\"let child of children\"\n        [value]=\"child\"\n        [content]=\"content\"\n    ></tui-tree>\n</tui-tree-item>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_TREE_NODE,
                    useExisting: TuiTreeComponent_1,
                },
            ],
            host: {
                role: 'tree',
            },
            styles: [":host{position:relative;display:block}"]
        }),
        __param(0, Optional()),
        __param(0, Inject(TuiTreeChildrenDirective))
    ], TuiTreeComponent);
    return TuiTreeComponent;
}());

var TuiTreeControllerDirective = /** @class */ (function () {
    function TuiTreeControllerDirective() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    TuiTreeControllerDirective_1 = TuiTreeControllerDirective;
    TuiTreeControllerDirective.prototype.register = function (item, value) {
        this.items.set(item, value);
    };
    TuiTreeControllerDirective.prototype.unregister = function (item) {
        this.items.delete(item);
    };
    TuiTreeControllerDirective.prototype.isExpanded = function (item) {
        var _a;
        var value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    };
    TuiTreeControllerDirective.prototype.toggle = function (item) {
        var value = this.items.get(item);
        var expanded = this.isExpanded(item);
        if (!isPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    };
    var TuiTreeControllerDirective_1;
    __decorate([
        Input('tuiTreeController'),
        tuiDefaultProp()
    ], TuiTreeControllerDirective.prototype, "fallback", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTreeControllerDirective.prototype, "map", void 0);
    __decorate([
        Output()
    ], TuiTreeControllerDirective.prototype, "toggled", void 0);
    TuiTreeControllerDirective = TuiTreeControllerDirective_1 = __decorate([
        Directive({
            selector: '[tuiTreeController][map]',
            exportAs: 'tuiTreeController',
            providers: [
                {
                    provide: TUI_TREE_ACCESSOR,
                    useExisting: TuiTreeControllerDirective_1,
                },
                {
                    provide: TUI_TREE_CONTROLLER,
                    useExisting: TuiTreeControllerDirective_1,
                },
            ],
        })
    ], TuiTreeControllerDirective);
    return TuiTreeControllerDirective;
}());

var TuiTreeItemControllerDirective = /** @class */ (function () {
    function TuiTreeItemControllerDirective() {
        this.map = new WeakMap();
        this.fallback = true;
    }
    TuiTreeItemControllerDirective_1 = TuiTreeItemControllerDirective;
    TuiTreeItemControllerDirective.prototype.isExpanded = function (item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
    };
    TuiTreeItemControllerDirective.prototype.toggle = function (item) {
        this.map.set(item, !this.isExpanded(item));
    };
    var TuiTreeItemControllerDirective_1;
    __decorate([
        Input('tuiTreeController'),
        tuiDefaultProp()
    ], TuiTreeItemControllerDirective.prototype, "fallback", void 0);
    TuiTreeItemControllerDirective = TuiTreeItemControllerDirective_1 = __decorate([
        Directive({
            selector: '[tuiTreeController]:not([map])',
            exportAs: 'tuiTreeController',
            providers: [
                {
                    provide: TUI_TREE_CONTROLLER,
                    useExisting: TuiTreeItemControllerDirective_1,
                },
            ],
        })
    ], TuiTreeItemControllerDirective);
    return TuiTreeItemControllerDirective;
}());

var TuiTreeNodeDirective = /** @class */ (function () {
    function TuiTreeNodeDirective(directive, component) {
        this.directive = directive;
        this.component = component;
    }
    Object.defineProperty(TuiTreeNodeDirective.prototype, "value", {
        set: function (value) {
            var _a;
            (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
        },
        enumerable: true,
        configurable: true
    });
    TuiTreeNodeDirective.prototype.ngOnDestroy = function () {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
    };
    TuiTreeNodeDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_TREE_ACCESSOR,] }] },
        { type: TuiTreeItemComponent, decorators: [{ type: Inject, args: [TuiTreeItemComponent,] }] }
    ]; };
    __decorate([
        Input('tuiTreeNode')
    ], TuiTreeNodeDirective.prototype, "value", null);
    TuiTreeNodeDirective = __decorate([
        Directive({
            selector: 'tui-tree-item[tuiTreeNode]',
        }),
        __param(0, Optional()),
        __param(0, Inject(TUI_TREE_ACCESSOR)),
        __param(1, Inject(TuiTreeItemComponent))
    ], TuiTreeNodeDirective);
    return TuiTreeNodeDirective;
}());

// @dynamic
var TuiTreeService = /** @class */ (function () {
    function TuiTreeService(loading, start, loader) {
        var _this = this;
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(function (item) {
            return _this.loader.loadChildren(item).pipe(tap(function (children) { return _this.map.set(item, children); }), map(function (children) { return children.filter(function (item) { return !_this.loader.hasChildren(item); }); }), tap(function (children) { return children.forEach(function (child) { return _this.map.set(child, []); }); }));
        }), startWith(null), mapTo(this.start));
    }
    TuiTreeService.prototype.getChildren = function (item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : [this.loading];
    };
    TuiTreeService.prototype.loadChildren = function (item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    };
    TuiTreeService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADING,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_START,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADER,] }] }
    ]; };
    TuiTreeService = __decorate([
        Injectable(),
        __param(0, Inject(TUI_TREE_LOADING)),
        __param(1, Inject(TUI_TREE_START)),
        __param(2, Inject(TUI_TREE_LOADER))
    ], TuiTreeService);
    return TuiTreeService;
}());

var TuiTreeModule = /** @class */ (function () {
    function TuiTreeModule() {
    }
    TuiTreeModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                PolymorpheusModule,
                TuiExpandModule,
                TuiLetModule,
                TuiButtonModule,
            ],
            entryComponents: [TuiTreeItemContentComponent],
            declarations: [
                TuiTreeComponent,
                TuiTreeItemComponent,
                TuiTreeItemContentComponent,
                TuiTreeChildrenDirective,
                TuiTreeItemControllerDirective,
                TuiTreeControllerDirective,
                TuiTreeNodeDirective,
            ],
            exports: [
                TuiTreeComponent,
                TuiTreeItemComponent,
                TuiTreeChildrenDirective,
                TuiTreeItemControllerDirective,
                TuiTreeControllerDirective,
            ],
        })
    ], TuiTreeModule);
    return TuiTreeModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DEFAULT_TREE_CONTROLLER, TUI_TREE_ACCESSOR, TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_ITEM_CONTENT, TUI_TREE_ITEM_PROVIDERS, TUI_TREE_LEVEL, TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_NODE, TUI_TREE_START, TuiTreeChildrenDirective, TuiTreeComponent, TuiTreeControllerDirective, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeItemControllerDirective, TuiTreeModule, TuiTreeNodeDirective, TuiTreeService, treeLevelFactory };
//# sourceMappingURL=taiga-ui-kit-components-tree.js.map
