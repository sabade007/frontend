import { __assign, __extends, __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, TuiFocusedModule, TuiFocusableModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule, TuiCheckedModule } from '@taiga-ui/cdk';
import { TuiModeDirective, TuiWrapperModule, TuiSvgModule, TuiLoaderModule } from '@taiga-ui/core';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the toggle options. */
var TUI_TOGGLE_DEFAULT_OPTIONS = {
    icons: {
        toggleOff: function (_a) {
            var $implicit = _a.$implicit;
            return $implicit === "m" ? "tuiIconToggleOff" : "tuiIconToggleOffLarge";
        },
        toggleOn: function (_a) {
            var $implicit = _a.$implicit;
            return $implicit === "m" ? "tuiIconToggleOn" : "tuiIconToggleOnLarge";
        },
    },
    singleColor: false,
    showIcons: false,
    size: "m",
};
var TUI_TOGGLE_OPTIONS = new InjectionToken("Default parameters for toggle component", {
    factory: function () { return TUI_TOGGLE_DEFAULT_OPTIONS; },
});
var tuiToggleOptionsProvider = function (options) { return ({
    provide: TUI_TOGGLE_OPTIONS,
    useValue: __assign(__assign({}, TUI_TOGGLE_DEFAULT_OPTIONS), options),
}); };

var TuiToggleComponent = /** @class */ (function (_super) {
    __extends(TuiToggleComponent, _super);
    function TuiToggleComponent(control, changeDetectorRef, modeDirective, options) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.modeDirective = modeDirective;
        _this.options = options;
        _this.singleColor = _this.options.singleColor;
        _this.showIcons = _this.options.showIcons;
        _this.showLoader = false;
        _this.size = _this.options.size;
        return _this;
    }
    TuiToggleComponent_1 = TuiToggleComponent;
    Object.defineProperty(TuiToggleComponent.prototype, "iconOn", {
        get: function () {
            return this.options.icons.toggleOn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "iconOff", {
        get: function () {
            return this.options.icons.toggleOff;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.focusableElement ? this.focusableElement.nativeElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "appearance", {
        get: function () {
            return this.singleColor || this.checked
                ? "primary" /* Primary */
                : "secondary" /* Secondary */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "sizeM", {
        get: function () {
            return this.size === 'm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "checked", {
        get: function () {
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "loaderSize", {
        get: function () {
            return this.sizeM ? 'xs' : 's';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiToggleComponent.prototype, "hostMode", {
        get: function () {
            return this.modeDirective ? this.modeDirective.mode : null;
        },
        enumerable: true,
        configurable: true
    });
    TuiToggleComponent.prototype.onChecked = function (checked) {
        this.updateValue(checked);
    };
    TuiToggleComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiToggleComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiToggleComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiToggleComponent.prototype.onFocusVisible = function (focusVisible) {
        this.updateFocusVisible(focusVisible);
    };
    TuiToggleComponent.prototype.getFallbackValue = function () {
        return false;
    };
    var TuiToggleComponent_1;
    TuiToggleComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiModeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiModeDirective,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_TOGGLE_OPTIONS,] }] }
    ]; };
    __decorate([
        ViewChild('focusableElement')
    ], TuiToggleComponent.prototype, "focusableElement", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "singleColor", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "showIcons", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "showLoader", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiToggleComponent.prototype, "size", void 0);
    __decorate([
        HostBinding('class._checked')
    ], TuiToggleComponent.prototype, "checked", null);
    __decorate([
        HostBinding('attr.data-mode')
    ], TuiToggleComponent.prototype, "hostMode", null);
    TuiToggleComponent = TuiToggleComponent_1 = __decorate([
        Component({
            selector: 'tui-toggle',
            template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n    [focused]=\"computedFocusVisible\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [invalid]=\"computedInvalid\"\n>\n    <div class=\"t-toggle\">\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [size]=\"loaderSize\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"checked\"\n        ></tui-loader>\n        <span\n            polymorpheus-outlet\n            class=\"t-icon-wrapper\"\n            [content]=\"iconOn\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    *ngIf=\"showIcons && !showLoader\"\n                    automation-id=\"tui-toggle__check-icon\"\n                    class=\"t-icon\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n        <div class=\"t-circle\"></div>\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [size]=\"loaderSize\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"!checked\"\n        ></tui-loader>\n        <span\n            polymorpheus-outlet\n            class=\"t-icon-wrapper\"\n            [content]=\"iconOff\"\n            [context]=\"{$implicit: size}\"\n        >\n            <ng-template let-icon>\n                <tui-svg\n                    *ngIf=\"showIcons && !showLoader\"\n                    automation-id=\"tui-toggle__cancel-icon\"\n                    class=\"t-icon t-icon_off\"\n                    [src]=\"icon\"\n                ></tui-svg>\n            </ng-template>\n        </span>\n    </div>\n    <input\n        #focusableElement\n        type=\"checkbox\"\n        role=\"switch\"\n        automation-id=\"tui-toggle__checkbox\"\n        class=\"t-checkbox\"\n        [attr.aria-checked]=\"value\"\n        [id]=\"id\"\n        [disabled]=\"disabled\"\n        [tuiChecked]=\"checked\"\n        [tuiFocusable]=\"focusable\"\n        (tuiCheckedChange)=\"onChecked($event)\"\n        (tuiFocusedChange)=\"onFocused($event)\"\n        (tuiHoveredChange)=\"onHovered($event)\"\n        (tuiPressedChange)=\"onPressed($event)\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    />\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiToggleComponent_1; }),
                },
            ],
            styles: [":host{position:relative;display:inline-block;vertical-align:middle;overflow:hidden;border-radius:6.25rem}:host[data-size='m']{width:2rem;height:1rem}:host[data-size='l']{width:3rem;height:1.5rem}.t-checkbox{padding:0;margin:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.t-checkbox:-webkit-autofill,.t-checkbox:-webkit-autofill:focus,.t-checkbox:-webkit-autofill:hover{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host._disabled .t-checkbox{pointer-events:none;cursor:default}.t-toggle{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}:host[data-size='m'] .t-toggle{width:3rem;height:1rem;transform:translateX(-1rem)}:host[data-size='l'] .t-toggle{width:4.5rem;height:1.5rem;transform:translateX(-1.5rem)}:host._checked .t-toggle{transform:translateX(0)}.t-circle{margin:.125rem 0;flex-shrink:0;border-radius:100%;background-color:var(--tui-base-01)}:host._disabled .t-circle_light{opacity:.24}:host[data-size='m'] .t-circle{width:.75rem;height:.75rem}:host[data-size='l'] .t-circle{width:1rem;height:1rem}:host._disabled .t-circle{background-color:var(--tui-base-01)}:host:not(._checked) .t-loader{color:var(--tui-base-06)}:host:not(._checked)._disabled .t-loader{color:var(--tui-base-05)}:host:not(._checked)[data-mode=onDark] .t-loader{color:var(--tui-text-03-night)}:host:not(._checked)[data-mode=onDark]._disabled .t-loader{color:var(--tui-clear-inverse-active)}:host:not(._checked)[data-mode=onLight] .t-loader{color:var(--tui-text-03)}:host:not(._checked)[data-mode=onLight]._disabled .t-loader{color:var(--tui-clear-active)}:host[data-size='m'] .t-loader{width:.75rem;margin:0 .2rem;transform:scale(.75)}:host[data-size='l'] .t-loader{width:1rem;margin:0 .25rem}.t-icon-wrapper{display:flex}.t-icon{opacity:.8}.t-icon_off{color:var(--tui-base-06)}:host._disabled .t-icon_off{color:var(--tui-base-05)}:host[data-mode=onDark] .t-icon_off{color:var(--tui-text-03-night)}:host[data-mode=onDark]._disabled .t-icon_off{color:var(--tui-clear-inverse-active)}:host[data-mode=onLight] .t-icon_off{color:var(--tui-text-03)}:host[data-mode=onLight]._disabled .t-icon_off{color:var(--tui-clear-active)}:host[data-size='m'] .t-icon{width:1rem;height:1rem;transform:scale(.75)}:host[data-size='l'] .t-icon{margin:0 .125rem;width:1.5rem;height:1.5rem}:host:hover .t-icon{opacity:1}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Optional()),
        __param(2, Inject(TuiModeDirective)),
        __param(3, Inject(TUI_TOGGLE_OPTIONS))
    ], TuiToggleComponent);
    return TuiToggleComponent;
}(AbstractTuiControl));

var TuiToggleModule = /** @class */ (function () {
    function TuiToggleModule() {
    }
    TuiToggleModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TuiFocusedModule,
                TuiFocusableModule,
                TuiHoveredModule,
                TuiPressedModule,
                TuiFocusVisibleModule,
                TuiCheckedModule,
                TuiWrapperModule,
                TuiSvgModule,
                TuiLoaderModule,
                PolymorpheusModule,
            ],
            declarations: [TuiToggleComponent],
            exports: [TuiToggleComponent],
        })
    ], TuiToggleModule);
    return TuiToggleModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_TOGGLE_DEFAULT_OPTIONS, TUI_TOGGLE_OPTIONS, TuiToggleComponent, TuiToggleModule, tuiToggleOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-toggle.js.map
