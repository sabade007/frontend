import { __decorate, __param, __extends, __assign } from 'tslib';
import { EventEmitter, Inject, Input, Output, Component, ChangeDetectionStrategy, Optional, SkipSelf, Directive, TemplateRef, ChangeDetectorRef, forwardRef, HostBinding, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import { tuiIsObserved, tuiDefaultProp, TuiDestroyService, AbstractTuiDialogService, TUI_ALERTS } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD, TuiModeDirective, TUI_BUTTON_OPTIONS, TUI_ANIMATION_OPTIONS, tuiFadeIn, tuiSlideInRight, tuiHeightCollapse, TuiButtonModule, TuiLinkModule, TuiSvgModule, TuiFormatDatePipeModule } from '@taiga-ui/core';
import { Observable, Subject, EMPTY } from 'rxjs';
import { CommonModule } from '@angular/common';
import { PolymorpheusTemplate, POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { switchMap, takeUntil } from 'rxjs/operators';
import { TuiIdService } from '@taiga-ui/cdk/services';

var TuiPushComponent = /** @class */ (function () {
    function TuiPushComponent(closeWord$) {
        this.closeWord$ = closeWord$;
        this.heading = '';
        this.type = '';
        this.timestamp = 0;
        this.close = new EventEmitter();
    }
    Object.defineProperty(TuiPushComponent.prototype, "closeable", {
        get: function () {
            return tuiIsObserved(this.close);
        },
        enumerable: true,
        configurable: true
    });
    TuiPushComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPushComponent.prototype, "heading", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPushComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPushComponent.prototype, "timestamp", void 0);
    __decorate([
        Output()
    ], TuiPushComponent.prototype, "close", void 0);
    TuiPushComponent = __decorate([
        Component({
            selector: 'tui-push',
            template: "<div class=\"t-image\">\n    <ng-content select=\"img\"></ng-content>\n</div>\n<button\n    *ngIf=\"closeable\"\n    tuiIconButton\n    icon=\"tuiIconCloseLarge\"\n    size=\"xs\"\n    appearance=\"\"\n    shape=\"rounded\"\n    class=\"t-close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n<div class=\"t-top\">\n    <span class=\"t-icon\">\n        <ng-content select=\"tui-svg\"></ng-content>\n    </span>\n    {{ type }}\n    <span\n        *ngIf=\"timestamp\"\n        class=\"t-time\"\n        [textContent]=\"timestamp | tuiFormatDate | async\"\n    ></span>\n</div>\n<h3 class=\"t-heading\">{{ heading }}</h3>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n<div class=\"t-actions\">\n    <span class=\"t-button\">\n        <ng-content select=\"[tuiButton]\"></ng-content>\n    </span>\n    <span class=\"t-link\">\n        <ng-content select=\"[tuiLink]\"></ng-content>\n    </span>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{box-shadow:0 .25rem 1.5rem rgba(0,0,0,.12);position:relative;display:block;width:22.5rem;max-width:100%;box-sizing:border-box;padding:1.25rem 1.25rem .25rem;overflow:hidden;font:var(--tui-font-text-m);border-radius:var(--tui-radius-l);background:var(--tui-elevation-02)}.t-image{display:flex;flex-direction:column;max-height:10.625rem;overflow:hidden;margin:-1.25rem -1.25rem 1.25rem}.t-close{position:absolute;top:.75rem;right:.75rem;color:rgba(0,0,0,.54);background:rgba(242,242,242,.32);-webkit-backdrop-filter:blur(1rem);backdrop-filter:blur(1rem)}.t-top{display:flex;align-items:center;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-icon{height:1.25rem;margin-right:.5rem;transform:scale(.833);transform-origin:top left;color:var(--tui-link)}.t-time:before{content:'\u2022';display:inline-block;width:1rem;text-align:center}.t-heading{line-height:1.25rem;font-weight:700;margin:.75rem 0 .25rem}.t-content,.t-heading{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;word-break:break-word;overflow:hidden}.t-actions{display:flex;align-items:center;font:var(--tui-font-text-s)}.t-button:not(:empty){margin:.75rem .75rem .75rem 0}.t-link{margin:.75rem 0}.t-link:empty{margin:.5rem}"]
        }),
        __param(0, Inject(TUI_CLOSE_WORD))
    ], TuiPushComponent);
    return TuiPushComponent;
}());

var TuiPushDirective = /** @class */ (function (_super) {
    __extends(TuiPushDirective, _super);
    function TuiPushDirective(modeDirective) {
        var _a;
        var _this = _super.call(this) || this;
        _this.modeDirective = modeDirective;
        _this.size = 's';
        _this.shape = null;
        _this.change$ = ((_a = _this.modeDirective) === null || _a === void 0 ? void 0 : _a.change$) || new Subject();
        return _this;
    }
    TuiPushDirective_1 = TuiPushDirective;
    Object.defineProperty(TuiPushDirective.prototype, "appearance", {
        get: function () {
            var _a;
            return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) === 'onDark' ? 'accent' : 'secondary';
        },
        enumerable: true,
        configurable: true
    });
    var TuiPushDirective_1;
    TuiPushDirective.ctorParameters = function () { return [
        { type: TuiModeDirective, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TuiModeDirective,] }] }
    ]; };
    TuiPushDirective = TuiPushDirective_1 = __decorate([
        Directive({
            selector: 'tui-push',
            providers: [
                {
                    provide: TuiModeDirective,
                    useExisting: TuiPushDirective_1,
                },
                {
                    provide: TUI_BUTTON_OPTIONS,
                    useExisting: TuiPushDirective_1,
                },
            ],
        }),
        __param(0, Optional()),
        __param(0, SkipSelf()),
        __param(0, Inject(TuiModeDirective))
    ], TuiPushDirective);
    return TuiPushDirective;
}(TuiModeDirective));

var TUI_PUSH_DEFAULT_OPTIONS = {
    heading: "",
    type: "",
    timestamp: 0,
    image: "",
    icon: "",
    iconColor: "",
    buttons: [],
};

var TuiPushAlertDirective = /** @class */ (function (_super) {
    __extends(TuiPushAlertDirective, _super);
    function TuiPushAlertDirective(template, changeDetectorRef, destroy$, push) {
        var _this = _super.call(this, template, changeDetectorRef) || this;
        _this.show$ = new Subject();
        _this.show$
            .pipe(switchMap(function (show) { return (show ? push.open(_this) : EMPTY); }), takeUntil(destroy$))
            .subscribe();
        return _this;
    }
    Object.defineProperty(TuiPushAlertDirective.prototype, "tuiPush", {
        set: function (show) {
            this.show$.next(show);
        },
        enumerable: true,
        configurable: true
    });
    TuiPushAlertDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiPushService, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiPushService; }),] }] }
    ]; };
    __decorate([
        Input()
    ], TuiPushAlertDirective.prototype, "tuiPush", null);
    TuiPushAlertDirective = __decorate([
        Directive({
            selector: '[tuiPush]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(TemplateRef)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(forwardRef(function () { return TuiPushService; })))
    ], TuiPushAlertDirective);
    return TuiPushAlertDirective;
}(PolymorpheusTemplate));

var TuiPushAlertComponent = /** @class */ (function () {
    function TuiPushAlertComponent(options, context) {
        this.options = options;
        this.context = context;
        this.animation = __assign({ value: '' }, this.options);
    }
    Object.defineProperty(TuiPushAlertComponent.prototype, "isDirective", {
        get: function () {
            return this.context.content instanceof TuiPushAlertDirective;
        },
        enumerable: true,
        configurable: true
    });
    TuiPushAlertComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_ANIMATION_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] }
    ]; };
    __decorate([
        HostBinding('@tuiFadeIn'),
        HostBinding('@tuiSlideInRight'),
        HostBinding('@tuiHeightCollapse')
    ], TuiPushAlertComponent.prototype, "animation", void 0);
    TuiPushAlertComponent = __decorate([
        Component({
            selector: 'tui-push-alert',
            template: "<tui-push\n    *ngIf=\"!isDirective; else content\"\n    [heading]=\"context.heading\"\n    [type]=\"context.type\"\n    [timestamp]=\"context.timestamp\"\n    (close)=\"context.$implicit.complete()\"\n>\n    <img\n        *ngIf=\"context.image\"\n        alt=\"\"\n        [src]=\"context.image\"\n    />\n    <tui-svg\n        *ngIf=\"context.icon\"\n        [style.color]=\"context.iconColor\"\n        [src]=\"context.icon\"\n    ></tui-svg>\n    <div\n        polymorpheus-outlet\n        [content]=\"context.content\"\n    ></div>\n    <button\n        *ngIf=\"context.buttons.length > 1\"\n        tuiButton\n        (click)=\"context.$implicit.next(context.buttons[0])\"\n    >\n        {{ context.buttons[0] }}\n    </button>\n    <button\n        *ngIf=\"context.buttons.length\"\n        tuiLink\n        (click)=\"context.$implicit.next(context.buttons[context.buttons.length - 1])\"\n    >\n        {{ context.buttons[context.buttons.length - 1] }}\n    </button>\n</tui-push>\n<ng-template #content>\n    <div\n        polymorpheus-outlet\n        [content]=\"context.content\"\n    ></div>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
            host: { role: 'alert' },
            styles: [":host{max-width:calc(100% - 2rem);margin:0 1rem 1rem auto}:host:first-child{margin-top:auto}"]
        }),
        __param(0, Inject(TUI_ANIMATION_OPTIONS)),
        __param(1, Inject(POLYMORPHEUS_CONTEXT))
    ], TuiPushAlertComponent);
    return TuiPushAlertComponent;
}());

var TuiPushService = /** @class */ (function (_super) {
    __extends(TuiPushService, _super);
    function TuiPushService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.component = new PolymorpheusComponent(TuiPushAlertComponent);
        _this.defaultOptions = TUI_PUSH_DEFAULT_OPTIONS;
        return _this;
    }
    TuiPushService.prototype.open = function (content, options) {
        if (options === void 0) { options = {}; }
        return _super.prototype.open.call(this, content, options);
    };
    TuiPushService.ɵprov = ɵɵdefineInjectable({ factory: function TuiPushService_Factory() { return new TuiPushService(ɵɵinject(TuiIdService)); }, token: TuiPushService, providedIn: "root" });
    TuiPushService = __decorate([
        Injectable({ providedIn: "root" })
    ], TuiPushService);
    return TuiPushService;
}(AbstractTuiDialogService));

var TuiPushModule = /** @class */ (function () {
    function TuiPushModule() {
    }
    TuiPushModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                PolymorpheusModule,
                TuiButtonModule,
                TuiLinkModule,
                TuiSvgModule,
                TuiFormatDatePipeModule,
            ],
            declarations: [
                TuiPushComponent,
                TuiPushDirective,
                TuiPushAlertComponent,
                TuiPushAlertDirective,
            ],
            exports: [
                TuiPushComponent,
                TuiPushDirective,
                TuiPushAlertComponent,
                TuiPushAlertDirective,
            ],
            providers: [
                {
                    provide: TUI_ALERTS,
                    useExisting: TuiPushService,
                    multi: true,
                },
            ],
        })
    ], TuiPushModule);
    return TuiPushModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_PUSH_DEFAULT_OPTIONS, TuiPushAlertComponent, TuiPushAlertDirective, TuiPushComponent, TuiPushDirective, TuiPushModule, TuiPushService };
//# sourceMappingURL=taiga-ui-kit-components-push.js.map
