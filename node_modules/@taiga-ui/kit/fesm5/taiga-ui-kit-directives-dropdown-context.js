import { __extends, __decorate, __param } from 'tslib';
import { DOCUMENT } from '@angular/common';
import { ElementRef, Inject, ComponentFactoryResolver, Injector, Input, HostListener, Directive, forwardRef, NgModule } from '@angular/core';
import { EMPTY_CLIENT_RECT, getNativeFocused, getClosestFocusable, setNativeFocused, tuiPointToClientRect, TuiDestroyService, TuiPortalService, TuiActiveZoneDirective, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_DROPDOWN_DIRECTIVE, AbstractTuiDropdown, TuiDropdownBoxModule } from '@taiga-ui/core';
import { EMPTY, Observable } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';

// @dynamic
var TuiDropdownContextDirective = /** @class */ (function (_super) {
    __extends(TuiDropdownContextDirective, _super);
    function TuiDropdownContextDirective(elementRef, documentRef, destroy$, componentFactoryResolver, injector, portalService, activeZone) {
        var _this = _super.call(this, componentFactoryResolver, injector, portalService, elementRef, activeZone) || this;
        _this.elementRef = elementRef;
        _this.documentRef = documentRef;
        _this.activeZone = activeZone;
        _this.lastClickedClientRect = EMPTY_CLIENT_RECT;
        _this.content = '';
        _this.refresh$ = EMPTY;
        _this.context = { close: function () { return _this.closeDropdownBox(); } };
        activeZone.tuiActiveZoneChange
            .pipe(filter(function (isActive) { return !isActive; }), takeUntil(destroy$))
            .subscribe(function () { return _this.closeDropdownBox(); });
        return _this;
    }
    TuiDropdownContextDirective_1 = TuiDropdownContextDirective;
    Object.defineProperty(TuiDropdownContextDirective.prototype, "clientRect", {
        get: function () {
            return this.lastClickedClientRect;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDropdownContextDirective.prototype, "fixed", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDropdownContextDirective.prototype, "dropdownContent", {
        get: function () {
            var _a, _b;
            return ((_b = (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) || null;
        },
        enumerable: true,
        configurable: true
    });
    TuiDropdownContextDirective.prototype.onHostClick = function () {
        this.closeDropdownBox();
    };
    TuiDropdownContextDirective.prototype.onContextMenu = function (x, y) {
        this.closeDropdownBox();
        this.openDropdown(x, y);
    };
    TuiDropdownContextDirective.prototype.onAnotherContextOpen = function (target) {
        var isAnotherContextOpened = !this.elementRef.nativeElement.contains(target);
        if (isAnotherContextOpened) {
            this.closeDropdownBox();
        }
    };
    TuiDropdownContextDirective.prototype.onArrow = function (event, down) {
        var activeElement = getNativeFocused(this.documentRef);
        var focusInside = activeElement && this.activeZone.contains(activeElement);
        if (!this.dropdownContent || focusInside) {
            return;
        }
        event.preventDefault();
        var nextEl = this.dropdownContent.nextElementSibling;
        var initial = down || !this.checkIsFocusableElement(nextEl) ? this.dropdownContent : nextEl;
        var focusable = getClosestFocusable(initial, !down, this.dropdownContent);
        if (focusable === null) {
            return;
        }
        setNativeFocused(focusable);
    };
    TuiDropdownContextDirective.prototype.onKeyDownEsc = function (event) {
        if (!this.dropdownContent) {
            return;
        }
        event.stopPropagation();
        this.closeDropdownBox();
    };
    TuiDropdownContextDirective.prototype.openDropdown = function (x, y) {
        this.lastClickedClientRect = tuiPointToClientRect(x, y);
        this.openDropdownBox();
    };
    TuiDropdownContextDirective.prototype.checkIsFocusableElement = function (element) {
        return !!element && 'focus' in element && 'blur' in element;
    };
    var TuiDropdownContextDirective_1;
    TuiDropdownContextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ComponentFactoryResolver, decorators: [{ type: Inject, args: [ComponentFactoryResolver,] }] },
        { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] },
        { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] },
        { type: TuiActiveZoneDirective }
    ]; };
    __decorate([
        Input('tuiDropdownContext'),
        tuiDefaultProp()
    ], TuiDropdownContextDirective.prototype, "content", void 0);
    __decorate([
        HostListener('click')
    ], TuiDropdownContextDirective.prototype, "onHostClick", null);
    __decorate([
        HostListener('contextmenu.prevent', ['$event.clientX', '$event.clientY'])
    ], TuiDropdownContextDirective.prototype, "onContextMenu", null);
    __decorate([
        HostListener('document:contextmenu', ['$event.target'])
    ], TuiDropdownContextDirective.prototype, "onAnotherContextOpen", null);
    __decorate([
        HostListener('document:keydown.arrowDown', ['$event', 'true']),
        HostListener('document:keydown.arrowUp', ['$event', 'false'])
    ], TuiDropdownContextDirective.prototype, "onArrow", null);
    __decorate([
        HostListener('document:keydown.esc', ['$event'])
    ], TuiDropdownContextDirective.prototype, "onKeyDownEsc", null);
    TuiDropdownContextDirective = TuiDropdownContextDirective_1 = __decorate([
        Directive({
            selector: '[tuiDropdownContext]',
            providers: [
                TuiDestroyService,
                TuiActiveZoneDirective,
                {
                    provide: TUI_DROPDOWN_DIRECTIVE,
                    useExisting: forwardRef(function () { return TuiDropdownContextDirective_1; }),
                },
            ],
        }),
        __param(1, Inject(DOCUMENT)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(ComponentFactoryResolver)),
        __param(4, Inject(Injector)),
        __param(5, Inject(TuiPortalService))
    ], TuiDropdownContextDirective);
    return TuiDropdownContextDirective;
}(AbstractTuiDropdown));

var TuiDropdownContextModule = /** @class */ (function () {
    function TuiDropdownContextModule() {
    }
    TuiDropdownContextModule = __decorate([
        NgModule({
            imports: [TuiDropdownBoxModule],
            declarations: [TuiDropdownContextDirective],
            exports: [TuiDropdownContextDirective],
        })
    ], TuiDropdownContextModule);
    return TuiDropdownContextModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDropdownContextDirective, TuiDropdownContextModule };
//# sourceMappingURL=taiga-ui-kit-directives-dropdown-context.js.map
