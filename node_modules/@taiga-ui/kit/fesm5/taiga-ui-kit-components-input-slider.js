import { __decorate, __extends, __param } from 'tslib';
import { I18nPluralPipe, CommonModule } from '@angular/common';
import { Directive, Optional, Self, Inject, ChangeDetectorRef, ViewChild, ElementRef, Input, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { isNativeFocused, tuiAssert, setNativeFocused, round, clamp, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import { getFractionPartPadded, TuiTextfieldController, TUI_TEXTFIELD_WATCHED_CONTROLLER, HINT_CONTROLLER_PROVIDER, TEXTFIELD_CONTROLLER_PROVIDER, TuiFormatNumberPipeModule, TuiTextfieldControllerModule } from '@taiga-ui/core';
import { AbstractTuiInputSlider } from '@taiga-ui/kit/abstract';
import { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';
import { TuiSliderComponent, tuiSliderOptionsProvider, TuiSliderModule } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/**
 * Turn on new `InputSlider`'s version.
 * The new version will behave almost the same as `InputSlider` from the next major release.
 * @deprecated TODO remove me in v3.0 and make `InputSlider` always "new".
 */
var TuiNewInputSliderDirective = /** @class */ (function () {
    function TuiNewInputSliderDirective() {
    }
    TuiNewInputSliderDirective = __decorate([
        Directive({
            selector: 'tui-input-slider[new]',
        })
    ], TuiNewInputSliderDirective);
    return TuiNewInputSliderDirective;
}());
// @dynamic
var TuiInputSliderComponent = /** @class */ (function (_super) {
    __extends(TuiInputSliderComponent, _super);
    function TuiInputSliderComponent(control, changeDetectorRef, controller, fromToTexts$, isNew, i18nPlural) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.controller = controller;
        _this.fromToTexts$ = fromToTexts$;
        _this.isNew = isNew;
        _this.i18nPlural = i18nPlural;
        _this.min = 0;
        _this.max = Infinity;
        _this.quantum = 1;
        _this.steps = 0;
        _this.segments = 0;
        _this.keySteps = null;
        _this.valueContent = '';
        _this.prefix = '';
        _this.postfix = '';
        /**
         * @deprecated use `tuiTextfieldCustomContent` instead
         * TODO delete in v3.0
         */
        _this.secondary = '';
        return _this;
    }
    TuiInputSliderComponent_1 = TuiInputSliderComponent;
    Object.defineProperty(TuiInputSliderComponent.prototype, "nativeFocusableElement", {
        get: function () {
            var _a;
            return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled
                ? null
                : this.inputNumberRef.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "focused", {
        get: function () {
            var _a;
            return (isNativeFocused(this.nativeFocusableElement) ||
                isNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "computedSteps", {
        get: function () {
            return this.steps || (this.max - this.min) / this.quantum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "precision", {
        get: function () {
            return getFractionPartPadded(this.quantum).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "decimal", {
        get: function () {
            return this.precision ? 'not-zero' : 'never';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "showValueContent", {
        get: function () {
            return Boolean(this.computedValueContent && !this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "computedSize", {
        /**
         * TODO remove old property `size` in v3.0
         */
        get: function () {
            if (this.isNew) {
                tuiAssert.assert(this.controller.size !== 's', 
                // eslint-disable-next-line @typescript-eslint/quotes
                "Size 's' is not supported by this input.");
                return this.controller.size === 'l' ? 'l' : 'm';
            }
            return this.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputSliderComponent.prototype, "computedValueContent", {
        /**
         * @deprecated for backward compatibility
         * TODO replace by just `this.valueContent` in v3.0
         */
        get: function () {
            return this.minLabel || this.maxLabel
                ? legacyMinMaxLabel(this)
                : this.valueContent;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputSliderComponent.prototype.focusTextInput = function () {
        var _a;
        var focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;
        if (focusableElement) {
            setNativeFocused(focusableElement);
        }
    };
    TuiInputSliderComponent.prototype.safelyUpdateValue = function (value) {
        this.updateValue(this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue));
    };
    TuiInputSliderComponent.prototype.onVerticalArrowKeyDown = function (coefficient) {
        if (this.readOnly || !this.step) {
            return;
        }
        var value = this.value + coefficient * this.step;
        if (value !== this.value) {
            this.safelyUpdateValue(value);
        }
        this.updateTextInputValue(this.valueGuard(value));
    };
    TuiInputSliderComponent.prototype.onSliderChange = function (newValue) {
        this.safelyUpdateValue(newValue);
        this.updateTextInputValue(this.value);
    };
    TuiInputSliderComponent.prototype.onFocused = function (focused) {
        var _a = this, value = _a.value, textInputValue = _a.textInputValue, safeCurrentValue = _a.safeCurrentValue, inputNumberRef = _a.inputNumberRef;
        if (!focused && textInputValue !== (inputNumberRef === null || inputNumberRef === void 0 ? void 0 : inputNumberRef.getFormattedValue(value))) {
            this.updateTextInputValue(value !== null && value !== void 0 ? value : safeCurrentValue);
        }
        this.updateFocused(focused);
    };
    TuiInputSliderComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputSliderComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    Object.defineProperty(TuiInputSliderComponent.prototype, "textInputValue", {
        get: function () {
            var _a;
            return ((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeValue) || '';
        },
        enumerable: true,
        configurable: true
    });
    TuiInputSliderComponent.prototype.getFallbackValue = function () {
        return 0;
    };
    TuiInputSliderComponent.prototype.valueGuard = function (value) {
        var roundedValue = round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return clamp(roundedValue, this.min, this.max);
    };
    TuiInputSliderComponent.prototype.updateTextInputValue = function (value) {
        if (this.inputNumberRef) {
            this.inputNumberRef.nativeValue =
                this.inputNumberRef.getFormattedValue(value);
        }
    };
    var TuiInputSliderComponent_1;
    TuiInputSliderComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] },
        { type: TuiNewInputSliderDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiNewInputSliderDirective,] }] },
        { type: I18nPluralPipe, decorators: [{ type: Inject, args: [I18nPluralPipe,] }] }
    ]; };
    __decorate([
        ViewChild(TuiInputNumberComponent)
    ], TuiInputSliderComponent.prototype, "inputNumberRef", void 0);
    __decorate([
        ViewChild(TuiSliderComponent, { read: ElementRef })
    ], TuiInputSliderComponent.prototype, "sliderRef", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp(quantumAssertion, 'Quantum must be positive')
    ], TuiInputSliderComponent.prototype, "quantum", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "steps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "segments", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "keySteps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "valueContent", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "prefix", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "postfix", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputSliderComponent.prototype, "secondary", void 0);
    TuiInputSliderComponent = TuiInputSliderComponent_1 = __decorate([
        Component({
            selector: 'tui-input-slider',
            template: "<tui-input-number\n    [min]=\"min\"\n    [max]=\"max\"\n    [precision]=\"precision\"\n    [decimal]=\"decimal\"\n    [prefix]=\"showValueContent ? '' : prefix\"\n    [postfix]=\"showValueContent ? '' : postfix || (value | i18nPlural: pluralizeMap || pluralizeMapFallback)\"\n    [tuiTextfieldCustomContent]=\"controller.customContent || deprecatedSecondary\"\n    [tuiTextfieldSize]=\"computedSize\"\n    [tuiTextfieldLabelOutside]=\"computedSize !== 'l'\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [pseudoFocused]=\"computedFocused\"\n    [pseudoHovered]=\"computedHovered\"\n    [pseudoPressed]=\"computedPressed\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n>\n    <ng-content></ng-content>\n    <div\n        *ngIf=\"showValueContent\"\n        polymorpheus-outlet\n        automation-id=\"tui-input-slider__value-content\"\n        [content]=\"computedValueContent\"\n        [context]=\"{$implicit: value}\"\n    ></div>\n</tui-input-number>\n\n<!--TODO: remove in v3.0-->\n<ng-template #deprecatedSecondary>{{ secondary }}</ng-template>\n\n<!--TODO: remove wrapper + ticks labels (leave only slider) in v3.0-->\n<div class=\"t-slider-wrapper\">\n    <input\n        tuiSlider\n        type=\"range\"\n        [tuiFocusable]=\"false\"\n        [max]=\"computedSteps\"\n        [segments]=\"segments\"\n        [keySteps]=\"computedKeySteps\"\n        [attr.disabled]=\"readOnly || computedDisabled || null\"\n        [ngModel]=\"value\"\n        (keyStepsInput)=\"onSliderChange($event)\"\n        (click)=\"focusTextInput()\"\n    />\n\n    <!--TODO delete ticks labels in v3.0-->\n    <div\n        *ngIf=\"segments && !isNew\"\n        class=\"t-ticks-labels\"\n    >\n        <span\n            *tuiRepeatTimes=\"let tickIndex of segments + 1\"\n            automation-id=\"tui-slider__segment\"\n        >\n            <span *ngIf=\"fromToTexts$ | async as fromToText\">\n                {{ getTickPrefix(tickIndex, segments, fromToText) }}\n                {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | tuiFormatNumber }}\n                <span *ngIf=\"segmentsPluralizeMap\">\n                    {{ tickIndex | tuiSliderTickLabel: segments:computedKeySteps | i18nPlural: segmentsPluralizeMap }}\n                </span>\n            </span>\n        </span>\n    </div>\n</div>\n",
            host: {
                /**
                 * TODO delete it in v3.0
                 * Dont forget to clear html-tags
                 */
                '[class._show-ticks-labels]': '!isNew',
            },
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                I18nPluralPipe,
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputSliderComponent_1; }),
                },
                tuiSliderOptionsProvider({ trackColor: 'transparent' }),
                HINT_CONTROLLER_PROVIDER,
                TEXTFIELD_CONTROLLER_PROVIDER,
            ],
            styles: [":host{position:relative;z-index:0;display:block;height:-webkit-max-content;height:-moz-max-content;height:max-content}:host._segmented._show-ticks-labels{border-bottom:26px solid transparent}.t-slider-wrapper{position:absolute;top:100%;left:calc(var(--tui-radius-m)/ 2);right:0;margin:-.5625rem 0 0}input[type=range]{border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}.t-ticks-labels{display:flex;margin:0 .5rem;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-ticks-labels>*{position:relative;flex:2;text-align:center}.t-ticks-labels>:first-child{left:-.5rem;flex:1;text-align:left}.t-ticks-labels>:last-child{right:-.5rem;flex:1;text-align:right}tui-input-slider+.t-ticks-labels{margin-left:calc(var(--tui-radius-m)/ 2 + .5rem)}tui-input-range+.t-ticks-labels,tui-range+.t-ticks-labels{margin-left:1rem;margin-right:1rem}tui-input-range+.t-ticks-labels>:first-child,tui-range+.t-ticks-labels>:first-child{left:-1rem}tui-input-range+.t-ticks-labels>:last-child,tui-range+.t-ticks-labels>:last-child{right:-1rem}"]
        })
        /**
         * TODO replace `extends AbstractTuiInputSlider<number>` by `extends AbstractTuiControl<number> implements TuiWithOptionalMinMax<number>`
         * in v3.0
         */
        ,
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER)),
        __param(3, Inject(TUI_FROM_TO_TEXTS)),
        __param(4, Optional()),
        __param(4, Inject(TuiNewInputSliderDirective)),
        __param(5, Inject(I18nPluralPipe))
    ], TuiInputSliderComponent);
    return TuiInputSliderComponent;
}(AbstractTuiInputSlider));
function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @deprecated helper for backward compatibility.
 * TODO remove in v3.0
 */
function legacyMinMaxLabel(_a) {
    var min = _a.min, max = _a.max, minLabel = _a.minLabel, maxLabel = _a.maxLabel, i18nPlural = _a.i18nPlural, pluralizeMap = _a.pluralizeMap;
    return function (_a) {
        var value = _a.$implicit;
        var valueWithPlural = value + " " + (pluralizeMap ? i18nPlural.transform(value, pluralizeMap) : '');
        switch (value) {
            case min:
                return minLabel || valueWithPlural;
            case max:
                return maxLabel || valueWithPlural;
            default:
                return valueWithPlural;
        }
    };
}

var TuiInputSliderModule = /** @class */ (function () {
    function TuiInputSliderModule() {
    }
    TuiInputSliderModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule,
                ReactiveFormsModule,
                TuiFocusableModule,
                TuiSliderModule,
                TuiFormatNumberPipeModule,
                TuiRepeatTimesModule,
                PolymorpheusModule,
                TuiInputNumberModule,
                TuiTextfieldControllerModule,
            ],
            declarations: [TuiInputSliderComponent, TuiNewInputSliderDirective],
            exports: [TuiInputSliderComponent, TuiNewInputSliderDirective],
        })
    ], TuiInputSliderModule);
    return TuiInputSliderModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputSliderComponent, TuiInputSliderModule, TuiNewInputSliderDirective };
//# sourceMappingURL=taiga-ui-kit-components-input-slider.js.map
