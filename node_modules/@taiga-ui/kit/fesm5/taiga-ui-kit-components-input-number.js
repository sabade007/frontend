import { __extends, __decorate, __param } from 'tslib';
import { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, ContentChildren, HostListener, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { EMPTY_QUERY, TUI_IS_IOS, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl, TuiMapperPipeModule } from '@taiga-ui/cdk';
import { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiCreateAutoCorrectedNumberPipe, maskedMoneyValueIsEmpty, tuiMaskedNumberStringToNumber, TUI_DECIMAL_SYMBOLS, getFractionPartPadded, formatNumber, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { PolymorpheusOutletComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { CommonModule } from '@angular/common';
import { TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import { TextMaskModule } from 'angular2-text-mask';

var DEFAULT_MAX_LENGTH = 18;
// @dynamic
var TuiInputNumberComponent = /** @class */ (function (_super) {
    __extends(TuiInputNumberComponent, _super);
    function TuiInputNumberComponent(control, changeDetectorRef, numberFormat, isIOS) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.numberFormat = numberFormat;
        _this.isIOS = isIOS;
        _this.unfinishedValue = '';
        _this.min = -Infinity;
        _this.max = Infinity;
        _this.decimal = 'not-zero';
        _this.precision = 2;
        _this.prefix = '';
        _this.postfix = '';
        _this.polymorpheusValueContent = EMPTY_QUERY;
        _this.mask = function (allowNegative, decimal, decimalLimit, nativeFocusableElement) {
            return ({
                mask: tuiCreateNumberMask({
                    allowNegative: allowNegative,
                    decimalLimit: decimalLimit,
                    allowDecimal: decimal !== 'never',
                    requireDecimal: decimal === 'always',
                    decimalSymbol: _this.numberFormat.decimalSeparator,
                    thousandSymbol: _this.numberFormat.thousandSeparator,
                    autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(_this.numberFormat),
                }),
                pipe: tuiCreateAutoCorrectedNumberPipe(decimal === 'always' ? decimalLimit : 0, _this.numberFormat.decimalSeparator, _this.numberFormat.thousandSeparator, nativeFocusableElement, allowNegative, _this.isIOS),
                guide: false,
            });
        };
        return _this;
    }
    TuiInputNumberComponent_1 = TuiInputNumberComponent;
    Object.defineProperty(TuiInputNumberComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return !this.primitiveTextfield || this.computedDisabled
                ? null
                : this.primitiveTextfield.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "focused", {
        get: function () {
            return !!this.primitiveTextfield && this.primitiveTextfield.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "isNegativeAllowed", {
        get: function () {
            return this.min < 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "inputMode", {
        get: function () {
            if (this.isIOS && this.isNegativeAllowed) {
                // iphones do not have minus sign if inputMode is equal to 'numeric' / 'decimal'
                return 'text';
            }
            return this.decimal === 'never' ? 'numeric' : 'decimal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "calculatedMaxLength", {
        get: function () {
            var decimalPart = this.decimal !== 'never' &&
                this.nativeValue.includes(this.numberFormat.decimalSeparator);
            var precision = decimalPart ? this.precision + 1 : 0;
            var takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
            return DEFAULT_MAX_LENGTH + precision + takeThousand;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "formattedValue", {
        get: function () {
            return this.getFormattedValue(this.value || 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "computedValue", {
        get: function () {
            if (this.focused) {
                return this.nativeValue;
            }
            return this.value === null ? '' : this.formattedValue;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputNumberComponent.prototype.onZero = function (event) {
        var decimal = this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';
        var nativeFocusableElement = this.nativeFocusableElement;
        if (decimal.length < this.precision ||
            !nativeFocusableElement ||
            !nativeFocusableElement.selectionStart ||
            this.nativeValue[nativeFocusableElement.selectionStart] !== '0') {
            return;
        }
        event.preventDefault();
        nativeFocusableElement.selectionStart++;
    };
    TuiInputNumberComponent.prototype.onValueChange = function (value) {
        if (maskedMoneyValueIsEmpty(value)) {
            this.updateValue(null);
            return;
        }
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = value;
            return;
        }
        this.unfinishedValue = null;
        var capped = this.absoluteCapInputValue(value);
        if (capped === null || Number.isNaN(capped)) {
            return;
        }
        this.updateValue(capped);
        if (capped !==
            tuiMaskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)) {
            this.nativeValue = this.formattedValue;
        }
    };
    TuiInputNumberComponent.prototype.onKeyDown = function (event) {
        if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {
            return;
        }
        if (this.decimal === 'never') {
            event.preventDefault();
            return;
        }
        if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {
            event.preventDefault();
            this.setCaretAfterComma();
        }
    };
    TuiInputNumberComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        var nativeNumberValue = this.unfinishedValue
            ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (Number.isNaN(nativeNumberValue)) {
            this.clear();
            return;
        }
        var clamped = Math.min(this.max, Math.max(this.min, nativeNumberValue));
        this.updateValue(clamped);
        this.nativeValue = this.formattedValue;
    };
    TuiInputNumberComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputNumberComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputNumberComponent.prototype.getFormattedValue = function (value) {
        var absValue = Math.abs(value);
        var hasFraction = absValue % 1 > 0;
        var limit = this.decimal === 'always' || (hasFraction && this.decimal !== 'never')
            ? this.precision
            : 0;
        var fraction = hasFraction ? getFractionPartPadded(value, this.precision) : '';
        if (this.focused && this.decimal !== 'always') {
            limit = fraction.length;
        }
        return formatNumber(value, limit, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.numberFormat.zeroPadding);
    };
    Object.defineProperty(TuiInputNumberComponent.prototype, "isNativeValueNotFinished", {
        get: function () {
            var nativeNumberValue = this.nativeNumberValue;
            return nativeNumberValue < 0
                ? nativeNumberValue > this.max
                : nativeNumberValue < this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "nativeValue", {
        get: function () {
            return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
        },
        set: function (value) {
            if (!this.primitiveTextfield || !this.nativeFocusableElement) {
                return;
            }
            this.primitiveTextfield.value = value;
            this.nativeFocusableElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputNumberComponent.prototype, "nativeNumberValue", {
        get: function () {
            return tuiMaskedNumberStringToNumber(this.nativeValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
        },
        enumerable: true,
        configurable: true
    });
    TuiInputNumberComponent.prototype.clear = function () {
        this.nativeValue = '';
        this.updateValue(null);
    };
    TuiInputNumberComponent.prototype.absoluteCapInputValue = function (inputValue) {
        var value = tuiMaskedNumberStringToNumber(inputValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
        var capped = value < 0
            ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value)
            : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));
        var ineligibleValue = Number.isNaN(capped) || capped < this.min || capped > this.max;
        return ineligibleValue ? null : capped;
    };
    TuiInputNumberComponent.prototype.setCaretAfterComma = function () {
        if (!this.nativeFocusableElement) {
            return;
        }
        var afterCommaPosition = this.nativeValue.length - this.precision;
        this.nativeFocusableElement.setSelectionRange(afterCommaPosition, afterCommaPosition);
    };
    var TuiInputNumberComponent_1;
    TuiInputNumberComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_NUMBER_FORMAT,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] }
    ]; };
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputNumberComponent.prototype, "primitiveTextfield", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "decimal", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "precision", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "prefix", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputNumberComponent.prototype, "postfix", void 0);
    __decorate([
        ContentChildren(PolymorpheusOutletComponent)
    ], TuiInputNumberComponent.prototype, "polymorpheusValueContent", void 0);
    __decorate([
        HostListener('keydown.0', ['$event'])
    ], TuiInputNumberComponent.prototype, "onZero", null);
    TuiInputNumberComponent = TuiInputNumberComponent_1 = __decorate([
        Component({
            selector: 'tui-input-number',
            template: "<tui-primitive-textfield\n    tuiValueAccessor\n    class=\"t-textfield\"\n    [pseudoHovered]=\"computedHovered\"\n    [pseudoFocused]=\"computedFocused\"\n    [pseudoPressed]=\"computedPressed\"\n    [invalid]=\"computedInvalid\"\n    [tuiTextfieldInputMode]=\"inputMode\"\n    [tuiTextfieldMaxLength]=\"calculatedMaxLength\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n    [textMask]=\"isNegativeAllowed | tuiMapper: mask:decimal:precision:nativeFocusableElement\"\n    [value]=\"computedValue\"\n    [prefix]=\"prefix\"\n    [postfix]=\"postfix\"\n    [focusable]=\"focusable\"\n    (valueChange)=\"onValueChange($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (pressedChange)=\"onPressed($event)\"\n    (keydown)=\"onKeyDown($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n    <div\n        *ngIf=\"polymorpheusValueContent.length\"\n        polymorpheus-outlet\n        class=\"t-value-content\"\n        [content]=\"valueContent\"\n    ></div>\n</tui-primitive-textfield>\n\n<ng-container *ngIf=\"polymorpheusValueContent.changes | async\"></ng-container>\n\n<ng-template #valueContent>\n    <ng-content select=\"[polymorpheus-outlet]\"></ng-content>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputNumberComponent_1; }),
                },
                {
                    provide: AbstractTuiControl,
                    useExisting: forwardRef(function () { return TuiInputNumberComponent_1; }),
                },
            ],
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-textfield{border-radius:inherit;text-align:inherit}.t-value-content{width:100%}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_NUMBER_FORMAT)),
        __param(3, Inject(TUI_IS_IOS))
    ], TuiInputNumberComponent);
    return TuiInputNumberComponent;
}(AbstractTuiNullableControl));

var TuiInputNumberDirective = /** @class */ (function (_super) {
    __extends(TuiInputNumberDirective, _super);
    function TuiInputNumberDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiInputNumberDirective_1 = TuiInputNumberDirective;
    Object.defineProperty(TuiInputNumberDirective.prototype, "value", {
        get: function () {
            return this.host.computedValue;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputNumberDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    TuiInputNumberDirective.prototype.process = function (input) {
        this.input = input;
    };
    TuiInputNumberDirective.prototype.ngDoCheck = function () {
        if (!this.input) {
            return;
        }
        this.input.maxLength = this.host.calculatedMaxLength;
        this.input.inputMode = 'decimal';
    };
    var TuiInputNumberDirective_1;
    TuiInputNumberDirective = TuiInputNumberDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-number',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputNumberDirective_1; }),
                },
            ],
        })
    ], TuiInputNumberDirective);
    return TuiInputNumberDirective;
}(TuiAbstractTextfieldHost));

var TuiInputNumberModule = /** @class */ (function () {
    function TuiInputNumberModule() {
    }
    TuiInputNumberModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TextMaskModule,
                TuiMapperPipeModule,
                TuiPrimitiveTextfieldModule,
                TuiTextfieldControllerModule,
                TuiValueAccessorModule,
                PolymorpheusModule,
            ],
            declarations: [TuiInputNumberComponent, TuiInputNumberDirective],
            exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent],
        })
    ], TuiInputNumberModule);
    return TuiInputNumberModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule };
//# sourceMappingURL=taiga-ui-kit-components-input-number.js.map
