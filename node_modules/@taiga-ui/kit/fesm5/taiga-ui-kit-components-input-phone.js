import { __assign, __extends, __spread, __decorate, __param } from 'tslib';
import { InjectionToken, forwardRef, EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Output, ContentChild, TemplateRef, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiDestroyService, AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, isNativeFocused, getClipboardDataText, setNativeFocused, tuiRequiredSetter, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_MASK_SYMBOLS_REGEXP, formatPhone, TuiTextfieldCleanerDirective, TUI_TEXTFIELD_CLEANER, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiDataListDirective, TUI_TEXTFIELD_HOST, TuiAbstractTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { fromEvent, merge, Observable } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { windowToggle, flatMap, startWith, takeUntil } from 'rxjs/operators';
import { TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import { TextMaskModule } from 'angular2-text-mask';

var TUI_INPUT_PHONE_DEFAULT_OPTIONS = {
    phoneMaskAfterCountryCode: "### ###-##-##",
    allowText: false,
    countryCode: "+7",
};
var TUI_INPUT_PHONE_OPTIONS = new InjectionToken("Default parameters for input phone component", {
    factory: function () { return TUI_INPUT_PHONE_DEFAULT_OPTIONS; },
});
var tuiInputPhoneOptionsProvider = function (options) { return ({
    provide: TUI_INPUT_PHONE_OPTIONS,
    useValue: __assign(__assign({}, TUI_INPUT_PHONE_DEFAULT_OPTIONS), options),
}); };

var SELECTION_STREAM = new InjectionToken("A stream of selection changes");
var INPUT_PHONE_PROVIDERS = [
    TuiDestroyService,
    FIXED_DROPDOWN_CONTROLLER_PROVIDER,
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(function () { return TuiInputPhoneComponent; }),
    },
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(function () { return TuiInputPhoneComponent; }),
    },
    {
        provide: TUI_DATA_LIST_HOST,
        useExisting: forwardRef(function () { return TuiInputPhoneComponent; }),
    },
    {
        provide: SELECTION_STREAM,
        deps: [TuiDestroyService, DOCUMENT],
        useFactory: selectionStreamFactory,
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
function selectionStreamFactory(destroy$, documentRef) {
    return fromEvent(documentRef, "selectionchange").pipe(windowToggle(merge(fromEvent(documentRef, "mouseup"), fromEvent(documentRef, "keydown")), function () { return fromEvent(documentRef, "mousedown"); }), flatMap(function (windowed$) { return windowed$.pipe(startWith(null)); }), takeUntil(destroy$));
}

// @dynamic
var TuiInputPhoneComponent = /** @class */ (function (_super) {
    __extends(TuiInputPhoneComponent, _super);
    function TuiInputPhoneComponent(control, changeDetectorRef, selection$, textfieldCleaner, options) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.textfieldCleaner = textfieldCleaner;
        _this.options = options;
        _this.phoneMaskAfterCountryCode = _this.options.phoneMaskAfterCountryCode;
        _this.allowText = _this.options.allowText;
        _this.search = '';
        _this.searchChange = new EventEmitter();
        _this.textMaskOptions = {
            mask: function (value) {
                return _this.allowText && !_this.value && isText(value) && value !== '+'
                    ? false
                    : __spread(_this.countryCode.split(''), [
                        ' '
                    ], _this.phoneMaskAfterCountryCode
                        .replace(/[^#\- ()]+/g, '')
                        .split('')
                        .map(function (item) { return (item === '#' ? /\d/ : item); }));
            },
            pipe: function (value) {
                if (_this.allowText) {
                    return value;
                }
                return value === '' && _this.focused && !_this.readOnly
                    ? _this.countryCode + " "
                    : value.replace(/-$/, '');
            },
            guide: false,
        };
        _this.countryCode = _this.options.countryCode;
        _this.open = false;
        selection$.subscribe(function () {
            _this.setCaretPosition();
        });
        return _this;
    }
    Object.defineProperty(TuiInputPhoneComponent.prototype, "countryCodeSetter", {
        set: function (countryCode) {
            this.updateValueWithNewCountryCode(countryCode);
            this.countryCode = countryCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return !this.textfield || this.computedDisabled
                ? null
                : this.textfield.nativeFocusableElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "focused", {
        get: function () {
            return (isNativeFocused(this.nativeFocusableElement) ||
                (!!this.dropdown && this.dropdown.focused));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "computedValue", {
        get: function () {
            return this.value
                ? formatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode)
                : this.search || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "inputMode", {
        get: function () {
            return this.allowText ? 'text' : 'numeric';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "canOpen", {
        get: function () {
            return this.interactive && !!this.datalist;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "canClean", {
        get: function () {
            return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputPhoneComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputPhoneComponent.prototype.onDrop = function (event) {
        if (!event.dataTransfer) {
            return;
        }
        this.setValueWithoutPrefix(event.dataTransfer.getData('text'));
        event.preventDefault();
    };
    TuiInputPhoneComponent.prototype.onPaste = function (event) {
        this.setValueWithoutPrefix(getClipboardDataText(event));
    };
    TuiInputPhoneComponent.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
        if (active && !this.computedValue && !this.readOnly && !this.allowText) {
            this.updateSearch(this.countryCode);
            return;
        }
        if (this.computedValue === this.countryCode ||
            (this.search !== null &&
                Number.isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10)))) {
            this.updateSearch('');
        }
    };
    TuiInputPhoneComponent.prototype.onBackspace = function (event) {
        var target = event.target;
        if ((target.selectionStart || 0) <= this.nonRemovableLength &&
            target.selectionStart === target.selectionEnd) {
            event.preventDefault();
        }
    };
    TuiInputPhoneComponent.prototype.onValueChange = function (value) {
        value = value === '' ? this.countryCode : value;
        var parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, '');
        this.updateSearch(parsed);
        this.updateValue(parsed === this.countryCode || isText(parsed) ? '' : parsed);
        this.open = true;
    };
    TuiInputPhoneComponent.prototype.handleOption = function (item) {
        this.focusInput();
        this.updateValue(item);
        this.updateSearch('');
        this.open = false;
    };
    TuiInputPhoneComponent.prototype.setDisabledState = function () {
        _super.prototype.setDisabledState.call(this);
        this.open = false;
    };
    TuiInputPhoneComponent.prototype.writeValue = function (value) {
        _super.prototype.writeValue.call(this, value);
        this.updateSearch('');
    };
    TuiInputPhoneComponent.prototype.getFallbackValue = function () {
        return '';
    };
    Object.defineProperty(TuiInputPhoneComponent.prototype, "caretIsInForbiddenArea", {
        get: function () {
            var nativeFocusableElement = this.nativeFocusableElement;
            if (!nativeFocusableElement) {
                return false;
            }
            var selectionStart = nativeFocusableElement.selectionStart, selectionEnd = nativeFocusableElement.selectionEnd;
            return (isNativeFocused(nativeFocusableElement) &&
                selectionStart !== null &&
                selectionStart < this.nonRemovableLength &&
                selectionStart === selectionEnd);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "nonRemovableLength", {
        get: function () {
            return this.isTextValue ? 0 : this.countryCode.length + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "maxPhoneLength", {
        get: function () {
            return (this.countryCode.length +
                this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputPhoneComponent.prototype, "isTextValue", {
        get: function () {
            return !!this.search && isText(this.search);
        },
        enumerable: true,
        configurable: true
    });
    TuiInputPhoneComponent.prototype.setCaretPosition = function () {
        if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {
            this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);
        }
    };
    TuiInputPhoneComponent.prototype.setValueWithoutPrefix = function (value) {
        if (this.readOnly) {
            return;
        }
        this.open = true;
        this.updateValue(this.cleanValue(value));
        this.updateSearch(this.allowText && isText(value)
            ? value
            : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));
    };
    TuiInputPhoneComponent.prototype.cleanValue = function (value) {
        var reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));
        var oldValueExist = this.value.length > this.countryCode.length &&
            this.value.length < this.maxPhoneLength;
        var newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;
        var cleanNewValue = value.replace(/[^0-9]+/g, '');
        var selectionLength = String(getSelection()).length;
        if (oldValueExist && selectionLength === 0) {
            return ("" + this.value + cleanNewValue).slice(0, this.maxPhoneLength);
        }
        if (newValueLength < this.maxPhoneLength - 1) {
            return ("" + this.countryCode + cleanNewValue).slice(0, this.maxPhoneLength);
        }
        return ("" + this.countryCode + cleanNewValue.replace(reg, '')).slice(0, this.maxPhoneLength);
    };
    TuiInputPhoneComponent.prototype.focusInput = function () {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, true);
        }
    };
    TuiInputPhoneComponent.prototype.updateSearch = function (search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    };
    TuiInputPhoneComponent.prototype.updateValueWithNewCountryCode = function (newCountryCode) {
        if (!this.isTextValue) {
            this.updateValue(this.value.replace(this.countryCode, newCountryCode));
        }
    };
    TuiInputPhoneComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [SELECTION_STREAM,] }] },
        { type: TuiTextfieldCleanerDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_CLEANER,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PHONE_OPTIONS,] }] }
    ]; };
    __decorate([
        ViewChild(TuiHostedDropdownComponent)
    ], TuiInputPhoneComponent.prototype, "dropdown", void 0);
    __decorate([
        ViewChild(TuiPrimitiveTextfieldComponent)
    ], TuiInputPhoneComponent.prototype, "textfield", void 0);
    __decorate([
        Input('countryCode'),
        tuiRequiredSetter()
    ], TuiInputPhoneComponent.prototype, "countryCodeSetter", null);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "phoneMaskAfterCountryCode", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "allowText", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "search", void 0);
    __decorate([
        Output()
    ], TuiInputPhoneComponent.prototype, "searchChange", void 0);
    __decorate([
        ContentChild(TuiDataListDirective, { read: TemplateRef })
    ], TuiInputPhoneComponent.prototype, "datalist", void 0);
    TuiInputPhoneComponent = __decorate([
        Component({
            selector: 'tui-input-phone',
            template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        tuiTextfieldType=\"tel\"\n        class=\"t-textfield\"\n        [tuiTextfieldInputMode]=\"inputMode\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [pseudoFocused]=\"computedFocused\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (drop)=\"onDrop($event)\"\n        (keydown.backspace)=\"onBackspace($event)\"\n        (paste.prevent)=\"onPaste($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: INPUT_PHONE_PROVIDERS,
            styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(SELECTION_STREAM)),
        __param(3, Inject(TUI_TEXTFIELD_CLEANER)),
        __param(4, Inject(TUI_INPUT_PHONE_OPTIONS))
    ], TuiInputPhoneComponent);
    return TuiInputPhoneComponent;
}(AbstractTuiControl));
function isText(value) {
    return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));
}

var TuiInputPhoneDirective = /** @class */ (function (_super) {
    __extends(TuiInputPhoneDirective, _super);
    function TuiInputPhoneDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiInputPhoneDirective_1 = TuiInputPhoneDirective;
    Object.defineProperty(TuiInputPhoneDirective.prototype, "value", {
        get: function () {
            return this.host.computedValue;
        },
        enumerable: true,
        configurable: true
    });
    TuiInputPhoneDirective.prototype.onValueChange = function (value) {
        this.host.onValueChange(value);
    };
    TuiInputPhoneDirective.prototype.process = function (input) {
        this.input = input;
    };
    TuiInputPhoneDirective.prototype.ngDoCheck = function () {
        if (!this.input) {
            return;
        }
        this.input.type = 'tel';
        this.input.inputMode = this.host.inputMode;
    };
    var TuiInputPhoneDirective_1;
    TuiInputPhoneDirective = TuiInputPhoneDirective_1 = __decorate([
        Directive({
            selector: 'tui-input-phone',
            providers: [
                {
                    provide: TUI_TEXTFIELD_HOST,
                    useExisting: forwardRef(function () { return TuiInputPhoneDirective_1; }),
                },
            ],
        })
    ], TuiInputPhoneDirective);
    return TuiInputPhoneDirective;
}(TuiAbstractTextfieldHost));

var TuiInputPhoneModule = /** @class */ (function () {
    function TuiInputPhoneModule() {
    }
    TuiInputPhoneModule = __decorate([
        NgModule({
            imports: [
                TextMaskModule,
                TuiPrimitiveTextfieldModule,
                TuiHostedDropdownModule,
                TuiTextfieldControllerModule,
                TuiActiveZoneModule,
                TuiValueAccessorModule,
            ],
            declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
            exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent],
        })
    ], TuiInputPhoneModule);
    return TuiInputPhoneModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { INPUT_PHONE_PROVIDERS, SELECTION_STREAM, TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, selectionStreamFactory, tuiInputPhoneOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-phone.js.map
