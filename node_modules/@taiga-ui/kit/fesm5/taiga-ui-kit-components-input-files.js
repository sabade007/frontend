import { __extends, __spread, __decorate, __param, __read } from 'tslib';
import { EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, forwardRef, Pipe, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isNativeFocused, EMPTY_ARRAY, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiNullableControl, TuiLetModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPressedModule, TuiHoveredModule, TuiFocusableModule, TuiDroppableModule, TuiItemDirective } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiWrapperModule, TuiSvgModule, TuiLinkModule, TuiLoaderModule, TuiButtonModule, TuiGroupModule } from '@taiga-ui/core';
import { TUI_INPUT_FILE_TEXTS, TUI_DIGITAL_INFORMATION_UNITS } from '@taiga-ui/kit/tokens';
import { getAcceptArray } from '@taiga-ui/kit/utils/files';
import { of, Observable, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiFilesModule, TuiFilesComponent, TuiFileComponent } from '@taiga-ui/kit/components/files';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { tuiFormatSize } from '@taiga-ui/kit/utils';

var DEFAULT_MAX_SIZE = 30 * 1024 * 1024; // 30 MiB
// @dynamic
var TuiInputFilesComponent = /** @class */ (function (_super) {
    __extends(TuiInputFilesComponent, _super);
    function TuiInputFilesComponent(control, changeDetectorRef, isMobile, inputFileTexts$) {
        var _this = _super.call(this, control, changeDetectorRef) || this;
        _this.isMobile = isMobile;
        _this.inputFileTexts$ = inputFileTexts$;
        _this.dataTransfer = null;
        _this.link = '';
        _this.label = '';
        _this.accept = '';
        _this.multiple = false;
        _this.size = 'm';
        _this.maxFileSize = DEFAULT_MAX_SIZE;
        _this.reject = new EventEmitter();
        return _this;
    }
    TuiInputFilesComponent_1 = TuiInputFilesComponent;
    Object.defineProperty(TuiInputFilesComponent.prototype, "nativeFocusableElement", {
        get: function () {
            var _a;
            return ((_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.nativeFocusableElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "computedPseudoHovered", {
        get: function () {
            var _a;
            return (_a = this.pseudoHovered) !== null && _a !== void 0 ? _a : (this.fileDragged || null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "computedLink$", {
        get: function () {
            return this.computeLink$(this.fileDragged, this.multiple, this.link);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "computedLabel$", {
        get: function () {
            return this.computeLabel$(this.isMobile, this.fileDragged, this.multiple, this.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "fileDragged", {
        get: function () {
            var _a;
            return !!((_a = this.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.includes('Files'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiInputFilesComponent.prototype, "arrayValue", {
        get: function () {
            return this.getValueArray(this.value);
        },
        enumerable: true,
        configurable: true
    });
    TuiInputFilesComponent.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    TuiInputFilesComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    TuiInputFilesComponent.prototype.onPressed = function (pressed) {
        this.updatePressed(pressed);
    };
    TuiInputFilesComponent.prototype.onFilesSelected = function (input, formatRejection, maxSizeRejection) {
        this.processSelectedFiles(input.files, { formatRejection: formatRejection, maxSizeRejection: maxSizeRejection });
        input.value = '';
    };
    TuiInputFilesComponent.prototype.onDropped = function (event, formatRejection, maxSizeRejection) {
        this.processSelectedFiles(event.files, { formatRejection: formatRejection, maxSizeRejection: maxSizeRejection });
    };
    TuiInputFilesComponent.prototype.onDragOver = function (dataTransfer) {
        this.dataTransfer = dataTransfer;
    };
    TuiInputFilesComponent.prototype.removeFile = function (removedFile) {
        this.updateValue(this.multiple ? this.arrayValue.filter(function (file) { return file !== removedFile; }) : null);
    };
    TuiInputFilesComponent.prototype.computeLink$ = function (fileDragged, multiple, link) {
        return fileDragged
            ? of('')
            : this.inputFileTexts$.pipe(map(function (texts) {
                return multiple && link === ''
                    ? texts.defaultLinkMultiple
                    : link || texts.defaultLinkSingle;
            }));
    };
    TuiInputFilesComponent.prototype.computeLabel$ = function (isMobile, fileDragged, multiple, label) {
        if (isMobile) {
            return of('');
        }
        if (fileDragged) {
            return this.inputFileTexts$.pipe(map(function (texts) { return (multiple ? texts.dropMultiple : texts.drop); }));
        }
        return this.inputFileTexts$.pipe(map(function (texts) {
            return multiple && label === ''
                ? texts.defaultLabelMultiple
                : label || texts.defaultLabelSingle;
        }));
    };
    TuiInputFilesComponent.prototype.getValueArray = function (value) {
        if (!value) {
            return EMPTY_ARRAY;
        }
        return Array.isArray(value) ? value : [value];
    };
    TuiInputFilesComponent.prototype.processSelectedFiles = function (files, errors) {
        var _this = this;
        // IE11 after selecting a file through the open dialog generates a second event passing an empty FileList.
        if (!(files === null || files === void 0 ? void 0 : files.length)) {
            return;
        }
        var newFiles = this.multiple ? Array.from(files) : [files[0]];
        var tooBigFiles = newFiles.filter(function (file) { return file.size > _this.maxFileSize; });
        var wrongFormatFiles = newFiles.filter(function (file) { return !_this.isFormatAcceptable(file) && !tooBigFiles.includes(file); });
        var acceptedFiles = newFiles.filter(function (file) { return !tooBigFiles.includes(file) && !wrongFormatFiles.includes(file); });
        if (tooBigFiles.length || wrongFormatFiles.length) {
            this.rejectFiles(__spread(tooBigFiles.map(function (file) { return ({
                name: file.name,
                type: file.type,
                size: file.size,
                content: errors.maxSizeRejection,
            }); }), wrongFormatFiles.map(function (file) { return ({
                name: file.name,
                type: file.type,
                size: file.size,
                content: errors.formatRejection,
            }); })));
        }
        this.updateValue(this.multiple
            ? __spread(this.arrayValue, acceptedFiles) : acceptedFiles[0] || null);
    };
    TuiInputFilesComponent.prototype.isFormatAcceptable = function (file) {
        if (!this.accept) {
            return true;
        }
        var extension = "." + (file.name.split('.').pop() || '').toLowerCase();
        return getAcceptArray(this.accept).some(function (format) {
            return format === extension ||
                format === file.type ||
                (format.split('/')[1] === '*' &&
                    file.type.split('/')[0] === format.split('/')[0]);
        });
    };
    TuiInputFilesComponent.prototype.rejectFiles = function (rejectedFiles) {
        this.reject.emit(this.multiple ? rejectedFiles : rejectedFiles[0]);
    };
    var TuiInputFilesComponent_1;
    TuiInputFilesComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] }
    ]; };
    __decorate([
        ViewChild('input')
    ], TuiInputFilesComponent.prototype, "input", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "link", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "accept", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "multiple", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiInputFilesComponent.prototype, "maxFileSize", void 0);
    __decorate([
        Output()
    ], TuiInputFilesComponent.prototype, "reject", void 0);
    __decorate([
        tuiPure
    ], TuiInputFilesComponent.prototype, "computeLink$", null);
    __decorate([
        tuiPure
    ], TuiInputFilesComponent.prototype, "computeLabel$", null);
    __decorate([
        tuiPure
    ], TuiInputFilesComponent.prototype, "getValueArray", null);
    TuiInputFilesComponent = TuiInputFilesComponent_1 = __decorate([
        Component({
            selector: 'tui-input-files',
            template: "<tui-wrapper\n    appearance=\"input-file\"\n    class=\"t-wrapper\"\n    [class._mobile]=\"isMobile\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered || fileDragged\"\n    [pressed]=\"computedPressed\"\n    [disabled]=\"computedDisabled\"\n>\n    <label\n        automation-id=\"tui-input-file__label\"\n        class=\"t-label\"\n    >\n        <a tuiLink>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLink$ | async\"\n            ></span>\n        </a>\n        <ng-container *ngIf=\"computedLabel$ | async as computedLabel\">\n            <span>&nbsp;</span>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLabel\"\n            ></span>\n        </ng-container>\n        <ng-container *ngIf=\"!readOnly && !computedDisabled\">\n            <input\n                #input\n                type=\"file\"\n                class=\"t-native\"\n                [id]=\"id\"\n                [accept]=\"accept\"\n                [multiple]=\"multiple\"\n                [tuiFocusable]=\"focusable\"\n                (change)=\"onFilesSelected(input, formatRejection, maxSizeRejection)\"\n                (tuiHoveredChange)=\"onHovered($event)\"\n                (tuiFocusedChange)=\"onFocused($event)\"\n                (tuiPressedChange)=\"onPressed($event)\"\n                (tuiDroppableDropped)=\"onDropped($event, formatRejection, maxSizeRejection)\"\n                (tuiDroppableDragOverChange)=\"onDragOver($event)\"\n                (mousedown.prevent.silent)=\"(0)\"\n            />\n        </ng-container>\n    </label>\n</tui-wrapper>\n\n<ng-template #formatRejection>\n    {{ (inputFileTexts$ | async)?.formatRejectionReason || '' }}\n</ng-template>\n\n<ng-template #maxSizeRejection>\n    {{ maxFileSize | tuiMaxSizeRejectionError | async }}\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            providers: [
                MODE_PROVIDER,
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiInputFilesComponent_1; }),
                },
            ],
            styles: ["tui-input-files{display:block}tui-input-files .t-native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}tui-input-files .t-native::-webkit-file-upload-button{display:none}tui-input-files .t-inline{display:inline}tui-input-files .t-label{text-align:center}tui-wrapper[data-appearance=input-file]{display:flex;background:0 0;font:var(--tui-font-text-m);word-wrap:break-word;color:var(--tui-text-02);flex:1;justify-content:center;align-items:center;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);padding:1rem .5rem;box-sizing:border-box}tui-wrapper[data-appearance=input-file]:after{border:1px dashed;color:var(--tui-link)}tui-wrapper[data-appearance=input-file]._mobile:after{border:1px solid}tui-wrapper[data-appearance=input-file][data-state=hovered]{background:var(--tui-secondary)}tui-wrapper[data-appearance=input-file][data-state=hovered]:after{color:var(--tui-link-hover)}tui-wrapper[data-appearance=input-file][data-state=pressed]{background:var(--tui-secondary-hover)}tui-wrapper[data-appearance=input-file][data-state=disabled]{opacity:var(--tui-disabled-opacity);pointer-events:none}tui-wrapper[data-appearance=input-file][data-state=disabled]:after{color:var(--tui-text-03)}tui-wrapper[data-appearance=input-file]._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}tui-wrapper[data-appearance=input-file][data-mode=onDark],tui-wrapper[data-appearance=input-file][data-mode=onDark]._focused:after,tui-wrapper[data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=hovered]{background:var(--tui-clear-inverse-hover)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=hovered]:after,tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=pressed]:after{color:var(--tui-text-03-night)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=pressed]{background:var(--tui-clear-inverse-active)}tui-wrapper[data-appearance=input-file][data-mode=onLight],tui-wrapper[data-appearance=input-file][data-mode=onLight]:after{color:var(--tui-text-01)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=hovered]{background:var(--tui-clear-hover)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=hovered]:after,tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=pressed]:after{color:var(--tui-text-03)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=pressed]{background:var(--tui-clear-active)}"]
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __param(0, Inject(NgControl)),
        __param(1, Inject(ChangeDetectorRef)),
        __param(2, Inject(TUI_IS_MOBILE)),
        __param(3, Inject(TUI_INPUT_FILE_TEXTS))
    ], TuiInputFilesComponent);
    return TuiInputFilesComponent;
}(AbstractTuiNullableControl));

var TuiMaxSizeRejectionErrorPipe = /** @class */ (function () {
    function TuiMaxSizeRejectionErrorPipe(inputFileTexts$, units$) {
        this.inputFileTexts$ = inputFileTexts$;
        this.units$ = units$;
    }
    TuiMaxSizeRejectionErrorPipe.prototype.transform = function (maxFileSize) {
        return combineLatest([this.inputFileTexts$, this.units$]).pipe(map(function (_a) {
            var _b = __read(_a, 2), maxSizeRejectionReason = _b[0].maxSizeRejectionReason, units = _b[1];
            return maxSizeRejectionReason + tuiFormatSize(units, maxFileSize);
        }));
    };
    TuiMaxSizeRejectionErrorPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DIGITAL_INFORMATION_UNITS,] }] }
    ]; };
    TuiMaxSizeRejectionErrorPipe = __decorate([
        Pipe({ name: "tuiMaxSizeRejectionError" }),
        __param(0, Inject(TUI_INPUT_FILE_TEXTS)),
        __param(1, Inject(TUI_DIGITAL_INFORMATION_UNITS))
    ], TuiMaxSizeRejectionErrorPipe);
    return TuiMaxSizeRejectionErrorPipe;
}());

var TuiInputFilesModule = /** @class */ (function () {
    function TuiInputFilesModule() {
    }
    TuiInputFilesModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                PolymorpheusModule,
                TuiLetModule,
                TuiFocusedModule,
                TuiFocusVisibleModule,
                TuiPressedModule,
                TuiHoveredModule,
                TuiFocusableModule,
                TuiDroppableModule,
                TuiWrapperModule,
                TuiSvgModule,
                TuiLinkModule,
                TuiLoaderModule,
                TuiButtonModule,
                TuiGroupModule,
                TuiFilesModule,
            ],
            declarations: [TuiInputFilesComponent, TuiMaxSizeRejectionErrorPipe],
            exports: [
                TuiInputFilesComponent,
                TuiFilesComponent,
                TuiFileComponent,
                TuiItemDirective,
            ],
        })
    ], TuiInputFilesModule);
    return TuiInputFilesModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputFilesComponent, TuiInputFilesModule, TuiMaxSizeRejectionErrorPipe as ɵa };
//# sourceMappingURL=taiga-ui-kit-components-input-files.js.map
