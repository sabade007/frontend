{"version":3,"file":"taiga-ui-kit-components-slider.js","sources":["ng://@taiga-ui/kit/components/slider/slider-options.ts","ng://@taiga-ui/kit/components/slider/slider.component.ts","ng://@taiga-ui/kit/components/slider/helpers/slider-key-steps.directive.ts","ng://@taiga-ui/kit/components/slider/helpers/slider-readonly.directive.ts","ng://@taiga-ui/kit/components/slider/helpers/slider-thumb-label/slider-thumb-label.component.ts","ng://@taiga-ui/kit/components/slider/slider-old.component.ts","ng://@taiga-ui/kit/components/slider/slider.module.ts","ng://@taiga-ui/kit/components/slider/taiga-ui-kit-components-slider.ts"],"sourcesContent":["import {InjectionToken, ValueProvider} from '@angular/core';\nimport {TuiSizeS} from '@taiga-ui/core';\n\nexport interface TuiSliderOptions {\n    readonly size: TuiSizeS;\n    readonly trackColor: string;\n}\n\nexport const TUI_SLIDER_DEFAULT_OPTIONS: TuiSliderOptions = {\n    size: `m`,\n    trackColor: `var(--tui-base-03)`,\n};\n\nexport const TUI_SLIDER_OPTIONS = new InjectionToken<TuiSliderOptions>(\n    `Default parameters for Slider component`,\n    {factory: () => TUI_SLIDER_DEFAULT_OPTIONS},\n);\n\nexport function tuiSliderOptionsProvider(\n    options: Partial<TuiSliderOptions>,\n): ValueProvider {\n    return {\n        provide: TUI_SLIDER_OPTIONS,\n        useValue: {...TUI_SLIDER_DEFAULT_OPTIONS, ...options},\n    };\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Injector,\n    Input,\n    Optional,\n    Self,\n} from '@angular/core';\nimport {NgControl, NgModel} from '@angular/forms';\nimport {USER_AGENT} from '@ng-web-apis/common';\nimport {\n    CHROMIUM_EDGE_START_VERSION,\n    isEdgeOlderThan,\n    tuiDefaultProp,\n    tuiPure,\n    watch,\n} from '@taiga-ui/cdk';\nimport {TuiSizeS} from '@taiga-ui/core';\nimport {take} from 'rxjs/operators';\n\nimport {TuiSliderKeyStepsDirective} from './helpers/slider-key-steps.directive';\nimport {TUI_SLIDER_OPTIONS, TuiSliderOptions} from './slider-options';\n\n@Component({\n    /**\n     * We have to call our component as `<input tuiSlider type=\"range\" ... />`\n     * because otherwise built-in angular\n     * {@link https://github.com/angular/angular/blob/master/packages/forms/src/directives/range_value_accessor.ts#L45 RangeValueAccessor}\n     * cannot be matched by its CSS selector.\n     */\n    selector: 'input[type=range][tuiSlider]',\n    template: '',\n    styleUrls: ['./slider.style.less'],\n    host: {\n        /**\n         * For change detection.\n         * Webkit does not have built-in method for customization of filling progress (as Firefox).\n         * We draw filling of progress by `background: linear-gradient(...)` of the track.\n         * This function triggers change detection (for {@link valuePercentage} function) when we drag thumb of the input.\n         */\n        '(input)': '0',\n        '[style.--tui-slider-track-color]': 'options.trackColor',\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TuiSliderComponent {\n    @Input()\n    @HostBinding('attr.data-size')\n    @tuiDefaultProp()\n    size: TuiSizeS = this.options.size;\n\n    @Input()\n    @tuiDefaultProp()\n    segments = 1;\n\n    get min(): number {\n        return Number(this.elementRef.nativeElement.min);\n    }\n\n    get max(): number {\n        return Number(this.elementRef.nativeElement.max || 100);\n    }\n\n    get step(): number {\n        return Number(this.elementRef.nativeElement.step) || 1;\n    }\n\n    get value(): number {\n        const {elementRef, control, hasKeySteps} = this;\n\n        if (!hasKeySteps && control instanceof NgModel) {\n            /**\n             * If developer uses `[(ngModel)]` and programmatically change value,\n             * the `elementRef.nativeElement.value` is equal to the previous value at this moment.\n             */\n            return control.viewModel;\n        }\n\n        return Number(elementRef.nativeElement.value) || 0;\n    }\n\n    set value(newValue: number) {\n        this.elementRef.nativeElement.value = `${newValue}`;\n    }\n\n    @HostBinding('style.--tui-slider-fill-percentage.%')\n    get valuePercentage(): number {\n        return (100 * (this.value - this.min)) / (this.max - this.min) || 0;\n    }\n\n    @HostBinding('style.--tui-slider-segment-width.%')\n    get segmentWidth(): number {\n        return 100 / Math.max(1, this.segments);\n    }\n\n    @HostBinding('class._old-edge')\n    get isOldEdge(): boolean {\n        return isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);\n    }\n\n    @tuiPure\n    get hasKeySteps(): boolean {\n        return Boolean(this.injector.get(TuiSliderKeyStepsDirective, null));\n    }\n\n    constructor(\n        @Optional()\n        @Self()\n        @Inject(NgControl)\n        private readonly control: NgControl | null,\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(TUI_SLIDER_OPTIONS) readonly options: TuiSliderOptions,\n        @Inject(ElementRef) readonly elementRef: ElementRef<HTMLInputElement>,\n        @Inject(USER_AGENT) private readonly userAgent: string,\n        @Inject(Injector) private readonly injector: Injector,\n    ) {\n        if (control instanceof NgModel) {\n            /**\n             * The ValueAccessor.writeValue method is called twice on any value accessor during component initialization,\n             * when a control is bound using [(ngModel)], first time with a phantom null value.\n             * With `changeDetection: ChangeDetectionStrategy.OnPush` the second call of writeValue with real value don't re-render the view.\n             * ___\n             * See this {@link https://github.com/angular/angular/issues/14988 issue}\n             */\n            control.valueChanges?.pipe(watch(changeDetectorRef), take(1)).subscribe();\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    Pipe,\n    PipeTransform,\n    Self,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {\n    AbstractTuiControl,\n    clamp,\n    isNativeFocused,\n    tuiAssert,\n    tuiDefaultProp,\n    TuiFocusableElementAccessor,\n    typedFromEvent,\n} from '@taiga-ui/cdk';\nimport {TuiKeySteps} from '@taiga-ui/kit/types';\nimport {\n    tuiCheckKeyStepsHaveMinMaxPercents,\n    tuiKeyStepValueToPercentage,\n    tuiPercentageToKeyStepValue,\n} from '@taiga-ui/kit/utils';\nimport {map} from 'rxjs/operators';\n\nimport {TuiSliderComponent} from '../slider.component';\n\n// @dynamic\n@Directive({\n    selector: 'input[tuiSlider][keySteps]',\n    host: {\n        '[attr.aria-valuenow]': 'safeCurrentValue',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuemax]': 'max',\n    },\n})\nexport class TuiSliderKeyStepsDirective\n    extends AbstractTuiControl<number>\n    implements TuiFocusableElementAccessor\n{\n    @Input()\n    @tuiDefaultProp(\n        tuiCheckKeyStepsHaveMinMaxPercents,\n        'Should contain min and max values',\n    )\n    keySteps: TuiKeySteps = [];\n\n    @Output()\n    keyStepsInput = typedFromEvent(this.elementRef.nativeElement, 'input').pipe(\n        map(() => this.controlValue),\n    );\n\n    get nativeFocusableElement(): HTMLInputElement | null {\n        return this.computedDisabled ? null : this.elementRef.nativeElement;\n    }\n\n    get focused(): boolean {\n        return isNativeFocused(this.nativeFocusableElement);\n    }\n\n    get min(): number {\n        return this.keySteps[0]?.[1] || 0;\n    }\n\n    get max(): number {\n        return this.keySteps[this.keySteps.length - 1]?.[1] || 100;\n    }\n\n    get controlValue(): number {\n        return tuiPercentageToKeyStepValue(this.slider.valuePercentage, this.keySteps);\n    }\n\n    constructor(\n        @Optional()\n        @Self()\n        @Inject(NgControl)\n        control: NgControl | null,\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(ElementRef) private readonly elementRef: ElementRef<HTMLInputElement>,\n        @Inject(forwardRef(() => TuiSliderComponent))\n        private readonly slider: TuiSliderComponent,\n    ) {\n        super(control, changeDetectorRef);\n    }\n\n    /**\n     * TODO: 3.0\n     * ___\n     * Also add @HostListener(`input`): to be similar to\n     * {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/range_value_accessor.ts#L47-L48 RangeValueAccessor}\n     * ___\n     * Remove {@link keyStepsInput}\n     */\n    @HostListener('change')\n    updateControlValue(): void {\n        this.updateValue(this.controlValue);\n    }\n\n    writeValue(controlValue: number | null): void {\n        if (controlValue === null) {\n            return;\n        }\n\n        const clampedControlValue = clamp(controlValue, this.min, this.max);\n\n        tuiAssert.assert(\n            controlValue === clampedControlValue,\n            '\\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max',\n        );\n\n        this.slider.value = this.transformToNativeValue(clampedControlValue);\n    }\n\n    protected getFallbackValue(): number {\n        return 0;\n    }\n\n    private transformToNativeValue(controlValue: number): number {\n        const {min, max} = this.slider;\n        const newValuePercentage = tuiKeyStepValueToPercentage(\n            controlValue,\n            this.keySteps,\n        );\n\n        return (newValuePercentage * (max - min)) / 100 + min;\n    }\n}\n\n/**\n * @deprecated DONT USE IT! It is just temporary solution for internal purposes only. We will delete it in next major release.\n * TODO delete it in v3.0\n *\n */\n@Pipe({name: 'tuiSliderTickLabel'})\nexport class TuiSliderTickLabelPipe implements PipeTransform {\n    transform(tickIndex: number, totalSegments: number, keySteps: TuiKeySteps): number {\n        const percentage = (100 / totalSegments) * tickIndex;\n\n        return tuiPercentageToKeyStepValue(percentage, keySteps);\n    }\n}\n","import {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, HostListener, Inject, Input} from '@angular/core';\nimport {\n    tuiCoerceBooleanProperty,\n    tuiDefaultProp,\n    TuiDestroyService,\n    typedFromEvent,\n} from '@taiga-ui/cdk';\nimport {combineLatest, merge, Observable} from 'rxjs';\nimport {filter, mapTo, takeUntil, tap} from 'rxjs/operators';\n\nconst SLIDER_INTERACTION_KEYS = new Set([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown',\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n]);\n\n/**\n * Native <input type='range' readonly> doesn't work.\n * This directive imitates this native behaviour.\n */\n// @dynamic\n@Directive({\n    selector: 'input[tuiSlider][readonly]',\n    providers: [TuiDestroyService],\n})\nexport class TuiSliderReadonlyDirective {\n    @Input()\n    @tuiDefaultProp()\n    readonly: boolean | string = true;\n\n    constructor(\n        @Inject(ElementRef) elementRef: ElementRef<HTMLInputElement>,\n        @Inject(DOCUMENT) documentRef: Document,\n        @Inject(TuiDestroyService)\n        destroy$: Observable<unknown>,\n    ) {\n        const touchStart$ = typedFromEvent(elementRef.nativeElement, 'touchstart', {\n            passive: false,\n        });\n        const touchMove$ = typedFromEvent(documentRef, 'touchmove', {\n            passive: false,\n        });\n        const touchEnd$ = typedFromEvent(documentRef, 'touchend', {\n            passive: true,\n        });\n\n        const shouldPreventMove$ = merge(\n            touchStart$.pipe(\n                tap(e => this.preventEvent(e)),\n                mapTo(true),\n            ),\n            touchEnd$.pipe(mapTo(false)),\n        );\n\n        /**\n         * @bad TODO think about another solution.\n         * Keep in mind that preventing touch event (on slider) inside `@HostListener('touchstart')` doesn't work for mobile chrome.\n         */\n        combineLatest([touchMove$, shouldPreventMove$])\n            .pipe(\n                filter(([_, shouldPreventMove]) => shouldPreventMove),\n                takeUntil(destroy$),\n            )\n            .subscribe(([moveEvent]) => this.preventEvent(moveEvent));\n    }\n\n    @HostListener('mousedown', ['$event'])\n    preventEvent(event: Event): void {\n        if (event.cancelable && tuiCoerceBooleanProperty(this.readonly)) {\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    preventKeyboardInteraction(event: KeyboardEvent): void {\n        if (SLIDER_INTERACTION_KEYS.has(event.key)) {\n            this.preventEvent(event);\n        }\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {tuiAssert} from '@taiga-ui/cdk';\nimport {TuiSizeS} from '@taiga-ui/core';\n\nimport {TuiSliderComponent} from '../../slider.component';\n\n@Component({\n    selector: '[tuiSliderThumbLabel]',\n    templateUrl: './slider-thumb-label.template.html',\n    styleUrls: ['./slider-thumb-label.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TuiSliderThumbLabelComponent implements AfterContentInit {\n    @ContentChild(TuiSliderComponent)\n    readonly slider?: TuiSliderComponent;\n\n    @ContentChild(NgControl)\n    readonly control?: NgControl;\n\n    get size(): TuiSizeS {\n        return this.slider?.size || 'm';\n    }\n\n    get ratio(): number {\n        return (this.slider?.valuePercentage || 0) / 100;\n    }\n\n    get ghostLeft(): number {\n        return this.ratio * (this.slider?.elementRef.nativeElement.offsetWidth || 0);\n    }\n\n    ngAfterContentInit(): void {\n        tuiAssert.assert(\n            Boolean(this.control?.valueChanges),\n            '\\n[tuiSliderThumbLabel] expected <input tuiSlider type=\"range\" /> to use Angular Forms.\\n' +\n                'Use [(ngModel)] or [formControl] or formControlName for correct work.',\n        );\n    }\n}\n","import {DOCUMENT} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    forwardRef,\n    Inject,\n    Optional,\n    Self,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {\n    isNativeFocused,\n    TUI_FOCUSABLE_ITEM_ACCESSOR,\n    TuiFocusableElementAccessor,\n    TuiNativeFocusableElement,\n} from '@taiga-ui/cdk';\nimport {AbstractTuiSlider} from '@taiga-ui/kit/abstract';\nimport {TUI_FROM_TO_TEXTS} from '@taiga-ui/kit/tokens';\nimport {Observable} from 'rxjs';\n\n/**\n * @deprecated use {@link TuiSliderComponent} instead\n * TODO: 3.0 remove\n */\n// @dynamic\n@Component({\n    selector: 'tui-slider',\n    templateUrl: '../../abstract/slider/slider.common.template.html',\n    styleUrls: [\n        '../../abstract/slider/slider.common.style.less',\n        './slider-old.style.less',\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n            useExisting: forwardRef(() => TuiSliderOldComponent),\n        },\n    ],\n})\nexport class TuiSliderOldComponent\n    extends AbstractTuiSlider<number>\n    implements TuiFocusableElementAccessor\n{\n    constructor(\n        @Optional()\n        @Self()\n        @Inject(NgControl)\n        control: NgControl | null,\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(DOCUMENT) documentRef: Document,\n        @Inject(TUI_FROM_TO_TEXTS) fromToTexts$: Observable<[string, string]>,\n    ) {\n        super(control, changeDetectorRef, documentRef, fromToTexts$);\n    }\n\n    get nativeFocusableElement(): TuiNativeFocusableElement | null {\n        return this.dotRight ? this.dotRight.nativeElement : null;\n    }\n\n    get focused(): boolean {\n        return isNativeFocused(this.nativeFocusableElement);\n    }\n\n    get left(): number {\n        return 0;\n    }\n\n    get right(): number {\n        return 100 - 100 * this.getFractionFromValue(this.value);\n    }\n\n    processValue(value: number): void {\n        this.updateValue(this.valueGuard(value));\n    }\n\n    decrement(): void {\n        this.processStep(false);\n    }\n\n    increment(): void {\n        this.processStep(true);\n    }\n\n    protected getFallbackValue(): number {\n        return 0;\n    }\n\n    protected processStep(increment: boolean): void {\n        const fraction = this.getFractionFromValue(this.value);\n        const step = this.computedStep;\n        const value = this.getValueFromFraction(\n            increment ? fraction + step : fraction - step,\n        );\n\n        this.processValue(value);\n    }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n    TuiActiveZoneModule,\n    TuiFocusableModule,\n    TuiFocusVisibleModule,\n    TuiRepeatTimesModule,\n} from '@taiga-ui/cdk';\nimport {TuiFormatNumberPipeModule} from '@taiga-ui/core';\n\nimport {\n    TuiSliderKeyStepsDirective,\n    TuiSliderTickLabelPipe,\n} from './helpers/slider-key-steps.directive';\nimport {TuiSliderReadonlyDirective} from './helpers/slider-readonly.directive';\nimport {TuiSliderThumbLabelComponent} from './helpers/slider-thumb-label/slider-thumb-label.component';\nimport {TuiSliderComponent} from './slider.component';\nimport {TuiSliderOldComponent} from './slider-old.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TuiRepeatTimesModule,\n        TuiFocusableModule,\n        TuiFocusVisibleModule,\n        TuiActiveZoneModule,\n        TuiFormatNumberPipeModule,\n    ],\n    declarations: [\n        TuiSliderComponent,\n        TuiSliderThumbLabelComponent,\n        TuiSliderKeyStepsDirective,\n        TuiSliderReadonlyDirective,\n        TuiSliderTickLabelPipe,\n        TuiSliderOldComponent,\n    ],\n    exports: [\n        TuiSliderComponent,\n        TuiSliderThumbLabelComponent,\n        TuiSliderKeyStepsDirective,\n        TuiSliderReadonlyDirective,\n        TuiSliderTickLabelPipe,\n        TuiSliderOldComponent,\n    ],\n})\nexport class TuiSliderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}