(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/core'), require('@taiga-ui/kit/tokens'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/providers', ['exports', '@taiga-ui/core', '@taiga-ui/kit/tokens', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].kit = global['taiga-ui'].kit || {}, global['taiga-ui'].kit.providers = {}), global.core, global['taiga-ui'].kit.tokens, global.rxjs, global.rxjs.operators, global.ng.core, global.ng.forms));
}(this, (function (exports, core, tokens, rxjs, operators, core$1, forms) { 'use strict';

    var TUI_MONTH_FORMATTER_PROVIDER = {
        provide: tokens.TUI_MONTH_FORMATTER,
        deps: [core.TuiMonthPipe],
        useFactory: monthFormatterFactory,
    };
    /**
     * Range.setStart/set-end, except it uses offset in characters only
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function monthFormatterFactory(pipe) {
        return function (month) {
            return month
                ? pipe
                    .transform(month)
                    .pipe(operators.map(function (formatted) { return formatted + " " + month.formattedYear; }))
                : rxjs.of("");
        };
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    function fixedDropdownControllerFactory(directive) {
        directive = directive || new core.TuiDropdownControllerDirective();
        directive.limitWidth = "fixed";
        return directive;
    }
    var FIXED_DROPDOWN_CONTROLLER_PROVIDER = [
        {
            provide: core.TUI_DROPDOWN_CONTROLLER,
            deps: [[new core$1.Optional(), core.TuiDropdownControllerDirective]],
            useFactory: fixedDropdownControllerFactory,
        },
    ];
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function leftAlignedDropdownControllerFactory(directive) {
        directive = directive || new core.TuiDropdownControllerDirective();
        directive.align = "left";
        return directive;
    }
    var LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER = [
        {
            provide: core.TUI_DROPDOWN_CONTROLLER,
            deps: [[new core$1.Optional(), core.TuiDropdownControllerDirective]],
            useFactory: leftAlignedDropdownControllerFactory,
        },
    ];

    // TODO: 3.0 remove in ivy compilation
    var IDENTITY = rxjs.identity;
    var TUI_VALUE_ACCESSOR_PROVIDER = {
        provide: core.TUI_VALUE_ACCESSOR,
        deps: [[new core$1.Optional(), new core$1.Self(), forms.NG_VALUE_ACCESSOR]],
        useFactory: IDENTITY,
    };

    exports.FIXED_DROPDOWN_CONTROLLER_PROVIDER = FIXED_DROPDOWN_CONTROLLER_PROVIDER;
    exports.IDENTITY = IDENTITY;
    exports.LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER = LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER;
    exports.TUI_MONTH_FORMATTER_PROVIDER = TUI_MONTH_FORMATTER_PROVIDER;
    exports.TUI_VALUE_ACCESSOR_PROVIDER = TUI_VALUE_ACCESSOR_PROVIDER;
    exports.fixedDropdownControllerFactory = fixedDropdownControllerFactory;
    exports.leftAlignedDropdownControllerFactory = leftAlignedDropdownControllerFactory;
    exports.monthFormatterFactory = monthFormatterFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-kit-providers.umd.js.map
