{"version":3,"file":"taiga-ui-kit-utils-files.umd.js","sources":["ng://@taiga-ui/kit/utils/files/format-size.ts","ng://@taiga-ui/kit/utils/files/get-accept-array.ts"],"sourcesContent":["import {round} from '@taiga-ui/cdk';\n\nconst BYTES_PER_KIB = 1024;\nconst BYTES_PER_MIB = 1024 * BYTES_PER_KIB;\n\n/**\n * @deprecated: use {@link tuiFormatSize} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function formatSize(\n    units: [string, string, string],\n    size?: number,\n): string | null {\n    if (size === undefined) {\n        return null;\n    }\n\n    if (size < BYTES_PER_KIB) {\n        return `${size} ${units[0]}`;\n    }\n\n    if (size < BYTES_PER_MIB) {\n        return `${(size / BYTES_PER_KIB).toFixed(0)} ${units[1]}`;\n    }\n\n    return `${round(size / BYTES_PER_MIB, 2).toLocaleString(`ru-RU`)} ${units[2]}`;\n}\n\nexport const tuiFormatSize = formatSize;\n","/**\n * @deprecated: use {@link tuiGetAcceptArray} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getAcceptArray(accept: string): readonly string[] {\n    return accept\n        .toLowerCase()\n        .split(`,`)\n        .map(format => format.trim());\n}\n\nexport const tuiGetAcceptArray = getAcceptArray;\n"],"names":["round"],"mappings":";;;;;;IAEA,IAAM,aAAa,GAAG,IAAI,CAAC;IAC3B,IAAM,aAAa,GAAG,IAAI,GAAG,aAAa,CAAC;IAE3C;;;IAGA;aACgB,UAAU,CACtB,KAA+B,EAC/B,IAAa;QAEb,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,IAAI,GAAG,aAAa,EAAE;YACtB,OAAU,IAAI,SAAI,KAAK,CAAC,CAAC,CAAG,CAAC;SAChC;QAED,IAAI,IAAI,GAAG,aAAa,EAAE;YACtB,OAAU,CAAC,IAAI,GAAG,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,SAAI,KAAK,CAAC,CAAC,CAAG,CAAC;SAC7D;QAED,OAAUA,SAAK,CAAC,IAAI,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,SAAI,KAAK,CAAC,CAAC,CAAG,CAAC;IACnF,CAAC;QAEY,aAAa,GAAG;;IC5B7B;;;IAGA;aACgB,cAAc,CAAC,MAAc;QACzC,OAAO,MAAM;aACR,WAAW,EAAE;aACb,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;IACtC,CAAC;QAEY,iBAAiB,GAAG;;;;;;;;;;;;;;;"}