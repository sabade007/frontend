(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/utils/files', ['exports', '@taiga-ui/cdk'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].kit = global['taiga-ui'].kit || {}, global['taiga-ui'].kit.utils = global['taiga-ui'].kit.utils || {}, global['taiga-ui'].kit.utils.files = {}), global.cdk));
}(this, (function (exports, cdk) { 'use strict';

    var BYTES_PER_KIB = 1024;
    var BYTES_PER_MIB = 1024 * BYTES_PER_KIB;
    /**
     * @deprecated: use {@link tuiFormatSize} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function formatSize(units, size) {
        if (size === undefined) {
            return null;
        }
        if (size < BYTES_PER_KIB) {
            return size + " " + units[0];
        }
        if (size < BYTES_PER_MIB) {
            return (size / BYTES_PER_KIB).toFixed(0) + " " + units[1];
        }
        return cdk.round(size / BYTES_PER_MIB, 2).toLocaleString("ru-RU") + " " + units[2];
    }
    var tuiFormatSize = formatSize;

    /**
     * @deprecated: use {@link tuiGetAcceptArray} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function getAcceptArray(accept) {
        return accept
            .toLowerCase()
            .split(",")
            .map(function (format) { return format.trim(); });
    }
    var tuiGetAcceptArray = getAcceptArray;

    exports.formatSize = formatSize;
    exports.getAcceptArray = getAcceptArray;
    exports.tuiFormatSize = tuiFormatSize;
    exports.tuiGetAcceptArray = tuiGetAcceptArray;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-kit-utils-files.umd.js.map
