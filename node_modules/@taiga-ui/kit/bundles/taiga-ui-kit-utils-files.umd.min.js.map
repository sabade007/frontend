{"version":3,"sources":["ng://@taiga-ui/kit/utils/files/format-size.ts","ng://@taiga-ui/kit/utils/files/get-accept-array.ts"],"names":["formatSize","units","size","undefined","toFixed","round","toLocaleString","tuiFormatSize","getAcceptArray","accept","toLowerCase","split","map","format","trim","tuiGetAcceptArray"],"mappings":"6aASgBA,EACZC,EACAC,GAEA,YAAaC,IAATD,EACO,KAGPA,EAfc,KAgBJA,EAAI,IAAID,EAAM,GAGxBC,EAlBc,SAmBHA,EApBG,MAoBmBE,QAAQ,GAAE,IAAIH,EAAM,GAG/CI,EAAAA,MAAMH,EAtBE,QAsBoB,GAAGI,eAAe,SAAQ,IAAIL,EAAM,OAGjEM,EAAgBP,WCxBbQ,EAAeC,GAC3B,OAAOA,EACFC,cACAC,MAAM,KACNC,KAAI,SAAAC,GAAU,OAAAA,EAAOC,cAGjBC,EAAoBP","sourcesContent":["import {round} from '@taiga-ui/cdk';\n\nconst BYTES_PER_KIB = 1024;\nconst BYTES_PER_MIB = 1024 * BYTES_PER_KIB;\n\n/**\n * @deprecated: use {@link tuiFormatSize} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function formatSize(\n    units: [string, string, string],\n    size?: number,\n): string | null {\n    if (size === undefined) {\n        return null;\n    }\n\n    if (size < BYTES_PER_KIB) {\n        return `${size} ${units[0]}`;\n    }\n\n    if (size < BYTES_PER_MIB) {\n        return `${(size / BYTES_PER_KIB).toFixed(0)} ${units[1]}`;\n    }\n\n    return `${round(size / BYTES_PER_MIB, 2).toLocaleString(`ru-RU`)} ${units[2]}`;\n}\n\nexport const tuiFormatSize = formatSize;\n","/**\n * @deprecated: use {@link tuiGetAcceptArray} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getAcceptArray(accept: string): readonly string[] {\n    return accept\n        .toLowerCase()\n        .split(`,`)\n        .map(format => format.trim());\n}\n\nexport const tuiGetAcceptArray = getAcceptArray;\n"]}