!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators"),require("@taiga-ui/cdk"),require("@tinkoff/ng-polymorpheus"),require("@angular/common"),require("@taiga-ui/core")):"function"==typeof define&&define.amd?define("@taiga-ui/kit/components/tree",["exports","@angular/core","rxjs","rxjs/operators","@taiga-ui/cdk","@tinkoff/ng-polymorpheus","@angular/common","@taiga-ui/core"],t):t(((e=e||self)["taiga-ui"]=e["taiga-ui"]||{},e["taiga-ui"].kit=e["taiga-ui"].kit||{},e["taiga-ui"].kit.components=e["taiga-ui"].kit.components||{},e["taiga-ui"].kit.components.tree={}),e.ng.core,e.rxjs,e.rxjs.operators,e.cdk,e.ngPolymorpheus,e.ng.common,e.core$1)}(this,(function(e,t,n,r,o,i,a,c){"use strict";function u(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function l(e,t){return function(n,r){t(n,r,e)}}Object.create;Object.create;var s=function(){function e(){this.childrenHandler=n.defaultHandler}var n;return n=e,e.defaultHandler=function(e){return Array.isArray(e)?e:o.EMPTY_ARRAY},u([t.Input(),o.tuiDefaultProp()],e.prototype,"childrenHandler",void 0),e=n=u([t.Directive({selector:"tui-tree[childrenHandler]"})],e)}(),p=function(){function e(e,t){this.context=e,this.controller=t}return Object.defineProperty(e.prototype,"isExpanded",{get:function(){return this.context.$implicit.isExpanded},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isExpandable",{get:function(){return this.context.$implicit.isExpandable&&this.controller!==f},enumerable:!0,configurable:!0}),e.prototype.onClick=function(){this.controller.toggle(this.context.$implicit)},e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[i.POLYMORPHEUS_CONTEXT]}]},{type:void 0,decorators:[{type:t.Inject,args:[t.forwardRef((function(){return g}))]}]}]},u([t.HostBinding("class._expandable")],e.prototype,"isExpandable",null),e=u([t.Component({selector:"tui-tree-item-content",template:'<button\n    *ngIf="isExpandable"\n    tuiIconButton\n    size="xs"\n    appearance="flat"\n    icon="tuiIconChevronRight"\n    shape="rounded"\n    class="t-button"\n    [class.t-button_expanded]="isExpanded"\n    (click)="onClick()"\n></button>\n<ng-container [ngTemplateOutlet]="context.template"></ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}"]}),l(0,t.Inject(i.POLYMORPHEUS_CONTEXT)),l(1,t.Inject(t.forwardRef((function(){return g}))))],e)}(),d=new i.PolymorpheusComponent(p),f={isExpanded:o.ALWAYS_TRUE_HANDLER,toggle:o.EMPTY_FUNCTION},h=new t.InjectionToken("Controller for tracking value - TuiTreeItemComponent pairs"),g=new t.InjectionToken("Controller for expanding the tree",{factory:function(){return f}}),m=new t.InjectionToken("A node of a tree view"),v=new t.InjectionToken("A tree node placeholder for loading",{factory:function(){return{}}}),y=new t.InjectionToken("A tree node starting point"),T=new t.InjectionToken("A service to load tree progressively"),E=new t.InjectionToken("Content for a tree item",{factory:function(){return d}}),I=new t.InjectionToken("Nesting level of current TreeView node",{factory:function(){return-1}}),x=[{provide:I,deps:[[new t.SkipSelf,I]],useFactory:b},{provide:m,useExisting:t.forwardRef((function(){return j}))}];function b(e){return++e}var j=function(){function e(e,t,i,a){var c=this;this.elementRef=e,this.controller=t,this.level=i,this.content=a,this.nested=o.EMPTY_QUERY,this.change$=new n.Subject,this.expanded$=this.change$.pipe(r.startWith(null),r.map((function(){return c.isExpanded})),r.distinctUntilChanged()),this.attached$=this.change$.pipe(r.map((function(){return c.elementRef.nativeElement.isConnected})),r.distinctUntilChanged())}return Object.defineProperty(e.prototype,"isExpandable",{get:function(){return!!this.nested.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isExpanded",{get:function(){return this.controller.isExpanded(this)},enumerable:!0,configurable:!0}),e.prototype.ngDoCheck=function(){this.change$.next()},e.ctorParameters=function(){return[{type:t.ElementRef,decorators:[{type:t.Inject,args:[t.ElementRef]}]},{type:void 0,decorators:[{type:t.Inject,args:[t.forwardRef((function(){return g}))]}]},{type:Number,decorators:[{type:t.Inject,args:[t.forwardRef((function(){return I}))]}]},{type:void 0,decorators:[{type:t.Inject,args:[t.forwardRef((function(){return E}))]}]}]},u([t.ContentChildren(m)],e.prototype,"nested",void 0),u([t.HostBinding("class._expandable")],e.prototype,"isExpandable",null),e=u([t.Component({selector:"tui-tree-item",template:'<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<div\n    polymorpheus-outlet\n    [content]="content"\n    [context]="{$implicit: this, template: template}"\n></div>\n<tui-expand\n    *ngIf="isExpandable"\n    role="group"\n    class="t-children"\n    [expanded]="expanded$ | async"\n>\n    <div>\n        <ng-content select="tui-tree-item"></ng-content>\n        <ng-content select="tui-tree"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf="attached$ | async"></ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,providers:x,host:{role:"treeitem"},styles:[":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent,1.5rem)}"]}),l(0,t.Inject(t.ElementRef)),l(1,t.Inject(t.forwardRef((function(){return g})))),l(2,t.Inject(t.forwardRef((function(){return I})))),l(3,t.Inject(t.forwardRef((function(){return E}))))],e)}(),C=function(){function e(e){var t=this;this.directive=e,this.check$=new n.Subject,this.children$=this.check$.pipe(r.startWith(null),r.map((function(){return t.handler(t.value)})),r.distinctUntilChanged()),this.content=function(e){var t=e.$implicit;return String(t)}}var o;return o=e,e.prototype.ngDoCheck=function(){var e,t;this.check$.next(),null===(e=this.item)||void 0===e||e.ngDoCheck(),null===(t=this.child)||void 0===t||t.ngDoCheck()},Object.defineProperty(e.prototype,"handler",{get:function(){var e,t;return null!==(t=null===(e=this.directive)||void 0===e?void 0:e.childrenHandler)&&void 0!==t?t:s.defaultHandler},enumerable:!0,configurable:!0}),e.ctorParameters=function(){return[{type:s,decorators:[{type:t.Optional},{type:t.Inject,args:[s]}]}]},u([t.Input()],e.prototype,"value",void 0),u([t.ViewChild(j)],e.prototype,"item",void 0),u([t.ViewChild(o)],e.prototype,"child",void 0),u([t.Input()],e.prototype,"content",void 0),e=o=u([t.Component({selector:"tui-tree[value]",template:'<tui-tree-item\n    *tuiLet="children$ | async as children"\n    #view\n    [tuiTreeNode]="value"\n>\n    <div\n        *ngIf="$any(value) !== children"\n        polymorpheus-outlet\n        [content]="content"\n        [context]="{$implicit: value, node: view}"\n    ></div>\n    <tui-tree\n        *ngFor="let child of children"\n        [value]="child"\n        [content]="content"\n    ></tui-tree>\n</tui-tree-item>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,providers:[{provide:m,useExisting:o}],host:{role:"tree"},styles:[":host{position:relative;display:block}"]}),l(0,t.Optional()),l(0,t.Inject(s))],e)}(),R=function(){function e(){this.fallback=!0,this.map=new Map,this.toggled=new t.EventEmitter,this.items=new Map}var n;return n=e,e.prototype.register=function(e,t){this.items.set(e,t)},e.prototype.unregister=function(e){this.items.delete(e)},e.prototype.isExpanded=function(e){var t,n=this.items.get(e);return null!==(t=n&&this.map.get(n))&&void 0!==t?t:this.fallback},e.prototype.toggle=function(e){var t=this.items.get(e),n=this.isExpanded(e);o.isPresent(t)&&(this.toggled.emit(t),this.map.set(t,!n))},u([t.Input("tuiTreeController"),o.tuiDefaultProp()],e.prototype,"fallback",void 0),u([t.Input(),o.tuiDefaultProp()],e.prototype,"map",void 0),u([t.Output()],e.prototype,"toggled",void 0),e=n=u([t.Directive({selector:"[tuiTreeController][map]",exportAs:"tuiTreeController",providers:[{provide:h,useExisting:n},{provide:g,useExisting:n}]})],e)}(),k=function(){function e(){this.map=new WeakMap,this.fallback=!0}var n;return n=e,e.prototype.isExpanded=function(e){var t;return null!==(t=this.map.get(e))&&void 0!==t?t:this.fallback},e.prototype.toggle=function(e){this.map.set(e,!this.isExpanded(e))},u([t.Input("tuiTreeController"),o.tuiDefaultProp()],e.prototype,"fallback",void 0),e=n=u([t.Directive({selector:"[tuiTreeController]:not([map])",exportAs:"tuiTreeController",providers:[{provide:g,useExisting:n}]})],e)}(),O=function(){function e(e,t){this.directive=e,this.component=t}return Object.defineProperty(e.prototype,"value",{set:function(e){var t;null===(t=this.directive)||void 0===t||t.register(this.component,e)},enumerable:!0,configurable:!0}),e.prototype.ngOnDestroy=function(){var e;null===(e=this.directive)||void 0===e||e.unregister(this.component)},e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:[h]}]},{type:j,decorators:[{type:t.Inject,args:[j]}]}]},u([t.Input("tuiTreeNode")],e.prototype,"value",null),e=u([t.Directive({selector:"tui-tree-item[tuiTreeNode]"}),l(0,t.Optional()),l(0,t.Inject(h)),l(1,t.Inject(j))],e)}(),_=function(){function e(e,t,o){var i=this;this.loading=e,this.start=t,this.loader=o,this.map=new Map([[this.loading,[]]]),this.load$=new n.Subject,this.data$=this.load$.pipe(r.switchMap((function(e){return i.loader.loadChildren(e).pipe(r.tap((function(t){return i.map.set(e,t)})),r.map((function(e){return e.filter((function(e){return!i.loader.hasChildren(e)}))})),r.tap((function(e){return e.forEach((function(e){return i.map.set(e,[])}))})))})),r.startWith(null),r.mapTo(this.start))}return e.prototype.getChildren=function(e){var t;return null!==(t=this.map.get(e))&&void 0!==t?t:[this.loading]},e.prototype.loadChildren=function(e){this.map.get(e)||(this.map.set(e,[this.loading]),this.load$.next(e))},e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[v]}]},{type:void 0,decorators:[{type:t.Inject,args:[y]}]},{type:void 0,decorators:[{type:t.Inject,args:[T]}]}]},e=u([t.Injectable(),l(0,t.Inject(v)),l(1,t.Inject(y)),l(2,t.Inject(T))],e)}(),w=function(){function e(){}return e=u([t.NgModule({imports:[a.CommonModule,i.PolymorpheusModule,c.TuiExpandModule,o.TuiLetModule,c.TuiButtonModule],entryComponents:[p],declarations:[C,j,p,s,k,R,O],exports:[C,j,s,k,R]})],e)}();e.TUI_DEFAULT_TREE_CONTROLLER=f,e.TUI_TREE_ACCESSOR=h,e.TUI_TREE_CONTENT=E,e.TUI_TREE_CONTROLLER=g,e.TUI_TREE_ITEM_CONTENT=d,e.TUI_TREE_ITEM_PROVIDERS=x,e.TUI_TREE_LEVEL=I,e.TUI_TREE_LOADER=T,e.TUI_TREE_LOADING=v,e.TUI_TREE_NODE=m,e.TUI_TREE_START=y,e.TuiTreeChildrenDirective=s,e.TuiTreeComponent=C,e.TuiTreeControllerDirective=R,e.TuiTreeItemComponent=j,e.TuiTreeItemContentComponent=p,e.TuiTreeItemControllerDirective=k,e.TuiTreeModule=w,e.TuiTreeNodeDirective=O,e.TuiTreeService=_,e.treeLevelFactory=b,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=taiga-ui-kit-components-tree.umd.min.js.map