import { __decorate, __param } from 'tslib';
import { EventEmitter, ChangeDetectorRef, Inject, ElementRef, ContentChildren, forwardRef, Input, HostBinding, Output, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { EMPTY_QUERY, tuiItemsQueryListObservable, tuiGetOriginalArrayFromQueryList, tuiAssertIsHTMLElement, tuiMoveFocus, TuiScrollService, TuiResizeService, tuiDefaultProp, tuiPure, TuiDestroyService, TuiFocusVisibleService } from '@taiga-ui/cdk';
import { TUI_ANIMATIONS_DURATION, TuiRouterLinkActiveService, TuiSvgModule } from '@taiga-ui/core';
import { Observable, identity } from 'rxjs';
import { delay, filter } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

let TuiStepperComponent = class TuiStepperComponent {
    constructor(changeDetectorRef, elementRef, scrollService, resize$, duration) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.scrollService = scrollService;
        this.duration = duration;
        this.steps = EMPTY_QUERY;
        this.orientation = 'horizontal';
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        resize$.subscribe(() => this.scrollIntoView(this.activeItemIndex));
    }
    set activeIndex(index) {
        this.activeItemIndex = index;
        this.scrollIntoView(index);
    }
    get changes$() {
        // Delay is required to trigger change detection after steps are rendered,
        // so they can update their "active" status
        return tuiItemsQueryListObservable(this.steps).pipe(delay(0));
    }
    onHorizontal(event, step) {
        if (this.orientation !== 'horizontal' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    onVertical(event, step) {
        if (this.orientation !== 'vertical' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    indexOf(step) {
        return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(({ nativeElement }) => nativeElement === step);
    }
    isActive(index) {
        return index === this.activeItemIndex;
    }
    activate(index) {
        if (this.activeItemIndex === index) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
        this.changeDetectorRef.markForCheck();
        this.scrollIntoView(index);
    }
    getNativeElements(queryList) {
        return queryList.map(({ nativeElement }) => nativeElement);
    }
    moveFocus(current, step) {
        tuiAssertIsHTMLElement(current);
        const stepElements = this.getNativeElements(this.steps);
        tuiMoveFocus(stepElements.indexOf(current), stepElements, step);
    }
    scrollIntoView(index) {
        const step = this.getNativeElements(this.steps)[index];
        if (!step) {
            return;
        }
        const { nativeElement } = this.elementRef;
        const { clientHeight, clientWidth, offsetTop, offsetLeft } = nativeElement;
        const { offsetHeight, offsetWidth, offsetTop: stepOffsetTop, offsetLeft: stepOffsetLeft, } = step;
        const top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
        const left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
        this.scrollService
            .scroll$(nativeElement, Math.max(0, top), Math.max(0, left), this.duration / 3)
            .subscribe();
    }
};
TuiStepperComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiScrollService, decorators: [{ type: Inject, args: [TuiScrollService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
    { type: Number, decorators: [{ type: Inject, args: [TUI_ANIMATIONS_DURATION,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => TuiStepComponent), { read: ElementRef })
], TuiStepperComponent.prototype, "steps", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-orientation'),
    tuiDefaultProp()
], TuiStepperComponent.prototype, "orientation", void 0);
__decorate([
    Input('activeItemIndex')
], TuiStepperComponent.prototype, "activeIndex", null);
__decorate([
    Output()
], TuiStepperComponent.prototype, "activeItemIndexChange", void 0);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "changes$", null);
__decorate([
    HostListener('keydown.arrowRight', ['$event', '1']),
    HostListener('keydown.arrowLeft', ['$event', '-1'])
], TuiStepperComponent.prototype, "onHorizontal", null);
__decorate([
    HostListener('keydown.arrowDown', ['$event', '1']),
    HostListener('keydown.arrowUp', ['$event', '-1'])
], TuiStepperComponent.prototype, "onVertical", null);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "getNativeElements", null);
TuiStepperComponent = __decorate([
    Component({
        selector: 'tui-stepper, nav[tuiStepper]',
        template: "<ng-container *ngIf=\"changes$ | async\"></ng-container>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiResizeService, TuiDestroyService],
        styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;counter-reset:steps;scroll-behavior:smooth}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host[data-orientation=vertical]{flex-direction:column}"]
    }),
    __param(0, Inject(ChangeDetectorRef)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiScrollService)),
    __param(3, Inject(TuiResizeService)),
    __param(4, Inject(TUI_ANIMATIONS_DURATION))
], TuiStepperComponent);

let TuiStepComponent = class TuiStepComponent {
    constructor(focusVisible$, routerLinkActive$, stepper, elementRef) {
        this.stepper = stepper;
        this.elementRef = elementRef;
        this.state = 'normal';
        this.icon = '';
        this.focusVisible = false;
        routerLinkActive$.pipe(filter(identity)).subscribe(() => {
            this.activate();
        });
        focusVisible$.subscribe(visible => {
            this.focusVisible = visible;
        });
    }
    get isActive() {
        return this.stepper.isActive(this.index);
    }
    get isVertical() {
        return this.stepper.orientation === 'vertical';
    }
    get tabIndex() {
        return this.isActive ? 0 : -1;
    }
    get index() {
        return this.stepper.indexOf(this.elementRef.nativeElement);
    }
    activate() {
        this.stepper.activate(this.index);
    }
};
TuiStepComponent.ctorParameters = () => [
    { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiRouterLinkActiveService,] }] },
    { type: TuiStepperComponent, decorators: [{ type: Inject, args: [TuiStepperComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-state'),
    tuiDefaultProp()
], TuiStepComponent.prototype, "state", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiStepComponent.prototype, "icon", void 0);
__decorate([
    HostBinding('class._focus-visible')
], TuiStepComponent.prototype, "focusVisible", void 0);
__decorate([
    HostBinding('class._active')
], TuiStepComponent.prototype, "isActive", null);
__decorate([
    HostBinding('class._vertical')
], TuiStepComponent.prototype, "isVertical", null);
__decorate([
    HostBinding('tabIndex')
], TuiStepComponent.prototype, "tabIndex", null);
__decorate([
    HostListener('click')
], TuiStepComponent.prototype, "activate", null);
TuiStepComponent = __decorate([
    Component({
        selector: 'button[tuiStep], a[tuiStep]:not([routerLink]), a[tuiStep][routerLink][routerLinkActive]',
        template: "<tui-svg\n    *ngIf=\"icon\"\n    class=\"t-marker t-marker_custom\"\n    [src]=\"icon\"\n></tui-svg>\n<tui-svg\n    src=\"tuiIconWarningLarge\"\n    class=\"t-marker t-marker_error\"\n></tui-svg>\n<tui-svg\n    src=\"tuiIconCheckLarge\"\n    class=\"t-marker t-marker_pass\"\n></tui-svg>\n<div class=\"t-marker t-marker_index\"></div>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiDestroyService, TuiRouterLinkActiveService, TuiFocusVisibleService],
        host: {
            type: 'button',
        },
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;position:relative;display:flex;align-items:center;flex-shrink:0;color:var(--tui-link);margin-right:2rem;outline:0;cursor:pointer;text-decoration:none;counter-increment:steps}:host:disabled{pointer-events:none;color:var(--tui-base-07)}:host:hover{color:var(--tui-link-hover)}:host:not(:last-of-type)._vertical{margin-bottom:1.25rem}:host._active,:host._active:hover{color:var(--tui-text-01);cursor:default}:host._focus-visible:before{content:'';position:absolute;left:2.75rem;right:0;top:50%;height:1.5rem;margin-top:-.75rem;background:var(--tui-selection)}.t-marker{transition-property:background;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;width:2rem;height:2rem;border-radius:100%;margin-right:.75rem;flex-shrink:0;align-items:center;justify-content:center;background:var(--tui-secondary);color:var(--tui-link)}:host:disabled .t-marker{background:var(--tui-base-03);color:var(--tui-base-07)}.t-marker_index:before{content:counter(steps)}:host:hover .t-marker_index{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}:host._active .t-marker_index{color:var(--tui-primary-text);background:var(--tui-primary)}:host:not(._active) .t-marker_custom~.t-marker_index,:host:not([data-state=normal]):not(._active) .t-marker_index{display:none}.t-marker_error{background:var(--tui-error-bg);color:var(--tui-error-fill)}:host:hover .t-marker_error{background:var(--tui-error-bg-hover);color:var(--tui-error-fill)}:host._active .t-marker_error,:host:not([data-state=error]) .t-marker_error{display:none}:host._active .t-marker_pass,:host:not([data-state=pass]) .t-marker_pass{display:none}:host._active .t-marker_custom,:host:not([data-state=normal]) .t-marker_custom{display:none}:host:hover .t-marker_custom{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}"]
    }),
    __param(0, Inject(TuiFocusVisibleService)),
    __param(1, Inject(TuiRouterLinkActiveService)),
    __param(2, Inject(TuiStepperComponent)),
    __param(3, Inject(ElementRef))
], TuiStepComponent);

let TuiStepperModule = class TuiStepperModule {
};
TuiStepperModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiSvgModule],
        declarations: [TuiStepperComponent, TuiStepComponent],
        exports: [TuiStepperComponent, TuiStepComponent],
    })
], TuiStepperModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiStepComponent, TuiStepperComponent, TuiStepperModule };
//# sourceMappingURL=taiga-ui-kit-components-stepper.js.map
