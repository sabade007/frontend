import { __decorate, __param } from 'tslib';
import { Input, Directive, Inject, forwardRef, HostBinding, Component, ChangeDetectionStrategy, InjectionToken, SkipSelf, ElementRef, ContentChildren, Optional, ViewChild, EventEmitter, Output, Injectable, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, map, distinctUntilChanged, switchMap, tap, mapTo } from 'rxjs/operators';
import { EMPTY_ARRAY, tuiDefaultProp, ALWAYS_TRUE_HANDLER, EMPTY_FUNCTION, EMPTY_QUERY, isPresent, TuiLetModule } from '@taiga-ui/cdk';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { CommonModule } from '@angular/common';
import { TuiExpandModule, TuiButtonModule } from '@taiga-ui/core';

var TuiTreeChildrenDirective_1;
let TuiTreeChildrenDirective = TuiTreeChildrenDirective_1 = class TuiTreeChildrenDirective {
    constructor() {
        this.childrenHandler = TuiTreeChildrenDirective_1.defaultHandler;
    }
    static defaultHandler(item) {
        return Array.isArray(item) ? item : EMPTY_ARRAY;
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTreeChildrenDirective.prototype, "childrenHandler", void 0);
TuiTreeChildrenDirective = TuiTreeChildrenDirective_1 = __decorate([
    Directive({
        selector: 'tui-tree[childrenHandler]',
    })
], TuiTreeChildrenDirective);

let TuiTreeItemContentComponent = class TuiTreeItemContentComponent {
    constructor(context, controller) {
        this.context = context;
        this.controller = controller;
    }
    get isExpanded() {
        return this.context.$implicit.isExpanded;
    }
    get isExpandable() {
        return (this.context.$implicit.isExpandable &&
            this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
    }
    onClick() {
        this.controller.toggle(this.context.$implicit);
    }
};
TuiTreeItemContentComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => TUI_TREE_CONTROLLER),] }] }
];
__decorate([
    HostBinding('class._expandable')
], TuiTreeItemContentComponent.prototype, "isExpandable", null);
TuiTreeItemContentComponent = __decorate([
    Component({
        selector: 'tui-tree-item-content',
        template: "<button\n    *ngIf=\"isExpandable\"\n    tuiIconButton\n    size=\"xs\"\n    appearance=\"flat\"\n    icon=\"tuiIconChevronRight\"\n    shape=\"rounded\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}"]
    }),
    __param(0, Inject(POLYMORPHEUS_CONTEXT)),
    __param(1, Inject(forwardRef(() => TUI_TREE_CONTROLLER)))
], TuiTreeItemContentComponent);

const TUI_TREE_ITEM_CONTENT = new PolymorpheusComponent(TuiTreeItemContentComponent);
const TUI_DEFAULT_TREE_CONTROLLER = {
    isExpanded: ALWAYS_TRUE_HANDLER,
    toggle: EMPTY_FUNCTION,
};

const TUI_TREE_ACCESSOR = new InjectionToken(`Controller for tracking value - TuiTreeItemComponent pairs`);
const TUI_TREE_CONTROLLER = new InjectionToken(`Controller for expanding the tree`, {
    factory: () => TUI_DEFAULT_TREE_CONTROLLER,
});
const TUI_TREE_NODE = new InjectionToken(`A node of a tree view`);
const TUI_TREE_LOADING = new InjectionToken(`A tree node placeholder for loading`, { factory: () => ({}) });
const TUI_TREE_START = new InjectionToken(`A tree node starting point`);
const TUI_TREE_LOADER = new InjectionToken(`A service to load tree progressively`);
const TUI_TREE_CONTENT = new InjectionToken(`Content for a tree item`, {
    factory: () => TUI_TREE_ITEM_CONTENT,
});
const TUI_TREE_LEVEL = new InjectionToken(`Nesting level of current TreeView node`, {
    factory: () => -1,
});

const TUI_TREE_ITEM_PROVIDERS = [
    {
        provide: TUI_TREE_LEVEL,
        deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
        useFactory: treeLevelFactory,
    },
    {
        provide: TUI_TREE_NODE,
        useExisting: forwardRef(() => TuiTreeItemComponent),
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
function treeLevelFactory(level) {
    return ++level;
}

let TuiTreeItemComponent = class TuiTreeItemComponent {
    constructor(elementRef, controller, level, content) {
        this.elementRef = elementRef;
        this.controller = controller;
        this.level = level;
        this.content = content;
        this.nested = EMPTY_QUERY;
        this.change$ = new Subject();
        this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded), distinctUntilChanged());
        this.attached$ = this.change$.pipe(map(() => this.elementRef.nativeElement.isConnected), distinctUntilChanged());
    }
    get isExpandable() {
        return !!this.nested.length;
    }
    get isExpanded() {
        return this.controller.isExpanded(this);
    }
    ngDoCheck() {
        this.change$.next();
    }
};
TuiTreeItemComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => TUI_TREE_CONTROLLER),] }] },
    { type: Number, decorators: [{ type: Inject, args: [forwardRef(() => TUI_TREE_LEVEL),] }] },
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => TUI_TREE_CONTENT),] }] }
];
__decorate([
    ContentChildren(TUI_TREE_NODE)
], TuiTreeItemComponent.prototype, "nested", void 0);
__decorate([
    HostBinding('class._expandable')
], TuiTreeItemComponent.prototype, "isExpandable", null);
TuiTreeItemComponent = __decorate([
    Component({
        selector: 'tui-tree-item',
        template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<div\n    polymorpheus-outlet\n    [content]=\"content\"\n    [context]=\"{$implicit: this, template: template}\"\n></div>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_TREE_ITEM_PROVIDERS,
        host: {
            role: 'treeitem',
        },
        styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent,1.5rem)}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(forwardRef(() => TUI_TREE_CONTROLLER))),
    __param(2, Inject(forwardRef(() => TUI_TREE_LEVEL))),
    __param(3, Inject(forwardRef(() => TUI_TREE_CONTENT)))
], TuiTreeItemComponent);

var TuiTreeComponent_1;
let TuiTreeComponent = TuiTreeComponent_1 = class TuiTreeComponent {
    constructor(directive) {
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.ngDoCheck();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.ngDoCheck();
    }
    get handler() {
        var _a, _b;
        return (_b = (_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) !== null && _b !== void 0 ? _b : TuiTreeChildrenDirective.defaultHandler;
    }
};
TuiTreeComponent.ctorParameters = () => [
    { type: TuiTreeChildrenDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiTreeChildrenDirective,] }] }
];
__decorate([
    Input()
], TuiTreeComponent.prototype, "value", void 0);
__decorate([
    ViewChild(TuiTreeItemComponent)
], TuiTreeComponent.prototype, "item", void 0);
__decorate([
    ViewChild(TuiTreeComponent_1)
], TuiTreeComponent.prototype, "child", void 0);
__decorate([
    Input()
], TuiTreeComponent.prototype, "content", void 0);
TuiTreeComponent = TuiTreeComponent_1 = __decorate([
    Component({
        selector: 'tui-tree[value]',
        template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <div\n        *ngIf=\"$any(value) !== children\"\n        polymorpheus-outlet\n        [content]=\"content\"\n        [context]=\"{$implicit: value, node: view}\"\n    ></div>\n    <tui-tree\n        *ngFor=\"let child of children\"\n        [value]=\"child\"\n        [content]=\"content\"\n    ></tui-tree>\n</tui-tree-item>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_TREE_NODE,
                useExisting: TuiTreeComponent_1,
            },
        ],
        host: {
            role: 'tree',
        },
        styles: [":host{position:relative;display:block}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(TuiTreeChildrenDirective))
], TuiTreeComponent);

var TuiTreeControllerDirective_1;
let TuiTreeControllerDirective = TuiTreeControllerDirective_1 = class TuiTreeControllerDirective {
    constructor() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    register(item, value) {
        this.items.set(item, value);
    }
    unregister(item) {
        this.items.delete(item);
    }
    isExpanded(item) {
        var _a;
        const value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        const value = this.items.get(item);
        const expanded = this.isExpanded(item);
        if (!isPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    }
};
__decorate([
    Input('tuiTreeController'),
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "fallback", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "map", void 0);
__decorate([
    Output()
], TuiTreeControllerDirective.prototype, "toggled", void 0);
TuiTreeControllerDirective = TuiTreeControllerDirective_1 = __decorate([
    Directive({
        selector: '[tuiTreeController][map]',
        exportAs: 'tuiTreeController',
        providers: [
            {
                provide: TUI_TREE_ACCESSOR,
                useExisting: TuiTreeControllerDirective_1,
            },
            {
                provide: TUI_TREE_CONTROLLER,
                useExisting: TuiTreeControllerDirective_1,
            },
        ],
    })
], TuiTreeControllerDirective);

var TuiTreeItemControllerDirective_1;
let TuiTreeItemControllerDirective = TuiTreeItemControllerDirective_1 = class TuiTreeItemControllerDirective {
    constructor() {
        this.map = new WeakMap();
        this.fallback = true;
    }
    isExpanded(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        this.map.set(item, !this.isExpanded(item));
    }
};
__decorate([
    Input('tuiTreeController'),
    tuiDefaultProp()
], TuiTreeItemControllerDirective.prototype, "fallback", void 0);
TuiTreeItemControllerDirective = TuiTreeItemControllerDirective_1 = __decorate([
    Directive({
        selector: '[tuiTreeController]:not([map])',
        exportAs: 'tuiTreeController',
        providers: [
            {
                provide: TUI_TREE_CONTROLLER,
                useExisting: TuiTreeItemControllerDirective_1,
            },
        ],
    })
], TuiTreeItemControllerDirective);

let TuiTreeNodeDirective = class TuiTreeNodeDirective {
    constructor(directive, component) {
        this.directive = directive;
        this.component = component;
    }
    set value(value) {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
    }
    ngOnDestroy() {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
    }
};
TuiTreeNodeDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_TREE_ACCESSOR,] }] },
    { type: TuiTreeItemComponent, decorators: [{ type: Inject, args: [TuiTreeItemComponent,] }] }
];
__decorate([
    Input('tuiTreeNode')
], TuiTreeNodeDirective.prototype, "value", null);
TuiTreeNodeDirective = __decorate([
    Directive({
        selector: 'tui-tree-item[tuiTreeNode]',
    }),
    __param(0, Optional()),
    __param(0, Inject(TUI_TREE_ACCESSOR)),
    __param(1, Inject(TuiTreeItemComponent))
], TuiTreeNodeDirective);

// @dynamic
let TuiTreeService = class TuiTreeService {
    constructor(loading, start, loader) {
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(item => this.loader.loadChildren(item).pipe(tap(children => this.map.set(item, children)), map(children => children.filter(item => !this.loader.hasChildren(item))), tap(children => children.forEach(child => this.map.set(child, []))))), startWith(null), mapTo(this.start));
    }
    getChildren(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : [this.loading];
    }
    loadChildren(item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    }
};
TuiTreeService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADING,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_START,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TREE_LOADER,] }] }
];
TuiTreeService = __decorate([
    Injectable(),
    __param(0, Inject(TUI_TREE_LOADING)),
    __param(1, Inject(TUI_TREE_START)),
    __param(2, Inject(TUI_TREE_LOADER))
], TuiTreeService);

let TuiTreeModule = class TuiTreeModule {
};
TuiTreeModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiExpandModule,
            TuiLetModule,
            TuiButtonModule,
        ],
        entryComponents: [TuiTreeItemContentComponent],
        declarations: [
            TuiTreeComponent,
            TuiTreeItemComponent,
            TuiTreeItemContentComponent,
            TuiTreeChildrenDirective,
            TuiTreeItemControllerDirective,
            TuiTreeControllerDirective,
            TuiTreeNodeDirective,
        ],
        exports: [
            TuiTreeComponent,
            TuiTreeItemComponent,
            TuiTreeChildrenDirective,
            TuiTreeItemControllerDirective,
            TuiTreeControllerDirective,
        ],
    })
], TuiTreeModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DEFAULT_TREE_CONTROLLER, TUI_TREE_ACCESSOR, TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_ITEM_CONTENT, TUI_TREE_ITEM_PROVIDERS, TUI_TREE_LEVEL, TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_NODE, TUI_TREE_START, TuiTreeChildrenDirective, TuiTreeComponent, TuiTreeControllerDirective, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeItemControllerDirective, TuiTreeModule, TuiTreeNodeDirective, TuiTreeService, treeLevelFactory };
//# sourceMappingURL=taiga-ui-kit-components-tree.js.map
