import { __decorate, __param } from 'tslib';
import { EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, forwardRef, Pipe, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, isNativeFocused, EMPTY_ARRAY, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiLetModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPressedModule, TuiHoveredModule, TuiFocusableModule, TuiDroppableModule, TuiItemDirective } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiWrapperModule, TuiSvgModule, TuiLinkModule, TuiLoaderModule, TuiButtonModule, TuiGroupModule } from '@taiga-ui/core';
import { TUI_INPUT_FILE_TEXTS, TUI_DIGITAL_INFORMATION_UNITS } from '@taiga-ui/kit/tokens';
import { getAcceptArray } from '@taiga-ui/kit/utils/files';
import { of, Observable, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiFilesModule, TuiFilesComponent, TuiFileComponent } from '@taiga-ui/kit/components/files';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { tuiFormatSize } from '@taiga-ui/kit/utils';

var TuiInputFilesComponent_1;
const DEFAULT_MAX_SIZE = 30 * 1024 * 1024; // 30 MiB
// @dynamic
let TuiInputFilesComponent = TuiInputFilesComponent_1 = class TuiInputFilesComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, isMobile, inputFileTexts$) {
        super(control, changeDetectorRef);
        this.isMobile = isMobile;
        this.inputFileTexts$ = inputFileTexts$;
        this.dataTransfer = null;
        this.link = '';
        this.label = '';
        this.accept = '';
        this.multiple = false;
        this.size = 'm';
        this.maxFileSize = DEFAULT_MAX_SIZE;
        this.reject = new EventEmitter();
    }
    get nativeFocusableElement() {
        var _a;
        return ((_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get computedPseudoHovered() {
        var _a;
        return (_a = this.pseudoHovered) !== null && _a !== void 0 ? _a : (this.fileDragged || null);
    }
    get computedLink$() {
        return this.computeLink$(this.fileDragged, this.multiple, this.link);
    }
    get computedLabel$() {
        return this.computeLabel$(this.isMobile, this.fileDragged, this.multiple, this.label);
    }
    get fileDragged() {
        var _a;
        return !!((_a = this.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.includes('Files'));
    }
    get arrayValue() {
        return this.getValueArray(this.value);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    onFilesSelected(input, formatRejection, maxSizeRejection) {
        this.processSelectedFiles(input.files, { formatRejection, maxSizeRejection });
        input.value = '';
    }
    onDropped(event, formatRejection, maxSizeRejection) {
        this.processSelectedFiles(event.files, { formatRejection, maxSizeRejection });
    }
    onDragOver(dataTransfer) {
        this.dataTransfer = dataTransfer;
    }
    removeFile(removedFile) {
        this.updateValue(this.multiple ? this.arrayValue.filter(file => file !== removedFile) : null);
    }
    computeLink$(fileDragged, multiple, link) {
        return fileDragged
            ? of('')
            : this.inputFileTexts$.pipe(map(texts => multiple && link === ''
                ? texts.defaultLinkMultiple
                : link || texts.defaultLinkSingle));
    }
    computeLabel$(isMobile, fileDragged, multiple, label) {
        if (isMobile) {
            return of('');
        }
        if (fileDragged) {
            return this.inputFileTexts$.pipe(map(texts => (multiple ? texts.dropMultiple : texts.drop)));
        }
        return this.inputFileTexts$.pipe(map(texts => multiple && label === ''
            ? texts.defaultLabelMultiple
            : label || texts.defaultLabelSingle));
    }
    getValueArray(value) {
        if (!value) {
            return EMPTY_ARRAY;
        }
        return Array.isArray(value) ? value : [value];
    }
    processSelectedFiles(files, errors) {
        // IE11 after selecting a file through the open dialog generates a second event passing an empty FileList.
        if (!(files === null || files === void 0 ? void 0 : files.length)) {
            return;
        }
        const newFiles = this.multiple ? Array.from(files) : [files[0]];
        const tooBigFiles = newFiles.filter(file => file.size > this.maxFileSize);
        const wrongFormatFiles = newFiles.filter(file => !this.isFormatAcceptable(file) && !tooBigFiles.includes(file));
        const acceptedFiles = newFiles.filter(file => !tooBigFiles.includes(file) && !wrongFormatFiles.includes(file));
        if (tooBigFiles.length || wrongFormatFiles.length) {
            this.rejectFiles([
                ...tooBigFiles.map(file => ({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    content: errors.maxSizeRejection,
                })),
                ...wrongFormatFiles.map(file => ({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    content: errors.formatRejection,
                })),
            ]);
        }
        this.updateValue(this.multiple
            ? [...this.arrayValue, ...acceptedFiles]
            : acceptedFiles[0] || null);
    }
    isFormatAcceptable(file) {
        if (!this.accept) {
            return true;
        }
        const extension = `.${(file.name.split('.').pop() || '').toLowerCase()}`;
        return getAcceptArray(this.accept).some(format => format === extension ||
            format === file.type ||
            (format.split('/')[1] === '*' &&
                file.type.split('/')[0] === format.split('/')[0]));
    }
    rejectFiles(rejectedFiles) {
        this.reject.emit(this.multiple ? rejectedFiles : rejectedFiles[0]);
    }
};
TuiInputFilesComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] }
];
__decorate([
    ViewChild('input')
], TuiInputFilesComponent.prototype, "input", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "link", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "label", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "accept", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "multiple", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFilesComponent.prototype, "maxFileSize", void 0);
__decorate([
    Output()
], TuiInputFilesComponent.prototype, "reject", void 0);
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "computeLink$", null);
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "computeLabel$", null);
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "getValueArray", null);
TuiInputFilesComponent = TuiInputFilesComponent_1 = __decorate([
    Component({
        selector: 'tui-input-files',
        template: "<tui-wrapper\n    appearance=\"input-file\"\n    class=\"t-wrapper\"\n    [class._mobile]=\"isMobile\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered || fileDragged\"\n    [pressed]=\"computedPressed\"\n    [disabled]=\"computedDisabled\"\n>\n    <label\n        automation-id=\"tui-input-file__label\"\n        class=\"t-label\"\n    >\n        <a tuiLink>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLink$ | async\"\n            ></span>\n        </a>\n        <ng-container *ngIf=\"computedLabel$ | async as computedLabel\">\n            <span>&nbsp;</span>\n            <span\n                polymorpheus-outlet\n                class=\"t-inline\"\n                [content]=\"computedLabel\"\n            ></span>\n        </ng-container>\n        <ng-container *ngIf=\"!readOnly && !computedDisabled\">\n            <input\n                #input\n                type=\"file\"\n                class=\"t-native\"\n                [id]=\"id\"\n                [accept]=\"accept\"\n                [multiple]=\"multiple\"\n                [tuiFocusable]=\"focusable\"\n                (change)=\"onFilesSelected(input, formatRejection, maxSizeRejection)\"\n                (tuiHoveredChange)=\"onHovered($event)\"\n                (tuiFocusedChange)=\"onFocused($event)\"\n                (tuiPressedChange)=\"onPressed($event)\"\n                (tuiDroppableDropped)=\"onDropped($event, formatRejection, maxSizeRejection)\"\n                (tuiDroppableDragOverChange)=\"onDragOver($event)\"\n                (mousedown.prevent.silent)=\"(0)\"\n            />\n        </ng-container>\n    </label>\n</tui-wrapper>\n\n<ng-template #formatRejection>\n    {{ (inputFileTexts$ | async)?.formatRejectionReason || '' }}\n</ng-template>\n\n<ng-template #maxSizeRejection>\n    {{ maxFileSize | tuiMaxSizeRejectionError | async }}\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        providers: [
            MODE_PROVIDER,
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputFilesComponent_1),
            },
        ],
        styles: ["tui-input-files{display:block}tui-input-files .t-native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}tui-input-files .t-native::-webkit-file-upload-button{display:none}tui-input-files .t-inline{display:inline}tui-input-files .t-label{text-align:center}tui-wrapper[data-appearance=input-file]{display:flex;background:0 0;font:var(--tui-font-text-m);word-wrap:break-word;color:var(--tui-text-02);flex:1;justify-content:center;align-items:center;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);padding:1rem .5rem;box-sizing:border-box}tui-wrapper[data-appearance=input-file]:after{border:1px dashed;color:var(--tui-link)}tui-wrapper[data-appearance=input-file]._mobile:after{border:1px solid}tui-wrapper[data-appearance=input-file][data-state=hovered]{background:var(--tui-secondary)}tui-wrapper[data-appearance=input-file][data-state=hovered]:after{color:var(--tui-link-hover)}tui-wrapper[data-appearance=input-file][data-state=pressed]{background:var(--tui-secondary-hover)}tui-wrapper[data-appearance=input-file][data-state=disabled]{opacity:var(--tui-disabled-opacity);pointer-events:none}tui-wrapper[data-appearance=input-file][data-state=disabled]:after{color:var(--tui-text-03)}tui-wrapper[data-appearance=input-file]._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}tui-wrapper[data-appearance=input-file][data-mode=onDark],tui-wrapper[data-appearance=input-file][data-mode=onDark]._focused:after,tui-wrapper[data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=hovered]{background:var(--tui-clear-inverse-hover)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=hovered]:after,tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=pressed]:after{color:var(--tui-text-03-night)}tui-wrapper[data-appearance=input-file][data-mode=onDark][data-state=pressed]{background:var(--tui-clear-inverse-active)}tui-wrapper[data-appearance=input-file][data-mode=onLight],tui-wrapper[data-appearance=input-file][data-mode=onLight]:after{color:var(--tui-text-01)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=hovered]{background:var(--tui-clear-hover)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=hovered]:after,tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=pressed]:after{color:var(--tui-text-03)}tui-wrapper[data-appearance=input-file][data-mode=onLight][data-state=pressed]{background:var(--tui-clear-active)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_IS_MOBILE)),
    __param(3, Inject(TUI_INPUT_FILE_TEXTS))
], TuiInputFilesComponent);

let TuiMaxSizeRejectionErrorPipe = class TuiMaxSizeRejectionErrorPipe {
    constructor(inputFileTexts$, units$) {
        this.inputFileTexts$ = inputFileTexts$;
        this.units$ = units$;
    }
    transform(maxFileSize) {
        return combineLatest([this.inputFileTexts$, this.units$]).pipe(map(([{ maxSizeRejectionReason }, units]) => maxSizeRejectionReason + tuiFormatSize(units, maxFileSize)));
    }
};
TuiMaxSizeRejectionErrorPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DIGITAL_INFORMATION_UNITS,] }] }
];
TuiMaxSizeRejectionErrorPipe = __decorate([
    Pipe({ name: `tuiMaxSizeRejectionError` }),
    __param(0, Inject(TUI_INPUT_FILE_TEXTS)),
    __param(1, Inject(TUI_DIGITAL_INFORMATION_UNITS))
], TuiMaxSizeRejectionErrorPipe);

let TuiInputFilesModule = class TuiInputFilesModule {
};
TuiInputFilesModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiLetModule,
            TuiFocusedModule,
            TuiFocusVisibleModule,
            TuiPressedModule,
            TuiHoveredModule,
            TuiFocusableModule,
            TuiDroppableModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiLinkModule,
            TuiLoaderModule,
            TuiButtonModule,
            TuiGroupModule,
            TuiFilesModule,
        ],
        declarations: [TuiInputFilesComponent, TuiMaxSizeRejectionErrorPipe],
        exports: [
            TuiInputFilesComponent,
            TuiFilesComponent,
            TuiFileComponent,
            TuiItemDirective,
        ],
    })
], TuiInputFilesModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputFilesComponent, TuiInputFilesModule, TuiMaxSizeRejectionErrorPipe as ɵa };
//# sourceMappingURL=taiga-ui-kit-components-input-files.js.map
