import { __decorate, __param } from 'tslib';
import { forwardRef, EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ContentChild, ViewChild, Input, Output, TemplateRef, Component, ChangeDetectionStrategy, Directive, HostListener, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl, TUI_STRICT_MATCHER, isNativeFocused, isPresent, setNativeFocused, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT, TUI_DATA_LIST_ACCESSOR, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiDataListDirective, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_ARROW_MODE, TuiArrowModule } from '@taiga-ui/kit/components/arrow';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// TODO: 3.0 remove in ivy compilation
const COMBOBOX_OPTION = TUI_SELECT_OPTION;
const TUI_COMBO_BOX_PROVIDERS = [
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiComboBoxComponent),
    },
    {
        provide: TUI_DATA_LIST_HOST,
        useExisting: forwardRef(() => TuiComboBoxComponent),
    },
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(() => TuiComboBoxComponent),
    },
    {
        provide: TUI_OPTION_CONTENT,
        useValue: COMBOBOX_OPTION,
    },
    FIXED_DROPDOWN_CONTROLLER_PROVIDER,
];

let TuiComboBoxComponent = class TuiComboBoxComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, arrowMode, itemsHandlers) {
        super(control, changeDetectorRef);
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.stringify = this.itemsHandlers.stringify;
        this.strictMatcher = TUI_STRICT_MATCHER;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.valueContent = '';
        this.strict = true;
        this.search = null;
        this.searchChange = new EventEmitter();
        this.datalist = '';
        this.open = false;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return (isNativeFocused(this.nativeFocusableElement) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get nativeValue() {
        return this.value === null ? this.search || '' : this.stringify(this.value);
    }
    get showValueTemplate() {
        return isPresent(this.value) && !this.focused;
    }
    get computedContent() {
        return this.valueContent || this.nativeValue;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    checkOption(option) {
        if (!this.isStrictMatch(option)) {
            return;
        }
        this.updateValue(option);
        this.updateSearch(null);
    }
    handleOption(item) {
        this.focusInput();
        this.close();
        this.updateSearch(null);
        this.updateValue(item);
        if (this.value) {
            this.setNativeValue(this.stringify(item));
        }
    }
    onFieldKeyDownEnter(event) {
        var _a;
        if (this.open) {
            event.preventDefault();
        }
        const options = ((_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions()) || [];
        if (options.length !== 1) {
            return;
        }
        this.updateValue(options[0]);
        this.updateSearch(null);
        this.close();
    }
    onValueChange(value) {
        var _a, _b;
        this.updateSearch(value);
        const match = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions().find(item => this.isStrictMatch(item));
        if (match !== undefined) {
            this.updateValue(match);
            this.updateSearch(null);
            return;
        }
        if (this.strict || this.search === '') {
            this.updateValue(null);
        }
        (_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.updateOpen(true);
    }
    updateValue(value) {
        super.updateValue(value);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    toggle() {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
    }
    isStrictMatch(item) {
        return this.strictMatcher(item, this.search || '', this.stringify);
    }
    close() {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    setNativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    }
};
TuiComboBoxComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ARROW_MODE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] }
];
__decorate([
    ContentChild(TUI_DATA_LIST_ACCESSOR)
], TuiComboBoxComponent.prototype, "accessor", void 0);
__decorate([
    ViewChild(TuiHostedDropdownComponent)
], TuiComboBoxComponent.prototype, "hostedDropdown", void 0);
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiComboBoxComponent.prototype, "textfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "stringify", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "strictMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "valueContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "strict", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxComponent.prototype, "search", void 0);
__decorate([
    Output()
], TuiComboBoxComponent.prototype, "searchChange", void 0);
__decorate([
    ContentChild(TuiDataListDirective, { read: TemplateRef })
], TuiComboBoxComponent.prototype, "datalist", void 0);
TuiComboBoxComponent = __decorate([
    Component({
        selector: 'tui-combo-box',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-combo-box__textfield\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoHovered]=\"computedHovered\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"arrow ? icon : ''\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [value]=\"nativeValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (click)=\"toggle()\"\n        (keydown.enter)=\"onFieldKeyDownEnter($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n        <div\n            *ngIf=\"showValueTemplate\"\n            polymorpheus-outlet\n            automation-id=\"tui-combo-box__template\"\n            class=\"t-value\"\n            [content]=\"computedContent\"\n            [context]=\"{$implicit: value!, active: computedFocused}\"\n        ></div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            polymorpheus-outlet\n            class=\"t-icon\"\n            [content]=\"arrow\"\n        ></div>\n    </ng-template>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_COMBO_BOX_PROVIDERS,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;width:100%;align-items:center}.t-icon{pointer-events:auto}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_ARROW_MODE)),
    __param(3, Inject(TUI_ITEMS_HANDLERS))
], TuiComboBoxComponent);

var TuiComboBoxDirective_1;
let TuiComboBoxDirective = TuiComboBoxDirective_1 = class TuiComboBoxDirective extends TuiAbstractTextfieldHost {
    get value() {
        return this.host.nativeValue;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
};
TuiComboBoxDirective = TuiComboBoxDirective_1 = __decorate([
    Directive({
        selector: 'tui-combo-box',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiComboBoxDirective_1),
            },
        ],
    })
], TuiComboBoxDirective);

let TuiComboBoxStrictDirective = class TuiComboBoxStrictDirective {
    constructor(comboBox) {
        this.comboBox = comboBox;
        this.strict = true;
    }
    onInput() {
        if (!this.strict && this.comboBox.search) {
            this.comboBox.updateValue(this.comboBox.search);
        }
    }
};
TuiComboBoxStrictDirective.ctorParameters = () => [
    { type: TuiComboBoxComponent, decorators: [{ type: Inject, args: [TuiComboBoxComponent,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiComboBoxStrictDirective.prototype, "strict", void 0);
__decorate([
    HostListener('input')
], TuiComboBoxStrictDirective.prototype, "onInput", null);
TuiComboBoxStrictDirective = __decorate([
    Directive({
        selector: 'tui-combo-box[strict]',
    }),
    __param(0, Inject(TuiComboBoxComponent))
], TuiComboBoxStrictDirective);

let TuiComboBoxModule = class TuiComboBoxModule {
};
TuiComboBoxModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiActiveZoneModule,
            TuiPrimitiveTextfieldModule,
            TuiHostedDropdownModule,
            TuiSelectOptionModule,
            TuiArrowModule,
        ],
        declarations: [
            TuiComboBoxComponent,
            TuiComboBoxStrictDirective,
            TuiComboBoxDirective,
        ],
        exports: [
            TuiComboBoxComponent,
            TuiComboBoxStrictDirective,
            TuiComboBoxDirective,
            TuiTextfieldComponent,
        ],
    })
], TuiComboBoxModule);

/**
 * Generated bundle index. Do not edit.
 */

export { COMBOBOX_OPTION, TUI_COMBO_BOX_PROVIDERS, TuiComboBoxComponent, TuiComboBoxDirective, TuiComboBoxModule, TuiComboBoxStrictDirective };
//# sourceMappingURL=taiga-ui-kit-components-combo-box.js.map
