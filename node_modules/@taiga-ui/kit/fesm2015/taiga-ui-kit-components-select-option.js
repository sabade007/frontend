import { __decorate, __param } from 'tslib';
import { Inject, ElementRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { typedFromEvent, TUI_DEFAULT_IDENTITY_MATCHER, isPresent } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiOptionComponent, TuiSvgModule, TuiScrollIntoViewModule } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { merge, EMPTY } from 'rxjs';
import { startWith, map, distinctUntilChanged } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

let TuiSelectOptionComponent = class TuiSelectOptionComponent {
    constructor(context, host, elementRef, option, control) {
        var _a;
        this.context = context;
        this.host = host;
        this.elementRef = elementRef;
        this.option = option;
        this.control = control;
        this.selected$ = merge((_a = this.control.valueChanges) !== null && _a !== void 0 ? _a : EMPTY, typedFromEvent(this.elementRef.nativeElement, 'animationstart')).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    ngOnInit() {
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(() => {
            if (isPresent(this.option.value) && this.host.checkOption) {
                this.host.checkOption(this.option.value);
            }
        });
    }
    get selected() {
        return (isPresent(this.option.value) &&
            isPresent(this.control.value) &&
            this.matcher(this.control.value, this.option.value));
    }
};
TuiSelectOptionComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiOptionComponent, decorators: [{ type: Inject, args: [TuiOptionComponent,] }] },
    { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
];
TuiSelectOptionComponent = __decorate([
    Component({
        selector: 'tui-select-option',
        template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\"></ng-container>\n<tui-svg\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    src=\"tuiIconCheckLarge\"\n    class=\"t-checkmark\"\n    [tuiScrollIntoView]=\"true\"\n></tui-svg>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["@keyframes retrigger{from{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-width:100%;animation:1s retrigger}.t-checkmark{margin:0 -.375rem 0 auto;border-left:5px solid transparent}.t-dummy{width:1.5rem}"]
    }),
    __param(0, Inject(POLYMORPHEUS_CONTEXT)),
    __param(1, Inject(TUI_DATA_LIST_HOST)),
    __param(2, Inject(ElementRef)),
    __param(3, Inject(TuiOptionComponent)),
    __param(4, Inject(NgControl))
], TuiSelectOptionComponent);
const TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);

let TuiSelectOptionModule = class TuiSelectOptionModule {
};
TuiSelectOptionModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiSvgModule, TuiScrollIntoViewModule],
        declarations: [TuiSelectOptionComponent],
        exports: [TuiSelectOptionComponent],
        entryComponents: [TuiSelectOptionComponent],
    })
], TuiSelectOptionModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SELECT_OPTION, TuiSelectOptionComponent, TuiSelectOptionModule };
//# sourceMappingURL=taiga-ui-kit-components-select-option.js.map
