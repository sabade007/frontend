import { __decorate, __param } from 'tslib';
import { ViewChildren, forwardRef, Input, Directive, Inject, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { tuiDefaultProp as tuiDefaultProp$1 } from '@taiga-ui/cdk/decorators';
import { TUI_DATA_LIST_ACCESSOR } from '@taiga-ui/core/tokens';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { EMPTY_QUERY, isNativeFocused, isPresent, tuiDefaultProp, TuiElementModule } from '@taiga-ui/cdk';
import { TuiOptionComponent, TUI_DATA_LIST_ACCESSOR as TUI_DATA_LIST_ACCESSOR$1, TuiDataListModule, TuiLoaderModule, TuiDataListDirective } from '@taiga-ui/core';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

let AbstractTuiDataListWrapper = class AbstractTuiDataListWrapper {
    constructor(itemsHandlers) {
        this.itemsHandlers = itemsHandlers;
        this.optionsQuery = EMPTY_QUERY;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.emptyContent = ``;
        this.size = `m`;
        this.itemContent = ({ $implicit }) => this.itemsHandlers.stringify($implicit);
    }
    getContext($implicit, { nativeElement }) {
        return { $implicit, active: isNativeFocused(nativeElement) };
    }
    getOptions(includeDisabled = false) {
        return this.optionsQuery
            .toArray()
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(isPresent);
    }
};
AbstractTuiDataListWrapper.ctorParameters = () => [
    { type: undefined }
];
__decorate([
    ViewChildren(forwardRef(() => TuiOptionComponent))
], AbstractTuiDataListWrapper.prototype, "optionsQuery", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "emptyContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "itemContent", void 0);
AbstractTuiDataListWrapper = __decorate([
    Directive()
], AbstractTuiDataListWrapper);

var TuiDataListGroupWrapperComponent_1;
let TuiDataListGroupWrapperComponent = TuiDataListGroupWrapperComponent_1 = class TuiDataListGroupWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers) {
        super(itemsHandlers);
        this.items = [];
        this.labels = [];
    }
};
TuiDataListGroupWrapperComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp$1()
], TuiDataListGroupWrapperComponent.prototype, "items", void 0);
__decorate([
    Input(),
    tuiDefaultProp$1()
], TuiDataListGroupWrapperComponent.prototype, "labels", void 0);
TuiDataListGroupWrapperComponent = TuiDataListGroupWrapperComponent_1 = __decorate([
    Component({
        selector: 'tui-data-list-wrapper[labels]',
        template: "<tui-data-list\n    *ngIf=\"items; else loading\"\n    [emptyContent]=\"emptyContent\"\n>\n    <tui-opt-group\n        *ngFor=\"let group of items; let index = index\"\n        [label]=\"labels[index]\"\n    >\n        <button\n            *ngFor=\"let item of group\"\n            #elementRef=\"elementRef\"\n            tuiElement\n            tuiOption\n            automation-id=\"tui-data-list-wrapper__option\"\n            [size]=\"size\"\n            [value]=\"item\"\n            [disabled]=\"disabledItemHandler(item)\"\n        >\n            <span\n                polymorpheus-outlet\n                class=\"t-content\"\n                [content]=\"itemContent\"\n                [context]=\"getContext(item, elementRef)\"\n            ></span>\n        </button>\n    </tui-opt-group>\n</tui-data-list>\n<ng-template #loading>\n    <tui-loader class=\"t-loader\"></tui-loader>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_DATA_LIST_ACCESSOR,
                useExisting: forwardRef(() => TuiDataListGroupWrapperComponent_1),
            },
        ],
        styles: [":host{display:block}.t-content{flex:1}.t-loader{margin:.75rem 0}"]
    }),
    __param(0, Inject(TUI_ITEMS_HANDLERS))
], TuiDataListGroupWrapperComponent);

var TuiDataListWrapperComponent_1;
let TuiDataListWrapperComponent = TuiDataListWrapperComponent_1 = class TuiDataListWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers) {
        super(itemsHandlers);
        this.items = [];
    }
};
TuiDataListWrapperComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiDataListWrapperComponent.prototype, "items", void 0);
TuiDataListWrapperComponent = TuiDataListWrapperComponent_1 = __decorate([
    Component({
        selector: 'tui-data-list-wrapper:not([labels])',
        template: "<tui-data-list\n    *ngIf=\"items; else loading\"\n    [emptyContent]=\"emptyContent\"\n>\n    <button\n        *ngFor=\"let item of items\"\n        #elementRef=\"elementRef\"\n        tuiElement\n        tuiOption\n        automation-id=\"tui-data-list-wrapper__option\"\n        [size]=\"size\"\n        [value]=\"item\"\n        [disabled]=\"disabledItemHandler(item)\"\n    >\n        <span\n            polymorpheus-outlet\n            class=\"t-content\"\n            [content]=\"itemContent\"\n            [context]=\"getContext(item, elementRef)\"\n        ></span>\n    </button>\n</tui-data-list>\n<ng-template #loading>\n    <tui-loader\n        automation-id=\"tui-data-list-wrapper__loader\"\n        class=\"t-loader\"\n    ></tui-loader>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_DATA_LIST_ACCESSOR$1,
                useExisting: forwardRef(() => TuiDataListWrapperComponent_1),
            },
        ],
        styles: [":host{display:block}.t-content{flex:1}.t-loader{margin:.75rem 0}"]
    }),
    __param(0, Inject(TUI_ITEMS_HANDLERS))
], TuiDataListWrapperComponent);

let TuiDataListWrapperModule = class TuiDataListWrapperModule {
};
TuiDataListWrapperModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiElementModule,
            TuiDataListModule,
            TuiLoaderModule,
        ],
        declarations: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent],
        exports: [
            TuiDataListWrapperComponent,
            TuiDataListGroupWrapperComponent,
            TuiDataListDirective,
        ],
    })
], TuiDataListWrapperModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiDataListWrapper, TuiDataListGroupWrapperComponent, TuiDataListWrapperComponent, TuiDataListWrapperModule };
//# sourceMappingURL=taiga-ui-kit-components-data-list-wrapper.js.map
