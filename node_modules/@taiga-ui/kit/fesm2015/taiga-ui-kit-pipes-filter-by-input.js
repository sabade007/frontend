import { __decorate, __param } from 'tslib';
import { isPresent, tuiPure, TUI_DEFAULT_MATCHER, TUI_DEFAULT_STRINGIFY, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';
import { isFlat } from '@taiga-ui/kit/utils';
import { Inject, Pipe, NgModule } from '@angular/core';

/**
 * @deprecated
 * TODO: 3.0 replace with {@link AbstractTuiFilterByInput}
 */
class TuiFilterByInputBase {
    get query() {
        return this.accessor.nativeFocusableElement
            ? this.accessor.nativeFocusableElement.value || ``
            : ``;
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return isFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return isPresent(match)
            ? items
            : items.filter(item => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find(item => isPresent(this.getMatch(item, stringify, query)));
        return isPresent(match)
            ? items
            : items.map(inner => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find(item => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
}
__decorate([
    tuiPure
], TuiFilterByInputBase.prototype, "filter", null);
class AbstractTuiFilterByInput extends TuiFilterByInputBase {
}

let TuiFilterByInputPipe = class TuiFilterByInputPipe extends AbstractTuiFilterByInput {
    constructor(accessor) {
        super();
        this.accessor = accessor;
    }
    transform(items, matcher = TUI_DEFAULT_MATCHER) {
        return this.filter(items, matcher, TUI_DEFAULT_STRINGIFY, this.query);
    }
};
TuiFilterByInputPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_FOCUSABLE_ITEM_ACCESSOR,] }] }
];
TuiFilterByInputPipe = __decorate([
    Pipe({
        name: `tuiFilterByInput`,
        pure: false,
    }),
    __param(0, Inject(TUI_FOCUSABLE_ITEM_ACCESSOR))
], TuiFilterByInputPipe);

let TuiFilterByInputWithPipe = class TuiFilterByInputWithPipe extends AbstractTuiFilterByInput {
    constructor(accessor) {
        super();
        this.accessor = accessor;
    }
    transform(items, stringify) {
        return this.filter(items, TUI_DEFAULT_MATCHER, stringify, this.query);
    }
};
TuiFilterByInputWithPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_FOCUSABLE_ITEM_ACCESSOR,] }] }
];
TuiFilterByInputWithPipe = __decorate([
    Pipe({
        name: `tuiFilterByInputWith`,
        pure: false,
    }),
    __param(0, Inject(TUI_FOCUSABLE_ITEM_ACCESSOR))
], TuiFilterByInputWithPipe);

let TuiFilterByInputPipeModule = class TuiFilterByInputPipeModule {
};
TuiFilterByInputPipeModule = __decorate([
    NgModule({
        declarations: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
        exports: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
    })
], TuiFilterByInputPipeModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiFilterByInput, TuiFilterByInputBase, TuiFilterByInputPipe, TuiFilterByInputPipeModule, TuiFilterByInputWithPipe };
//# sourceMappingURL=taiga-ui-kit-pipes-filter-by-input.js.map
