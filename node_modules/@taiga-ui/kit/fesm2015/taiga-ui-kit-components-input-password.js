import { __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiControl, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';
import { TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiHintControllerDirective, TUI_HINT_WATCHED_CONTROLLER, TUI_MODE, TuiPrimitiveTextfieldComponent, HINT_CONTROLLER_PROVIDER, MODE_PROVIDER, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';
import { combineLatest, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// TODO: 3.0 remove in ivy compilation
const PASSWORD_ICON_HIDE = ({ $implicit, }) => ($implicit === `s` ? `tuiIconEyeClosed` : `tuiIconHideLarge`);
const PASSWORD_ICON_SHOW = ({ $implicit, }) => $implicit === `s` ? `tuiIconEyeOpen` : `tuiIconShowLarge`;
/** Default values for the input password options. */
const TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {
    icons: {
        hide: PASSWORD_ICON_HIDE,
        show: PASSWORD_ICON_SHOW,
    },
};
const TUI_INPUT_PASSWORD_OPTIONS = new InjectionToken(`Default parameters for input password component`, {
    factory: () => TUI_INPUT_PASSWORD_DEFAULT_OPTIONS,
});
const tuiInputPasswordOptionsProvider = (options) => ({
    provide: TUI_INPUT_PASSWORD_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS), options),
});

var TuiInputPasswordComponent_1;
// @dynamic
let TuiInputPasswordComponent = TuiInputPasswordComponent_1 = class TuiInputPasswordComponent extends AbstractTuiControl {
    constructor(control, changeDetectorRef, textfieldSize, passwordTexts$, options, hintController, mode$) {
        super(control, changeDetectorRef);
        this.textfieldSize = textfieldSize;
        this.passwordTexts$ = passwordTexts$;
        this.options = options;
        this.hintController = hintController;
        this.mode$ = mode$;
        this.isPasswordHidden = true;
        this.computedMode$ = combineLatest([
            this.mode$.pipe(map(val => (val === 'onDark' ? 'onDark' : null))),
            this.hintController.change$.pipe(startWith(null), map(() => this.hintController.mode)),
        ]).pipe(map(([mode, controller]) => controller || mode), startWith(null));
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get icon() {
        return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;
    }
    get context() {
        return this.getContext(this.textfieldSize.size);
    }
    get inputType() {
        return this.isPasswordHidden || !this.interactive ? 'password' : 'text';
    }
    onValueChange(textValue) {
        this.updateValue(textValue);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    togglePasswordVisibility() {
        this.isPasswordHidden = !this.isPasswordHidden;
    }
    getFallbackValue() {
        return '';
    }
    getContext($implicit) {
        return { $implicit };
    }
};
TuiInputPasswordComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_PASSWORD_TEXTS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_INPUT_PASSWORD_OPTIONS,] }] },
    { type: TuiHintControllerDirective, decorators: [{ type: Inject, args: [TUI_HINT_WATCHED_CONTROLLER,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputPasswordComponent.prototype, "textfield", void 0);
__decorate([
    tuiPure
], TuiInputPasswordComponent.prototype, "getContext", null);
TuiInputPasswordComponent = TuiInputPasswordComponent_1 = __decorate([
    Component({
        selector: 'tui-input-password',
        template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [pseudoFocused]=\"pseudoFocused\"\n    [pseudoHovered]=\"pseudoHovered\"\n    [pseudoPressed]=\"pseudoPressed\"\n    [invalid]=\"computedInvalid\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [tuiTextfieldType]=\"inputType\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [iconContent]=\"interactive ? iconContent : null\"\n    [value]=\"value\"\n    (valueChange)=\"onValueChange($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (hoveredChange)=\"onHovered($event)\"\n    (pressedChange)=\"onPressed($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n\n<ng-template\n    #iconContent=\"polymorpheus\"\n    [polymorpheus]=\"type\"\n>\n    <span\n        *ngIf=\"passwordTexts$ | async as texts\"\n        polymorpheus-outlet\n        [content]=\"icon\"\n        [context]=\"context\"\n    >\n        <ng-template let-icon>\n            <tui-svg\n                automation-id=\"tui-password__icon\"\n                tuiHintId=\"not_required\"\n                class=\"t-icon\"\n                [tuiHint]=\"texts[0] && texts[1] && hintContent\"\n                [tuiHintDirection]=\"hintController.direction\"\n                [tuiHintMode]=\"computedMode$ | async\"\n                [src]=\"icon\"\n                (click)=\"togglePasswordVisibility()\"\n            ></tui-svg>\n        </ng-template>\n\n        <ng-template\n            #hintContent=\"polymorpheus\"\n            polymorpheus\n        >\n            {{ isPasswordHidden ? texts[0] : texts[1] }}\n        </ng-template>\n    </span>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputPasswordComponent_1),
            },
            {
                provide: AbstractTuiControl,
                useExisting: forwardRef(() => TuiInputPasswordComponent_1),
            },
            HINT_CONTROLLER_PROVIDER,
            MODE_PROVIDER,
        ],
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon{cursor:pointer;pointer-events:auto}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_SIZE)),
    __param(3, Inject(TUI_PASSWORD_TEXTS)),
    __param(4, Inject(TUI_INPUT_PASSWORD_OPTIONS)),
    __param(5, Inject(TUI_HINT_WATCHED_CONTROLLER)),
    __param(6, Inject(TUI_MODE))
], TuiInputPasswordComponent);

var TuiInputPasswordDirective_1;
let TuiInputPasswordDirective = TuiInputPasswordDirective_1 = class TuiInputPasswordDirective extends TuiAbstractTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    process(input) {
        this.input = input;
    }
    ngDoCheck() {
        if (this.input) {
            this.input.type = this.host.isPasswordHidden ? 'password' : 'text';
        }
    }
};
TuiInputPasswordDirective = TuiInputPasswordDirective_1 = __decorate([
    Directive({
        selector: 'tui-input-password',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiInputPasswordDirective_1),
            },
        ],
    })
], TuiInputPasswordDirective);

let TuiInputPasswordModule = class TuiInputPasswordModule {
};
TuiInputPasswordModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiSvgModule,
            TuiHintModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
        ],
        declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective],
        exports: [
            TuiInputPasswordComponent,
            TuiInputPasswordDirective,
            TuiTextfieldComponent,
        ],
    })
], TuiInputPasswordModule);

/**
 * Generated bundle index. Do not edit.
 */

export { PASSWORD_ICON_HIDE, PASSWORD_ICON_SHOW, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS, TUI_INPUT_PASSWORD_OPTIONS, TuiInputPasswordComponent, TuiInputPasswordDirective, TuiInputPasswordModule, tuiInputPasswordOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-password.js.map
