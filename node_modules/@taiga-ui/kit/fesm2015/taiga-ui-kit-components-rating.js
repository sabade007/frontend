import { __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AbstractTuiControl, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import { TuiSvgModule } from '@taiga-ui/core';

const TUI_RATING_DEFAULT_OPTIONS = {
    min: 0,
    max: 5,
    iconNormal: `tuiIconStarLarge`,
    iconFilled: `tuiIconStarFilledLarge`,
};
const TUI_RATING_OPTIONS = new InjectionToken(`Default parameters for rating component`, {
    factory: () => TUI_RATING_DEFAULT_OPTIONS,
});
const tuiRatingOptionsProvider = (options) => ({
    provide: TUI_RATING_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_RATING_DEFAULT_OPTIONS), options),
});

var TuiRatingComponent_1;
let TuiRatingComponent = TuiRatingComponent_1 = class TuiRatingComponent extends AbstractTuiControl {
    constructor(ngControl, changeDetectorRef, options) {
        super(ngControl, changeDetectorRef);
        this.options = options;
        this.min = this.options.min;
        this.max = this.options.max;
        this.iconNormal = this.options.iconNormal;
        this.iconFilled = this.options.iconFilled;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.focusableElement
            ? null
            : this.focusableElement.nativeElement;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get isFocusable() {
        return !(this.readOnly || this.disabled);
    }
    get percent() {
        return (100 * this.value) / this.max;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    setRateByReverseIndex(index) {
        this.updateValue(this.max - index);
    }
    setRate(value) {
        this.updateValue(value);
    }
    getFallbackValue() {
        return 0;
    }
};
TuiRatingComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_RATING_OPTIONS,] }] }
];
__decorate([
    ViewChild('focusableElement')
], TuiRatingComponent.prototype, "focusableElement", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRatingComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRatingComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRatingComponent.prototype, "iconNormal", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRatingComponent.prototype, "iconFilled", void 0);
__decorate([
    HostListener('focusin', ['true']),
    HostListener('focusout', ['false'])
], TuiRatingComponent.prototype, "onFocused", null);
TuiRatingComponent = TuiRatingComponent_1 = __decorate([
    Component({
        selector: 'tui-rating',
        template: "<label>\n    <ng-content></ng-content>\n\n    <div class=\"t-host\">\n        <div class=\"t-interactive\">\n            <tui-svg\n                *tuiRepeatTimes=\"let index of max\"\n                class=\"t-icon-filled\"\n                [src]=\"iconFilled\"\n                (click)=\"setRateByReverseIndex(index)\"\n            ></tui-svg>\n        </div>\n\n        <div\n            class=\"t-wrapper\"\n            [style.width.%]=\"percent\"\n        >\n            <tui-svg\n                *tuiRepeatTimes=\"let index of max\"\n                class=\"t-icon-filled\"\n                [src]=\"iconFilled\"\n            ></tui-svg>\n        </div>\n\n        <tui-svg\n            *tuiRepeatTimes=\"let item of max\"\n            [src]=\"iconNormal\"\n        ></tui-svg>\n\n        <input\n            #focusableElement\n            type=\"range\"\n            step=\"1\"\n            class=\"t-input\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [ngModel]=\"value\"\n            [tuiFocusable]=\"isFocusable\"\n            (ngModelChange)=\"setRate($event)\"\n        />\n    </div>\n</label>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiRatingComponent_1),
            },
        ],
        styles: [":host._disabled,:host._readonly{pointer-events:none}:host._disabled{opacity:var(--tui-disabled-opacity)}.t-host{position:relative;display:inline-flex}.t-input{pointer-events:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:0 0}.t-input::-webkit-slider-thumb{display:none}.t-input::-moz-range-thumb{opacity:0}.t-input,.t-interactive,.t-wrapper{position:absolute;left:0;bottom:0;width:100%;height:100%}.t-interactive,.t-wrapper{display:inline-flex;overflow:hidden;flex-direction:row-reverse;justify-content:flex-end;white-space:nowrap}.t-wrapper{pointer-events:none}.t-interactive{opacity:0}@media (hover:hover) and (pointer:fine){.t-interactive:hover{opacity:1}.t-interactive:hover~.t-wrapper{visibility:hidden}.t-interactive:hover .t-icon-filled{opacity:0}.t-interactive:hover .t-icon-filled:hover,.t-interactive:hover .t-icon-filled:hover~.t-icon-filled{opacity:1}}.t-icon-filled{position:relative;cursor:pointer}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_RATING_OPTIONS))
], TuiRatingComponent);

let TuiRatingModule = class TuiRatingModule {
};
TuiRatingModule = __decorate([
    NgModule({
        imports: [
            TuiSvgModule,
            TuiFocusableModule,
            TuiRepeatTimesModule,
            FormsModule,
            ReactiveFormsModule,
        ],
        declarations: [TuiRatingComponent],
        exports: [TuiRatingComponent],
    })
], TuiRatingModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_RATING_DEFAULT_OPTIONS, TUI_RATING_OPTIONS, TuiRatingComponent, TuiRatingModule, tuiRatingOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-rating.js.map
