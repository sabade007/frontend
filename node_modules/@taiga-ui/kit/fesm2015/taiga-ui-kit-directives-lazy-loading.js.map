{"version":3,"file":"taiga-ui-kit-directives-lazy-loading.js","sources":["ng://@taiga-ui/kit/directives/lazy-loading/lazy-loading.service.ts","ng://@taiga-ui/kit/directives/lazy-loading/lazy-loading.directive.ts","ng://@taiga-ui/kit/directives/lazy-loading/lazy-loading.module.ts","ng://@taiga-ui/kit/directives/lazy-loading/taiga-ui-kit-directives-lazy-loading.ts"],"sourcesContent":["import {ChangeDetectorRef, Inject, Injectable} from '@angular/core';\nimport {SafeResourceUrl} from '@angular/platform-browser';\nimport {IntersectionObserverService} from '@ng-web-apis/intersection-observer';\nimport {TuiDestroyService, watch} from '@taiga-ui/cdk';\nimport {Observable, of, Subject} from 'rxjs';\nimport {catchError, filter, mapTo, switchMap, take, takeUntil} from 'rxjs/operators';\n\n@Injectable()\nexport class TuiLazyLoadingService extends Observable<SafeResourceUrl | string> {\n    private readonly src$ = new Subject<SafeResourceUrl | string>();\n\n    constructor(\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(TuiDestroyService) destroy$: Observable<void>,\n        @Inject(IntersectionObserverService)\n        intersections$: Observable<IntersectionObserverEntry[]>,\n    ) {\n        super(subscriber =>\n            this.src$\n                .pipe(\n                    switchMap(src =>\n                        intersections$.pipe(\n                            filter(([{isIntersecting}]) => isIntersecting),\n                            mapTo(src),\n                            catchError(() => of(src)),\n                            watch(changeDetectorRef),\n                            take(1),\n                        ),\n                    ),\n                    takeUntil(destroy$),\n                )\n                .subscribe(subscriber),\n        );\n    }\n\n    next(src: SafeResourceUrl | string): void {\n        this.src$.next(src);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n} from '@angular/core';\nimport {SafeResourceUrl} from '@angular/platform-browser';\nimport {IntersectionObserverService} from '@ng-web-apis/intersection-observer';\nimport {TuiDestroyService} from '@taiga-ui/cdk';\n\nimport {TuiLazyLoadingService} from './lazy-loading.service';\n\n@Directive({\n    selector: 'img[loading=\"lazy\"]',\n    providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService],\n})\nexport class TuiLazyLoadingDirective {\n    @Input('src')\n    set srcSetter(src: SafeResourceUrl | string) {\n        this.src = this.supported ? src : null;\n        this.src$.next(src);\n    }\n\n    @HostBinding('style.animation')\n    animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';\n\n    @HostBinding('style.background')\n    background = 'var(--tui-clear-hover)';\n\n    @HostBinding('attr.src')\n    src: SafeResourceUrl | string | null = null;\n\n    constructor(\n        @Inject(TuiLazyLoadingService)\n        private readonly src$: TuiLazyLoadingService,\n        @Inject(ElementRef)\n        private readonly elementRef: ElementRef<HTMLImageElement>,\n    ) {\n        if (!this.supported) {\n            this.src$.subscribe(src => {\n                this.src = src;\n            });\n        }\n    }\n\n    private get supported(): boolean {\n        return 'loading' in this.elementRef.nativeElement;\n    }\n\n    @HostListener('load')\n    onLoad(): void {\n        this.background = '';\n        this.animation = '';\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiLazyLoadingDirective} from './lazy-loading.directive';\n\n@NgModule({\n    declarations: [TuiLazyLoadingDirective],\n    exports: [TuiLazyLoadingDirective],\n})\nexport class TuiLazyLoadingModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;IAQa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,UAAoC;IAG3E,YAC+B,iBAAoC,EACpC,QAA0B,EAErD,cAAuD;QAEvD,KAAK,CAAC,UAAU,IACZ,IAAI,CAAC,IAAI;aACJ,IAAI,CACD,SAAS,CAAC,GAAG,IACT,cAAc,CAAC,IAAI,CACf,MAAM,CAAC,CAAC,CAAC,EAAC,cAAc,EAAC,CAAC,KAAK,cAAc,CAAC,EAC9C,KAAK,CAAC,GAAG,CAAC,EACV,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EACzB,KAAK,CAAC,iBAAiB,CAAC,EACxB,IAAI,CAAC,CAAC,CAAC,CACV,CACJ,EACD,SAAS,CAAC,QAAQ,CAAC,CACtB;aACA,SAAS,CAAC,UAAU,CAAC,CAC7B,CAAC;QAvBW,SAAI,GAAG,IAAI,OAAO,EAA4B,CAAC;KAwB/D;IAED,IAAI,CAAC,GAA6B;QAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;EACJ;;YA1BqD,iBAAiB,uBAA9D,MAAM,SAAC,iBAAiB;YACY,UAAU,uBAA9C,MAAM,SAAC,iBAAiB;YAET,UAAU,uBADzB,MAAM,SAAC,2BAA2B;;AAN9B,qBAAqB;IADjC,UAAU,EAAE;IAKJ,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;IACzB,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;IACzB,WAAA,MAAM,CAAC,2BAA2B,CAAC,CAAA;GAN/B,qBAAqB,CA8BjC;;ICpBY,uBAAuB,GAApC,MAAa,uBAAuB;IAgBhC,YAEqB,IAA2B,EAE3B,UAAwC;QAFxC,SAAI,GAAJ,IAAI,CAAuB;QAE3B,eAAU,GAAV,UAAU,CAA8B;QAZ7D,cAAS,GAAG,mDAAmD,CAAC;QAGhE,eAAU,GAAG,wBAAwB,CAAC;QAGtC,QAAG,GAAoC,IAAI,CAAC;QAQxC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG;gBACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC,CAAC;SACN;KACJ;IAzBD,IAAI,SAAS,CAAC,GAA6B;QACvC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;IAwBD,IAAY,SAAS;QACjB,OAAO,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KACrD;IAGD,MAAM;QACF,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;EACJ;;YApB8B,qBAAqB,uBAD3C,MAAM,SAAC,qBAAqB;YAGA,UAAU,uBADtC,MAAM,SAAC,UAAU;;AAjBtB;IADC,KAAK,CAAC,KAAK,CAAC;wDAIZ;AAGD;IADC,WAAW,CAAC,iBAAiB,CAAC;0DACiC;AAGhE;IADC,WAAW,CAAC,kBAAkB,CAAC;2DACM;AAGtC;IADC,WAAW,CAAC,UAAU,CAAC;oDACoB;AAoB5C;IADC,YAAY,CAAC,MAAM,CAAC;qDAIpB;AArCQ,uBAAuB;IAJnC,SAAS,CAAC;QACP,QAAQ,EAAE,qBAAqB;QAC/B,SAAS,EAAE,CAAC,qBAAqB,EAAE,2BAA2B,EAAE,iBAAiB,CAAC;KACrF,CAAC;IAkBO,WAAA,MAAM,CAAC,qBAAqB,CAAC,CAAA;IAE7B,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;GAnBd,uBAAuB,CAsCnC;;IChDY,oBAAoB,GAAjC,MAAa,oBAAoB;EAAG;AAAvB,oBAAoB;IAJhC,QAAQ,CAAC;QACN,YAAY,EAAE,CAAC,uBAAuB,CAAC;QACvC,OAAO,EAAE,CAAC,uBAAuB,CAAC;KACrC,CAAC;GACW,oBAAoB,CAAG;;ACRpC;;;;;;"}