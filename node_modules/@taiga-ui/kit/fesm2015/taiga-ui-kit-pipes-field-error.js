import { __decorate, __param } from 'tslib';
import { Optional, Self, Inject, Pipe, Injector, NgModule } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { NgControl, FormArrayName, FormGroupName, FormGroupDirective } from '@angular/forms';
import { TuiValidationError, tuiPure } from '@taiga-ui/cdk';
import { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';
import { of, isObservable } from 'rxjs';
import { map } from 'rxjs/operators';

const EMPTY_RECORD = {};
// @dynamic
let TuiFieldErrorPipe = class TuiFieldErrorPipe {
    constructor(ngControl, formArrayName, formGroupName, formGroup, validationErrors) {
        this.ngControl = ngControl;
        this.formArrayName = formArrayName;
        this.formGroupName = formGroupName;
        this.formGroup = formGroup;
        this.validationErrors = validationErrors;
        this.order = [];
        if (this.ngControl && !this.ngControl.valueAccessor) {
            this.ngControl.valueAccessor = this;
        }
    }
    transform(order) {
        this.order = order;
        return this.computedError;
    }
    get computedError() {
        return (this.invalid && this.touched && this.error) || of(null);
    }
    registerOnChange() { }
    registerOnTouched() { }
    setDisabledState() { }
    writeValue() { }
    get error() {
        const { errorId } = this;
        if (!errorId) {
            return null;
        }
        const firstError = this.controlErrors[errorId];
        const errorContent = this.validationErrors[errorId];
        return this.getError(firstError, errorContent);
    }
    get invalid() {
        var _a;
        return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);
    }
    get touched() {
        var _a;
        return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);
    }
    get control() {
        var _a, _b, _c, _d;
        return (((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.formArrayName) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.formGroupName) === null || _c === void 0 ? void 0 : _c.control) || ((_d = this.formGroup) === null || _d === void 0 ? void 0 : _d.control) ||
            null);
    }
    get errorId() {
        return this.getErrorId(this.order, this.controlErrors);
    }
    get controlErrors() {
        var _a;
        return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;
    }
    getErrorId(order, controlErrors) {
        const id = order === null || order === void 0 ? void 0 : order.find(errorId => controlErrors[errorId]);
        const fallback = Object.keys(controlErrors)[0];
        return id || fallback || ``;
    }
    getError(firstError, errorContent) {
        if (firstError instanceof TuiValidationError) {
            return of(firstError);
        }
        if (errorContent === undefined && typeof firstError === `string`) {
            return of(new TuiValidationError(firstError));
        }
        if (isObservable(errorContent)) {
            return errorContent.pipe(map(error => new TuiValidationError(error || ``, firstError)));
        }
        return of(new TuiValidationError(errorContent || ``, firstError));
    }
};
TuiFieldErrorPipe.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: FormArrayName, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormArrayName,] }] },
    { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormGroupName,] }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormGroupDirective,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_VALIDATION_ERRORS,] }] }
];
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getErrorId", null);
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getError", null);
TuiFieldErrorPipe = __decorate([
    Pipe({
        name: `tuiFieldError`,
        pure: false,
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Optional()),
    __param(1, Self()),
    __param(1, Inject(FormArrayName)),
    __param(2, Optional()),
    __param(2, Self()),
    __param(2, Inject(FormGroupName)),
    __param(3, Optional()),
    __param(3, Self()),
    __param(3, Inject(FormGroupDirective)),
    __param(4, Inject(TUI_VALIDATION_ERRORS))
], TuiFieldErrorPipe);

// @dynamic
let TuiFieldErrorContentPipe = class TuiFieldErrorContentPipe {
    constructor(injector) {
        this.injector = injector;
        this.localInjector = Injector.create({
            providers: [{ provide: AsyncPipe }, { provide: TuiFieldErrorPipe }],
            parent: this.injector,
        });
        this.asyncPipe = this.localInjector.get(AsyncPipe);
        this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);
    }
    transform(order) {
        return this.getErrorContent(order);
    }
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
    getErrorContent(order) {
        const error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));
        if (!error) {
            return ``;
        }
        return typeof error.message === `function`
            ? error.message(error.context)
            : error.message;
    }
};
TuiFieldErrorContentPipe.ctorParameters = () => [
    { type: Injector, decorators: [{ type: Inject, args: [Injector,] }] }
];
TuiFieldErrorContentPipe = __decorate([
    Pipe({
        name: `tuiFieldErrorContent`,
        pure: false,
    }),
    __param(0, Inject(Injector))
], TuiFieldErrorContentPipe);

let TuiFieldErrorPipeModule = class TuiFieldErrorPipeModule {
};
TuiFieldErrorPipeModule = __decorate([
    NgModule({
        declarations: [TuiFieldErrorPipe, TuiFieldErrorContentPipe],
        exports: [TuiFieldErrorPipe, TuiFieldErrorContentPipe],
    })
], TuiFieldErrorPipeModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiFieldErrorContentPipe, TuiFieldErrorPipe, TuiFieldErrorPipeModule };
//# sourceMappingURL=taiga-ui-kit-pipes-field-error.js.map
