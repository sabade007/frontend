import { __decorate, __param } from 'tslib';
import { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiDay, tuiDefaultProp, TuiDestroyService, TuiPreventDefaultModule, TuiMapperPipeModule } from '@taiga-ui/cdk';
import { TuiMonthPipe, sizeBigger, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER, TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';
import { Subject, Observable } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiCalendarMonthModule } from '@taiga-ui/kit/components/calendar-month';

const TUI_INPUT_MONTH_PROVIDERS = [
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiInputMonthComponent),
    },
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(() => TuiInputMonthComponent),
    },
    LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER,
    TUI_MONTH_FORMATTER_PROVIDER,
    TuiMonthPipe,
];

// @dynamic
let TuiInputMonthComponent = class TuiInputMonthComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, textfieldSize, formatter) {
        super(control, changeDetectorRef);
        this.textfieldSize = textfieldSize;
        this.formatter = formatter;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.open = false;
        this.activeYear = this.value || TuiDay.currentLocal();
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get calendarIcon() {
        return sizeBigger(this.textfieldSize.size)
            ? 'tuiIconCalendarLarge'
            : 'tuiIconCalendar';
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.updateValue(null);
        this.onOpenChange(true);
    }
    onMonthClick(month) {
        this.updateValue(month);
        this.close();
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onOpenChange(open) {
        if (open && this.value) {
            this.activeYear = this.value;
        }
        this.open = open;
    }
    toggle() {
        this.open = !this.open;
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    close() {
        this.open = false;
    }
};
TuiInputMonthComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldSizeDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_SIZE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputMonthComponent.prototype, "textfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "disabledItemHandler", void 0);
TuiInputMonthComponent = __decorate([
    Component({
        selector: 'tui-input-month',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"calendarIcon\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"(value | tuiMapper: formatter | async) || ''\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            [(year)]=\"activeYear\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n",
        providers: TUI_INPUT_MONTH_PROVIDERS,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_SIZE)),
    __param(3, Inject(TUI_MONTH_FORMATTER))
], TuiInputMonthComponent);

var TuiInputMonthDirective_1;
let TuiInputMonthDirective = TuiInputMonthDirective_1 = class TuiInputMonthDirective extends TuiAbstractTextfieldHost {
    constructor(host, formatter, destroy$) {
        super(host);
        this.value$ = new Subject();
        this.localizedValue = '';
        this.value$
            .pipe(distinctUntilChanged(), switchMap(formatter), takeUntil(destroy$))
            .subscribe(localizedValue => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue;
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
};
TuiInputMonthDirective.ctorParameters = () => [
    { type: TuiInputMonthComponent, decorators: [{ type: Inject, args: [AbstractTuiControl,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MONTH_FORMATTER,] }] },
    { type: Observable, decorators: [{ type: Self }, { type: Inject, args: [TuiDestroyService,] }] }
];
TuiInputMonthDirective = TuiInputMonthDirective_1 = __decorate([
    Directive({
        selector: 'tui-input-month',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiInputMonthDirective_1),
            },
            TuiDestroyService,
        ],
    }),
    __param(0, Inject(AbstractTuiControl)),
    __param(1, Inject(TUI_MONTH_FORMATTER)),
    __param(2, Self()), __param(2, Inject(TuiDestroyService))
], TuiInputMonthDirective);

let TuiInputMonthModule = class TuiInputMonthModule {
};
TuiInputMonthModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TuiCalendarMonthModule,
            TuiHostedDropdownModule,
            TuiPrimitiveTextfieldModule,
            TuiSvgModule,
            TuiPreventDefaultModule,
            TuiMapperPipeModule,
        ],
        declarations: [TuiInputMonthComponent, TuiInputMonthDirective],
        exports: [TuiInputMonthComponent, TuiInputMonthDirective, TuiTextfieldComponent],
    })
], TuiInputMonthModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_MONTH_PROVIDERS, TuiInputMonthComponent, TuiInputMonthDirective, TuiInputMonthModule };
//# sourceMappingURL=taiga-ui-kit-components-input-month.js.map
