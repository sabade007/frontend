import { __decorate, __param } from 'tslib';
import { InjectionToken, Inject, Input, HostBinding, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { sizeBigger, TuiSvgModule } from '@taiga-ui/core';
import { stringHashToHsl } from '@taiga-ui/kit/utils/format';
import { CommonModule } from '@angular/common';
import { TuiLazyLoadingModule } from '@taiga-ui/kit/directives';

/** Default values for the avatar options. */
const TUI_AVATAR_DEFAULT_OPTIONS = {
    size: `m`,
    autoColor: false,
    rounded: false,
};
const TUI_AVATAR_OPTIONS = new InjectionToken(`Default parameters for avatar component`, {
    factory: () => TUI_AVATAR_DEFAULT_OPTIONS,
});
const tuiAvatarOptionsProvider = (options) => ({
    provide: TUI_AVATAR_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_AVATAR_DEFAULT_OPTIONS), options),
});

let TuiAvatarComponent = class TuiAvatarComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.text = '';
        this.autoColor = this.options.autoColor;
        this.rounded = this.options.rounded;
        this.avatarUrl = null;
        this.isUrlValid = false;
    }
    set avatarUrlSetter(avatarUrl) {
        this.avatarUrl = avatarUrl;
        this.isUrlValid = !!avatarUrl && !this.iconAvatar;
    }
    get bgColor() {
        return this.autoColor ? stringHashToHsl(this.text) : '';
    }
    get hasAvatar() {
        return this.avatarUrl !== null && this.isUrlValid;
    }
    get iconAvatar() {
        var _a;
        return (typeof this.avatarUrl === 'string' && !!((_a = this.avatarUrl) === null || _a === void 0 ? void 0 : _a.startsWith('tuiIcon')));
    }
    get computedText() {
        if (this.hasAvatar || this.iconAvatar || this.text === '') {
            return '';
        }
        const words = this.text.split(' ');
        return words.length > 1 && sizeBigger(this.size)
            ? words[0].slice(0, 1) + words[1].slice(0, 1)
            : words[0].slice(0, 1);
    }
    get stringAvatar() {
        return this.iconAvatar ? String(this.avatarUrl) : '';
    }
    onError() {
        this.isUrlValid = false;
    }
};
TuiAvatarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_AVATAR_OPTIONS,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "size", void 0);
__decorate([
    Input('avatarUrl'),
    tuiRequiredSetter()
], TuiAvatarComponent.prototype, "avatarUrlSetter", null);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "text", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "autoColor", void 0);
__decorate([
    Input(),
    HostBinding('class._rounded'),
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "rounded", void 0);
__decorate([
    HostBinding('style.background')
], TuiAvatarComponent.prototype, "bgColor", null);
__decorate([
    HostBinding('class._has-avatar')
], TuiAvatarComponent.prototype, "hasAvatar", null);
TuiAvatarComponent = __decorate([
    Component({
        selector: 'tui-avatar',
        template: "<img\n    *ngIf=\"isUrlValid\"\n    loading=\"lazy\"\n    class=\"t-image\"\n    [attr.alt]=\"text\"\n    [src]=\"avatarUrl || ''\"\n    (error)=\"onError()\"\n/>\n<tui-svg\n    *ngIf=\"stringAvatar\"\n    class=\"t-icon\"\n    [src]=\"stringAvatar\"\n></tui-svg>\n<span class=\"t-text\">{{ computedText }}</span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:flex;flex-shrink:0;border-radius:var(--tui-radius-m);color:var(--tui-secondary-active);text-align:center;text-transform:uppercase;justify-content:center;align-items:center;background:var(--tui-avatar-background,currentColor);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden}:host[data-size=xs]{font:var(--tui-font-text-s);width:1.5rem;height:1.5rem}:host[data-size='s']{font:var(--tui-font-text-m);width:2rem;height:2rem}:host[data-size='m']{font:var(--tui-font-text-l);width:3rem;height:3rem}:host[data-size='l']{font:var(--tui-font-heading-5);width:4rem;height:4rem;border-radius:var(--tui-radius-l)}:host[data-size=xl]{font:var(--tui-font-heading-3);width:6rem;height:6rem;border-radius:var(--tui-radius-l)}:host[data-size=xxl]{font:var(--tui-font-heading-1);width:9rem;height:9rem;border-radius:var(--tui-radius-l)}:host._has-avatar{background-color:transparent}:host._rounded{border-radius:100%}.t-image{width:100%;height:100%;object-fit:cover}.t-text{color:var(--tui-avatar-color,var(--tui-text-01))}.t-icon{position:absolute;top:0;left:0;width:100%;height:100%;color:var(--tui-avatar-color,var(--tui-text-01))}:host[data-size=xs] .t-icon{transform:scale(.5)}:host[data-size='m'] .t-icon{transform:scale(1.6)}:host[data-size='l'] .t-icon{transform:scale(2)}:host[data-size=xl] .t-icon{transform:scale(3.2)}::ng-deep .tui-avatar-stack{display:flex;width:-webkit-min-content;width:-moz-min-content;width:min-content}:host-context(.tui-avatar-stack)[data-size=xs]{margin-right:-.625rem;box-shadow:0 0 0 1px var(--tui-avatar-border,var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size='s']{margin-right:-.875rem;box-shadow:0 0 0 1px var(--tui-avatar-border,var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size='m']{margin-right:-1.25rem;box-shadow:0 0 0 2px var(--tui-avatar-border,var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size='l']{margin-right:-1.625rem;box-shadow:0 0 0 2px var(--tui-avatar-border,var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=xl]{margin-right:-2.25rem;box-shadow:0 0 0 3px var(--tui-avatar-border,var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=xxl]{margin-right:-3.375rem;box-shadow:0 0 0 3px var(--tui-avatar-border,var(--tui-base-01))}"]
    }),
    __param(0, Inject(TUI_AVATAR_OPTIONS))
], TuiAvatarComponent);

let TuiAvatarModule = class TuiAvatarModule {
};
TuiAvatarModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule],
        declarations: [TuiAvatarComponent],
        exports: [TuiAvatarComponent],
    })
], TuiAvatarModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_AVATAR_DEFAULT_OPTIONS, TUI_AVATAR_OPTIONS, TuiAvatarComponent, TuiAvatarModule, tuiAvatarOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-avatar.js.map
