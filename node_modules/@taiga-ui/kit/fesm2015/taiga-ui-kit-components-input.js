import { __decorate, __param } from 'tslib';
import { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, ContentChild, TemplateRef, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, isNativeFocused, setNativeFocused, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiDataListDirective, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_VALUE_ACCESSOR_PROVIDER, FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { CommonModule } from '@angular/common';

const TUI_INPUT_PROVIDERS = [
    TUI_VALUE_ACCESSOR_PROVIDER,
    FIXED_DROPDOWN_CONTROLLER_PROVIDER,
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiInputComponent),
    },
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(() => TuiInputComponent),
    },
    {
        provide: TUI_DATA_LIST_HOST,
        useExisting: forwardRef(() => TuiInputComponent),
    },
];

let TuiInputComponent = class TuiInputComponent extends AbstractTuiControl {
    constructor(control, changeDetectorRef) {
        super(control, changeDetectorRef);
        this.icon = null;
        this.iconAlign = 'left';
        this.datalist = '';
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (isNativeFocused(this.nativeFocusableElement) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    onValueChange(value) {
        this.updateValue(value);
        this.open = true;
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    handleOption(item) {
        this.setNativeValue(String(item));
        this.focusInput();
        this.updateValue(String(item));
        this.open = false;
    }
    getFallbackValue() {
        return '';
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    }
    setNativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
};
TuiInputComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
];
__decorate([
    ViewChild(TuiHostedDropdownComponent)
], TuiInputComponent.prototype, "hostedDropdown", void 0);
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiInputComponent.prototype, "textfield", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputComponent.prototype, "iconAlign", void 0);
__decorate([
    ContentChild(TuiDataListDirective, { read: TemplateRef })
], TuiInputComponent.prototype, "datalist", void 0);
TuiInputComponent = __decorate([
    Component({
        selector: 'tui-input',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input__textfield\"\n        class=\"t-textfield\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoHovered]=\"computedHovered\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"icon\"\n        [iconAlign]=\"iconAlign\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [value]=\"value\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_INPUT_PROVIDERS,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef))
], TuiInputComponent);

var TuiInputDirective_1;
let TuiInputDirective = TuiInputDirective_1 = class TuiInputDirective extends TuiAbstractTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
};
TuiInputDirective = TuiInputDirective_1 = __decorate([
    Directive({
        selector: 'tui-input',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiInputDirective_1),
            },
        ],
    })
], TuiInputDirective);

let TuiInputModule = class TuiInputModule {
};
TuiInputModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TuiActiveZoneModule,
            TuiPrimitiveTextfieldModule,
            TuiHostedDropdownModule,
        ],
        declarations: [TuiInputComponent, TuiInputDirective],
        exports: [TuiInputComponent, TuiInputDirective, TuiTextfieldComponent],
    })
], TuiInputModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_PROVIDERS, TuiInputComponent, TuiInputDirective, TuiInputModule };
//# sourceMappingURL=taiga-ui-kit-components-input.js.map
