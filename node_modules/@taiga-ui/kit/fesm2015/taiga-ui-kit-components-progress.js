import { __decorate, __param } from 'tslib';
import { CommonModule } from '@angular/common';
import { Input, HostBinding, Component, ChangeDetectionStrategy, ElementRef, Inject, Directive, ViewChild, Injectable, Pipe, NgModule } from '@angular/core';
import { tuiDefaultProp, px, isEdgeOlderThan, CHROMIUM_EDGE_START_VERSION, isIE, TuiResizeService, tuiPure, TuiDestroyService, tuiIsEdgeOlderThan, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import { USER_AGENT, WINDOW } from '@ng-web-apis/common';
import { Observable, of, timer } from 'rxjs';
import { map, delay } from 'rxjs/operators';

let TuiProgressBarComponent = class TuiProgressBarComponent {
    constructor() {
        this.size = 'm';
    }
};
__decorate([
    Input(),
    HostBinding('style.--tui-progress-color')
], TuiProgressBarComponent.prototype, "color", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiProgressBarComponent.prototype, "size", void 0);
TuiProgressBarComponent = __decorate([
    Component({
        selector: 'progress[tuiProgressBar]',
        template: '',
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;color:var(--tui-progress-color,currentColor);background-color:var(--tui-base-03);display:block;width:100%;color:var(--tui-primary);border-radius:var(--tui-radius-xs);overflow:hidden}:host::-webkit-progress-value{-webkit-transition:width var(--tui-duration) linear;transition:width var(--tui-duration) linear;background:var(--tui-progress-color,currentColor)}:host::-moz-progress-bar{background:var(--tui-progress-color,currentColor)}:host::-webkit-progress-bar{background-color:var(--tui-base-03)}:host[data-size='m']{height:1.5rem}:host[data-size='s']{border-radius:var(--tui-radius-xs);height:.5rem}:host[data-size='s']::-webkit-progress-value{border-radius:var(--tui-radius-xs)}:host[data-size='s']::-moz-progress-bar{border-radius:var(--tui-radius-xs)}:host-context(label[tuiProgressLabel]):not(:first-child){position:absolute;top:0;left:0;width:100%;height:100%;background-color:transparent}:host-context(label[tuiProgressLabel]):not(:first-child)::-webkit-progress-bar{background-color:transparent}"]
    })
], TuiProgressBarComponent);

/**
 * TODO: 3.0 move inside {@link TuiProgressColorSegmentsDirective} (as a private method)
 * (after deletion of {@link TuiProgressColorSegmentsPipe} and {@link TuiProgressColorSegmentsAsyncPipe})
 */
const calculateColorSegments = (colors, progressWidth) => {
    const segmentWidth = Math.ceil(progressWidth / colors.length);
    const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${px(i * segmentWidth)} ${px((i + 1) * segmentWidth)}`, ``);
    return `linear-gradient(to right ${colorsString})`;
};

let TuiProgressColorSegmentsDirective = class TuiProgressColorSegmentsDirective {
    constructor(elementRef, resize$, userAgent) {
        this.elementRef = elementRef;
        this.resize$ = resize$;
        this.userAgent = userAgent;
        this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) ||
            isIE(this.userAgent);
        this.colors = [];
    }
    get calcSegments$() {
        return this.resize$.pipe(map(() => this.isOldBrowsers
            ? this.colors[0]
            : calculateColorSegments(this.colors, this.elementRef.nativeElement.offsetWidth)));
    }
};
TuiProgressColorSegmentsDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
__decorate([
    Input('tuiProgressColorSegments')
], TuiProgressColorSegmentsDirective.prototype, "colors", void 0);
__decorate([
    tuiPure
], TuiProgressColorSegmentsDirective.prototype, "calcSegments$", null);
TuiProgressColorSegmentsDirective = __decorate([
    Directive({
        selector: 'progress[tuiProgressBar][tuiProgressColorSegments]',
        host: {
            '[$.style.--tui-progress-color]': 'calcSegments$',
            '($.style.--tui-progress-color)': '0',
        },
        providers: [TuiDestroyService, TuiResizeService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiResizeService)),
    __param(2, Inject(USER_AGENT))
], TuiProgressColorSegmentsDirective);

// @dynamic
let TuiProgressCircleComponent = class TuiProgressCircleComponent {
    constructor(userAgent, win, el) {
        this.userAgent = userAgent;
        this.win = win;
        this.el = el;
        this.value = 0;
        this.max = 1;
        this.color = null;
        this.size = 'm';
        this.animationDelay$ = of(true).pipe(delay(0));
    }
    get progressPercentage() {
        return this.value / this.max;
    }
    get oldEdgeRadiusFallback() {
        if (!tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {
            return null;
        }
        const strokeWidth = parseInt(this.win.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);
        return (this.el.nativeElement.offsetWidth - strokeWidth) / 2;
    }
};
TuiProgressCircleComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    ViewChild('progressCircle', { static: true })
], TuiProgressCircleComponent.prototype, "progressCircle", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "max", void 0);
__decorate([
    Input(),
    HostBinding('style.--tui-progress-color'),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "color", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "size", void 0);
__decorate([
    HostBinding('style.--progress-percentage')
], TuiProgressCircleComponent.prototype, "progressPercentage", null);
TuiProgressCircleComponent = __decorate([
    Component({
        selector: 'tui-progress-circle',
        template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<svg\n    height=\"100%\"\n    width=\"100%\"\n    aria-hidden=\"true\"\n    class=\"t-svg\"\n>\n    <circle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-track\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n\n    <circle\n        #progressCircle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-progress\"\n        [class.t-progress_filled]=\"animationDelay$ | async\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n</svg>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem}:host[data-size='s']{width:2em;height:2em}:host[data-size='s'] .t-track{\n  r: 0.75em;\n  stroke-width:.5em}:host[data-size='s'] .t-progress{\n  r: 0.75em;\n  stroke-width:.5em;stroke-dasharray:4.71238898em;stroke-dashoffset:4.71238898em}:host[data-size='s'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(4.71238898em - var(--progress-percentage) * 4.71238898em)}:host[data-size='m']{width:3em;height:3em}:host[data-size='m'] .t-track{\n  r: 1.3125em;\n  stroke-width:.375em}:host[data-size='m'] .t-progress{\n  r: 1.3125em;\n  stroke-width:.375em;stroke-dasharray:8.24668072em;stroke-dashoffset:8.24668072em}:host[data-size='m'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(8.24668072em - var(--progress-percentage) * 8.24668072em)}:host[data-size='l']{width:4em;height:4em}:host[data-size='l'] .t-track{\n  r: 1.8125em;\n  stroke-width:.375em}:host[data-size='l'] .t-progress{\n  r: 1.8125em;\n  stroke-width:.375em;stroke-dasharray:11.38827337em;stroke-dashoffset:11.38827337em}:host[data-size='l'] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(11.38827337em - var(--progress-percentage) * 11.38827337em)}:host[data-size=xl]{width:7em;height:7em}:host[data-size=xl] .t-track{\n  r: 3.3125em;\n  stroke-width:.375em}:host[data-size=xl] .t-progress{\n  r: 3.3125em;\n  stroke-width:.375em;stroke-dasharray:20.81305133em;stroke-dashoffset:20.81305133em}:host[data-size=xl] .t-progress_filled{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(20.81305133em - var(--progress-percentage) * 20.81305133em)}.t-track{fill:transparent;stroke:var(--tui-base-03)}.t-progress{fill:transparent;stroke:var(--tui-progress-color,currentColor);stroke-linecap:round}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg{overflow:unset}"]
    }),
    __param(0, Inject(USER_AGENT)),
    __param(1, Inject(WINDOW)),
    __param(2, Inject(ElementRef))
], TuiProgressCircleComponent);

let TuiProgressLabelComponent = class TuiProgressLabelComponent {
};
TuiProgressLabelComponent = __decorate([
    Component({
        selector: 'label[tuiProgressLabel]',
        template: "<ng-content select=\"progress\"></ng-content>\n<ng-content select=\"tui-progress-circle\"></ng-content>\n<span class=\"t-label\">\n    <ng-content></ng-content>\n</span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:inline-block}.t-label{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;font:var(--tui-font-text-s);color:var(--tui-text-01);flex-direction:column;justify-content:center;align-items:center}"]
    })
], TuiProgressLabelComponent);

// eslint-disable-next-line @typescript-eslint/naming-convention
function nonNegativeInt(value) {
    return Number.isInteger(value) && value >= 0;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function positiveInt(value) {
    return Number.isInteger(value) && value > 0;
}
let TuiProgressSegmentedComponent = class TuiProgressSegmentedComponent {
    constructor() {
        this.value = 0;
        this.max = 1;
        this.size = 'm';
        this.colors = 'var(--tui-primary)';
    }
    getActiveColor(index = 0) {
        return typeof this.colors === 'string'
            ? this.colors
            : this.colors[index] || this.colors[this.colors.length - 1];
    }
};
__decorate([
    Input(),
    tuiDefaultProp(nonNegativeInt, 'Must be non-negative integer between 0 and max')
], TuiProgressSegmentedComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp(positiveInt, 'Must be positive integer')
], TuiProgressSegmentedComponent.prototype, "max", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size')
], TuiProgressSegmentedComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiProgressSegmentedComponent.prototype, "colors", void 0);
TuiProgressSegmentedComponent = __decorate([
    Component({
        selector: 'tui-progress-segmented',
        template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<span\n    *tuiRepeatTimes=\"let index of max\"\n    aria-hidden=\"true\"\n    class=\"t-segment\"\n    [style.background]=\"index < value ? getActiveColor(index) : null\"\n></span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:flex}.t-segment{transition-property:background-color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background-color:var(--tui-base-03)}.t-segment:not(:last-child){margin-right:.25rem}:host[data-size='s'] .t-segment{height:.25rem}:host[data-size='m'] .t-segment{height:.5rem}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}"]
    })
], TuiProgressSegmentedComponent);

// TODO: 3.0 delete
let AbstractTuiColorSegments = class AbstractTuiColorSegments {
    constructor(userAgent, elementRef) {
        this.userAgent = userAgent;
        this.elementRef = elementRef;
        this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) ||
            isIE(this.userAgent);
    }
    calculate(colors) {
        if (this.isOldBrowsers) {
            return colors[0];
        }
        const elementWidth = this.elementRef.nativeElement.offsetWidth;
        return calculateColorSegments(colors, elementWidth);
    }
};
AbstractTuiColorSegments.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
AbstractTuiColorSegments = __decorate([
    Injectable(),
    __param(0, Inject(USER_AGENT)),
    __param(1, Inject(ElementRef))
], AbstractTuiColorSegments);

// TODO: 3.0 delete
let TuiProgressColorSegmentsPipe = class TuiProgressColorSegmentsPipe extends AbstractTuiColorSegments {
    /**
     * @deprecated use tuiProgressColorSegments directive instead
     * {@link TuiProgressColorSegmentsDirective}
     * @example: `<progress tuiProgressBar [tuiProgressColorSegments]="colors">`
     */
    transform(colors) {
        return this.calculate(colors);
    }
};
TuiProgressColorSegmentsPipe = __decorate([
    Pipe({ name: `tuiProgressColorSegments` })
], TuiProgressColorSegmentsPipe);

// TODO: 3.0 delete
let TuiProgressColorSegmentsAsyncPipe = class TuiProgressColorSegmentsAsyncPipe extends AbstractTuiColorSegments {
    /**
     * @deprecated use tuiProgressColorSegments directive instead
     * {@link TuiProgressColorSegmentsDirective}
     * @example: `<progress tuiProgressBar [tuiProgressColorSegments]="colors">`
     */
    transform(colors) {
        return timer(0).pipe(map(() => this.calculate(colors)));
    }
};
TuiProgressColorSegmentsAsyncPipe = __decorate([
    Pipe({ name: `tuiProgressColorSegmentsAsync` })
], TuiProgressColorSegmentsAsyncPipe);

let TuiProgressModule = class TuiProgressModule {
};
TuiProgressModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiRepeatTimesModule],
        declarations: [
            TuiProgressBarComponent,
            TuiProgressColorSegmentsDirective,
            TuiProgressColorSegmentsPipe,
            TuiProgressColorSegmentsAsyncPipe,
            TuiProgressCircleComponent,
            TuiProgressLabelComponent,
            TuiProgressSegmentedComponent,
        ],
        exports: [
            TuiProgressBarComponent,
            TuiProgressCircleComponent,
            TuiProgressColorSegmentsDirective,
            TuiProgressColorSegmentsPipe,
            TuiProgressColorSegmentsAsyncPipe,
            TuiProgressLabelComponent,
            TuiProgressSegmentedComponent,
        ],
    })
], TuiProgressModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiColorSegments, TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsAsyncPipe, TuiProgressColorSegmentsDirective, TuiProgressColorSegmentsPipe, TuiProgressLabelComponent, TuiProgressModule, TuiProgressSegmentedComponent, nonNegativeInt, positiveInt };
//# sourceMappingURL=taiga-ui-kit-components-progress.js.map
