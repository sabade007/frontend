import { __decorate, __param } from 'tslib';
import { forwardRef, InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, ContentChild, TemplateRef, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiNullableControl, isNativeFocused, setNativeFocused, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT, TuiTextfieldCleanerDirective, TUI_TEXTFIELD_CLEANER, TuiPrimitiveTextfieldComponent, TuiHostedDropdownComponent, TuiDataListDirective, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_ARROW_MODE, TuiArrowModule } from '@taiga-ui/kit/components/arrow';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// TODO: 3.0 remove in ivy compilation
const SELECT_OPTION = TUI_SELECT_OPTION;
const TUI_SELECT_PROVIDERS = [
    {
        provide: AbstractTuiControl,
        useExisting: forwardRef(() => TuiSelectComponent),
    },
    {
        provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => TuiSelectComponent),
    },
    {
        provide: TUI_DATA_LIST_HOST,
        useExisting: forwardRef(() => TuiSelectComponent),
    },
    {
        provide: TUI_OPTION_CONTENT,
        useValue: SELECT_OPTION,
    },
    FIXED_DROPDOWN_CONTROLLER_PROVIDER,
];

const TUI_SELECT_DEFAULT_OPTIONS = {
    valueContent: ``,
};
const TUI_SELECT_OPTIONS = new InjectionToken(`Default parameters for select component`, {
    factory: () => TUI_SELECT_DEFAULT_OPTIONS,
});
const tuiSelectOptionsProvider = (options) => ({
    provide: TUI_SELECT_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_SELECT_DEFAULT_OPTIONS), options),
});

let TuiSelectComponent = class TuiSelectComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, textfieldCleaner, arrowMode, itemsHandlers, options) {
        super(control, changeDetectorRef);
        this.textfieldCleaner = textfieldCleaner;
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.options = options;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.valueContent = this.options.valueContent;
        this.datalist = '';
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return (isNativeFocused(this.nativeFocusableElement) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get computedValue() {
        return this.value === null ? '' : this.stringify(this.value) || ' ';
    }
    get computedContent() {
        return this.valueContent || this.computedValue;
    }
    onValueChange(value) {
        if (!value) {
            this.updateValue(null);
        }
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onKeyDownDelete() {
        if (this.textfieldCleaner.cleaner) {
            this.updateValue(null);
        }
    }
    handleOption(option) {
        var _a;
        this.focusInput();
        this.updateValue(option);
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    }
};
TuiSelectComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiTextfieldCleanerDirective, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_CLEANER,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ARROW_MODE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_SELECT_OPTIONS,] }] }
];
__decorate([
    ViewChild(TuiPrimitiveTextfieldComponent)
], TuiSelectComponent.prototype, "textfield", void 0);
__decorate([
    ViewChild(TuiHostedDropdownComponent)
], TuiSelectComponent.prototype, "hostedDropdown", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiSelectComponent.prototype, "stringify", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiSelectComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiSelectComponent.prototype, "valueContent", void 0);
__decorate([
    ContentChild(TuiDataListDirective, { read: TemplateRef })
], TuiSelectComponent.prototype, "datalist", void 0);
TuiSelectComponent = __decorate([
    Component({
        selector: 'tui-select',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"datalist || ''\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoHovered]=\"pseudoHovered\"\n        [pseudoPressed]=\"pseudoPressed\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [iconContent]=\"arrow\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n        (hoveredChange)=\"onHovered($event)\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n        <div\n            *ngIf=\"value !== null\"\n            polymorpheus-outlet\n            automation-id=\"tui-select__value\"\n            class=\"t-value\"\n            [content]=\"computedContent\"\n            [context]=\"{$implicit: value, active: computedFocused}\"\n        >\n            <ng-template let-primitiveValue>\n                <div class=\"t-primitive-value\">{{ primitiveValue }}</div>\n            </ng-template>\n        </div>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_SELECT_PROVIDERS,
        styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;width:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_TEXTFIELD_CLEANER)),
    __param(3, Inject(TUI_ARROW_MODE)),
    __param(4, Inject(TUI_ITEMS_HANDLERS)),
    __param(5, Inject(TUI_SELECT_OPTIONS))
], TuiSelectComponent);

var TuiSelectDirective_1;
let TuiSelectDirective = TuiSelectDirective_1 = class TuiSelectDirective extends TuiAbstractTextfieldHost {
    get readOnly() {
        return true;
    }
    get value() {
        return this.host.computedValue;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
};
TuiSelectDirective = TuiSelectDirective_1 = __decorate([
    Directive({
        selector: 'tui-select',
        providers: [
            {
                provide: TUI_TEXTFIELD_HOST,
                useExisting: forwardRef(() => TuiSelectDirective_1),
            },
        ],
    })
], TuiSelectDirective);

let TuiSelectModule = class TuiSelectModule {
};
TuiSelectModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            PolymorpheusModule,
            TuiActiveZoneModule,
            TuiPrimitiveTextfieldModule,
            TuiHostedDropdownModule,
            TuiSelectOptionModule,
            TuiArrowModule,
        ],
        declarations: [TuiSelectComponent, TuiSelectDirective],
        exports: [TuiSelectComponent, TuiSelectDirective, TuiTextfieldComponent],
    })
], TuiSelectModule);

/**
 * Generated bundle index. Do not edit.
 */

export { SELECT_OPTION, TUI_SELECT_DEFAULT_OPTIONS, TUI_SELECT_OPTIONS, TUI_SELECT_PROVIDERS, TuiSelectComponent, TuiSelectDirective, TuiSelectModule, tuiSelectOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-select.js.map
