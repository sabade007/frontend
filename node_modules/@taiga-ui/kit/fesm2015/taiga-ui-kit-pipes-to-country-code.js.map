{"version":3,"file":"taiga-ui-kit-pipes-to-country-code.js","sources":["ng://@taiga-ui/kit/pipes/to-country-code/to-country-code.pipe.ts","ng://@taiga-ui/kit/pipes/to-country-code/to-country-code.module.ts","ng://@taiga-ui/kit/pipes/to-country-code/taiga-ui-kit-pipes-to-country-code.ts"],"sourcesContent":["import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {CHAR_PLUS} from '@taiga-ui/cdk';\nimport {TuiCountryIsoCode} from '@taiga-ui/i18n';\nimport {TUI_COUNTRIES_MASKS} from '@taiga-ui/kit/tokens';\nimport {\n    tuiGetMaxAllowedPhoneLength,\n    tuiIsoToCountryCode,\n    tuiNotKzRegion,\n} from '@taiga-ui/kit/utils';\n\n// @dynamic\n@Pipe({\n    name: `tuiToCountryCode`,\n})\nexport class TuiToCountryCodePipe implements PipeTransform {\n    constructor(\n        @Inject(TUI_COUNTRIES_MASKS)\n        private readonly countriesMasks: Record<TuiCountryIsoCode, string>,\n    ) {}\n\n    transform(\n        value: string,\n        countries: readonly TuiCountryIsoCode[],\n    ): TuiCountryIsoCode | undefined {\n        return countries.find(countryIsoCode => {\n            const ruCodeTest =\n                countryIsoCode === TuiCountryIsoCode.RU &&\n                /^[78]/.test(value) &&\n                /^(?!880[1-9 ])/.test(value) &&\n                value.length + 1 ===\n                    tuiGetMaxAllowedPhoneLength(\n                        this.countriesMasks,\n                        TuiCountryIsoCode.RU,\n                    );\n\n            const matched =\n                ruCodeTest ||\n                (value.startsWith(\n                    tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(\n                        CHAR_PLUS,\n                        ``,\n                    ),\n                ) &&\n                    value.length + 1 ===\n                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));\n\n            if (matched) {\n                switch (countryIsoCode) {\n                    case TuiCountryIsoCode.RU:\n                        return tuiNotKzRegion(value);\n                    case TuiCountryIsoCode.KZ:\n                        return !tuiNotKzRegion(value);\n                    default:\n                        return true;\n                }\n            }\n\n            return false;\n        });\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiToCountryCodePipe} from './to-country-code.pipe';\n\n@NgModule({\n    declarations: [TuiToCountryCodePipe],\n    exports: [TuiToCountryCodePipe],\n})\nexport class TuiExtractCountryCodeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;AAUA;IAIa,oBAAoB,GAAjC,MAAa,oBAAoB;IAC7B,YAEqB,cAAiD;QAAjD,mBAAc,GAAd,cAAc,CAAmC;KAClE;IAEJ,SAAS,CACL,KAAa,EACb,SAAuC;QAEvC,OAAO,SAAS,CAAC,IAAI,CAAC,cAAc;YAChC,MAAM,UAAU,GACZ,cAAc,KAAK,iBAAiB,CAAC,EAAE;gBACvC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;gBACnB,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC5B,KAAK,CAAC,MAAM,GAAG,CAAC;oBACZ,2BAA2B,CACvB,IAAI,CAAC,cAAc,EACnB,iBAAiB,CAAC,EAAE,CACvB,CAAC;YAEV,MAAM,OAAO,GACT,UAAU;iBACT,KAAK,CAAC,UAAU,CACb,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,OAAO,CAC5D,SAAS,EACT,EAAE,CACL,CACJ;oBACG,KAAK,CAAC,MAAM,GAAG,CAAC;wBACZ,2BAA2B,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;YAE9E,IAAI,OAAO,EAAE;gBACT,QAAQ,cAAc;oBAClB,KAAK,iBAAiB,CAAC,EAAE;wBACrB,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;oBACjC,KAAK,iBAAiB,CAAC,EAAE;wBACrB,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAClC;wBACI,OAAO,IAAI,CAAC;iBACnB;aACJ;YAED,OAAO,KAAK,CAAC;SAChB,CAAC,CAAC;KACN;EACJ;;4CA5CQ,MAAM,SAAC,mBAAmB;;AAFtB,oBAAoB;IAHhC,IAAI,CAAC;QACF,IAAI,EAAE,kBAAkB;KAC3B,CAAC;IAGO,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;GAFvB,oBAAoB,CA8ChC;;ICpDY,2BAA2B,GAAxC,MAAa,2BAA2B;EAAG;AAA9B,2BAA2B;IAJvC,QAAQ,CAAC;QACN,YAAY,EAAE,CAAC,oBAAoB,CAAC;QACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;KAClC,CAAC;GACW,2BAA2B,CAAG;;ACR3C;;;;;;"}