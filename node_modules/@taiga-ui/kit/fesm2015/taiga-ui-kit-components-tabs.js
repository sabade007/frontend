import { __decorate, __param } from 'tslib';
import { TemplateRef, Inject, Directive, InjectionToken, ElementRef, Optional, HostBinding, Component, ChangeDetectionStrategy, EventEmitter, Renderer2, ChangeDetectorRef, ContentChildren, forwardRef, Input, Output, HostListener, ViewChild, NgZone, NgModule } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { TuiDestroyService, TuiFocusVisibleService, typedFromEvent, tuiCustomEvent, isNativeFocused, setNativeFocused, TUI_IS_IOS, TUI_IS_ANDROID, EMPTY_QUERY, moveFocus, TuiResizeService, tuiDefaultProp, tuiClamp, tuiAssertIsHTMLElement, getClosestFocusable, toInt, tuiZonefree, px, TuiFocusableModule } from '@taiga-ui/cdk';
import { TuiRouterLinkActiveService, MODE_PROVIDER, TUI_MODE, TuiHostedDropdownModule, TuiSvgModule } from '@taiga-ui/core';
import { TUI_TAB_MARGIN, TUI_MOBILE_AWARE, TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { EMPTY, merge, identity, Observable, ReplaySubject, of } from 'rxjs';
import { DOCUMENT, CommonModule } from '@angular/common';
import { MutationObserverService, MUTATION_OBSERVER_INIT } from '@ng-web-apis/mutation-observer';
import { filter, map, tap, debounceTime, startWith, takeUntil, switchMap, mapTo, share } from 'rxjs/operators';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { asCallable } from '@tinkoff/ng-event-plugins';

let TuiTabDirective = class TuiTabDirective {
    constructor(template) {
        this.template = template;
    }
};
TuiTabDirective.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
];
TuiTabDirective = __decorate([
    Directive({
        selector: 'ng-template[tuiTab]',
    }),
    __param(0, Inject(TemplateRef))
], TuiTabDirective);

const TUI_TAB_ACTIVATE = `tui-tab-activate`;
const TUI_TAB_EVENT = new InjectionToken(`Stream of tab activation events`);
const TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            DOCUMENT,
            TuiRouterLinkActiveService,
            [new Optional(), MutationObserverService],
            [new Optional(), RouterLinkActive],
        ],
        useFactory: tabActiveFactory,
    },
    MODE_PROVIDER,
];
// eslint-disable-next-line @typescript-eslint/naming-convention
function tabActiveFactory({ nativeElement }, documentRef, routerLinkActiveService, mutationObserverService, routerLinkActive) {
    const mutationObserver = routerLinkActive && mutationObserverService
        ? mutationObserverService.pipe(filter(() => routerLinkActive.isActive))
        : EMPTY;
    return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches(`button`) ? typedFromEvent(nativeElement, `click`) : EMPTY).pipe(map(() => nativeElement.dispatchEvent(tuiCustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }, documentRef))));
}

let TuiTabComponent = class TuiTabComponent {
    constructor(routerLinkActive, elementRef, mode$, event$, margin, mobileAware, isIos, isAndroid, focusVisible$) {
        this.routerLinkActive = routerLinkActive;
        this.elementRef = elementRef;
        this.mode$ = mode$;
        this.event$ = event$;
        this.margin = margin;
        this.focusVisible = false;
        this.isIos = mobileAware && isIos;
        this.isAndroid = mobileAware && isAndroid;
        focusVisible$.subscribe(visible => {
            this.focusVisible = visible;
        });
    }
    get isActive() {
        return !!this.routerLinkActive && this.routerLinkActive.isActive;
    }
    ngOnDestroy() {
        if (isNativeFocused(this.elementRef.nativeElement)) {
            setNativeFocused(this.elementRef.nativeElement, false);
        }
    }
};
TuiTabComponent.ctorParameters = () => [
    { type: RouterLinkActive, decorators: [{ type: Optional }, { type: Inject, args: [RouterLinkActive,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_TAB_EVENT,] }] },
    { type: Number, decorators: [{ type: Inject, args: [TUI_TAB_MARGIN,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_MOBILE_AWARE,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_ANDROID,] }] },
    { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] }
];
__decorate([
    HostBinding('class._ios')
], TuiTabComponent.prototype, "isIos", void 0);
__decorate([
    HostBinding('class._android')
], TuiTabComponent.prototype, "isAndroid", void 0);
__decorate([
    HostBinding('class._focus-visible')
], TuiTabComponent.prototype, "focusVisible", void 0);
__decorate([
    HostBinding('class._active')
], TuiTabComponent.prototype, "isActive", null);
TuiTabComponent = __decorate([
    Component({
        selector: 'a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]',
        template: "<ng-container *ngIf=\"event$ | async\"></ng-container>\n<span class=\"t-highlight\">\n    <ng-content></ng-content>\n</span>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_TAB_PROVIDERS,
        host: {
            '($.data-mode.attr)': 'mode$',
            '[style.--tui-tab-margin.px]': 'margin',
            type: 'button',
        },
        styles: [":host-context(._underline):hover{box-shadow:inset 0 -2px var(--tui-base-03)}:host-context([tuiTabs]>):first-child,:host-context([tuiTabs]>:first-child),:host-context(tui-tabs>):first-child,:host-context(tui-tabs>:first-child){margin-left:0}:host{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;position:relative;display:flex;flex-shrink:0;height:100%;box-sizing:border-box;justify-content:space-between;align-items:center;white-space:nowrap;cursor:pointer;outline:0;text-decoration:none;color:inherit;transition-property:color,box-shadow,opacity;margin-left:var(--tui-tab-margin,1.5rem)}:host:disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}:host:not([data-mode])._active{opacity:1;color:var(--tui-text-01);box-shadow:none}:host[data-mode=onDark]{color:rgba(255,255,255,.72)}:host[data-mode=onDark]._active,:host[data-mode=onDark]:hover{color:#fff}:host[data-mode=onDark]._focus-visible .t-highlight{background:var(--tui-clear-inverse);color:var(--tui-text-01)}:host[data-mode=onLight]{color:var(--tui-text-02)}:host[data-mode=onLight]._active,:host[data-mode=onLight]:hover{color:var(--tui-text-01)}:host[data-mode=onLight]._focus-visible .t-highlight{background:var(--tui-text-01);color:#fff}:host._focus-visible .t-highlight{background:var(--tui-selection)}:host._android{transition-property:opacity;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;height:3rem;flex:1;flex-shrink:0;justify-content:center;margin:0;text-transform:uppercase;color:var(--tui-base-09);opacity:.5;font-size:.875rem;font-weight:500;letter-spacing:-.008125rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif}:host._android:hover{box-shadow:none}:host._android._active{opacity:1;color:var(--tui-base-09)}:host._android .t-highlight{width:auto}:host._ios{height:1.75rem;flex:1;flex-shrink:0;justify-content:center;margin:0;color:var(--tui-base-01);opacity:1;font-size:.8125rem;font-weight:500;letter-spacing:-.005rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif}:host._ios:hover{box-shadow:none}:host._ios._active{font-size:.875rem;font-weight:600;color:var(--tui-link)}:host._ios .t-highlight{width:auto}@media (hover:hover){:host:hover{color:var(--tui-text-01)}}.t-highlight{display:inline-flex;width:100%;align-items:center;justify-content:inherit}.t-highlight ::ng-deep>*{flex-shrink:0}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(RouterLinkActive)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TUI_MODE)),
    __param(3, Inject(TUI_TAB_EVENT)),
    __param(4, Inject(TUI_TAB_MARGIN)),
    __param(5, Inject(TUI_MOBILE_AWARE)),
    __param(6, Inject(TUI_IS_IOS)),
    __param(7, Inject(TUI_IS_ANDROID)),
    __param(8, Inject(TuiFocusVisibleService))
], TuiTabComponent);

const TUI_TABS_DEFAULT_OPTIONS = {
    underline: true,
    exposeActive: true,
    itemsLimit: Infinity,
    minMoreWidth: 0,
};
const TUI_TABS_OPTIONS = new InjectionToken(`Default parameters for tabs component`, {
    factory: () => TUI_TABS_DEFAULT_OPTIONS,
});
const tuiTabsOptionsProvider = (options) => ({
    provide: TUI_TABS_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_TABS_DEFAULT_OPTIONS), options),
});

const TAB_ACTIVE_CLASS = '_active';
// TODO: 3.0 remove in ivy compilation
const OBSERVER_INIT = {
    childList: true,
};
// @dynamic
let TuiTabsComponent = class TuiTabsComponent {
    constructor(options, elementRef, renderer, changeDetectorRef, resize$, isIos, isAndroid, mobileAware) {
        this.options = options;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.children = EMPTY_QUERY;
        this.underline = this.options.underline;
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        this.isIos = mobileAware && isIos;
        this.isAndroid = mobileAware && isAndroid;
        resize$.pipe(filter(() => this.underline)).subscribe(() => {
            changeDetectorRef.detectChanges();
        });
    }
    set activeItemIndexSetter(index) {
        this.activeItemIndex = index;
        this.scrollTo(this.tabs[index]);
    }
    get tabs() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        return this.tabs[this.activeItemIndex] || null;
    }
    onActivate(element) {
        const index = this.tabs.findIndex(tab => tab === element);
        if (index === this.activeItemIndex) {
            return;
        }
        this.activeItemIndexSetter = index;
        this.activeItemIndexChange.emit(index);
    }
    onKeyDownArrow(current, step) {
        const { tabs } = this;
        moveFocus(tabs.indexOf(current), tabs, step);
    }
    ngAfterViewChecked() {
        const { tabs, activeElement } = this;
        tabs.forEach(nativeElement => {
            this.renderer.removeClass(nativeElement, TAB_ACTIVE_CLASS);
            this.renderer.setAttribute(nativeElement, 'tabIndex', '-1');
        });
        if (activeElement) {
            this.renderer.addClass(activeElement, TAB_ACTIVE_CLASS);
            this.renderer.setAttribute(activeElement, 'tabIndex', '0');
        }
    }
    scrollTo(element) {
        if (!element) {
            return;
        }
        const { offsetLeft, offsetWidth } = element;
        const { nativeElement } = this.elementRef;
        if (offsetLeft < nativeElement.scrollLeft) {
            nativeElement.scrollLeft = offsetLeft;
        }
        if (offsetLeft + offsetWidth >
            nativeElement.scrollLeft + nativeElement.offsetWidth) {
            nativeElement.scrollLeft =
                offsetLeft + offsetWidth - nativeElement.offsetWidth;
        }
    }
};
TuiTabsComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TABS_OPTIONS,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_ANDROID,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_MOBILE_AWARE,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => TuiTabComponent))
], TuiTabsComponent.prototype, "children", void 0);
__decorate([
    Input(),
    HostBinding('class._underline'),
    tuiDefaultProp()
], TuiTabsComponent.prototype, "underline", void 0);
__decorate([
    Input('activeItemIndex')
], TuiTabsComponent.prototype, "activeItemIndexSetter", null);
__decorate([
    Output()
], TuiTabsComponent.prototype, "activeItemIndexChange", void 0);
__decorate([
    HostBinding('class._ios')
], TuiTabsComponent.prototype, "isIos", void 0);
__decorate([
    HostBinding('class._android')
], TuiTabsComponent.prototype, "isAndroid", void 0);
__decorate([
    HostListener(`${TUI_TAB_ACTIVATE}.stop`, ['$event.target'])
], TuiTabsComponent.prototype, "onActivate", null);
__decorate([
    HostListener('keydown.arrowRight.prevent', ['$event.target', '1']),
    HostListener('keydown.arrowLeft.prevent', ['$event.target', '-1'])
], TuiTabsComponent.prototype, "onKeyDownArrow", null);
TuiTabsComponent = __decorate([
    Component({
        selector: 'tui-tabs, nav[tuiTabs]',
        template: "<ng-container *ngIf=\"children.changes | async\"></ng-container>\n<ng-content></ng-content>\n<tui-underline\n    *ngIf=\"underline\"\n    class=\"t-underline\"\n    [element]=\"activeElement\"\n></tui-underline>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            TuiDestroyService,
            TuiResizeService,
            MutationObserverService,
            {
                provide: MUTATION_OBSERVER_INIT,
                useValue: OBSERVER_INIT,
            },
        ],
        styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:relative;z-index:0;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host._android{height:auto}:host._ios{height:auto;border:2px solid transparent;border-radius:.5625rem;background:var(--tui-link);box-shadow:none}.t-underline{z-index:-1}"]
    }),
    __param(0, Inject(TUI_TABS_OPTIONS)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(ChangeDetectorRef)),
    __param(4, Inject(TuiResizeService)),
    __param(5, Inject(TUI_IS_IOS)),
    __param(6, Inject(TUI_IS_ANDROID)),
    __param(7, Inject(TUI_MOBILE_AWARE))
], TuiTabsComponent);

// eslint-disable-next-line @typescript-eslint/naming-convention
function tabsRefreshFactory(resize$, mutations$, destroy$, { body }, { nativeElement }, changeDetectorRef) {
    return merge(resize$, mutations$.pipe(tap(() => changeDetectorRef.detectChanges()))).pipe(
    // Ignoring cases when host is detached from DOM
    filter(() => body.contains(nativeElement)), debounceTime(0), startWith(null), takeUntil(destroy$));
}
// TODO: 3.0 remove in ivy compilation
const MUTATION_CONFIG = {
    childList: true,
    subtree: true,
    characterData: true,
};
const TABS_REFRESH = new InjectionToken(`Refresh stream`);
const TABS_PROVIDERS = [
    TuiResizeService,
    TuiDestroyService,
    MutationObserverService,
    {
        provide: MUTATION_OBSERVER_INIT,
        useValue: MUTATION_CONFIG,
    },
    {
        provide: TABS_REFRESH,
        deps: [
            TuiResizeService,
            MutationObserverService,
            TuiDestroyService,
            DOCUMENT,
            ElementRef,
            ChangeDetectorRef,
        ],
        useFactory: tabsRefreshFactory,
    },
];

// @dynamic
let TuiTabsWithMoreComponent = class TuiTabsWithMoreComponent {
    constructor(options, margin, refresh$, elementRef, changeDetectorRef, moreWord$) {
        this.options = options;
        this.margin = margin;
        this.refresh$ = refresh$;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.moreWord$ = moreWord$;
        this.maxIndex = Infinity;
        this.moreContent = '';
        this.dropdownContent = '';
        this.underline = this.options.underline;
        this.activeItemIndex = 0;
        this.itemsLimit = this.options.itemsLimit;
        this.activeItemIndexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.open = false;
    }
    // TODO: Improve performance
    get tabs() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        var _a;
        const { tabs } = this;
        const safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
        return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex
            ? tabs[safeActiveIndex] || null
            : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get isMoreVisible() {
        return this.lastVisibleIndex < this.items.length - 1;
    }
    get isMoreFocusable() {
        return !!this.moreButton && isNativeFocused(this.moreButton.nativeElement);
    }
    get isMoreActive() {
        return (this.open ||
            (!this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex));
    }
    get isMoreAlone() {
        return this.lastVisibleIndex < 0 && !this.options.exposeActive;
    }
    get lastVisibleIndex() {
        if (this.itemsLimit + 1 >= this.items.length) {
            return this.maxIndex;
        }
        const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive
            ? 1
            : 2;
        return Math.min(this.itemsLimit - offset, this.maxIndex);
    }
    ngAfterViewInit() {
        this.refresh$
            .pipe(map(() => this.getMaxIndex()), filter(maxIndex => this.maxIndex !== maxIndex))
            .subscribe(maxIndex => {
            this.maxIndex = maxIndex;
            this.changeDetectorRef.detectChanges();
        });
    }
    onActiveItemIndexChange(activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    }
    onClick(index) {
        this.open = false;
        this.focusMore();
        this.updateActiveItemIndex(index);
    }
    onArrowRight(event) {
        tuiAssertIsHTMLElement(event.target);
        if (isNativeFocused(event.target)) {
            this.focusMore();
        }
    }
    onArrowLeft() {
        const { tabs } = this;
        let index = tabs.length - 2;
        while (index >= 0) {
            setNativeFocused(tabs[index]);
            if (isNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    }
    onWrapperArrow(event, wrapper, prev) {
        const button = event.target;
        const target = getClosestFocusable(button, prev, wrapper);
        if (target) {
            setNativeFocused(target);
        }
    }
    isOverflown(index) {
        return index !== this.activeItemIndex || !this.options.exposeActive;
    }
    shouldShow(index) {
        return index > this.lastVisibleIndex && this.isOverflown(index);
    }
    focusMore() {
        if (this.moreButton) {
            setNativeFocused(this.moreButton.nativeElement);
        }
    }
    getMaxIndex() {
        const { tabs, activeItemIndex, margin } = this;
        if (tabs.length < 2) {
            return 0;
        }
        const { exposeActive, minMoreWidth } = this.options;
        const { clientWidth } = this.elementRef.nativeElement;
        const activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
        const moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
        let maxIndex = tabs.length - 2;
        let total = tabs.reduce((acc, { scrollWidth }) => acc + scrollWidth, 0) +
            maxIndex * margin -
            tabs[tabs.length - 1].scrollWidth;
        if (total <= clientWidth) {
            return Infinity;
        }
        while (maxIndex) {
            total -= tabs[maxIndex].scrollWidth + margin;
            maxIndex--;
            const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
            const activeOffset = activeDisplaced ? activeWidth + margin : 0;
            const currentWidth = total + activeOffset + moreWidth + margin;
            // Needed for different rounding of visible and hidden elements scrollWidth
            const safetyOffset = toInt(this.maxIndex === maxIndex - 1);
            if (currentWidth + safetyOffset < clientWidth) {
                return maxIndex;
            }
        }
        return -1;
    }
    updateActiveItemIndex(activeItemIndex) {
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
        this.maxIndex = this.getMaxIndex();
    }
};
TuiTabsWithMoreComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_TABS_OPTIONS,] }] },
    { type: Number, decorators: [{ type: Inject, args: [TUI_TAB_MARGIN,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TABS_REFRESH,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MORE_WORD,] }] }
];
__decorate([
    ViewChild(TuiTabComponent, { read: ElementRef })
], TuiTabsWithMoreComponent.prototype, "moreButton", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "moreContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "dropdownContent", void 0);
__decorate([
    Input(),
    HostBinding('class._underline'),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "underline", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "itemsLimit", void 0);
__decorate([
    Output()
], TuiTabsWithMoreComponent.prototype, "activeItemIndexChange", void 0);
__decorate([
    ContentChildren(TuiTabDirective, { read: TemplateRef })
], TuiTabsWithMoreComponent.prototype, "items", void 0);
TuiTabsWithMoreComponent = __decorate([
    Component({
        selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
        template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div class=\"t-wrapper\">\n    <tui-tabs\n        class=\"t-tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div [class.t-overflown]=\"isOverflown(index)\">\n                    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"t-more_wrapper\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [content]=\"dropdownContent || dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            [class._active]=\"isMoreActive\"\n            [class.t-no-margin]=\"isMoreAlone\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <span\n                polymorpheus-outlet\n                [content]=\"moreContent || more\"\n            ></span>\n        </button>\n        <ng-template #more>\n            {{ moreWord$ | async }}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"t-icon\"\n                [class.t-icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"t-dropdown\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        >\n            <div\n                *ngFor=\"let item of items; let index = index\"\n                (tui-tab-activate)=\"onClick(index)\"\n            >\n                <ng-container\n                    *ngIf=\"shouldShow(index)\"\n                    [ngTemplateOutlet]=\"item\"\n                ></ng-container>\n            </div>\n        </div>\n    </ng-template>\n    <tui-underline\n        *ngIf=\"underline\"\n        [element]=\"activeElement\"\n    ></tui-underline>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TABS_PROVIDERS,
        styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper{position:relative;display:flex}.t-tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper{height:100%;pointer-events:none}.t-more_wrapper button{pointer-events:auto}.t-icon{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.5rem 0}.t-dropdown ::ng-deep [tuiTab]{width:100%;height:2.75rem;justify-content:flex-start;margin:0;padding:0 1rem;color:var(--tui-text-02)}.t-dropdown ::ng-deep [tuiTab]:before{display:none}.t-dropdown ::ng-deep [tuiTab]._active,.t-dropdown ::ng-deep [tuiTab]:focus,.t-dropdown ::ng-deep [tuiTab]:hover{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}.t-no-margin{margin-left:0}"]
    }),
    __param(0, Inject(TUI_TABS_OPTIONS)),
    __param(1, Inject(TUI_TAB_MARGIN)),
    __param(2, Inject(TABS_REFRESH)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(ChangeDetectorRef)),
    __param(5, Inject(TUI_MORE_WORD))
], TuiTabsWithMoreComponent);

let TuiUnderlineComponent = class TuiUnderlineComponent {
    constructor({ nativeElement }, ngZone, animationFrame$, mobileAware, ios, android, mode$) {
        this.ngZone = ngZone;
        this.animationFrame$ = animationFrame$;
        this.mobileAware = mobileAware;
        this.ios = ios;
        this.android = android;
        this.mode$ = mode$;
        this.element$ = new ReplaySubject(1);
        this.refresh$ = this.element$.pipe(switchMap(element => element
            ? this.animationFrame$.pipe(mapTo(element), tuiZonefree(this.ngZone))
            : of(null)), share());
        this.isIos = this.mobileAware && this.ios;
        this.isAndroid = this.mobileAware && this.android;
        this.transition$ = asCallable(this.element$.pipe(map(element => element && 'all'), debounceTime(50)));
        this.transform$ = asCallable(this.refresh$.pipe(map(element => element ? `translate3d(${px(element.offsetLeft)}, 0, 0)` : null)));
        this.width$ = asCallable(this.refresh$.pipe(map(element => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
        nativeElement['$.style.transitionProperty'] = this.transition$;
        nativeElement['$.style.transform'] = this.transform$;
        nativeElement['$.style.width.px'] = this.width$;
    }
    set element(element) {
        this.element$.next(element);
    }
};
TuiUnderlineComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_MOBILE_AWARE,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_ANDROID,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiUnderlineComponent.prototype, "element", null);
__decorate([
    HostBinding('class._ios')
], TuiUnderlineComponent.prototype, "isIos", void 0);
__decorate([
    HostBinding('class._android')
], TuiUnderlineComponent.prototype, "isAndroid", void 0);
__decorate([
    HostListener('$.style.transitionProperty')
], TuiUnderlineComponent.prototype, "transition$", void 0);
__decorate([
    HostListener('$.style.transform')
], TuiUnderlineComponent.prototype, "transform$", void 0);
__decorate([
    HostListener('$.style.width.px')
], TuiUnderlineComponent.prototype, "width$", void 0);
TuiUnderlineComponent = __decorate([
    Component({
        selector: 'tui-underline',
        template: '',
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [MODE_PROVIDER],
        host: {
            '($.data-mode.attr)': 'mode$',
        },
        styles: [":host{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;transition-property:none;pointer-events:none}:host._ios{border-radius:.4375rem;background:var(--tui-base-01);box-shadow:0 .1875rem .0625rem rgba(0,0,0,.04),0 .1875rem .5rem rgba(0,0,0,.12)}:host._android{box-shadow:inset 0 -.1875rem var(--tui-link)}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-02)}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(ANIMATION_FRAME)),
    __param(3, Inject(TUI_MOBILE_AWARE)),
    __param(4, Inject(TUI_IS_IOS)),
    __param(5, Inject(TUI_IS_ANDROID)),
    __param(6, Inject(TUI_MODE))
], TuiUnderlineComponent);

let TuiTabsModule = class TuiTabsModule {
};
TuiTabsModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TuiHostedDropdownModule,
            TuiSvgModule,
            TuiFocusableModule,
            PolymorpheusModule,
        ],
        declarations: [
            TuiTabsWithMoreComponent,
            TuiTabsComponent,
            TuiTabComponent,
            TuiUnderlineComponent,
            TuiTabDirective,
        ],
        exports: [
            TuiTabsWithMoreComponent,
            TuiTabsComponent,
            TuiTabComponent,
            TuiTabDirective,
        ],
    })
], TuiTabsModule);

/**
 * Generated bundle index. Do not edit.
 */

export { MUTATION_CONFIG, OBSERVER_INIT, TABS_PROVIDERS, TABS_REFRESH, TUI_TABS_DEFAULT_OPTIONS, TUI_TABS_OPTIONS, TUI_TAB_ACTIVATE, TUI_TAB_EVENT, TUI_TAB_PROVIDERS, TuiTabComponent, TuiTabDirective, TuiTabsComponent, TuiTabsModule, TuiTabsWithMoreComponent, TuiUnderlineComponent, tabActiveFactory, tabsRefreshFactory, tuiTabsOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-tabs.js.map
