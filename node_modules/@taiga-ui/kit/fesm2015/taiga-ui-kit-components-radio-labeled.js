import { __decorate, __param } from 'tslib';
import { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiNullableControl, TUI_DEFAULT_IDENTITY_MATCHER, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core';
import { TuiRadioComponent, TuiRadioModule } from '@taiga-ui/kit/components/radio';
import { CommonModule } from '@angular/common';

var TuiRadioLabeledComponent_1;
let TuiRadioLabeledComponent = TuiRadioLabeledComponent_1 = class TuiRadioLabeledComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, modeDirective) {
        super(control, changeDetectorRef);
        this.modeDirective = modeDirective;
        this.size = 'm';
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.pseudoDisabled = false;
    }
    get nativeFocusableElement() {
        return this.radio ? this.radio.nativeFocusableElement : null;
    }
    get focused() {
        return !!this.radio && this.radio.focused;
    }
    get computedDisabled() {
        return this.disabled || this.pseudoDisabled;
    }
    get mode() {
        return this.modeDirective ? this.modeDirective.mode : null;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    onModelChange(value) {
        this.updateValue(value);
    }
};
TuiRadioLabeledComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiModeDirective, decorators: [{ type: Optional }, { type: Inject, args: [TuiModeDirective,] }] }
];
__decorate([
    ViewChild(TuiRadioComponent)
], TuiRadioLabeledComponent.prototype, "radio", void 0);
__decorate([
    Input()
], TuiRadioLabeledComponent.prototype, "item", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiRadioLabeledComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRadioLabeledComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiRadioLabeledComponent.prototype, "pseudoDisabled", void 0);
__decorate([
    HostBinding('class._disabled')
], TuiRadioLabeledComponent.prototype, "computedDisabled", null);
__decorate([
    HostBinding('attr.data-mode')
], TuiRadioLabeledComponent.prototype, "mode", null);
TuiRadioLabeledComponent = TuiRadioLabeledComponent_1 = __decorate([
    Component({
        selector: 'tui-radio-labeled',
        template: "<label\n    class=\"t-wrapper\"\n    (tuiHoveredChange)=\"onHovered($event)\"\n    (tuiPressedChange)=\"onPressed($event)\"\n>\n    <tui-radio\n        [focusable]=\"focusable\"\n        [identityMatcher]=\"identityMatcher\"\n        [name]=\"computedName || ''\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [pseudoDisabled]=\"computedDisabled\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [pseudoFocused]=\"pseudoFocused\"\n        [pseudoHovered]=\"computedHovered\"\n        [pseudoPressed]=\"computedPressed\"\n        [size]=\"size\"\n        [item]=\"item\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onModelChange($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    ></tui-radio>\n    <div class=\"t-content\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiRadioLabeledComponent_1),
            },
        ],
        styles: [":host{position:relative;display:block;font:var(--tui-font-text-s);line-height:1rem}:host._readonly{pointer-events:none}.t-wrapper{display:inline-flex;max-width:100%;cursor:pointer;vertical-align:top}:host._disabled .t-wrapper{cursor:default}:host[data-mode=onDark] .t-wrapper{color:var(--tui-text-01-night)}.t-content{word-wrap:break-word;min-width:0}:host[data-size='m'] .t-content{margin-left:.5rem}:host[data-size='l'] .t-content{font:var(--tui-font-text-m);margin-left:.75rem}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Optional()),
    __param(2, Inject(TuiModeDirective))
], TuiRadioLabeledComponent);

let TuiRadioLabeledModule = class TuiRadioLabeledModule {
};
TuiRadioLabeledModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            TuiFocusableModule,
            TuiFocusedModule,
            TuiHoveredModule,
            TuiPressedModule,
            TuiRadioModule,
        ],
        declarations: [TuiRadioLabeledComponent],
        exports: [TuiRadioLabeledComponent],
    })
], TuiRadioLabeledModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiRadioLabeledComponent, TuiRadioLabeledModule };
//# sourceMappingURL=taiga-ui-kit-components-radio-labeled.js.map
