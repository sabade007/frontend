import { __decorate, __param } from 'tslib';
import { InjectionToken, EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ContentChild, ViewChild, Input, HostBinding, Output, TemplateRef, Component, ChangeDetectionStrategy, forwardRef, Pipe, ContentChildren, Directive, NgModule } from '@angular/core';
import { AbstractTuiMultipleControl, ALWAYS_TRUE_HANDLER, EMPTY_ARRAY, isNativeFocused, setNativeFocused, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, EMPTY_QUERY, itemsQueryListObservable, getOriginalArrayFromQueryList, TUI_DEFAULT_IDENTITY_MATCHER, isPresent, tuiReplayedValueChangesFrom, EMPTY_FUNCTION, TuiPreventDefaultModule, TuiActiveZoneModule, TuiLetModule, TuiMapperPipeModule, TuiHoveredModule } from '@taiga-ui/cdk';
import { isFlat } from '@taiga-ui/kit/utils';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { TuiSvgService, TuiTextfieldController, TUI_TEXTFIELD_WATCHED_CONTROLLER, TUI_DATA_LIST_ACCESSOR, TuiHostedDropdownComponent, TuiDataListDirective, TUI_DATA_LIST_HOST, TEXTFIELD_CONTROLLER_PROVIDER, sizeBigger, TuiOptionComponent, TUI_OPTION_CONTENT, TuiSvgModule, TuiHostedDropdownModule, TuiPrimitiveCheckboxModule, TuiDataListModule } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TUI_ARROW_MODE, TuiArrowModule } from '@taiga-ui/kit/components/arrow';
import { TuiInputTagComponent, TuiInputTagModule } from '@taiga-ui/kit/components/input-tag';
import { iconBlank } from '@taiga-ui/kit/constants';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { CommonModule } from '@angular/common';
import { TuiMultiSelectOptionComponent, TuiMultiSelectOptionModule } from '@taiga-ui/kit/components/multi-select-option';
import { PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';

const TUI_MULTI_SELECT_DEFAULT_OPTIONS = {
    expandable: true,
    valueContent: ``,
};
const TUI_MULTI_SELECT_OPTIONS = new InjectionToken(`Default parameters for multi select component`, {
    factory: () => TUI_MULTI_SELECT_DEFAULT_OPTIONS,
});
const tuiMultiSelectOptionsProvider = (options) => ({
    provide: TUI_MULTI_SELECT_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_MULTI_SELECT_DEFAULT_OPTIONS), options),
});

var TuiMultiSelectComponent_1;
let TuiMultiSelectComponent = TuiMultiSelectComponent_1 = class TuiMultiSelectComponent extends AbstractTuiMultipleControl {
    constructor(control, changeDetectorRef, svgService, arrowMode, itemsHandlers, options, controller) {
        super(control, changeDetectorRef);
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.options = options;
        this.controller = controller;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.expandable = this.options.expandable;
        this.search = '';
        this.editable = true;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.valueContent = this.options.valueContent;
        this.tagValidator = ALWAYS_TRUE_HANDLER;
        this.searchChange = new EventEmitter();
        this.datalist = '';
        this.open = false;
        this.valueMapper = (value, stringify, group) => group
            ? EMPTY_ARRAY
            : value.map(item => new TuiStringifiableItem(item, stringify));
        this.disabledItemHandlerWrapper = handler => stringifiable => typeof stringifiable === 'string' || handler(stringifiable.item);
        svgService.define({ iconBlank });
    }
    get size() {
        return this.controller.size;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
        return this.input ? this.input.nativeFocusableElement : null;
    }
    get focused() {
        return ((!!this.input && this.input.focused) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get computedValue() {
        return this.computedGroup ? EMPTY_ARRAY : this.value;
    }
    // @bad TODO: think of a better way
    get searchOrSpace() {
        return this.computedGroup ? ' ' : this.searchString;
    }
    get searchString() {
        return this.search === null ? '' : this.search;
    }
    /**
     * Pass empty icon to InputTag (inside this component)
     * to prevent overflow of arrow icon by many tags
     */
    get tagIcon() {
        return this.interactive ? 'iconBlank' : '';
    }
    get inputHidden() {
        return !this.editable && !this.computedGroup;
    }
    get computedGroup() {
        return (!!this.valueContent &&
            this.value.length > 0 &&
            (!this.focused || !this.editable));
    }
    get context() {
        return this.getContext(this.value);
    }
    getStringifier(stringify) {
        return ({ $implicit }) => stringify($implicit);
    }
    onHoveredChange(hovered) {
        this.updateHovered(hovered);
    }
    onSpace(event) {
        if (!this.editable) {
            event.preventDefault();
        }
        if (!this.readOnly) {
            this.open = true;
        }
    }
    handleOption(option) {
        const { value, identityMatcher } = this;
        const index = value.findIndex(item => identityMatcher(item, option));
        this.updateValue(index === -1 ? [...value, option] : value.filter((_, i) => i !== index));
        this.updateSearch(null);
    }
    onEnter(event) {
        const { value } = this;
        const options = this.accessor ? this.accessor.getOptions() : [];
        if (options.length !== 1) {
            return;
        }
        const index = value.indexOf(options[0]);
        event.preventDefault();
        this.updateValue(index === -1
            ? [...value, options[0]]
            : [...value.slice(0, index), ...value.slice(index + 1)]);
        this.updateSearch(null);
    }
    onClick({ nativeFocusableElement }) {
        var _a;
        if (this.editable &&
            this.interactive &&
            nativeFocusableElement &&
            isNativeFocused(nativeFocusableElement)) {
            (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
        }
    }
    onArrowClick() {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
        this.focusInput();
    }
    onInput(value) {
        this.updateValue(value.map(({ item }) => item));
    }
    onSearch(search) {
        this.open = true;
        this.updateSearch(search);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    getContext($implicit) {
        return { $implicit };
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            setNativeFocused(this.nativeFocusableElement, true, preventScroll);
        }
    }
};
TuiMultiSelectComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ARROW_MODE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ITEMS_HANDLERS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_MULTI_SELECT_OPTIONS,] }] },
    { type: TuiTextfieldController, decorators: [{ type: Inject, args: [TUI_TEXTFIELD_WATCHED_CONTROLLER,] }] }
];
__decorate([
    ContentChild(TUI_DATA_LIST_ACCESSOR)
], TuiMultiSelectComponent.prototype, "accessor", void 0);
__decorate([
    ViewChild(TuiHostedDropdownComponent)
], TuiMultiSelectComponent.prototype, "hostedDropdown", void 0);
__decorate([
    ViewChild(TuiInputTagComponent)
], TuiMultiSelectComponent.prototype, "input", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "stringify", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "expandable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "search", void 0);
__decorate([
    Input(),
    HostBinding('class._editable'),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "editable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "valueContent", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectComponent.prototype, "tagValidator", void 0);
__decorate([
    Output()
], TuiMultiSelectComponent.prototype, "searchChange", void 0);
__decorate([
    ContentChild(TuiDataListDirective, { read: TemplateRef })
], TuiMultiSelectComponent.prototype, "datalist", void 0);
__decorate([
    HostBinding('attr.data-size')
], TuiMultiSelectComponent.prototype, "size", null);
__decorate([
    tuiPure
], TuiMultiSelectComponent.prototype, "getStringifier", null);
__decorate([
    tuiPure
], TuiMultiSelectComponent.prototype, "getContext", null);
TuiMultiSelectComponent = TuiMultiSelectComponent_1 = __decorate([
    Component({
        selector: 'tui-multi-select',
        template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiHoveredChange)=\"onHoveredChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        tuiHostedDropdownHost\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [nativeId]=\"nativeId\"\n        [icon]=\"tagIcon\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [readOnly]=\"readOnly\"\n        [inputHidden]=\"!editable\"\n        [pseudoHovered]=\"computedHovered\"\n        [pseudoFocused]=\"computedFocused\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [editable]=\"false\"\n        [expandable]=\"expandable\"\n        [search]=\"searchOrSpace\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper:stringify\"\n        (ngModelChange)=\"onInput($event)\"\n        (searchChange)=\"onSearch($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (click.prevent)=\"onClick(inputTag)\"\n    >\n        <ng-content></ng-content>\n    </tui-input-tag>\n    <div\n        class=\"t-wrapper\"\n        [class.t-wrapper_disabled]=\"disabled\"\n    >\n        <div\n            *ngIf=\"computedGroup\"\n            polymorpheus-outlet\n            class=\"t-group\"\n            [class.t-group_fullsize]=\"inputTag.labelOutside\"\n            [context]=\"context\"\n            [content]=\"valueContent\"\n        ></div>\n\n        <div\n            *ngIf=\"arrow\"\n            polymorpheus-outlet\n            automation-id=\"tui-multi-select__arrow\"\n            tuiPreventDefault=\"mousedown\"\n            class=\"t-arrow\"\n            [content]=\"arrow\"\n            (click.prevent)=\"onArrowClick()\"\n        ></div>\n    </div>\n</tui-hosted-dropdown>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiMultiSelectComponent_1),
            },
            {
                provide: TUI_DATA_LIST_HOST,
                useExisting: forwardRef(() => TuiMultiSelectComponent_1),
            },
            FIXED_DROPDOWN_CONTROLLER_PROVIDER,
            TEXTFIELD_CONTROLLER_PROVIDER,
        ],
        styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-wrapper{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;pointer-events:none;justify-content:flex-end}.t-wrapper_disabled{opacity:var(--tui-disabled-opacity)}:host[data-size='s'] .t-wrapper{height:var(--tui-height-s)}:host[data-size='m'] .t-wrapper{height:var(--tui-height-m)}:host[data-size='l'] .t-wrapper{height:var(--tui-height-l)}.t-group{display:flex;flex:1;align-items:center;padding:1.6875rem 0 .5625rem 1rem;overflow:hidden}.t-group_fullsize{padding-top:.0625rem;padding-bottom:0}:host[data-size='m'] .t-group_fullsize.t-group_fullsize{padding-top:0}:host[data-size='m'] .t-group{padding:1.1875rem 0 0 .75rem;font-size:.8125rem}.t-arrow{transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center;color:var(--tui-text-03);position:relative;box-sizing:border-box;transition-property:color,transform;width:1.5rem;height:auto;margin:0 .75rem;pointer-events:auto;cursor:pointer}.t-arrow:hover{color:var(--tui-text-02)}:host._disabled .t-arrow,:host._readonly .t-arrow{pointer-events:none}:host[data-mode=onDark] .t-arrow{color:var(--tui-text-03-night)}:host[data-mode=onDark] .t-arrow:hover{color:var(--tui-text-01-night)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TuiSvgService)),
    __param(3, Inject(TUI_ARROW_MODE)),
    __param(4, Inject(TUI_ITEMS_HANDLERS)),
    __param(5, Inject(TUI_MULTI_SELECT_OPTIONS)),
    __param(6, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER))
], TuiMultiSelectComponent);

let TuiHideSelectedPipe = class TuiHideSelectedPipe {
    constructor(component) {
        this.component = component;
    }
    transform(items, component) {
        const { value, identityMatcher } = component !== null && component !== void 0 ? component : this.component;
        if (!items) {
            return null;
        }
        return isFlat(items)
            ? this.filter(items, value, identityMatcher)
            : this.filter2d(items, value, identityMatcher);
    }
    filter2d(items, value, matcher) {
        return items.map(subItems => this.filter(subItems, value, matcher));
    }
    filter(items, value, matcher) {
        return items.filter(item => value.every(selected => !matcher(selected, item)));
    }
};
TuiHideSelectedPipe.ctorParameters = () => [
    { type: TuiMultiSelectComponent, decorators: [{ type: Inject, args: [TuiMultiSelectComponent,] }] }
];
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter2d", null);
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter", null);
TuiHideSelectedPipe = __decorate([
    Pipe({
        name: `tuiHideSelected`,
        pure: false,
    }),
    __param(0, Inject(TuiMultiSelectComponent))
], TuiHideSelectedPipe);

let TuiMultiSelectGroupComponent = class TuiMultiSelectGroupComponent {
    constructor(host, control) {
        this.host = host;
        this.control = control;
        this.options = EMPTY_QUERY;
        this.label = '';
    }
    get size() {
        var _a;
        return ((_a = this.options.first) === null || _a === void 0 ? void 0 : _a.size) || 'm';
    }
    get checkboxSize() {
        return this.options.first && sizeBigger(this.options.first.size) ? 'l' : 'm';
    }
    get empty$() {
        return itemsQueryListObservable(this.options).pipe(map(({ length }) => !length));
    }
    get disabled$() {
        return itemsQueryListObservable(this.options).pipe(map(items => items.every(({ disabled }) => disabled)));
    }
    get value$() {
        return combineLatest(this.items$, this.valueChanges$).pipe(map(([items, current]) => {
            let result = false;
            for (let i = 0; i < items.length; i++) {
                const selected = current.some(selected => this.matcher(selected, items[i]));
                if ((!selected && result) || (selected && !result && i)) {
                    return null;
                }
                result = selected;
            }
            return result;
        }));
    }
    onClick(checked) {
        if (!this.control.control) {
            return;
        }
        const controlValue = this.control.value || [];
        const { values } = this;
        const filtered = controlValue.filter(current => values.every(item => !this.matcher(current, item)));
        this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
    }
    get values() {
        return this.filter(getOriginalArrayFromQueryList(this.options));
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    get items$() {
        return itemsQueryListObservable(this.options).pipe(map(options => options.map(({ value }) => value).filter(isPresent)));
    }
    get valueChanges$() {
        return tuiReplayedValueChangesFrom(this.control).pipe(map(value => value || []));
    }
    filter(items) {
        return items.map(({ value }) => value).filter(isPresent);
    }
};
TuiMultiSelectGroupComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
];
__decorate([
    ContentChildren(TuiOptionComponent)
], TuiMultiSelectGroupComponent.prototype, "options", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectGroupComponent.prototype, "label", void 0);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "filter", null);
TuiMultiSelectGroupComponent = __decorate([
    Component({
        selector: 'tui-opt-group[tuiMultiSelectGroup]',
        template: "<ng-container *tuiLet=\"value$ | async as value\">\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiOption\n        [size]=\"size\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        <tui-primitive-checkbox\n            class=\"t-checkbox\"\n            [size]=\"checkboxSize\"\n            [value]=\"value\"\n        ></tui-primitive-checkbox>\n        <span class=\"t-label\">{{ label }}</span>\n    </button>\n</ng-container>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        viewProviders: [
            {
                provide: TUI_OPTION_CONTENT,
                useValue: null,
            },
        ],
        styles: [":host{display:flex;flex-direction:column}:host:before{content:''}.t-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font:var(--tui-font-text-xs);flex:1;color:var(--tui-text-02)}.t-checkbox{margin-right:.75rem}"]
    }),
    __param(0, Inject(TUI_DATA_LIST_HOST)),
    __param(1, Inject(NgControl))
], TuiMultiSelectGroupComponent);

// eslint-disable-next-line @typescript-eslint/naming-convention
function hostFallbackFactory(control, host) {
    return (host || {
        handleOption: option => {
            if (!control.control) {
                return;
            }
            const value = control.value || [];
            const index = value.indexOf(option);
            control.control.setValue(index === -1
                ? [...value, option]
                : [...value.slice(0, index), ...value.slice(index + 1)]);
        },
    });
}
const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
// TODO: 3.0 remove in ivy compilation
const MULTI_SELECT_ACCESSOR = {
    writeValue: EMPTY_FUNCTION,
    registerOnChange: EMPTY_FUNCTION,
    registerOnTouched: EMPTY_FUNCTION,
};
let TuiMultiSelectGroupDirective = class TuiMultiSelectGroupDirective {
};
TuiMultiSelectGroupDirective = __decorate([
    Directive({
        selector: '[tuiMultiSelectGroup]',
        providers: [
            {
                provide: TUI_OPTION_CONTENT,
                useValue: TUI_MULTI_SELECT_OPTION,
            },
            {
                provide: TUI_DATA_LIST_HOST,
                deps: [
                    NgControl,
                    [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
                ],
                useFactory: hostFallbackFactory,
            },
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useValue: MULTI_SELECT_ACCESSOR,
            },
        ],
    })
], TuiMultiSelectGroupDirective);

let TuiMultiSelectModule = class TuiMultiSelectModule {
};
TuiMultiSelectModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiPreventDefaultModule,
            TuiActiveZoneModule,
            TuiArrowModule,
            TuiLetModule,
            TuiMapperPipeModule,
            TuiHoveredModule,
            TuiSvgModule,
            TuiHostedDropdownModule,
            TuiInputTagModule,
            TuiMultiSelectOptionModule,
            TuiPrimitiveCheckboxModule,
            TuiDataListModule,
        ],
        declarations: [
            TuiMultiSelectComponent,
            TuiMultiSelectGroupComponent,
            TuiMultiSelectGroupDirective,
            TuiHideSelectedPipe,
        ],
        exports: [
            TuiMultiSelectComponent,
            TuiMultiSelectGroupComponent,
            TuiMultiSelectGroupDirective,
            TuiHideSelectedPipe,
        ],
    })
], TuiMultiSelectModule);

/**
 * Generated bundle index. Do not edit.
 */

export { MULTI_SELECT_ACCESSOR, TUI_MULTI_SELECT_DEFAULT_OPTIONS, TUI_MULTI_SELECT_OPTION, TUI_MULTI_SELECT_OPTIONS, TuiHideSelectedPipe, TuiMultiSelectComponent, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiMultiSelectModule, hostFallbackFactory, tuiMultiSelectOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-multi-select.js.map
