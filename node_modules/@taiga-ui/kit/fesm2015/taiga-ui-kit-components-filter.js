import { __decorate, __param } from 'tslib';
import { EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ElementRef, Input, HostBinding, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiMultipleControl, TUI_DEFAULT_IDENTITY_MATCHER, ALWAYS_FALSE_HANDLER, TUI_DEFAULT_STRINGIFY, isNativeFocusedIn, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import { CommonModule } from '@angular/common';
import { TuiModeModule } from '@taiga-ui/core';
import { TuiBadgeModule } from '@taiga-ui/kit/components/badge';
import { TuiCheckboxBlockModule } from '@taiga-ui/kit/components/checkbox-block';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// @bad TODO: Add active zone to track focus
let TuiFilterComponent = class TuiFilterComponent extends AbstractTuiMultipleControl {
    constructor(control, changeDetectorRef, elementRef) {
        super(control, changeDetectorRef);
        this.elementRef = elementRef;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.items = [];
        this.size = 'm';
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.toggledItem = new EventEmitter();
        this.content = ({ $implicit }) => TUI_DEFAULT_STRINGIFY($implicit);
        this.badgeHandler = item => Number(item);
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
    getItemContentContext($implicit) {
        return {
            $implicit,
        };
    }
    onCheckbox(value, item) {
        this.toggledItem.emit(item);
        this.updateValue(value
            ? [...this.value, item]
            : this.value.filter(arrItem => !this.identityMatcher(arrItem, item)));
    }
    isCheckboxEnabled(item) {
        return this.value.some(arrItem => this.identityMatcher(arrItem, item));
    }
};
TuiFilterComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "identityMatcher", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "items", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Output()
], TuiFilterComponent.prototype, "toggledItem", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "content", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiFilterComponent.prototype, "badgeHandler", void 0);
__decorate([
    tuiPure
], TuiFilterComponent.prototype, "getItemContentContext", null);
TuiFilterComponent = __decorate([
    Component({
        selector: 'tui-filter',
        template: "<ng-container *ngFor=\"let item of items\">\n    <tui-checkbox-block\n        automation-id=\"tui-filter__checkbox\"\n        class=\"t-item\"\n        [disabled]=\"disabledItemHandler(item)\"\n        [hideCheckbox]=\"true\"\n        [ngModel]=\"isCheckboxEnabled(item)\"\n        [size]=\"size\"\n        (ngModelChange)=\"onCheckbox($event, item)\"\n    >\n        <div\n            automation-id=\"tui-filter__content\"\n            class=\"t-content\"\n        >\n            <div\n                polymorpheus-outlet\n                [content]=\"content\"\n                [context]=\"getItemContentContext(item)\"\n            ></div>\n            <tui-badge\n                *ngIf=\"badgeHandler(item) as badgeValue\"\n                automation-id=\"tui-filter__badge\"\n                tuiMode=\"onLight\"\n                class=\"t-badge\"\n                [class.t-badge_disabled]=\"disabledItemHandler(item)\"\n                [size]=\"size\"\n                [value]=\"badgeValue\"\n            ></tui-badge>\n        </div>\n    </tui-checkbox-block>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;margin-bottom:-.25rem}.t-content{display:flex;align-items:center}.t-item{margin-right:.25rem;margin-bottom:.25rem}.t-item:last-child,:host[data-size='l'] .t-item:last-child{margin-right:0}:host[data-size='l'] .t-item{margin-right:.5rem;margin-bottom:.5rem}.t-badge{margin-left:.25rem}.t-badge_disabled{opacity:var(--tui-disabled-opacity)}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(ElementRef))
], TuiFilterComponent);

let TuiFilterModule = class TuiFilterModule {
};
TuiFilterModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiCheckboxBlockModule,
            TuiBadgeModule,
            TuiModeModule,
        ],
        declarations: [TuiFilterComponent],
        exports: [TuiFilterComponent],
    })
], TuiFilterModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiFilterComponent, TuiFilterModule };
//# sourceMappingURL=taiga-ui-kit-components-filter.js.map
