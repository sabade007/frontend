import { TUI_LANGUAGE_STORAGE_KEY, TUI_LANGUAGE_LOADER } from '@taiga-ui/i18n/tokens';
import { TUI_DEFAULT_LANGUAGE, TUI_LANGUAGE } from '@taiga-ui/i18n/tools';
import { __awaiter, __decorate, __param } from 'tslib';
import { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable } from '@angular/core';
import { LOCAL_STORAGE } from '@ng-web-apis/common';
import { from, of, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

function tuiAsyncLoadLanguage(language, loader, fallback) {
    return language && loader ? tuiLoadLanguage(language, loader) : of(fallback);
}
function tuiLoadLanguage(language, loader) {
    return from(normalizeCommonJSImport(loader(language))).pipe(map((module) => module === null || module === void 0 ? void 0 : module[`TUI_${language.toUpperCase()}_LANGUAGE`]));
}
// CommonJS `module.exports` is wrapped as `default` in ESModule.
function normalizeCommonJSImport(importPromise) {
    return __awaiter(this, void 0, void 0, function* () {
        return importPromise.then((m) => m.default || m);
    });
}

// @dynamic
let TuiLanguageSwitcher = class TuiLanguageSwitcher extends BehaviorSubject {
    constructor(fallback, key, storage, loader) {
        super(tuiAsyncLoadLanguage(storage.getItem(key), loader, fallback));
        this.fallback = fallback;
        this.key = key;
        this.storage = storage;
        this.loader = loader;
    }
    get language() {
        return this.storage.getItem(this.key) || this.fallback.name;
    }
    setLanguage(language) {
        this.storage.setItem(this.key, language);
        this.next(tuiAsyncLoadLanguage(language, this.loader, this.fallback));
    }
    clear() {
        this.storage.removeItem(this.key);
        this.next(of(this.fallback));
    }
};
TuiLanguageSwitcher.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DEFAULT_LANGUAGE,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_LANGUAGE_STORAGE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_LANGUAGE_LOADER,] }] }
];
TuiLanguageSwitcher.ɵprov = ɵɵdefineInjectable({ factory: function TuiLanguageSwitcher_Factory() { return new TuiLanguageSwitcher(ɵɵinject(TUI_DEFAULT_LANGUAGE), ɵɵinject(TUI_LANGUAGE_STORAGE_KEY), ɵɵinject(LOCAL_STORAGE), ɵɵinject(TUI_LANGUAGE_LOADER, 8)); }, token: TuiLanguageSwitcher, providedIn: "root" });
TuiLanguageSwitcher = __decorate([
    Injectable({ providedIn: `root` }),
    __param(0, Inject(TUI_DEFAULT_LANGUAGE)),
    __param(1, Inject(TUI_LANGUAGE_STORAGE_KEY)),
    __param(2, Inject(LOCAL_STORAGE)),
    __param(3, Optional()),
    __param(3, Inject(TUI_LANGUAGE_LOADER))
], TuiLanguageSwitcher);

function tuiLanguageSwitcher(loader) {
    return [
        {
            provide: TUI_LANGUAGE_LOADER,
            useFactory: () => loader,
        },
        {
            provide: TUI_LANGUAGE,
            useExisting: TuiLanguageSwitcher,
        },
    ];
}

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLanguageSwitcher, tuiAsyncLoadLanguage, tuiLanguageSwitcher, tuiLoadLanguage };
//# sourceMappingURL=taiga-ui-i18n-switch.js.map
