{"version":3,"sources":["ng://@taiga-ui/i18n/tools/language.ts","ng://@taiga-ui/i18n/tools/extract-i18n.ts"],"names":["TUI_DEFAULT_LANGUAGE","InjectionToken","factory","TUI_ENGLISH_LANGUAGE","TUI_LANGUAGE","of","inject","extractI18n","key","pipe","switchMap","streamOrValue","isObservable","map","lang","tuiExtractI18n"],"mappings":"4iBAMaA,EAAoD,IAAIC,EAAAA,eACjE,+CACA,CACIC,QAAS,WAAM,OAAAC,EAAAA,wBAKVC,EAAwD,IAAIH,EAAAA,eACrE,uCACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,GAAGC,EAAAA,OAAON,gBCNjBO,EACZC,GAEA,OAAO,WACH,OAAAF,EAAAA,OAAOF,GAAcK,KACjBC,EAAAA,WAAU,SAACC,GACP,OAAAC,EAAAA,aAAaD,GAAiBA,EAAgBN,EAAAA,GAAGM,MAErDE,EAAAA,KAAI,SAACC,GAAsB,OAAAA,EAAKN,YAI/BO,EAAiBR","sourcesContent":["import {inject, InjectionToken} from '@angular/core';\nimport {TuiLanguage} from '@taiga-ui/i18n/interfaces';\nimport {TUI_ENGLISH_LANGUAGE} from '@taiga-ui/i18n/languages';\nimport {Observable, of} from 'rxjs';\n\n// TODO: move to @taiga-ui/i18n/tokens in v3.0\nexport const TUI_DEFAULT_LANGUAGE: InjectionToken<TuiLanguage> = new InjectionToken(\n    `Default Language for Taiga UI libraries i18n`,\n    {\n        factory: () => TUI_ENGLISH_LANGUAGE,\n    },\n);\n\n// TODO: move to @taiga-ui/i18n/tokens in v3.0\nexport const TUI_LANGUAGE: InjectionToken<Observable<TuiLanguage>> = new InjectionToken(\n    `Language for Taiga UI libraries i18n`,\n    {\n        factory: () => of(inject(TUI_DEFAULT_LANGUAGE)),\n    },\n);\n","import {inject} from '@angular/core';\nimport {TuiLanguage} from '@taiga-ui/i18n/interfaces';\nimport {isObservable, Observable, of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {TUI_LANGUAGE} from './language';\n\n/**\n * @deprecated: use {@link tuiExtractI18n} instead\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function extractI18n<K extends keyof TuiLanguage>(\n    key: K,\n): () => Observable<TuiLanguage[K]> {\n    return () =>\n        inject(TUI_LANGUAGE).pipe(\n            switchMap((streamOrValue: Observable<TuiLanguage> | TuiLanguage) =>\n                isObservable(streamOrValue) ? streamOrValue : of(streamOrValue),\n            ),\n            map((lang: TuiLanguage) => lang[key]),\n        );\n}\n\nexport const tuiExtractI18n = extractI18n;\n"]}