(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/i18n/languages')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/i18n/tools', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@taiga-ui/i18n/languages'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].i18n = global['taiga-ui'].i18n || {}, global['taiga-ui'].i18n.tools = {}), global.ng.core, global.rxjs, global.rxjs.operators, global['taiga-ui'].i18n.languages));
}(this, (function (exports, core, rxjs, operators, languages) { 'use strict';

    // TODO: move to @taiga-ui/i18n/tokens in v3.0
    var TUI_DEFAULT_LANGUAGE = new core.InjectionToken("Default Language for Taiga UI libraries i18n", {
        factory: function () { return languages.TUI_ENGLISH_LANGUAGE; },
    });
    // TODO: move to @taiga-ui/i18n/tokens in v3.0
    var TUI_LANGUAGE = new core.InjectionToken("Language for Taiga UI libraries i18n", {
        factory: function () { return rxjs.of(core.inject(TUI_DEFAULT_LANGUAGE)); },
    });

    /**
     * @deprecated: use {@link tuiExtractI18n} instead
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    function extractI18n(key) {
        return function () {
            return core.inject(TUI_LANGUAGE).pipe(operators.switchMap(function (streamOrValue) {
                return rxjs.isObservable(streamOrValue) ? streamOrValue : rxjs.of(streamOrValue);
            }), operators.map(function (lang) { return lang[key]; }));
        };
    }
    var tuiExtractI18n = extractI18n;

    exports.TUI_DEFAULT_LANGUAGE = TUI_DEFAULT_LANGUAGE;
    exports.TUI_LANGUAGE = TUI_LANGUAGE;
    exports.extractI18n = extractI18n;
    exports.tuiExtractI18n = tuiExtractI18n;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-i18n-tools.umd.js.map
