export var TUI_GERMAN_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: ["Farbe", "Verlauf"],
    toolbarTools: {
        undo: "R\u00FCckg\u00E4ngig machen",
        redo: "Wiederholen",
        font: "Schriftart",
        fontStyle: "Schriftstil",
        fontSize: "Schriftgr\u00F6\u00DFe",
        bold: "Fett",
        italic: "Kursiv",
        underline: "Unterstrichen",
        strikeThrough: "Durchgestrichen",
        justify: "Blocksatz",
        justifyLeft: "Blocksatz links",
        justifyCenter: "Blocksatz mittig",
        justifyRight: "Blocksatz rechts",
        justifyFull: "Blocksatz",
        list: "Liste",
        indent: "Einr\u00FCcken",
        outdent: "Ausr\u00FCcken",
        unorderedList: "Ungeordnete Liste",
        orderedList: "Geordnete Liste",
        quote: "Blockquote",
        foreColor: "Farbe",
        backColor: "Hintergrundfarbe",
        hiliteColor: "Hilite-Farbe",
        clear: "L\u00F6schen",
        link: "Link",
        attach: "Datei anh\u00E4ngen",
        tex: "TeX einf\u00FCgen",
        code: "Quelltext",
        image: "Bild einf\u00FCgen",
        insertHorizontalRule: "Horizontale Linie einf\u00FCgen",
        superscript: "Hochgestellt",
        subscript: "Tiefgestellt",
        insertTable: "Insert table",
        insertGroup: "Insert group",
        removeGroup: "Remove group",
        insertAnchor: "Insert anchor",
        mergeCells: "Merge cells",
        splitCells: "Split cells",
        rowsColumnsManaging: "Managing rows and columns",
        cellColor: "Cell color",
        setDetails: "Details",
        removeDetails: "Remove details",
    },
    editorEditLink: {
        urlExample: "example.com",
        anchorExample: "anchor",
    },
    editorTableCommands: [
        ["Insert column before", "Insert column after"],
        ["Insert row before", "Insert row after"],
        ["Delete column", "Delete row"],
    ],
    editorCodeOptions: ["Code in the text", "Code in block"],
    editorFontOptions: {
        small: "Small",
        large: "Large",
        normal: "Normal",
        title: "Title",
        subtitle: "Subtitle",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2kxOG4vbGFuZ3VhZ2VzL2dlcm1hbi8iLCJzb3VyY2VzIjpbImFkZG9uLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsSUFBTSxnQ0FBZ0MsR0FBbUI7SUFDNUQsc0JBQXNCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQzVDLFlBQVksRUFBRTtRQUNWLElBQUksRUFBRSw2QkFBbUI7UUFDekIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsU0FBUyxFQUFFLGFBQWE7UUFDeEIsUUFBUSxFQUFFLHdCQUFjO1FBQ3hCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLFFBQVE7UUFDaEIsU0FBUyxFQUFFLGVBQWU7UUFDMUIsYUFBYSxFQUFFLGlCQUFpQjtRQUNoQyxPQUFPLEVBQUUsV0FBVztRQUNwQixXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLGFBQWEsRUFBRSxrQkFBa0I7UUFDakMsWUFBWSxFQUFFLGtCQUFrQjtRQUNoQyxXQUFXLEVBQUUsV0FBVztRQUN4QixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxnQkFBVztRQUNuQixPQUFPLEVBQUUsZ0JBQVc7UUFDcEIsYUFBYSxFQUFFLG1CQUFtQjtRQUNsQyxXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLEtBQUssRUFBRSxZQUFZO1FBQ25CLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsS0FBSyxFQUFFLGNBQVM7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUscUJBQWdCO1FBQ3hCLEdBQUcsRUFBRSxtQkFBYztRQUNuQixJQUFJLEVBQUUsV0FBVztRQUNqQixLQUFLLEVBQUUsb0JBQWU7UUFDdEIsb0JBQW9CLEVBQUUsaUNBQTRCO1FBQ2xELFdBQVcsRUFBRSxjQUFjO1FBQzNCLFNBQVMsRUFBRSxjQUFjO1FBQ3pCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFlBQVksRUFBRSxlQUFlO1FBQzdCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLG1CQUFtQixFQUFFLDJCQUEyQjtRQUNoRCxTQUFTLEVBQUUsWUFBWTtRQUN2QixVQUFVLEVBQUUsU0FBUztRQUNyQixhQUFhLEVBQUUsZ0JBQWdCO0tBQ2xDO0lBQ0QsY0FBYyxFQUFFO1FBQ1osVUFBVSxFQUFFLGFBQWE7UUFDekIsYUFBYSxFQUFFLFFBQVE7S0FDMUI7SUFDRCxtQkFBbUIsRUFBRTtRQUNqQixDQUFDLHNCQUFzQixFQUFFLHFCQUFxQixDQUFDO1FBQy9DLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUM7UUFDekMsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDO0tBQ2xDO0lBQ0QsaUJBQWlCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxlQUFlLENBQUM7SUFDeEQsaUJBQWlCLEVBQUU7UUFDZixLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxPQUFPO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsVUFBVTtLQUN2QjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xhbmd1YWdlRWRpdG9yfSBmcm9tICdAdGFpZ2EtdWkvaTE4bi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9HRVJNQU5fTEFOR1VBR0VfQURET05fRURJVE9SOiBMYW5ndWFnZUVkaXRvciA9IHtcbiAgICBjb2xvclNlbGVjdG9yTW9kZU5hbWVzOiBbYEZhcmJlYCwgYFZlcmxhdWZgXSxcbiAgICB0b29sYmFyVG9vbHM6IHtcbiAgICAgICAgdW5kbzogYFLDvGNrZ8OkbmdpZyBtYWNoZW5gLFxuICAgICAgICByZWRvOiBgV2llZGVyaG9sZW5gLFxuICAgICAgICBmb250OiBgU2NocmlmdGFydGAsXG4gICAgICAgIGZvbnRTdHlsZTogYFNjaHJpZnRzdGlsYCxcbiAgICAgICAgZm9udFNpemU6IGBTY2hyaWZ0Z3LDtsOfZWAsXG4gICAgICAgIGJvbGQ6IGBGZXR0YCxcbiAgICAgICAgaXRhbGljOiBgS3Vyc2l2YCxcbiAgICAgICAgdW5kZXJsaW5lOiBgVW50ZXJzdHJpY2hlbmAsXG4gICAgICAgIHN0cmlrZVRocm91Z2g6IGBEdXJjaGdlc3RyaWNoZW5gLFxuICAgICAgICBqdXN0aWZ5OiBgQmxvY2tzYXR6YCxcbiAgICAgICAganVzdGlmeUxlZnQ6IGBCbG9ja3NhdHogbGlua3NgLFxuICAgICAgICBqdXN0aWZ5Q2VudGVyOiBgQmxvY2tzYXR6IG1pdHRpZ2AsXG4gICAgICAgIGp1c3RpZnlSaWdodDogYEJsb2Nrc2F0eiByZWNodHNgLFxuICAgICAgICBqdXN0aWZ5RnVsbDogYEJsb2Nrc2F0emAsXG4gICAgICAgIGxpc3Q6IGBMaXN0ZWAsXG4gICAgICAgIGluZGVudDogYEVpbnLDvGNrZW5gLFxuICAgICAgICBvdXRkZW50OiBgQXVzcsO8Y2tlbmAsXG4gICAgICAgIHVub3JkZXJlZExpc3Q6IGBVbmdlb3JkbmV0ZSBMaXN0ZWAsXG4gICAgICAgIG9yZGVyZWRMaXN0OiBgR2VvcmRuZXRlIExpc3RlYCxcbiAgICAgICAgcXVvdGU6IGBCbG9ja3F1b3RlYCxcbiAgICAgICAgZm9yZUNvbG9yOiBgRmFyYmVgLFxuICAgICAgICBiYWNrQ29sb3I6IGBIaW50ZXJncnVuZGZhcmJlYCxcbiAgICAgICAgaGlsaXRlQ29sb3I6IGBIaWxpdGUtRmFyYmVgLFxuICAgICAgICBjbGVhcjogYEzDtnNjaGVuYCxcbiAgICAgICAgbGluazogYExpbmtgLFxuICAgICAgICBhdHRhY2g6IGBEYXRlaSBhbmjDpG5nZW5gLFxuICAgICAgICB0ZXg6IGBUZVggZWluZsO8Z2VuYCxcbiAgICAgICAgY29kZTogYFF1ZWxsdGV4dGAsXG4gICAgICAgIGltYWdlOiBgQmlsZCBlaW5mw7xnZW5gLFxuICAgICAgICBpbnNlcnRIb3Jpem9udGFsUnVsZTogYEhvcml6b250YWxlIExpbmllIGVpbmbDvGdlbmAsXG4gICAgICAgIHN1cGVyc2NyaXB0OiBgSG9jaGdlc3RlbGx0YCxcbiAgICAgICAgc3Vic2NyaXB0OiBgVGllZmdlc3RlbGx0YCxcbiAgICAgICAgaW5zZXJ0VGFibGU6IGBJbnNlcnQgdGFibGVgLFxuICAgICAgICBpbnNlcnRHcm91cDogYEluc2VydCBncm91cGAsXG4gICAgICAgIHJlbW92ZUdyb3VwOiBgUmVtb3ZlIGdyb3VwYCxcbiAgICAgICAgaW5zZXJ0QW5jaG9yOiBgSW5zZXJ0IGFuY2hvcmAsXG4gICAgICAgIG1lcmdlQ2VsbHM6IGBNZXJnZSBjZWxsc2AsXG4gICAgICAgIHNwbGl0Q2VsbHM6IGBTcGxpdCBjZWxsc2AsXG4gICAgICAgIHJvd3NDb2x1bW5zTWFuYWdpbmc6IGBNYW5hZ2luZyByb3dzIGFuZCBjb2x1bW5zYCxcbiAgICAgICAgY2VsbENvbG9yOiBgQ2VsbCBjb2xvcmAsXG4gICAgICAgIHNldERldGFpbHM6IGBEZXRhaWxzYCxcbiAgICAgICAgcmVtb3ZlRGV0YWlsczogYFJlbW92ZSBkZXRhaWxzYCxcbiAgICB9LFxuICAgIGVkaXRvckVkaXRMaW5rOiB7XG4gICAgICAgIHVybEV4YW1wbGU6IGBleGFtcGxlLmNvbWAsXG4gICAgICAgIGFuY2hvckV4YW1wbGU6IGBhbmNob3JgLFxuICAgIH0sXG4gICAgZWRpdG9yVGFibGVDb21tYW5kczogW1xuICAgICAgICBbYEluc2VydCBjb2x1bW4gYmVmb3JlYCwgYEluc2VydCBjb2x1bW4gYWZ0ZXJgXSxcbiAgICAgICAgW2BJbnNlcnQgcm93IGJlZm9yZWAsIGBJbnNlcnQgcm93IGFmdGVyYF0sXG4gICAgICAgIFtgRGVsZXRlIGNvbHVtbmAsIGBEZWxldGUgcm93YF0sXG4gICAgXSxcbiAgICBlZGl0b3JDb2RlT3B0aW9uczogW2BDb2RlIGluIHRoZSB0ZXh0YCwgYENvZGUgaW4gYmxvY2tgXSxcbiAgICBlZGl0b3JGb250T3B0aW9uczoge1xuICAgICAgICBzbWFsbDogYFNtYWxsYCxcbiAgICAgICAgbGFyZ2U6IGBMYXJnZWAsXG4gICAgICAgIG5vcm1hbDogYE5vcm1hbGAsXG4gICAgICAgIHRpdGxlOiBgVGl0bGVgLFxuICAgICAgICBzdWJ0aXRsZTogYFN1YnRpdGxlYCxcbiAgICB9LFxufTtcbiJdfQ==