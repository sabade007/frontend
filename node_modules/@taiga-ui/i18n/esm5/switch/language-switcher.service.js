import { __decorate, __extends, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { LOCAL_STORAGE } from '@ng-web-apis/common';
import { TUI_LANGUAGE_LOADER, TUI_LANGUAGE_STORAGE_KEY } from '@taiga-ui/i18n/tokens';
import { TUI_DEFAULT_LANGUAGE } from '@taiga-ui/i18n/tools';
import { BehaviorSubject, of } from 'rxjs';
import { tuiAsyncLoadLanguage } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/i18n/tools";
import * as i2 from "@taiga-ui/i18n/tokens";
import * as i3 from "@ng-web-apis/common";
// @dynamic
var TuiLanguageSwitcher = /** @class */ (function (_super) {
    __extends(TuiLanguageSwitcher, _super);
    function TuiLanguageSwitcher(fallback, key, storage, loader) {
        var _this = _super.call(this, tuiAsyncLoadLanguage(storage.getItem(key), loader, fallback)) || this;
        _this.fallback = fallback;
        _this.key = key;
        _this.storage = storage;
        _this.loader = loader;
        return _this;
    }
    Object.defineProperty(TuiLanguageSwitcher.prototype, "language", {
        get: function () {
            return this.storage.getItem(this.key) || this.fallback.name;
        },
        enumerable: true,
        configurable: true
    });
    TuiLanguageSwitcher.prototype.setLanguage = function (language) {
        this.storage.setItem(this.key, language);
        this.next(tuiAsyncLoadLanguage(language, this.loader, this.fallback));
    };
    TuiLanguageSwitcher.prototype.clear = function () {
        this.storage.removeItem(this.key);
        this.next(of(this.fallback));
    };
    TuiLanguageSwitcher.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DEFAULT_LANGUAGE,] }] },
        { type: String, decorators: [{ type: Inject, args: [TUI_LANGUAGE_STORAGE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_LANGUAGE_LOADER,] }] }
    ]; };
    TuiLanguageSwitcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiLanguageSwitcher_Factory() { return new TuiLanguageSwitcher(i0.ɵɵinject(i1.TUI_DEFAULT_LANGUAGE), i0.ɵɵinject(i2.TUI_LANGUAGE_STORAGE_KEY), i0.ɵɵinject(i3.LOCAL_STORAGE), i0.ɵɵinject(i2.TUI_LANGUAGE_LOADER, 8)); }, token: TuiLanguageSwitcher, providedIn: "root" });
    TuiLanguageSwitcher = __decorate([
        Injectable({ providedIn: "root" }),
        __param(0, Inject(TUI_DEFAULT_LANGUAGE)),
        __param(1, Inject(TUI_LANGUAGE_STORAGE_KEY)),
        __param(2, Inject(LOCAL_STORAGE)),
        __param(3, Optional()),
        __param(3, Inject(TUI_LANGUAGE_LOADER))
    ], TuiLanguageSwitcher);
    return TuiLanguageSwitcher;
}(BehaviorSubject));
export { TuiLanguageSwitcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc3dpdGNoZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9pMThuL3N3aXRjaC8iLCJzb3VyY2VzIjpbImxhbmd1YWdlLXN3aXRjaGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFPbEQsT0FBTyxFQUFDLG1CQUFtQixFQUFFLHdCQUF3QixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGVBQWUsRUFBYyxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sU0FBUyxDQUFDOzs7OztBQUU3QyxXQUFXO0FBRVg7SUFBeUMsdUNBQXdDO0lBQzdFLDZCQUVxQixRQUFxQixFQUVyQixHQUFXLEVBRVgsT0FBMkIsRUFHM0IsTUFBZ0M7UUFUckQsWUFXSSxrQkFBTSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxTQUN0RTtRQVZvQixjQUFRLEdBQVIsUUFBUSxDQUFhO1FBRXJCLFNBQUcsR0FBSCxHQUFHLENBQVE7UUFFWCxhQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUczQixZQUFNLEdBQU4sTUFBTSxDQUEwQjs7SUFHckQsQ0FBQztJQUVELHNCQUFJLHlDQUFRO2FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNoRSxDQUFDOzs7T0FBQTtJQUVELHlDQUFXLEdBQVgsVUFBWSxRQUF5QjtRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELG1DQUFLLEdBQUw7UUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0RBM0JJLE1BQU0sU0FBQyxvQkFBb0I7NkNBRTNCLE1BQU0sU0FBQyx3QkFBd0I7Z0RBRS9CLE1BQU0sU0FBQyxhQUFhO2dEQUVwQixRQUFRLFlBQ1IsTUFBTSxTQUFDLG1CQUFtQjs7O0lBVHRCLG1CQUFtQjtRQUQvQixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUM7UUFHeEIsV0FBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUU1QixXQUFBLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1FBRWhDLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRXJCLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDVixXQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO09BVHZCLG1CQUFtQixDQThCL0I7OEJBOUNEO0NBOENDLEFBOUJELENBQXlDLGVBQWUsR0E4QnZEO1NBOUJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xPQ0FMX1NUT1JBR0V9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBUdWlMYW5ndWFnZSxcbiAgICBUdWlMYW5ndWFnZUxvYWRlcixcbiAgICBUdWlMYW5ndWFnZU5hbWUsXG4gICAgVHVpTGFuZ3VhZ2VTdG9yYWdlLFxufSBmcm9tICdAdGFpZ2EtdWkvaTE4bi9pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX0xBTkdVQUdFX0xPQURFUiwgVFVJX0xBTkdVQUdFX1NUT1JBR0VfS0VZfSBmcm9tICdAdGFpZ2EtdWkvaTE4bi90b2tlbnMnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9MQU5HVUFHRX0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vdG9vbHMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHt0dWlBc3luY0xvYWRMYW5ndWFnZX0gZnJvbSAnLi91dGlscyc7XG5cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogYHJvb3RgfSlcbmV4cG9ydCBjbGFzcyBUdWlMYW5ndWFnZVN3aXRjaGVyIGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0PE9ic2VydmFibGU8VHVpTGFuZ3VhZ2U+PiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0RFRkFVTFRfTEFOR1VBR0UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZmFsbGJhY2s6IFR1aUxhbmd1YWdlLFxuICAgICAgICBASW5qZWN0KFRVSV9MQU5HVUFHRV9TVE9SQUdFX0tFWSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBrZXk6IHN0cmluZyxcbiAgICAgICAgQEluamVjdChMT0NBTF9TVE9SQUdFKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JhZ2U6IFR1aUxhbmd1YWdlU3RvcmFnZSxcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUVUlfTEFOR1VBR0VfTE9BREVSKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWRlcjogVHVpTGFuZ3VhZ2VMb2FkZXIgfCBudWxsLFxuICAgICkge1xuICAgICAgICBzdXBlcih0dWlBc3luY0xvYWRMYW5ndWFnZShzdG9yYWdlLmdldEl0ZW0oa2V5KSwgbG9hZGVyLCBmYWxsYmFjaykpO1xuICAgIH1cblxuICAgIGdldCBsYW5ndWFnZSgpOiBUdWlMYW5ndWFnZU5hbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy5rZXkpIHx8IHRoaXMuZmFsbGJhY2submFtZTtcbiAgICB9XG5cbiAgICBzZXRMYW5ndWFnZShsYW5ndWFnZTogVHVpTGFuZ3VhZ2VOYW1lKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBsYW5ndWFnZSk7XG5cbiAgICAgICAgdGhpcy5uZXh0KHR1aUFzeW5jTG9hZExhbmd1YWdlKGxhbmd1YWdlLCB0aGlzLmxvYWRlciwgdGhpcy5mYWxsYmFjaykpO1xuICAgIH1cblxuICAgIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmtleSk7XG5cbiAgICAgICAgdGhpcy5uZXh0KG9mKHRoaXMuZmFsbGJhY2spKTtcbiAgICB9XG59XG4iXX0=