import { __decorate, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { LOCAL_STORAGE } from '@ng-web-apis/common';
import { TUI_LANGUAGE_LOADER, TUI_LANGUAGE_STORAGE_KEY } from '@taiga-ui/i18n/tokens';
import { TUI_DEFAULT_LANGUAGE } from '@taiga-ui/i18n/tools';
import { BehaviorSubject, of } from 'rxjs';
import { tuiAsyncLoadLanguage } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/i18n/tools";
import * as i2 from "@taiga-ui/i18n/tokens";
import * as i3 from "@ng-web-apis/common";
// @dynamic
let TuiLanguageSwitcher = class TuiLanguageSwitcher extends BehaviorSubject {
    constructor(fallback, key, storage, loader) {
        super(tuiAsyncLoadLanguage(storage.getItem(key), loader, fallback));
        this.fallback = fallback;
        this.key = key;
        this.storage = storage;
        this.loader = loader;
    }
    get language() {
        return this.storage.getItem(this.key) || this.fallback.name;
    }
    setLanguage(language) {
        this.storage.setItem(this.key, language);
        this.next(tuiAsyncLoadLanguage(language, this.loader, this.fallback));
    }
    clear() {
        this.storage.removeItem(this.key);
        this.next(of(this.fallback));
    }
};
TuiLanguageSwitcher.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DEFAULT_LANGUAGE,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_LANGUAGE_STORAGE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_LANGUAGE_LOADER,] }] }
];
TuiLanguageSwitcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiLanguageSwitcher_Factory() { return new TuiLanguageSwitcher(i0.ɵɵinject(i1.TUI_DEFAULT_LANGUAGE), i0.ɵɵinject(i2.TUI_LANGUAGE_STORAGE_KEY), i0.ɵɵinject(i3.LOCAL_STORAGE), i0.ɵɵinject(i2.TUI_LANGUAGE_LOADER, 8)); }, token: TuiLanguageSwitcher, providedIn: "root" });
TuiLanguageSwitcher = __decorate([
    Injectable({ providedIn: `root` }),
    __param(0, Inject(TUI_DEFAULT_LANGUAGE)),
    __param(1, Inject(TUI_LANGUAGE_STORAGE_KEY)),
    __param(2, Inject(LOCAL_STORAGE)),
    __param(3, Optional()),
    __param(3, Inject(TUI_LANGUAGE_LOADER))
], TuiLanguageSwitcher);
export { TuiLanguageSwitcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc3dpdGNoZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9pMThuL3N3aXRjaC8iLCJzb3VyY2VzIjpbImxhbmd1YWdlLXN3aXRjaGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFPbEQsT0FBTyxFQUFDLG1CQUFtQixFQUFFLHdCQUF3QixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGVBQWUsRUFBYyxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sU0FBUyxDQUFDOzs7OztBQUU3QyxXQUFXO0FBRVgsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxlQUF3QztJQUM3RSxZQUVxQixRQUFxQixFQUVyQixHQUFXLEVBRVgsT0FBMkIsRUFHM0IsTUFBZ0M7UUFFakQsS0FBSyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFUbkQsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUVyQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBRVgsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFHM0IsV0FBTSxHQUFOLE1BQU0sQ0FBMEI7SUFHckQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hFLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBeUI7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDSixDQUFBOzs0Q0E1QlEsTUFBTSxTQUFDLG9CQUFvQjt5Q0FFM0IsTUFBTSxTQUFDLHdCQUF3Qjs0Q0FFL0IsTUFBTSxTQUFDLGFBQWE7NENBRXBCLFFBQVEsWUFDUixNQUFNLFNBQUMsbUJBQW1COzs7QUFUdEIsbUJBQW1CO0lBRC9CLFVBQVUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsQ0FBQztJQUd4QixXQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0lBRTVCLFdBQUEsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUE7SUFFaEMsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFckIsV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7R0FUdkIsbUJBQW1CLENBOEIvQjtTQTlCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMT0NBTF9TVE9SQUdFfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgVHVpTGFuZ3VhZ2UsXG4gICAgVHVpTGFuZ3VhZ2VMb2FkZXIsXG4gICAgVHVpTGFuZ3VhZ2VOYW1lLFxuICAgIFR1aUxhbmd1YWdlU3RvcmFnZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9MQU5HVUFHRV9MT0FERVIsIFRVSV9MQU5HVUFHRV9TVE9SQUdFX0tFWX0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vdG9rZW5zJztcbmltcG9ydCB7VFVJX0RFRkFVTFRfTEFOR1VBR0V9IGZyb20gJ0B0YWlnYS11aS9pMThuL3Rvb2xzJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7dHVpQXN5bmNMb2FkTGFuZ3VhZ2V9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46IGByb290YH0pXG5leHBvcnQgY2xhc3MgVHVpTGFuZ3VhZ2VTd2l0Y2hlciBleHRlbmRzIEJlaGF2aW9yU3ViamVjdDxPYnNlcnZhYmxlPFR1aUxhbmd1YWdlPj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9ERUZBVUxUX0xBTkdVQUdFKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGZhbGxiYWNrOiBUdWlMYW5ndWFnZSxcbiAgICAgICAgQEluamVjdChUVUlfTEFOR1VBR0VfU1RPUkFHRV9LRVkpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkga2V5OiBzdHJpbmcsXG4gICAgICAgIEBJbmplY3QoTE9DQUxfU1RPUkFHRSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlOiBUdWlMYW5ndWFnZVN0b3JhZ2UsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVFVJX0xBTkdVQUdFX0xPQURFUilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsb2FkZXI6IFR1aUxhbmd1YWdlTG9hZGVyIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIodHVpQXN5bmNMb2FkTGFuZ3VhZ2Uoc3RvcmFnZS5nZXRJdGVtKGtleSksIGxvYWRlciwgZmFsbGJhY2spKTtcbiAgICB9XG5cbiAgICBnZXQgbGFuZ3VhZ2UoKTogVHVpTGFuZ3VhZ2VOYW1lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRJdGVtKHRoaXMua2V5KSB8fCB0aGlzLmZhbGxiYWNrLm5hbWU7XG4gICAgfVxuXG4gICAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IFR1aUxhbmd1YWdlTmFtZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmtleSwgbGFuZ3VhZ2UpO1xuXG4gICAgICAgIHRoaXMubmV4dCh0dWlBc3luY0xvYWRMYW5ndWFnZShsYW5ndWFnZSwgdGhpcy5sb2FkZXIsIHRoaXMuZmFsbGJhY2spKTtcbiAgICB9XG5cbiAgICBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5rZXkpO1xuXG4gICAgICAgIHRoaXMubmV4dChvZih0aGlzLmZhbGxiYWNrKSk7XG4gICAgfVxufVxuIl19