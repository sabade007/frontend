export const TUI_FRENCH_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: [`Couleur unie`, `Dégradé de couleur`],
    toolbarTools: {
        undo: `Annuler`,
        redo: `Rétablir`,
        font: `Police`,
        fontStyle: `Style de police`,
        fontSize: `Taille de police`,
        bold: `Gras`,
        italic: `Italique`,
        underline: `Souligner`,
        strikeThrough: `Barrer`,
        justify: `Justifier`,
        justifyLeft: `Aligner à gauche`,
        justifyCenter: `Centrer`,
        justifyRight: `Justifier à droite`,
        justifyFull: `Justifier`,
        list: `Liste`,
        indent: `Indenter`,
        outdent: `Réduire le retrait`,
        unorderedList: `Liste à puces`,
        orderedList: `Liste numérotée`,
        quote: `Quote`,
        foreColor: `Couleur de texte`,
        backColor: `Couleur de fond`,
        hiliteColor: `Couleur de mise en évidence`,
        clear: `Effacer`,
        link: `Lien`,
        attach: `Joindre un fichier`,
        tex: `Insérer TeX`,
        code: `Code`,
        image: `Insérer une image`,
        insertHorizontalRule: `Insérer la règle horizontale`,
        superscript: `Exposant`,
        subscript: `Indice`,
        insertTable: `Insert table`,
        insertGroup: `Insert group`,
        removeGroup: `Remove group`,
        insertAnchor: `Insert anchor`,
        mergeCells: `Merge cells`,
        splitCells: `Split cells`,
        rowsColumnsManaging: `Managing rows and columns`,
        cellColor: `Cell color`,
        setDetails: `Details`,
        removeDetails: `Remove details`,
    },
    editorEditLink: {
        urlExample: `example.com`,
        anchorExample: `anchor`,
    },
    editorTableCommands: [
        [`Insert column before`, `Insert column after`],
        [`Insert row before`, `Insert row after`],
        [`Delete column`, `Delete row`],
    ],
    editorCodeOptions: [`Code in the text`, `Code in block`],
    editorFontOptions: {
        small: `Small`,
        large: `Large`,
        normal: `Normal`,
        title: `Title`,
        subtitle: `Subtitle`,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2kxOG4vbGFuZ3VhZ2VzL2ZyZW5jaC8iLCJzb3VyY2VzIjpbImFkZG9uLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBbUI7SUFDNUQsc0JBQXNCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsb0JBQW9CLENBQUM7SUFDOUQsWUFBWSxFQUFFO1FBQ1YsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsVUFBVTtRQUNoQixJQUFJLEVBQUUsUUFBUTtRQUNkLFNBQVMsRUFBRSxpQkFBaUI7UUFDNUIsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLFNBQVMsRUFBRSxXQUFXO1FBQ3RCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLFdBQVcsRUFBRSxrQkFBa0I7UUFDL0IsYUFBYSxFQUFFLFNBQVM7UUFDeEIsWUFBWSxFQUFFLG9CQUFvQjtRQUNsQyxXQUFXLEVBQUUsV0FBVztRQUN4QixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsYUFBYSxFQUFFLGVBQWU7UUFDOUIsV0FBVyxFQUFFLGlCQUFpQjtRQUM5QixLQUFLLEVBQUUsT0FBTztRQUNkLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsU0FBUyxFQUFFLGlCQUFpQjtRQUM1QixXQUFXLEVBQUUsNkJBQTZCO1FBQzFDLEtBQUssRUFBRSxTQUFTO1FBQ2hCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLG9CQUFvQjtRQUM1QixHQUFHLEVBQUUsYUFBYTtRQUNsQixJQUFJLEVBQUUsTUFBTTtRQUNaLEtBQUssRUFBRSxtQkFBbUI7UUFDMUIsb0JBQW9CLEVBQUUsOEJBQThCO1FBQ3BELFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLFNBQVMsRUFBRSxRQUFRO1FBQ25CLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFlBQVksRUFBRSxlQUFlO1FBQzdCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLG1CQUFtQixFQUFFLDJCQUEyQjtRQUNoRCxTQUFTLEVBQUUsWUFBWTtRQUN2QixVQUFVLEVBQUUsU0FBUztRQUNyQixhQUFhLEVBQUUsZ0JBQWdCO0tBQ2xDO0lBQ0QsY0FBYyxFQUFFO1FBQ1osVUFBVSxFQUFFLGFBQWE7UUFDekIsYUFBYSxFQUFFLFFBQVE7S0FDMUI7SUFDRCxtQkFBbUIsRUFBRTtRQUNqQixDQUFDLHNCQUFzQixFQUFFLHFCQUFxQixDQUFDO1FBQy9DLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUM7UUFDekMsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDO0tBQ2xDO0lBQ0QsaUJBQWlCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxlQUFlLENBQUM7SUFDeEQsaUJBQWlCLEVBQUU7UUFDZixLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxPQUFPO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsVUFBVTtLQUN2QjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xhbmd1YWdlRWRpdG9yfSBmcm9tICdAdGFpZ2EtdWkvaTE4bi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9GUkVOQ0hfTEFOR1VBR0VfQURET05fRURJVE9SOiBMYW5ndWFnZUVkaXRvciA9IHtcbiAgICBjb2xvclNlbGVjdG9yTW9kZU5hbWVzOiBbYENvdWxldXIgdW5pZWAsIGBEw6lncmFkw6kgZGUgY291bGV1cmBdLFxuICAgIHRvb2xiYXJUb29sczoge1xuICAgICAgICB1bmRvOiBgQW5udWxlcmAsXG4gICAgICAgIHJlZG86IGBSw6l0YWJsaXJgLFxuICAgICAgICBmb250OiBgUG9saWNlYCxcbiAgICAgICAgZm9udFN0eWxlOiBgU3R5bGUgZGUgcG9saWNlYCxcbiAgICAgICAgZm9udFNpemU6IGBUYWlsbGUgZGUgcG9saWNlYCxcbiAgICAgICAgYm9sZDogYEdyYXNgLFxuICAgICAgICBpdGFsaWM6IGBJdGFsaXF1ZWAsXG4gICAgICAgIHVuZGVybGluZTogYFNvdWxpZ25lcmAsXG4gICAgICAgIHN0cmlrZVRocm91Z2g6IGBCYXJyZXJgLFxuICAgICAgICBqdXN0aWZ5OiBgSnVzdGlmaWVyYCxcbiAgICAgICAganVzdGlmeUxlZnQ6IGBBbGlnbmVyIMOgIGdhdWNoZWAsXG4gICAgICAgIGp1c3RpZnlDZW50ZXI6IGBDZW50cmVyYCxcbiAgICAgICAganVzdGlmeVJpZ2h0OiBgSnVzdGlmaWVyIMOgIGRyb2l0ZWAsXG4gICAgICAgIGp1c3RpZnlGdWxsOiBgSnVzdGlmaWVyYCxcbiAgICAgICAgbGlzdDogYExpc3RlYCxcbiAgICAgICAgaW5kZW50OiBgSW5kZW50ZXJgLFxuICAgICAgICBvdXRkZW50OiBgUsOpZHVpcmUgbGUgcmV0cmFpdGAsXG4gICAgICAgIHVub3JkZXJlZExpc3Q6IGBMaXN0ZSDDoCBwdWNlc2AsXG4gICAgICAgIG9yZGVyZWRMaXN0OiBgTGlzdGUgbnVtw6lyb3TDqWVgLFxuICAgICAgICBxdW90ZTogYFF1b3RlYCxcbiAgICAgICAgZm9yZUNvbG9yOiBgQ291bGV1ciBkZSB0ZXh0ZWAsXG4gICAgICAgIGJhY2tDb2xvcjogYENvdWxldXIgZGUgZm9uZGAsXG4gICAgICAgIGhpbGl0ZUNvbG9yOiBgQ291bGV1ciBkZSBtaXNlIGVuIMOpdmlkZW5jZWAsXG4gICAgICAgIGNsZWFyOiBgRWZmYWNlcmAsXG4gICAgICAgIGxpbms6IGBMaWVuYCxcbiAgICAgICAgYXR0YWNoOiBgSm9pbmRyZSB1biBmaWNoaWVyYCxcbiAgICAgICAgdGV4OiBgSW5zw6lyZXIgVGVYYCxcbiAgICAgICAgY29kZTogYENvZGVgLFxuICAgICAgICBpbWFnZTogYEluc8OpcmVyIHVuZSBpbWFnZWAsXG4gICAgICAgIGluc2VydEhvcml6b250YWxSdWxlOiBgSW5zw6lyZXIgbGEgcsOoZ2xlIGhvcml6b250YWxlYCxcbiAgICAgICAgc3VwZXJzY3JpcHQ6IGBFeHBvc2FudGAsXG4gICAgICAgIHN1YnNjcmlwdDogYEluZGljZWAsXG4gICAgICAgIGluc2VydFRhYmxlOiBgSW5zZXJ0IHRhYmxlYCxcbiAgICAgICAgaW5zZXJ0R3JvdXA6IGBJbnNlcnQgZ3JvdXBgLFxuICAgICAgICByZW1vdmVHcm91cDogYFJlbW92ZSBncm91cGAsXG4gICAgICAgIGluc2VydEFuY2hvcjogYEluc2VydCBhbmNob3JgLFxuICAgICAgICBtZXJnZUNlbGxzOiBgTWVyZ2UgY2VsbHNgLFxuICAgICAgICBzcGxpdENlbGxzOiBgU3BsaXQgY2VsbHNgLFxuICAgICAgICByb3dzQ29sdW1uc01hbmFnaW5nOiBgTWFuYWdpbmcgcm93cyBhbmQgY29sdW1uc2AsXG4gICAgICAgIGNlbGxDb2xvcjogYENlbGwgY29sb3JgLFxuICAgICAgICBzZXREZXRhaWxzOiBgRGV0YWlsc2AsXG4gICAgICAgIHJlbW92ZURldGFpbHM6IGBSZW1vdmUgZGV0YWlsc2AsXG4gICAgfSxcbiAgICBlZGl0b3JFZGl0TGluazoge1xuICAgICAgICB1cmxFeGFtcGxlOiBgZXhhbXBsZS5jb21gLFxuICAgICAgICBhbmNob3JFeGFtcGxlOiBgYW5jaG9yYCxcbiAgICB9LFxuICAgIGVkaXRvclRhYmxlQ29tbWFuZHM6IFtcbiAgICAgICAgW2BJbnNlcnQgY29sdW1uIGJlZm9yZWAsIGBJbnNlcnQgY29sdW1uIGFmdGVyYF0sXG4gICAgICAgIFtgSW5zZXJ0IHJvdyBiZWZvcmVgLCBgSW5zZXJ0IHJvdyBhZnRlcmBdLFxuICAgICAgICBbYERlbGV0ZSBjb2x1bW5gLCBgRGVsZXRlIHJvd2BdLFxuICAgIF0sXG4gICAgZWRpdG9yQ29kZU9wdGlvbnM6IFtgQ29kZSBpbiB0aGUgdGV4dGAsIGBDb2RlIGluIGJsb2NrYF0sXG4gICAgZWRpdG9yRm9udE9wdGlvbnM6IHtcbiAgICAgICAgc21hbGw6IGBTbWFsbGAsXG4gICAgICAgIGxhcmdlOiBgTGFyZ2VgLFxuICAgICAgICBub3JtYWw6IGBOb3JtYWxgLFxuICAgICAgICB0aXRsZTogYFRpdGxlYCxcbiAgICAgICAgc3VidGl0bGU6IGBTdWJ0aXRsZWAsXG4gICAgfSxcbn07XG4iXX0=