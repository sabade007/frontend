export const TUI_GERMAN_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: [`Farbe`, `Verlauf`],
    toolbarTools: {
        undo: `Rückgängig machen`,
        redo: `Wiederholen`,
        font: `Schriftart`,
        fontStyle: `Schriftstil`,
        fontSize: `Schriftgröße`,
        bold: `Fett`,
        italic: `Kursiv`,
        underline: `Unterstrichen`,
        strikeThrough: `Durchgestrichen`,
        justify: `Blocksatz`,
        justifyLeft: `Blocksatz links`,
        justifyCenter: `Blocksatz mittig`,
        justifyRight: `Blocksatz rechts`,
        justifyFull: `Blocksatz`,
        list: `Liste`,
        indent: `Einrücken`,
        outdent: `Ausrücken`,
        unorderedList: `Ungeordnete Liste`,
        orderedList: `Geordnete Liste`,
        quote: `Blockquote`,
        foreColor: `Farbe`,
        backColor: `Hintergrundfarbe`,
        hiliteColor: `Hilite-Farbe`,
        clear: `Löschen`,
        link: `Link`,
        attach: `Datei anhängen`,
        tex: `TeX einfügen`,
        code: `Quelltext`,
        image: `Bild einfügen`,
        insertHorizontalRule: `Horizontale Linie einfügen`,
        superscript: `Hochgestellt`,
        subscript: `Tiefgestellt`,
        insertTable: `Insert table`,
        insertGroup: `Insert group`,
        removeGroup: `Remove group`,
        insertAnchor: `Insert anchor`,
        mergeCells: `Merge cells`,
        splitCells: `Split cells`,
        rowsColumnsManaging: `Managing rows and columns`,
        cellColor: `Cell color`,
        setDetails: `Details`,
        removeDetails: `Remove details`,
    },
    editorEditLink: {
        urlExample: `example.com`,
        anchorExample: `anchor`,
    },
    editorTableCommands: [
        [`Insert column before`, `Insert column after`],
        [`Insert row before`, `Insert row after`],
        [`Delete column`, `Delete row`],
    ],
    editorCodeOptions: [`Code in the text`, `Code in block`],
    editorFontOptions: {
        small: `Small`,
        large: `Large`,
        normal: `Normal`,
        title: `Title`,
        subtitle: `Subtitle`,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2kxOG4vbGFuZ3VhZ2VzL2dlcm1hbi8iLCJzb3VyY2VzIjpbImFkZG9uLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBbUI7SUFDNUQsc0JBQXNCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQzVDLFlBQVksRUFBRTtRQUNWLElBQUksRUFBRSxtQkFBbUI7UUFDekIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsU0FBUyxFQUFFLGFBQWE7UUFDeEIsUUFBUSxFQUFFLGNBQWM7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsUUFBUTtRQUNoQixTQUFTLEVBQUUsZUFBZTtRQUMxQixhQUFhLEVBQUUsaUJBQWlCO1FBQ2hDLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUIsYUFBYSxFQUFFLGtCQUFrQjtRQUNqQyxZQUFZLEVBQUUsa0JBQWtCO1FBQ2hDLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsYUFBYSxFQUFFLG1CQUFtQjtRQUNsQyxXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLEtBQUssRUFBRSxZQUFZO1FBQ25CLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsS0FBSyxFQUFFLFNBQVM7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLEdBQUcsRUFBRSxjQUFjO1FBQ25CLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxlQUFlO1FBQ3RCLG9CQUFvQixFQUFFLDRCQUE0QjtRQUNsRCxXQUFXLEVBQUUsY0FBYztRQUMzQixTQUFTLEVBQUUsY0FBYztRQUN6QixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixZQUFZLEVBQUUsZUFBZTtRQUM3QixVQUFVLEVBQUUsYUFBYTtRQUN6QixVQUFVLEVBQUUsYUFBYTtRQUN6QixtQkFBbUIsRUFBRSwyQkFBMkI7UUFDaEQsU0FBUyxFQUFFLFlBQVk7UUFDdkIsVUFBVSxFQUFFLFNBQVM7UUFDckIsYUFBYSxFQUFFLGdCQUFnQjtLQUNsQztJQUNELGNBQWMsRUFBRTtRQUNaLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLGFBQWEsRUFBRSxRQUFRO0tBQzFCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDakIsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsQ0FBQztRQUMvQyxDQUFDLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDO1FBQ3pDLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQztLQUNsQztJQUNELGlCQUFpQixFQUFFLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDO0lBQ3hELGlCQUFpQixFQUFFO1FBQ2YsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLEtBQUssRUFBRSxPQUFPO1FBQ2QsUUFBUSxFQUFFLFVBQVU7S0FDdkI7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMYW5ndWFnZUVkaXRvcn0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfR0VSTUFOX0xBTkdVQUdFX0FERE9OX0VESVRPUjogTGFuZ3VhZ2VFZGl0b3IgPSB7XG4gICAgY29sb3JTZWxlY3Rvck1vZGVOYW1lczogW2BGYXJiZWAsIGBWZXJsYXVmYF0sXG4gICAgdG9vbGJhclRvb2xzOiB7XG4gICAgICAgIHVuZG86IGBSw7xja2fDpG5naWcgbWFjaGVuYCxcbiAgICAgICAgcmVkbzogYFdpZWRlcmhvbGVuYCxcbiAgICAgICAgZm9udDogYFNjaHJpZnRhcnRgLFxuICAgICAgICBmb250U3R5bGU6IGBTY2hyaWZ0c3RpbGAsXG4gICAgICAgIGZvbnRTaXplOiBgU2NocmlmdGdyw7bDn2VgLFxuICAgICAgICBib2xkOiBgRmV0dGAsXG4gICAgICAgIGl0YWxpYzogYEt1cnNpdmAsXG4gICAgICAgIHVuZGVybGluZTogYFVudGVyc3RyaWNoZW5gLFxuICAgICAgICBzdHJpa2VUaHJvdWdoOiBgRHVyY2hnZXN0cmljaGVuYCxcbiAgICAgICAganVzdGlmeTogYEJsb2Nrc2F0emAsXG4gICAgICAgIGp1c3RpZnlMZWZ0OiBgQmxvY2tzYXR6IGxpbmtzYCxcbiAgICAgICAganVzdGlmeUNlbnRlcjogYEJsb2Nrc2F0eiBtaXR0aWdgLFxuICAgICAgICBqdXN0aWZ5UmlnaHQ6IGBCbG9ja3NhdHogcmVjaHRzYCxcbiAgICAgICAganVzdGlmeUZ1bGw6IGBCbG9ja3NhdHpgLFxuICAgICAgICBsaXN0OiBgTGlzdGVgLFxuICAgICAgICBpbmRlbnQ6IGBFaW5yw7xja2VuYCxcbiAgICAgICAgb3V0ZGVudDogYEF1c3LDvGNrZW5gLFxuICAgICAgICB1bm9yZGVyZWRMaXN0OiBgVW5nZW9yZG5ldGUgTGlzdGVgLFxuICAgICAgICBvcmRlcmVkTGlzdDogYEdlb3JkbmV0ZSBMaXN0ZWAsXG4gICAgICAgIHF1b3RlOiBgQmxvY2txdW90ZWAsXG4gICAgICAgIGZvcmVDb2xvcjogYEZhcmJlYCxcbiAgICAgICAgYmFja0NvbG9yOiBgSGludGVyZ3J1bmRmYXJiZWAsXG4gICAgICAgIGhpbGl0ZUNvbG9yOiBgSGlsaXRlLUZhcmJlYCxcbiAgICAgICAgY2xlYXI6IGBMw7ZzY2hlbmAsXG4gICAgICAgIGxpbms6IGBMaW5rYCxcbiAgICAgICAgYXR0YWNoOiBgRGF0ZWkgYW5ow6RuZ2VuYCxcbiAgICAgICAgdGV4OiBgVGVYIGVpbmbDvGdlbmAsXG4gICAgICAgIGNvZGU6IGBRdWVsbHRleHRgLFxuICAgICAgICBpbWFnZTogYEJpbGQgZWluZsO8Z2VuYCxcbiAgICAgICAgaW5zZXJ0SG9yaXpvbnRhbFJ1bGU6IGBIb3Jpem9udGFsZSBMaW5pZSBlaW5mw7xnZW5gLFxuICAgICAgICBzdXBlcnNjcmlwdDogYEhvY2hnZXN0ZWxsdGAsXG4gICAgICAgIHN1YnNjcmlwdDogYFRpZWZnZXN0ZWxsdGAsXG4gICAgICAgIGluc2VydFRhYmxlOiBgSW5zZXJ0IHRhYmxlYCxcbiAgICAgICAgaW5zZXJ0R3JvdXA6IGBJbnNlcnQgZ3JvdXBgLFxuICAgICAgICByZW1vdmVHcm91cDogYFJlbW92ZSBncm91cGAsXG4gICAgICAgIGluc2VydEFuY2hvcjogYEluc2VydCBhbmNob3JgLFxuICAgICAgICBtZXJnZUNlbGxzOiBgTWVyZ2UgY2VsbHNgLFxuICAgICAgICBzcGxpdENlbGxzOiBgU3BsaXQgY2VsbHNgLFxuICAgICAgICByb3dzQ29sdW1uc01hbmFnaW5nOiBgTWFuYWdpbmcgcm93cyBhbmQgY29sdW1uc2AsXG4gICAgICAgIGNlbGxDb2xvcjogYENlbGwgY29sb3JgLFxuICAgICAgICBzZXREZXRhaWxzOiBgRGV0YWlsc2AsXG4gICAgICAgIHJlbW92ZURldGFpbHM6IGBSZW1vdmUgZGV0YWlsc2AsXG4gICAgfSxcbiAgICBlZGl0b3JFZGl0TGluazoge1xuICAgICAgICB1cmxFeGFtcGxlOiBgZXhhbXBsZS5jb21gLFxuICAgICAgICBhbmNob3JFeGFtcGxlOiBgYW5jaG9yYCxcbiAgICB9LFxuICAgIGVkaXRvclRhYmxlQ29tbWFuZHM6IFtcbiAgICAgICAgW2BJbnNlcnQgY29sdW1uIGJlZm9yZWAsIGBJbnNlcnQgY29sdW1uIGFmdGVyYF0sXG4gICAgICAgIFtgSW5zZXJ0IHJvdyBiZWZvcmVgLCBgSW5zZXJ0IHJvdyBhZnRlcmBdLFxuICAgICAgICBbYERlbGV0ZSBjb2x1bW5gLCBgRGVsZXRlIHJvd2BdLFxuICAgIF0sXG4gICAgZWRpdG9yQ29kZU9wdGlvbnM6IFtgQ29kZSBpbiB0aGUgdGV4dGAsIGBDb2RlIGluIGJsb2NrYF0sXG4gICAgZWRpdG9yRm9udE9wdGlvbnM6IHtcbiAgICAgICAgc21hbGw6IGBTbWFsbGAsXG4gICAgICAgIGxhcmdlOiBgTGFyZ2VgLFxuICAgICAgICBub3JtYWw6IGBOb3JtYWxgLFxuICAgICAgICB0aXRsZTogYFRpdGxlYCxcbiAgICAgICAgc3VidGl0bGU6IGBTdWJ0aXRsZWAsXG4gICAgfSxcbn07XG4iXX0=