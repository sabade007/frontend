import { InjectionToken } from '@angular/core';
/**
 * TODO: think about reorganization in @taiga-ui/i18n way
 */
/**
 * Works with a tuple
 * [@string tuiMode tooltip content, @string word 'background', @string 'form value']
 */
export const TUI_DOC_DEMO_TEXTS = new InjectionToken(`tui-doc-demo i18n texts`, {
    factory: () => [`Read more more about modes: `, `Background`, `Form value`],
});
/**
 * Works with a tuple
 * [
 * @string word 'argument',
 * @string word 'type',
 * @string 'name and description',
 * @string word 'value'
 * @string message for tooltip about ng-polymorpheus
 * ]
 */
export const TUI_DOC_DOCUMENTATION_TEXTS = new InjectionToken(`tui-doc-documentation i18n texts`, {
    factory: () => [
        `Argument`,
        `Type`,
        `Name and description`,
        `Value`,
        `Learn about our dynamic templates from `,
    ],
});
/**
 * Works with a tuple
 * [
 * @string default tab name,
 * @string link to a sample copied message text,
 * @string link to a sample copied message label
 * ]
 */
export const TUI_DOC_EXAMPLE_TEXTS = new InjectionToken(`tui-doc-example i18n texts`, {
    factory: () => [`Preview`, `Link to a sample was successfully copied`, `Done`],
});
export const TUI_DOC_MENU_TEXT = new InjectionToken(`menu i18n text`, {
    factory: () => `Menu`,
});
export const TUI_DOC_SEARCH_TEXT = new InjectionToken(`search i18n text`, {
    factory: () => `Search`,
});
export const TUI_DOC_SEE_ALSO_TEXT = new InjectionToken(`tui-doc-see-also i18n text`, {
    factory: () => `See also`,
});
export const TUI_DOC_SOURCE_CODE_TEXT = new InjectionToken(`tui-doc-source-code i18n text`, {
    factory: () => `Source code`,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9hZGRvbi1kb2MvIiwic291cmNlcyI6WyJ0b2tlbnMvaTE4bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDOztHQUVHO0FBRUg7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxjQUFjLENBQ2hELHlCQUF5QixFQUN6QjtJQUNJLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLDhCQUE4QixFQUFFLFlBQVksRUFBRSxZQUFZLENBQUM7Q0FDOUUsQ0FDSixDQUFDO0FBRUY7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBRTNELGtDQUFrQyxFQUFFO0lBQ2xDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNYLFVBQVU7UUFDVixNQUFNO1FBQ04sc0JBQXNCO1FBQ3RCLE9BQU87UUFDUCx5Q0FBeUM7S0FDNUM7Q0FDSixDQUFDLENBQUM7QUFFSDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQ25ELDRCQUE0QixFQUM1QjtJQUNJLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSwwQ0FBMEMsRUFBRSxNQUFNLENBQUM7Q0FDakYsQ0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQVMsZ0JBQWdCLEVBQUU7SUFDMUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU07Q0FDeEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQVMsa0JBQWtCLEVBQUU7SUFDOUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVE7Q0FDMUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQ25ELDRCQUE0QixFQUM1QjtJQUNJLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVO0NBQzVCLENBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLElBQUksY0FBYyxDQUN0RCwrQkFBK0IsRUFDL0I7SUFDSSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYTtDQUMvQixDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBUT0RPOiB0aGluayBhYm91dCByZW9yZ2FuaXphdGlvbiBpbiBAdGFpZ2EtdWkvaTE4biB3YXlcbiAqL1xuXG4vKipcbiAqIFdvcmtzIHdpdGggYSB0dXBsZVxuICogW0BzdHJpbmcgdHVpTW9kZSB0b29sdGlwIGNvbnRlbnQsIEBzdHJpbmcgd29yZCAnYmFja2dyb3VuZCcsIEBzdHJpbmcgJ2Zvcm0gdmFsdWUnXVxuICovXG5leHBvcnQgY29uc3QgVFVJX0RPQ19ERU1PX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuPFtzdHJpbmcsIHN0cmluZywgc3RyaW5nXT4oXG4gICAgYHR1aS1kb2MtZGVtbyBpMThuIHRleHRzYCxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6ICgpID0+IFtgUmVhZCBtb3JlIG1vcmUgYWJvdXQgbW9kZXM6IGAsIGBCYWNrZ3JvdW5kYCwgYEZvcm0gdmFsdWVgXSxcbiAgICB9LFxuKTtcblxuLyoqXG4gKiBXb3JrcyB3aXRoIGEgdHVwbGVcbiAqIFtcbiAqIEBzdHJpbmcgd29yZCAnYXJndW1lbnQnLFxuICogQHN0cmluZyB3b3JkICd0eXBlJyxcbiAqIEBzdHJpbmcgJ25hbWUgYW5kIGRlc2NyaXB0aW9uJyxcbiAqIEBzdHJpbmcgd29yZCAndmFsdWUnXG4gKiBAc3RyaW5nIG1lc3NhZ2UgZm9yIHRvb2x0aXAgYWJvdXQgbmctcG9seW1vcnBoZXVzXG4gKiBdXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfRE9DX0RPQ1VNRU5UQVRJT05fVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48XG4gICAgW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nXVxuPihgdHVpLWRvYy1kb2N1bWVudGF0aW9uIGkxOG4gdGV4dHNgLCB7XG4gICAgZmFjdG9yeTogKCkgPT4gW1xuICAgICAgICBgQXJndW1lbnRgLFxuICAgICAgICBgVHlwZWAsXG4gICAgICAgIGBOYW1lIGFuZCBkZXNjcmlwdGlvbmAsXG4gICAgICAgIGBWYWx1ZWAsXG4gICAgICAgIGBMZWFybiBhYm91dCBvdXIgZHluYW1pYyB0ZW1wbGF0ZXMgZnJvbSBgLFxuICAgIF0sXG59KTtcblxuLyoqXG4gKiBXb3JrcyB3aXRoIGEgdHVwbGVcbiAqIFtcbiAqIEBzdHJpbmcgZGVmYXVsdCB0YWIgbmFtZSxcbiAqIEBzdHJpbmcgbGluayB0byBhIHNhbXBsZSBjb3BpZWQgbWVzc2FnZSB0ZXh0LFxuICogQHN0cmluZyBsaW5rIHRvIGEgc2FtcGxlIGNvcGllZCBtZXNzYWdlIGxhYmVsXG4gKiBdXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfRE9DX0VYQU1QTEVfVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48W3N0cmluZywgc3RyaW5nLCBzdHJpbmddPihcbiAgICBgdHVpLWRvYy1leGFtcGxlIGkxOG4gdGV4dHNgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogKCkgPT4gW2BQcmV2aWV3YCwgYExpbmsgdG8gYSBzYW1wbGUgd2FzIHN1Y2Nlc3NmdWxseSBjb3BpZWRgLCBgRG9uZWBdLFxuICAgIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0RPQ19NRU5VX1RFWFQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPihgbWVudSBpMThuIHRleHRgLCB7XG4gICAgZmFjdG9yeTogKCkgPT4gYE1lbnVgLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfRE9DX1NFQVJDSF9URVhUID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oYHNlYXJjaCBpMThuIHRleHRgLCB7XG4gICAgZmFjdG9yeTogKCkgPT4gYFNlYXJjaGAsXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9ET0NfU0VFX0FMU09fVEVYVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KFxuICAgIGB0dWktZG9jLXNlZS1hbHNvIGkxOG4gdGV4dGAsXG4gICAge1xuICAgICAgICBmYWN0b3J5OiAoKSA9PiBgU2VlIGFsc29gLFxuICAgIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0RPQ19TT1VSQ0VfQ09ERV9URVhUID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oXG4gICAgYHR1aS1kb2Mtc291cmNlLWNvZGUgaTE4biB0ZXh0YCxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6ICgpID0+IGBTb3VyY2UgY29kZWAsXG4gICAgfSxcbik7XG4iXX0=