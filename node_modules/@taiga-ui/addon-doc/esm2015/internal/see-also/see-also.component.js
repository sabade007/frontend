import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { TUI_DOC_SEE_ALSO_TEXT } from '../../tokens/i18n';
import { TUI_DOC_PAGES } from '../../tokens/pages';
// @dynamic
let TuiDocSeeAlsoComponent = class TuiDocSeeAlsoComponent {
    constructor(text, pages) {
        this.text = text;
        this.pages = pages;
        this.seeAlso = [];
    }
    getRouterLink(pageTitle) {
        for (let i = 0; i < this.pages.length; i++) {
            const page = this.pages
                .map(page => ('subPages' in page ? page.subPages : [page]))
                .reduce((pages, subPages) => [...pages, ...subPages], [])
                .find((page) => page.title === pageTitle);
            if (page === null || page === void 0 ? void 0 : page.route) {
                return page.route;
            }
        }
        return '';
    }
};
TuiDocSeeAlsoComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [TUI_DOC_SEE_ALSO_TEXT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DOC_PAGES,] }] }
];
__decorate([
    Input()
], TuiDocSeeAlsoComponent.prototype, "seeAlso", void 0);
TuiDocSeeAlsoComponent = __decorate([
    Component({
        selector: 'tui-doc-see-also',
        template: "<h5 class=\"t-header\">{{ text }}</h5>\n<ng-container *ngFor=\"let item of seeAlso; last as last\">\n    <a\n        tuiLink\n        [routerLink]=\"getRouterLink(item)\"\n    >\n        {{ item }}\n    </a>\n    <ng-container *ngIf=\"!last\">{{ ', ' }}</ng-container>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block}.t-header{font-size:.6875rem;line-height:1rem;text-transform:uppercase;letter-spacing:.075em;color:var(--tui-text-02);margin:0 0 .5rem;white-space:nowrap}"]
    }),
    __param(0, Inject(TUI_DOC_SEE_ALSO_TEXT)),
    __param(1, Inject(TUI_DOC_PAGES))
], TuiDocSeeAlsoComponent);
export { TuiDocSeeAlsoComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VlLWFsc28uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2FkZG9uLWRvYy8iLCJzb3VyY2VzIjpbImludGVybmFsL3NlZS1hbHNvL3NlZS1hbHNvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR2hGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVqRCxXQUFXO0FBT1gsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFJL0IsWUFDNEMsSUFBWSxFQUVuQyxLQUFrRDtRQUYzQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBRW5DLFVBQUssR0FBTCxLQUFLLENBQTZDO1FBTHZFLFlBQU8sR0FBc0IsRUFBRSxDQUFDO0lBTTdCLENBQUM7SUFFSixhQUFhLENBQUMsU0FBaUI7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLO2lCQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDMUQsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztpQkFDeEQsSUFBSSxDQUFDLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQztZQUUxRCxJQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxLQUFLLEVBQUU7Z0JBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3JCO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDSixDQUFBOzt5Q0FuQlEsTUFBTSxTQUFDLHFCQUFxQjs0Q0FDNUIsTUFBTSxTQUFDLGFBQWE7O0FBSnpCO0lBREMsS0FBSyxFQUFFO3VEQUN3QjtBQUZ2QixzQkFBc0I7SUFObEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QiwyU0FBdUM7UUFFdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2xELENBQUM7SUFNTyxXQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQzdCLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0dBTmpCLHNCQUFzQixDQXdCbEM7U0F4Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtUdWlEb2NQYWdlLCBUdWlEb2NQYWdlR3JvdXB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGFnZSc7XG5pbXBvcnQge1RVSV9ET0NfU0VFX0FMU09fVEVYVH0gZnJvbSAnLi4vLi4vdG9rZW5zL2kxOG4nO1xuaW1wb3J0IHtUVUlfRE9DX1BBR0VTfSBmcm9tICcuLi8uLi90b2tlbnMvcGFnZXMnO1xuXG4vLyBAZHluYW1pY1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZG9jLXNlZS1hbHNvJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VlLWFsc28udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VlLWFsc28uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlEb2NTZWVBbHNvQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIHNlZUFsc286IHJlYWRvbmx5IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfRE9DX1NFRV9BTFNPX1RFWFQpIHJlYWRvbmx5IHRleHQ6IHN0cmluZyxcbiAgICAgICAgQEluamVjdChUVUlfRE9DX1BBR0VTKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHBhZ2VzOiBSZWFkb25seUFycmF5PFR1aURvY1BhZ2UgfCBUdWlEb2NQYWdlR3JvdXA+LFxuICAgICkge31cblxuICAgIGdldFJvdXRlckxpbmsocGFnZVRpdGxlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2VzXG4gICAgICAgICAgICAgICAgLm1hcChwYWdlID0+ICgnc3ViUGFnZXMnIGluIHBhZ2UgPyBwYWdlLnN1YlBhZ2VzIDogW3BhZ2VdKSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChwYWdlcywgc3ViUGFnZXMpID0+IFsuLi5wYWdlcywgLi4uc3ViUGFnZXNdLCBbXSlcbiAgICAgICAgICAgICAgICAuZmluZCgocGFnZTogVHVpRG9jUGFnZSkgPT4gcGFnZS50aXRsZSA9PT0gcGFnZVRpdGxlKTtcblxuICAgICAgICAgICAgaWYgKHBhZ2U/LnJvdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2Uucm91dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuIl19