import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Optional, } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { ActivatedRoute, Router } from '@angular/router';
import { TuiSidebarDirective } from '@taiga-ui/addon-mobile';
import { TuiDestroyService, tuiPure, uniqBy } from '@taiga-ui/cdk';
import { TuiBrightness, TuiModeDirective } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { filter, map, startWith, take, takeUntil } from 'rxjs/operators';
import { TUI_DOC_SEARCH_TEXT } from '../../tokens/i18n';
import { TUI_DOC_PAGE_LOADED } from '../../tokens/page-loaded';
import { TUI_DOC_SCROLL_BEHAVIOR } from '../../tokens/scroll-behavior';
import { transliterateKeyboardLayout } from '../../utils/transliterate-keyboard-layout';
import { NAVIGATION_ITEMS, NAVIGATION_LABELS, NAVIGATION_PROVIDERS, NAVIGATION_TITLE, } from './navigation.providers';
// @dynamic
let TuiDocNavigationComponent = class TuiDocNavigationComponent {
    constructor(changeDetectorRef, titleService, title$, documentRef, mode, sidebar, labels, items, searchText, router, activatedRoute, destroy$, readyToScroll$, scrollBehavior) {
        this.documentRef = documentRef;
        this.mode = mode;
        this.sidebar = sidebar;
        this.labels = labels;
        this.items = items;
        this.searchText = searchText;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.destroy$ = destroy$;
        this.readyToScroll$ = readyToScroll$;
        this.scrollBehavior = scrollBehavior;
        this.menuOpen = false;
        this.search = '';
        this.open = false;
        this.openPagesArr = [];
        this.openPagesGroupsArr = [];
        this.active = '';
        this.mode$ = this.mode.change$.pipe(startWith(null), map(() => this.mode.mode || 'onLight'));
        // Angular can't navigate no anchor links
        // https://stackoverflow.com/questions/36101756/angular2-routing-with-hashtag-to-page-anchor
        title$.subscribe(title => {
            changeDetectorRef.markForCheck();
            titleService.setTitle(title);
            this.openActivePageGroup();
            this.handleAnchorLink(this.activatedRoute.snapshot.fragment);
        });
    }
    get canOpen() {
        return this.search.length > 2;
    }
    get filteredItems() {
        return this.filterItems(this.flattenSubPages(this.items), this.search);
    }
    get itemsWithoutSections() {
        return this.items[this.items.length - 1];
    }
    isActive(route) {
        return route === this.active;
    }
    onGroupClick(index) {
        this.openPagesGroupsArr[index] = !this.openPagesGroupsArr[index];
    }
    closeMenu() {
        this.menuOpen = false;
    }
    onSearchChange(search) {
        this.search = search;
        this.open = this.canOpen;
    }
    onClick() {
        this.open = false;
        this.menuOpen = false;
        this.search = '';
        this.openActivePageGroup();
    }
    filterItems(items, search) {
        return items.map(section => uniqBy(section.filter(({ title, keywords = '' }) => {
            title = title.toLowerCase();
            search = search.toLowerCase();
            keywords = keywords.toLowerCase();
            return (title.includes(search) ||
                keywords.includes(search) ||
                title.includes(transliterateKeyboardLayout(search)) ||
                keywords.includes(transliterateKeyboardLayout(search)) ||
                search.replace(/-/gi, '').includes(title));
        }), 'title'));
    }
    flattenSubPages(items) {
        return items.reduce((array, item) => [
            ...array,
            item.reduce((pages, page) => 'subPages' in page
                ? [...pages, ...page.subPages]
                : [...pages, page], []),
        ], []);
    }
    isActiveRoute(route) {
        return this.router.isActive(route, false);
    }
    handleAnchorLink(hash) {
        this.readyToScroll$
            .pipe(filter(Boolean), take(1), takeUntil(this.destroy$))
            .subscribe(() => this.navigateToAnchorLink(hash));
    }
    openActivePageGroup() {
        this.items.forEach((pages, pagesIndex) => {
            pages.forEach((page, pageIndex) => {
                if ('route' in page && this.isActiveRoute(page.route)) {
                    this.openPagesArr[pagesIndex] = true;
                    this.active = page.route;
                }
                if ('subPages' in page) {
                    page.subPages.forEach(subPage => {
                        if (this.isActiveRoute(subPage.route)) {
                            this.openPagesArr[pagesIndex] = true;
                            this.openPagesGroupsArr[pagesIndex * 100 + pageIndex] = true;
                            this.active = subPage.route;
                        }
                    });
                }
            });
        });
    }
    navigateToAnchorLink(fragment) {
        const nodes = fragment ? this.documentRef.querySelectorAll(`#${fragment}`) : [];
        const element = nodes.length && nodes[nodes.length - 1];
        if (!element) {
            return;
        }
        element.classList.add('tui-doc-animated-example');
        element.scrollIntoView({
            block: 'start',
            inline: 'nearest',
            behavior: this.scrollBehavior,
        });
    }
};
TuiDocNavigationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Title, decorators: [{ type: Inject, args: [Title,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [NAVIGATION_TITLE,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: TuiModeDirective, decorators: [{ type: Inject, args: [TuiModeDirective,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TuiSidebarDirective,] }] },
    { type: Array, decorators: [{ type: Inject, args: [NAVIGATION_LABELS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NAVIGATION_ITEMS,] }] },
    { type: String, decorators: [{ type: Inject, args: [TUI_DOC_SEARCH_TEXT,] }] },
    { type: Router, decorators: [{ type: Inject, args: [Router,] }] },
    { type: ActivatedRoute, decorators: [{ type: Inject, args: [ActivatedRoute,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DOC_PAGE_LOADED,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DOC_SCROLL_BEHAVIOR,] }] }
];
__decorate([
    HostBinding('class._open')
], TuiDocNavigationComponent.prototype, "menuOpen", void 0);
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "filterItems", null);
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "flattenSubPages", null);
TuiDocNavigationComponent = __decorate([
    Component({
        selector: 'tui-doc-navigation',
        template: "<tui-hosted-dropdown\n    *tuiLet=\"filteredItems as filtered\"\n    tuiAutoFocus\n    tuiDropdownLimitWidth=\"fixed\"\n    class=\"t-input\"\n    [autoFocus]=\"!!sidebar\"\n    [content]=\"dropdown\"\n    [canOpen]=\"canOpen\"\n    [(open)]=\"open\"\n>\n    <tui-primitive-textfield\n        iconAlign=\"left\"\n        tuiTextfieldSize=\"m\"\n        iconContent=\"tuiIconSearch\"\n        [pseudoFocused]=\"open || null\"\n        [tuiTextfieldCleaner]=\"true\"\n        [tuiTextfieldLabelOutside]=\"true\"\n        [value]=\"search\"\n        (valueChange)=\"onSearchChange($event)\"\n    >\n        {{ searchText }}\n    </tui-primitive-textfield>\n    <ng-template\n        #dropdown\n        let-activeZone\n    >\n        <tui-data-list>\n            <tui-opt-group\n                *ngFor=\"let group of filtered; let index = index\"\n                [label]=\"labels[index] || ''\"\n            >\n                <a\n                    *ngFor=\"let item of group\"\n                    tuiOption\n                    [routerLink]=\"item.route\"\n                    (click)=\"onClick()\"\n                >\n                    {{ item.title }}\n                </a>\n            </tui-opt-group>\n        </tui-data-list>\n    </ng-template>\n</tui-hosted-dropdown>\n\n<nav class=\"t-navigation\">\n    <tui-scrollbar\n        class=\"t-scrollbar\"\n        [tuiMode]=\"mode$ | async\"\n    >\n        <tui-accordion\n            [closeOthers]=\"false\"\n            [rounded]=\"false\"\n        >\n            <tui-accordion-item\n                *ngFor=\"let label of labels; index as index\"\n                size=\"s\"\n                [borders]=\"null\"\n                [(open)]=\"!!openPagesArr[index]\"\n            >\n                <span class=\"t-label\">\n                    <strong>{{ label }}</strong>\n                </span>\n                <ng-template tuiAccordionItemContent>\n                    <div class=\"t-section\">\n                        <ng-container\n                            *ngFor=\"let item of items[index]; index as subIndex\"\n                            [ngTemplateOutlet]=\"pages\"\n                            [ngTemplateOutletContext]=\"{item: item, index: index * 100 + subIndex}\"\n                        ></ng-container>\n                    </div>\n                </ng-template>\n            </tui-accordion-item>\n        </tui-accordion>\n        <div class=\"t-items-container\">\n            <ng-container\n                *ngFor=\"let item of itemsWithoutSections; let index = index\"\n                [ngTemplateOutlet]=\"pages\"\n                [ngTemplateOutletContext]=\"{item: item, index: items.length - 1 + index}\"\n            ></ng-container>\n        </div>\n\n        <ng-template\n            #pages\n            let-item=\"item\"\n            let-index=\"index\"\n        >\n            <a\n                *ngIf=\"!item.subPages; else subPages\"\n                tuiLink\n                routerLinkActive=\"t-sublink_active\"\n                class=\"t-sublink\"\n                [routerLink]=\"item.route\"\n                [scrollIntoView]=\"isActive(item.route)\"\n                (click)=\"closeMenu()\"\n            >\n                {{ item.title }}\n            </a>\n            <ng-template #subPages>\n                <div\n                    routerLinkActive\n                    class=\"t-subsection\"\n                    [routerLinkActiveOptions]=\"{exact: false}\"\n                >\n                    <button\n                        *ngIf=\"item.subPages\"\n                        tuiLink\n                        type=\"button\"\n                        class=\"t-sublink t-sublink_subsection\"\n                        (click)=\"onGroupClick(index)\"\n                    >\n                        <tui-svg\n                            src=\"tuiIconChevronRight\"\n                            class=\"t-chevron\"\n                            [class.t-chevron_active]=\"!!openPagesGroupsArr[index]\"\n                        ></tui-svg>\n                        {{ item.title }}\n                    </button>\n                    <tui-expand\n                        class=\"t-expand\"\n                        [expanded]=\"!!openPagesGroupsArr[index]\"\n                    >\n                        <div class=\"t-section t-section_bordered\">\n                            <a\n                                *ngFor=\"let subPage of item.subPages\"\n                                tuiLink\n                                routerLinkActive=\"t-sublink_active\"\n                                class=\"t-sublink t-sublink_small\"\n                                [routerLink]=\"subPage.route\"\n                                [scrollIntoView]=\"isActive(subPage.route)\"\n                                (click)=\"closeMenu()\"\n                            >\n                                {{ subPage.title }}\n                            </a>\n                        </div>\n                    </tui-expand>\n                </div>\n            </ng-template>\n        </ng-template>\n    </tui-scrollbar>\n</nav>\n\n<ng-content></ng-content>\n",
        providers: NAVIGATION_PROVIDERS,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{z-index:1;display:flex;flex-direction:column;text-align:center;background:var(--tui-base-01)}.t-input{display:block;margin:1.25rem}.t-navigation{display:flex;max-height:100%;min-height:0;flex:1 1 0;text-align:left}.t-scrollbar{width:100%;scroll-behavior:smooth}.t-items-container{display:flex;flex-direction:column;padding:0 1rem}.t-label{margin-left:.5rem}.t-expand{margin-left:.25rem}.t-section{display:flex;flex-direction:column;align-items:flex-start;margin:-1rem 0 -.5rem}.t-section_bordered{margin:.5rem 0;border-left:1px solid var(--tui-base-03)}.t-subsection{margin-left:.5rem}.t-sublink{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:1rem 0 0;border:0;background:0 0;font-size:inherit;line-height:inherit;font:var(--tui-font-text-m);margin-left:.5rem}.t-sublink_small{margin-left:1rem;line-height:1.5rem;padding-top:.5rem}.t-sublink_subsection{margin-left:0;line-height:1.6rem}.t-sublink_active{color:var(--tui-text-01)}.t-chevron{transition-property:transform;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;width:1rem;height:1rem;margin:-.25rem .25rem 0 -.1875rem}.t-chevron_active{transform:rotate(90deg)}"]
    }),
    __param(0, Inject(ChangeDetectorRef)),
    __param(1, Inject(Title)),
    __param(2, Inject(NAVIGATION_TITLE)),
    __param(3, Inject(DOCUMENT)),
    __param(4, Inject(TuiModeDirective)),
    __param(5, Optional()),
    __param(5, Inject(TuiSidebarDirective)),
    __param(6, Inject(NAVIGATION_LABELS)),
    __param(7, Inject(NAVIGATION_ITEMS)),
    __param(8, Inject(TUI_DOC_SEARCH_TEXT)),
    __param(9, Inject(Router)),
    __param(10, Inject(ActivatedRoute)),
    __param(11, Inject(TuiDestroyService)),
    __param(12, Inject(TUI_DOC_PAGE_LOADED)),
    __param(13, Inject(TUI_DOC_SCROLL_BEHAVIOR))
], TuiDocNavigationComponent);
export { TuiDocNavigationComponent };
//# sourceMappingURL=data:application/json;base64,