import { __decorate, __param } from "tslib";
import { Location } from '@angular/common';
import { Directive, EventEmitter, Inject, Input, OnChanges, OnInit, Output, TemplateRef, } from '@angular/core';
import { ActivatedRoute, Params, UrlSerializer } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { coerceValue } from '../../utils/coerce-value';
const SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
let TuiDocDocumentationPropertyConnectorDirective = class TuiDocDocumentationPropertyConnectorDirective {
    constructor(template, locationRef, activatedRoute, urlSerializer) {
        this.template = template;
        this.locationRef = locationRef;
        this.activatedRoute = activatedRoute;
        this.urlSerializer = urlSerializer;
        this.documentationPropertyName = '';
        this.documentationPropertyMode = null;
        this.documentationPropertyType = '';
        this.documentationPropertyDeprecated = false;
        this.documentationPropertyValues = null;
        this.documentationPropertyValueChange = new EventEmitter();
        this.changed$ = new Subject();
        this.emits$ = new BehaviorSubject(1);
    }
    ngOnInit() {
        this.parseParams(this.activatedRoute.snapshot.queryParams);
    }
    get attrName() {
        switch (this.documentationPropertyMode) {
            case 'input':
                return `[${this.documentationPropertyName}]`;
            case 'output':
                return `(${this.documentationPropertyName})`;
            case 'input-output':
                return `[(${this.documentationPropertyName})]`;
            default:
                return this.documentationPropertyName;
        }
    }
    get hasItems() {
        return !!this.documentationPropertyValues;
    }
    get shouldShowValues() {
        return this.documentationPropertyMode !== 'output';
    }
    ngOnChanges() {
        this.changed$.next();
    }
    onValueChange(value) {
        this.documentationPropertyValue = value;
        this.documentationPropertyValueChange.emit(value);
        this.setQueryParam(value);
    }
    emitEvent(event) {
        // For more convenient debugging
        console.info(this.attrName, event);
        this.emits$.next(this.emits$.value + 1);
    }
    parseParams(params) {
        const propertyValue = params[this.documentationPropertyName];
        const propertyValueWithSuffix = params[`${this.documentationPropertyName}${SERIALIZED_SUFFIX}`];
        if (!propertyValue && !propertyValueWithSuffix) {
            return;
        }
        const value = !!propertyValueWithSuffix && this.documentationPropertyValues
            ? this.documentationPropertyValues[propertyValueWithSuffix]
            : coerceValue(propertyValue);
        this.onValueChange(value);
    }
    setQueryParam(value) {
        const tree = this.urlSerializer.parse(this.locationRef.path());
        const isValueAvailableByKey = value instanceof Object;
        const computedValue = isValueAvailableByKey && this.documentationPropertyValues
            ? this.documentationPropertyValues.indexOf(value)
            : value;
        const suffix = isValueAvailableByKey ? SERIALIZED_SUFFIX : '';
        const propName = this.documentationPropertyName + suffix;
        tree.queryParams = Object.assign(Object.assign({}, tree.queryParams), { [propName]: computedValue });
        this.locationRef.go(String(tree));
    }
};
TuiDocDocumentationPropertyConnectorDirective.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
    { type: Location, decorators: [{ type: Inject, args: [Location,] }] },
    { type: ActivatedRoute, decorators: [{ type: Inject, args: [ActivatedRoute,] }] },
    { type: UrlSerializer, decorators: [{ type: Inject, args: [UrlSerializer,] }] }
];
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyName", void 0);
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyMode", void 0);
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyType", void 0);
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValue", void 0);
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyDeprecated", void 0);
__decorate([
    Input()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValues", void 0);
__decorate([
    Output()
], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValueChange", void 0);
TuiDocDocumentationPropertyConnectorDirective = __decorate([
    Directive({
        selector: 'ng-template[documentationPropertyName]',
        exportAs: 'documentationProperty',
    }),
    __param(0, Inject(TemplateRef)),
    __param(1, Inject(Location)),
    __param(2, Inject(ActivatedRoute)),
    __param(3, Inject(UrlSerializer))
], TuiDocDocumentationPropertyConnectorDirective);
export { TuiDocDocumentationPropertyConnectorDirective };
//# sourceMappingURL=data:application/json;base64,