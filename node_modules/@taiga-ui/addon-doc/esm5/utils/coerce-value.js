/**
 * @deprecated: use {@link tuiCoerceValue} instead
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function coerceValue(value) {
    var prepared = String(value).trim();
    if (isEmptyParamValue(prepared)) {
        return null;
    }
    if (isBooleanParamValue(prepared)) {
        return String(prepared) === "true";
    }
    if (isNumberParamValue(prepared)) {
        return Number(prepared);
    }
    var decodedValue = decodeURIComponent(prepared);
    try {
        return isPossibleArray(decodedValue) || isPossibleObject(decodedValue)
            ? JSON.parse(decodedValue)
            : decodedValue;
    }
    catch (_a) {
        return decodedValue;
    }
}
export var tuiCoerceValue = coerceValue;
function isEmptyParamValue(value) {
    return ["undefined", "null", "NaN", "Infinity"].includes(value);
}
function isBooleanParamValue(value) {
    return value === "true" || value === "false";
}
function isNumberParamValue(value) {
    // TODO: investigate to disallow potentially catastrophic exponential-time regular expressions.
    // eslint-disable-next-line unicorn/no-unsafe-regex
    return /^-?[\d.]+(?:e-?\d+)?$/.test(value);
}
function isPossibleArray(value) {
    return value.startsWith("[") && value.endsWith("]");
}
function isPossibleObject(value) {
    return value.startsWith("{") && value.endsWith("}");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlLXZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2FkZG9uLWRvYy8iLCJzb3VyY2VzIjpbInV0aWxzL2NvZXJjZS12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsV0FBVyxDQUN2QixLQUFTO0lBRVQsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXRDLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELElBQUksbUJBQW1CLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDL0IsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssTUFBTSxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM5QixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMzQjtJQUVELElBQU0sWUFBWSxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWxELElBQUk7UUFDQSxPQUFPLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7WUFDbEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxZQUFZLENBQUM7S0FDdEI7SUFBQyxXQUFNO1FBQ0osT0FBTyxZQUFZLENBQUM7S0FDdkI7QUFDTCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQztBQUUxQyxTQUFTLGlCQUFpQixDQUFDLEtBQWE7SUFDcEMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxLQUFhO0lBQ3RDLE9BQU8sS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQ2pELENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEtBQWE7SUFDckMsK0ZBQStGO0lBQy9GLG1EQUFtRDtJQUNuRCxPQUFPLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsS0FBYTtJQUNsQyxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFhO0lBQ25DLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIHR1aUNvZXJjZVZhbHVlfSBpbnN0ZWFkXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VWYWx1ZTxUPihcbiAgICB2YWx1ZT86IFQsXG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgVCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBwcmVwYXJlZCA9IFN0cmluZyh2YWx1ZSkudHJpbSgpO1xuXG4gICAgaWYgKGlzRW1wdHlQYXJhbVZhbHVlKHByZXBhcmVkKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaXNCb29sZWFuUGFyYW1WYWx1ZShwcmVwYXJlZCkpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhwcmVwYXJlZCkgPT09IGB0cnVlYDtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXJQYXJhbVZhbHVlKHByZXBhcmVkKSkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHByZXBhcmVkKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWNvZGVkVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQocHJlcGFyZWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGlzUG9zc2libGVBcnJheShkZWNvZGVkVmFsdWUpIHx8IGlzUG9zc2libGVPYmplY3QoZGVjb2RlZFZhbHVlKVxuICAgICAgICAgICAgPyBKU09OLnBhcnNlKGRlY29kZWRWYWx1ZSlcbiAgICAgICAgICAgIDogZGVjb2RlZFZhbHVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gZGVjb2RlZFZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHR1aUNvZXJjZVZhbHVlID0gY29lcmNlVmFsdWU7XG5cbmZ1bmN0aW9uIGlzRW1wdHlQYXJhbVZhbHVlKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gW2B1bmRlZmluZWRgLCBgbnVsbGAsIGBOYU5gLCBgSW5maW5pdHlgXS5pbmNsdWRlcyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhblBhcmFtVmFsdWUodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gYHRydWVgIHx8IHZhbHVlID09PSBgZmFsc2VgO1xufVxuXG5mdW5jdGlvbiBpc051bWJlclBhcmFtVmFsdWUodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIFRPRE86IGludmVzdGlnYXRlIHRvIGRpc2FsbG93IHBvdGVudGlhbGx5IGNhdGFzdHJvcGhpYyBleHBvbmVudGlhbC10aW1lIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdW5zYWZlLXJlZ2V4XG4gICAgcmV0dXJuIC9eLT9bXFxkLl0rKD86ZS0/XFxkKyk/JC8udGVzdCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzUG9zc2libGVBcnJheSh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlLnN0YXJ0c1dpdGgoYFtgKSAmJiB2YWx1ZS5lbmRzV2l0aChgXWApO1xufVxuXG5mdW5jdGlvbiBpc1Bvc3NpYmxlT2JqZWN0KHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsdWUuc3RhcnRzV2l0aChge2ApICYmIHZhbHVlLmVuZHNXaXRoKGB9YCk7XG59XG4iXX0=