import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { getElementObscurers, TuiDestroyService } from '@taiga-ui/cdk';
import { Observable, ReplaySubject } from 'rxjs';
import { debounceTime, filter, switchMapTo, takeUntil } from 'rxjs/operators';
import { TUI_DOC_PAGE_LOADED } from '../../tokens/page-loaded';
/**
 * @deprecated: use {@link TuiScrollIntoViewLinkDirective}
 * TODO: remove in v3.0
 */
var ScrollIntoViewDirective = /** @class */ (function () {
    function ScrollIntoViewDirective(destroy$, _a, readyToScroll$) {
        var nativeElement = _a.nativeElement;
        this.readyToScroll$ = readyToScroll$;
        this.scroll$ = new ReplaySubject(1);
        this.readyToScroll$
            .pipe(filter(Boolean), switchMapTo(this.scroll$), debounceTime(750), filter(function (shallWe) { return shallWe && !!getElementObscurers(nativeElement); }), takeUntil(destroy$))
            .subscribe(function () {
            nativeElement.scrollIntoView();
        });
    }
    Object.defineProperty(ScrollIntoViewDirective.prototype, "scrollIntoView", {
        set: function (shallWe) {
            this.scroll$.next(shallWe);
        },
        enumerable: true,
        configurable: true
    });
    ScrollIntoViewDirective.ctorParameters = function () { return [
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DOC_PAGE_LOADED,] }] }
    ]; };
    __decorate([
        Input()
    ], ScrollIntoViewDirective.prototype, "scrollIntoView", null);
    ScrollIntoViewDirective = __decorate([
        Directive({
            selector: '[scrollIntoView]',
            providers: [TuiDestroyService],
        })
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ,
        __param(0, Inject(TuiDestroyService)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TUI_DOC_PAGE_LOADED))
    ], ScrollIntoViewDirective);
    return ScrollIntoViewDirective;
}());
export { ScrollIntoViewDirective };
var TuiScrollIntoViewLinkDirective = /** @class */ (function (_super) {
    __extends(TuiScrollIntoViewLinkDirective, _super);
    function TuiScrollIntoViewLinkDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TuiScrollIntoViewLinkDirective = __decorate([
        Directive({
            selector: '[tuiScrollIntoViewLink]',
            providers: [TuiDestroyService],
        })
    ], TuiScrollIntoViewLinkDirective);
    return TuiScrollIntoViewLinkDirective;
}(ScrollIntoViewDirective));
export { TuiScrollIntoViewLinkDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWludG8tdmlldy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvYWRkb24tZG9jLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9zY3JvbGwtaW50by12aWV3L3Njcm9sbC1pbnRvLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsVUFBVSxFQUFFLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUUsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFN0Q7OztHQUdHO0FBTUg7SUFRSSxpQ0FDK0IsUUFBMkIsRUFDbEMsRUFBd0MsRUFFbkQsY0FBbUM7WUFGdkIsZ0NBQWE7UUFFekIsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBTi9CLFlBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztRQVFyRCxJQUFJLENBQUMsY0FBYzthQUNkLElBQUksQ0FDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDekIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixNQUFNLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLElBQUksQ0FBQyxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxFQUEvQyxDQUErQyxDQUFDLEVBQ2xFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEI7YUFDQSxTQUFTLENBQUM7WUFDUCxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBdkJELHNCQUFJLG1EQUFjO2FBQWxCLFVBQW1CLE9BQWdCO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUM7OztPQUFBOztnQkFLd0MsaUJBQWlCLHVCQUFyRCxNQUFNLFNBQUMsaUJBQWlCO2dCQUNZLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxVQUFVO2dCQUVPLFVBQVUsdUJBRGxDLE1BQU0sU0FBQyxtQkFBbUI7O0lBVC9CO1FBREMsS0FBSyxFQUFFO2lFQUdQO0lBSlEsdUJBQXVCO1FBTG5DLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDakMsQ0FBQztRQUNGLGdFQUFnRTs7UUFVdkQsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO09BWHZCLHVCQUF1QixDQTBCbkM7SUFBRCw4QkFBQztDQUFBLEFBMUJELElBMEJDO1NBMUJZLHVCQUF1QjtBQWdDcEM7SUFBb0Qsa0RBQXVCO0lBQTNFOztJQUE2RSxDQUFDO0lBQWpFLDhCQUE4QjtRQUoxQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUseUJBQXlCO1lBQ25DLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1NBQ2pDLENBQUM7T0FDVyw4QkFBOEIsQ0FBbUM7SUFBRCxxQ0FBQztDQUFBLEFBQTlFLENBQW9ELHVCQUF1QixHQUFHO1NBQWpFLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Z2V0RWxlbWVudE9ic2N1cmVycywgVHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBmaWx0ZXIsIHN3aXRjaE1hcFRvLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUVUlfRE9DX1BBR0VfTE9BREVEfSBmcm9tICcuLi8uLi90b2tlbnMvcGFnZS1sb2FkZWQnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIFR1aVNjcm9sbEludG9WaWV3TGlua0RpcmVjdGl2ZX1cbiAqIFRPRE86IHJlbW92ZSBpbiB2My4wXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3Njcm9sbEludG9WaWV3XScsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjbGFzcyBTY3JvbGxJbnRvVmlld0RpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBzZXQgc2Nyb2xsSW50b1ZpZXcoc2hhbGxXZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNjcm9sbCQubmV4dChzaGFsbFdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbCQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUVUlfRE9DX1BBR0VfTE9BREVEKVxuICAgICAgICByZWFkb25seSByZWFkeVRvU2Nyb2xsJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICApIHtcbiAgICAgICAgdGhpcy5yZWFkeVRvU2Nyb2xsJFxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcFRvKHRoaXMuc2Nyb2xsJCksXG4gICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDc1MCksXG4gICAgICAgICAgICAgICAgZmlsdGVyKHNoYWxsV2UgPT4gc2hhbGxXZSAmJiAhIWdldEVsZW1lbnRPYnNjdXJlcnMobmF0aXZlRWxlbWVudCkpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVNjcm9sbEludG9WaWV3TGlua10nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2Nyb2xsSW50b1ZpZXdMaW5rRGlyZWN0aXZlIGV4dGVuZHMgU2Nyb2xsSW50b1ZpZXdEaXJlY3RpdmUge31cbiJdfQ==