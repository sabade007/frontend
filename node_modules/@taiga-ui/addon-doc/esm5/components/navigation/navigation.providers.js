import { __read, __spread } from "tslib";
import { InjectionToken } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { isPresent, TuiDestroyService } from '@taiga-ui/cdk';
import { filter, map, mergeMap, takeUntil } from 'rxjs/operators';
import { TUI_DOC_PAGES } from '../../tokens/pages';
import { TUI_DOC_TITLE } from '../../tokens/title';
export var NAVIGATION_TITLE = new InjectionToken("Page title");
export var NAVIGATION_LABELS = new InjectionToken("Navigation sections labels for search");
export var NAVIGATION_ITEMS = new InjectionToken("Navigation pages");
export var NAVIGATION_PROVIDERS = [
    TuiDestroyService,
    {
        provide: NAVIGATION_TITLE,
        deps: [Router, ActivatedRoute, TUI_DOC_TITLE, TuiDestroyService],
        useFactory: titleProviderFactory,
    },
    {
        provide: NAVIGATION_LABELS,
        deps: [TUI_DOC_PAGES],
        useFactory: labelsProviderFactory,
    },
    {
        provide: NAVIGATION_ITEMS,
        deps: [TUI_DOC_PAGES],
        useFactory: itemsProviderFactory,
    },
];
// eslint-disable-next-line @typescript-eslint/naming-convention
export function titleProviderFactory(router, activatedRoute, titlePrefix, destroy$) {
    return router.events.pipe(filter(function (event) { return event instanceof NavigationEnd; }), map(function () { return activatedRoute.firstChild; }), filter(isPresent), mergeMap(function (_a) {
        var data = _a.data;
        return data;
    }), map(function (_a) {
        var title = _a.title;
        return titlePrefix + title;
    }), takeUntil(destroy$));
}
// eslint-disable-next-line @typescript-eslint/naming-convention
export function labelsProviderFactory(pages) {
    return pages
        .map(function (_a) {
        var section = _a.section;
        return section;
    })
        .filter(isPresent)
        .filter(function (item, index, array) { return array.indexOf(item) === index; });
}
// eslint-disable-next-line @typescript-eslint/naming-convention
export function itemsProviderFactory(pages) {
    var labels = labelsProviderFactory(pages);
    return __spread(labels.map(function (label) { return pages.filter(function (_a) {
        var section = _a.section;
        return section === label;
    }); }), [
        pages.filter(function (page) { return !page.section; }),
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5wcm92aWRlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvYWRkb24tZG9jLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24ucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWhFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHakQsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQXFCLFlBQVksQ0FBQyxDQUFDO0FBQ3JGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUMvQyx1Q0FBdUMsQ0FDMUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUN6QixJQUFJLGNBQWMsQ0FBeUIsa0JBQWtCLENBQUMsQ0FBQztBQUVuRSxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBZTtJQUM1QyxpQkFBaUI7SUFDakI7UUFDSSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixDQUFDO1FBQ2hFLFVBQVUsRUFBRSxvQkFBb0I7S0FDbkM7SUFDRDtRQUNJLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQ3JCLFVBQVUsRUFBRSxxQkFBcUI7S0FDcEM7SUFDRDtRQUNJLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQ3JCLFVBQVUsRUFBRSxvQkFBb0I7S0FDbkM7Q0FDSixDQUFDO0FBRUYsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxvQkFBb0IsQ0FDaEMsTUFBYyxFQUNkLGNBQThCLEVBQzlCLFdBQW1CLEVBQ25CLFFBQTBCO0lBRTFCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssWUFBWSxhQUFhLEVBQTlCLENBQThCLENBQUMsRUFDL0MsR0FBRyxDQUFDLGNBQU0sT0FBQSxjQUFjLENBQUMsVUFBVSxFQUF6QixDQUF5QixDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDakIsUUFBUSxDQUFDLFVBQUMsRUFBTTtZQUFMLGNBQUk7UUFBTSxPQUFBLElBQUk7SUFBSixDQUFJLENBQUMsRUFDMUIsR0FBRyxDQUFDLFVBQUMsRUFBTztZQUFOLGdCQUFLO1FBQU0sT0FBQSxXQUFXLEdBQUcsS0FBSztJQUFuQixDQUFtQixDQUFDLEVBQ3JDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQztBQUNOLENBQUM7QUFFRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEtBQWtCO0lBQ3BELE9BQU8sS0FBSztTQUNQLEdBQUcsQ0FBQyxVQUFDLEVBQVM7WUFBUixvQkFBTztRQUFNLE9BQUEsT0FBTztJQUFQLENBQU8sQ0FBQztTQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDO1NBQ2pCLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQTdCLENBQTZCLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBRUQsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFrQjtJQUNuRCxJQUFNLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1QyxnQkFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQVM7WUFBUixvQkFBTztRQUFNLE9BQUEsT0FBTyxLQUFLLEtBQUs7SUFBakIsQ0FBaUIsQ0FBQyxFQUE5QyxDQUE4QyxDQUFDO1FBQ3RFLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQWIsQ0FBYSxDQUFDO09BQ3JDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGUsIE5hdmlnYXRpb25FbmQsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7aXNQcmVzZW50LCBUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcCwgbWVyZ2VNYXAsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1RVSV9ET0NfUEFHRVN9IGZyb20gJy4uLy4uL3Rva2Vucy9wYWdlcyc7XG5pbXBvcnQge1RVSV9ET0NfVElUTEV9IGZyb20gJy4uLy4uL3Rva2Vucy90aXRsZSc7XG5pbXBvcnQge1R1aURvY1BhZ2VzfSBmcm9tICcuLi8uLi90eXBlcy9wYWdlcyc7XG5cbmV4cG9ydCBjb25zdCBOQVZJR0FUSU9OX1RJVExFID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8c3RyaW5nPj4oYFBhZ2UgdGl0bGVgKTtcbmV4cG9ydCBjb25zdCBOQVZJR0FUSU9OX0xBQkVMUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxyZWFkb25seSBzdHJpbmdbXT4oXG4gICAgYE5hdmlnYXRpb24gc2VjdGlvbnMgbGFiZWxzIGZvciBzZWFyY2hgLFxuKTtcbmV4cG9ydCBjb25zdCBOQVZJR0FUSU9OX0lURU1TOiBJbmplY3Rpb25Ub2tlbjxyZWFkb25seSBUdWlEb2NQYWdlc1tdPiA9XG4gICAgbmV3IEluamVjdGlvblRva2VuPHJlYWRvbmx5IFR1aURvY1BhZ2VzW10+KGBOYXZpZ2F0aW9uIHBhZ2VzYCk7XG5cbmV4cG9ydCBjb25zdCBOQVZJR0FUSU9OX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IE5BVklHQVRJT05fVElUTEUsXG4gICAgICAgIGRlcHM6IFtSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlLCBUVUlfRE9DX1RJVExFLCBUdWlEZXN0cm95U2VydmljZV0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IHRpdGxlUHJvdmlkZXJGYWN0b3J5LFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBOQVZJR0FUSU9OX0xBQkVMUyxcbiAgICAgICAgZGVwczogW1RVSV9ET0NfUEFHRVNdLFxuICAgICAgICB1c2VGYWN0b3J5OiBsYWJlbHNQcm92aWRlckZhY3RvcnksXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IE5BVklHQVRJT05fSVRFTVMsXG4gICAgICAgIGRlcHM6IFtUVUlfRE9DX1BBR0VTXSxcbiAgICAgICAgdXNlRmFjdG9yeTogaXRlbXNQcm92aWRlckZhY3RvcnksXG4gICAgfSxcbl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB0aXRsZVByb3ZpZGVyRmFjdG9yeShcbiAgICByb3V0ZXI6IFJvdXRlcixcbiAgICBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgdGl0bGVQcmVmaXg6IHN0cmluZyxcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbik6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHJvdXRlci5ldmVudHMucGlwZShcbiAgICAgICAgZmlsdGVyKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCksXG4gICAgICAgIG1hcCgoKSA9PiBhY3RpdmF0ZWRSb3V0ZS5maXJzdENoaWxkKSxcbiAgICAgICAgZmlsdGVyKGlzUHJlc2VudCksXG4gICAgICAgIG1lcmdlTWFwKCh7ZGF0YX0pID0+IGRhdGEpLFxuICAgICAgICBtYXAoKHt0aXRsZX0pID0+IHRpdGxlUHJlZml4ICsgdGl0bGUpLFxuICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbHNQcm92aWRlckZhY3RvcnkocGFnZXM6IFR1aURvY1BhZ2VzKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiBwYWdlc1xuICAgICAgICAubWFwKCh7c2VjdGlvbn0pID0+IHNlY3Rpb24pXG4gICAgICAgIC5maWx0ZXIoaXNQcmVzZW50KVxuICAgICAgICAuZmlsdGVyKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2YoaXRlbSkgPT09IGluZGV4KTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1zUHJvdmlkZXJGYWN0b3J5KHBhZ2VzOiBUdWlEb2NQYWdlcyk6IHJlYWRvbmx5IFR1aURvY1BhZ2VzW10ge1xuICAgIGNvbnN0IGxhYmVscyA9IGxhYmVsc1Byb3ZpZGVyRmFjdG9yeShwYWdlcyk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgICAuLi5sYWJlbHMubWFwKGxhYmVsID0+IHBhZ2VzLmZpbHRlcigoe3NlY3Rpb259KSA9PiBzZWN0aW9uID09PSBsYWJlbCkpLFxuICAgICAgICBwYWdlcy5maWx0ZXIocGFnZSA9PiAhcGFnZS5zZWN0aW9uKSxcbiAgICBdO1xufVxuIl19