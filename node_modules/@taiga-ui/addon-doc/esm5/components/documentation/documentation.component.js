import { __decorate, __param, __read, __spread } from "tslib";
import { animate, style, transition, trigger } from '@angular/animations';
import { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Inject, Input, QueryList, } from '@angular/core';
import { EMPTY_QUERY, itemsQueryListObservable, watch } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { TUI_DOC_DOCUMENTATION_TEXTS } from '../../tokens/i18n';
import { hexToRgb, rgbToHex } from '../../utils/color-conversion';
import { inspectAny } from '../../utils/inspect';
import { TuiDocDocumentationPropertyConnectorDirective } from './documentation-property-connector.directive';
// @bad TODO subscribe propertiesConnectors changes
// @bad TODO refactor to make more flexible
// @dynamic
var TuiDocDocumentationComponent = /** @class */ (function () {
    function TuiDocDocumentationComponent(changeDetectorRef, texts) {
        this.changeDetectorRef = changeDetectorRef;
        this.texts = texts;
        this.heading = '';
        this.showValues = true;
        this.isAPI = false;
        this.propertiesConnectors = EMPTY_QUERY;
        this.activeItemIndex = 0;
    }
    TuiDocDocumentationComponent.prototype.ngAfterContentInit = function () {
        itemsQueryListObservable(this.propertiesConnectors)
            .pipe(switchMap(function (items) { return merge.apply(void 0, __spread(items.map(function (_a) {
            var changed$ = _a.changed$;
            return changed$;
        }))); }), watch(this.changeDetectorRef))
            .subscribe();
    };
    Object.defineProperty(TuiDocDocumentationComponent.prototype, "type", {
        get: function () {
            return this.isAPI ? this.texts[0] : this.texts[1];
        },
        enumerable: true,
        configurable: true
    });
    TuiDocDocumentationComponent.prototype.getColor = function (color) {
        if (color.length === 4) {
            return color
                .split('')
                .reduce(function (result, current) { return __spread(result, [current, current]); }, [])
                .join('')
                .replace('#', '');
        }
        if (color.startsWith('#')) {
            return color;
        }
        if (color === 'transparent') {
            return '#000000';
        }
        var parsed = color
            .replace('rgb(', '')
            .replace('rgba(', '')
            .replace(')', '')
            .replace(' ', '')
            .split(',')
            .map(function (v) { return Number.parseInt(v, 10); });
        return rgbToHex.apply(void 0, __spread(parsed));
    };
    TuiDocDocumentationComponent.prototype.getOpacity = function (color) {
        if (color.startsWith('#') || color.startsWith('rgb(')) {
            return 100;
        }
        if (color === 'transparent') {
            return 0;
        }
        var lastComma = color.lastIndexOf(',');
        var parsed = color
            .slice(lastComma)
            .replace(')', '')
            .replace(' ', '')
            .replace(',', '');
        return Math.round(Number.parseFloat(parsed) * 100);
    };
    TuiDocDocumentationComponent.prototype.onColorChange = function (connector, color) {
        var opacity = this.getOpacity(connector.documentationPropertyValue || '');
        if (opacity === 100) {
            connector.onValueChange(color);
            return;
        }
        var rgb = hexToRgb(color).join(', ');
        var result = "rgba(" + rgb + ", " + opacity / 100 + ")";
        connector.onValueChange(result);
    };
    TuiDocDocumentationComponent.prototype.onOpacityChange = function (connector, opacity) {
        var hex = this.getColor(connector.documentationPropertyValue || '');
        var rgb = hexToRgb(hex);
        var result = "rgba(" + rgb + ", " + opacity / 100 + ")";
        connector.onValueChange(result);
    };
    TuiDocDocumentationComponent.prototype.stripOptional = function (name) {
        return name.replace('?', '');
    };
    TuiDocDocumentationComponent.prototype.isOptional = function (name) {
        return name.includes('?');
    };
    TuiDocDocumentationComponent.prototype.isPrimitivePolymorpheusContent = function (value) {
        return typeof value === 'string' || typeof value === 'number';
    };
    TuiDocDocumentationComponent.prototype.showCleaner = function (type) {
        return type.includes('null');
    };
    TuiDocDocumentationComponent.prototype.showContentTooltip = function (type) {
        return type.includes('PolymorpheusContent');
    };
    TuiDocDocumentationComponent.prototype.inspectAny = function (data) {
        return inspectAny(data, 2);
    };
    TuiDocDocumentationComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Array, decorators: [{ type: Inject, args: [TUI_DOC_DOCUMENTATION_TEXTS,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiDocDocumentationComponent.prototype, "heading", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationComponent.prototype, "showValues", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationComponent.prototype, "isAPI", void 0);
    __decorate([
        ContentChildren(TuiDocDocumentationPropertyConnectorDirective)
    ], TuiDocDocumentationComponent.prototype, "propertiesConnectors", void 0);
    TuiDocDocumentationComponent = __decorate([
        Component({
            selector: 'tui-doc-documentation',
            template: "<h1\n    *ngIf=\"heading\"\n    class=\"t-heading\"\n>\n    {{ heading }}\n</h1>\n<ng-content></ng-content>\n<table class=\"t-table\">\n    <tr class=\"t-row t-row_header\">\n        <th class=\"t-th t-cell t-cell_prop\">{{ texts[2] }}</th>\n        <th class=\"t-th\">{{ type }}</th>\n        <th\n            *ngIf=\"showValues && !isAPI\"\n            class=\"t-th t-cell t-cell_value\"\n        >\n            {{ texts[3] }}\n        </th>\n    </tr>\n    <tr\n        *ngFor=\"let propertyConnector of propertiesConnectors\"\n        class=\"t-row\"\n        [class.t-deprecated]=\"propertyConnector.documentationPropertyDeprecated\"\n    >\n        <td class=\"t-cell\">\n            <div\n                automation-id=\"tui-documentation__property-name\"\n                class=\"t-property\"\n            >\n                {{ stripOptional(propertyConnector.attrName) }}\n                <tui-badge\n                    *ngIf=\"isOptional(propertyConnector.attrName)\"\n                    size=\"s\"\n                    value=\"Optional\"\n                ></tui-badge>\n            </div>\n            <span\n                *ngIf=\"propertyConnector.documentationPropertyDeprecated\"\n                class=\"t-deprecated-label\"\n            >\n                deprecated\n            </span>\n            <ng-container [ngTemplateOutlet]=\"propertyConnector.template\"></ng-container>\n        </td>\n        <td class=\"t-cell\">\n            <span class=\"type\">\n                {{ propertyConnector.documentationPropertyType }}\n                <tui-tooltip\n                    *ngIf=\"showContentTooltip(propertyConnector.documentationPropertyType)\"\n                    [describeId]=\"propertyConnector.attrName\"\n                    [content]=\"content\"\n                >\n                    <ng-template #content>\n                        {{ texts[4] }}\n                        <a\n                            tuiLink\n                            tuiMode=\"onDark\"\n                            target=\"_blank\"\n                            href=\"https://github.com/tinkoff/ng-polymorpheus\"\n                        >\n                            <code>ng-polymorpheus</code>\n                        </a>\n                    </ng-template>\n                </tui-tooltip>\n            </span>\n        </td>\n        <td\n            *ngIf=\"showValues\"\n            class=\"t-cell\"\n        >\n            <ng-container *ngIf=\"propertyConnector.shouldShowValues; else elseEmitter\">\n                <tui-select\n                    *ngIf=\"propertyConnector.hasItems; else noItems\"\n                    tuiTextfieldSize=\"m\"\n                    tuiDropdownLimitWidth=\"min\"\n                    [tuiTextfieldCleaner]=\"showCleaner(propertyConnector.documentationPropertyType)\"\n                    [tuiTextfieldLabelOutside]=\"true\"\n                    [nativeId]=\"propertyConnector.attrName\"\n                    [valueContent]=\"selectContent\"\n                    [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                    (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                >\n                    <code class=\"t-exception\">null</code>\n                    <tui-data-list-wrapper\n                        *tuiDataList\n                        [items]=\"propertyConnector.documentationPropertyValues\"\n                        [itemContent]=\"selectContent\"\n                    ></tui-data-list-wrapper>\n                </tui-select>\n                <ng-template\n                    #selectContent\n                    let-data\n                >\n                    <code>{{ inspectAny(data) }}</code>\n                </ng-template>\n\n                <ng-template #noItems>\n                    <ng-container [ngSwitch]=\"propertyConnector.documentationPropertyType\">\n                        <tui-toggle\n                            *ngSwitchCase=\"'boolean'\"\n                            size=\"l\"\n                            [nativeId]=\"propertyConnector.attrName\"\n                            [showIcons]=\"true\"\n                            [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                            (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                        ></tui-toggle>\n\n                        <tui-primitive-textfield\n                            *ngSwitchCase=\"'string'\"\n                            tuiTextfieldSize=\"m\"\n                            [nativeId]=\"propertyConnector.attrName\"\n                            [tuiTextfieldLabelOutside]=\"true\"\n                            [tuiTextfieldCleaner]=\"true\"\n                            [value]=\"propertyConnector.documentationPropertyValue || ''\"\n                            (valueChange)=\"propertyConnector.onValueChange($event)\"\n                        ></tui-primitive-textfield>\n\n                        <div\n                            *ngSwitchCase=\"'color'\"\n                            tuiGroup\n                        >\n                            <tui-primitive-textfield\n                                tuiTextfieldType=\"text\"\n                                tuiTextfieldSize=\"m\"\n                                [attr.id]=\"propertyConnector.attrName\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                [tuiInputOpacity]=\"getOpacity(propertyConnector.documentationPropertyValue)\"\n                                [value]=\"getColor(propertyConnector.documentationPropertyValue)\"\n                                (valueChange)=\"onColorChange(propertyConnector, $event)\"\n                            ></tui-primitive-textfield>\n                            <tui-input-count\n                                tuiTextfieldSize=\"m\"\n                                [max]=\"100\"\n                                [ngModel]=\"getOpacity(propertyConnector.documentationPropertyValue)\"\n                                (ngModelChange)=\"onOpacityChange(propertyConnector, $event)\"\n                            >\n                                Opacity\n                            </tui-input-count>\n                        </div>\n\n                        <tui-input-count\n                            *ngSwitchCase=\"'number'\"\n                            tuiTextfieldSize=\"m\"\n                            [nativeId]=\"propertyConnector.attrName\"\n                            [tuiTextfieldLabelOutside]=\"true\"\n                            [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                            (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                        ></tui-input-count>\n\n                        <ng-container *ngSwitchCase=\"'PolymorpheusContent'\">\n                            <tui-primitive-textfield\n                                *ngIf=\"isPrimitivePolymorpheusContent(propertyConnector.documentationPropertyValue)\"\n                                tuiTextfieldSize=\"m\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                [tuiTextfieldCleaner]=\"true\"\n                                [value]=\"propertyConnector.documentationPropertyValue.toString()\"\n                                (valueChange)=\"propertyConnector.onValueChange($event)\"\n                            >\n                                Default content\n                            </tui-primitive-textfield>\n                        </ng-container>\n                    </ng-container>\n                </ng-template>\n            </ng-container>\n\n            <ng-template #elseEmitter>\n                <tui-notification\n                    class=\"t-output\"\n                    [@emitEvent]=\"propertyConnector.emits$ | async\"\n                >\n                    Emit!\n                </tui-notification>\n            </ng-template>\n        </td>\n    </tr>\n</table>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [
                trigger('emitEvent', [
                    transition(':increment', [style({ opacity: 1 }), animate('500ms ease-in')]),
                ]),
            ],
            styles: [":host{display:block;min-width:100%}.t-table{width:100%;table-layout:fixed}.t-row:not(:last-child){border-bottom:1px solid var(--tui-base-03)}:host-context(tui-root._mobile) .t-row{display:flex;flex-wrap:wrap}:host-context(tui-root._mobile) .t-row_header{display:none}.t-cell{padding:1rem 1rem .875rem}.t-cell:first-child{padding-left:0}.t-cell:last-child{padding-right:0;text-align:right}.t-cell_prop{width:40%}.t-cell_value{max-width:20rem}:host-context(tui-root._mobile) .t-cell_value{width:9.375rem}:host-context(tui-root._mobile) .t-cell{width:100%;height:auto;padding:.5rem 0;text-align:left}.t-th{padding:.5rem 1rem;color:var(--tui-text-02);font-weight:400;text-align:left}.t-property{font:var(--tui-font-text-m);margin-bottom:.25rem;font-family:monospace;color:#8f75d1}:host-context(tui-root._mobile) .t-property{padding:.5rem 0}.t-type{font-family:monospace}.t-deprecated{background-color:var(--tui-error-bg);box-shadow:-1rem 0 var(--tui-error-bg),1rem 0 var(--tui-error-bg)}.t-deprecated-label{margin-right:.125rem;color:var(--tui-error-fill)}.t-exception{display:block;width:-webkit-max-content;width:-moz-max-content;width:max-content}.t-output{text-align:left;opacity:0}.t-heading{font:var(--tui-font-heading-4)}"]
        }),
        __param(0, Inject(ChangeDetectorRef)),
        __param(1, Inject(TUI_DOC_DOCUMENTATION_TEXTS))
    ], TuiDocDocumentationComponent);
    return TuiDocDocumentationComponent;
}());
export { TuiDocDocumentationComponent };
//# sourceMappingURL=data:application/json;base64,