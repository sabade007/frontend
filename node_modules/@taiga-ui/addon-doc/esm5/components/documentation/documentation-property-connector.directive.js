import { __assign, __decorate, __param } from "tslib";
import { Location } from '@angular/common';
import { Directive, EventEmitter, Inject, Input, OnChanges, OnInit, Output, TemplateRef, } from '@angular/core';
import { ActivatedRoute, Params, UrlSerializer } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { coerceValue } from '../../utils/coerce-value';
var SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
var TuiDocDocumentationPropertyConnectorDirective = /** @class */ (function () {
    function TuiDocDocumentationPropertyConnectorDirective(template, locationRef, activatedRoute, urlSerializer) {
        this.template = template;
        this.locationRef = locationRef;
        this.activatedRoute = activatedRoute;
        this.urlSerializer = urlSerializer;
        this.documentationPropertyName = '';
        this.documentationPropertyMode = null;
        this.documentationPropertyType = '';
        this.documentationPropertyDeprecated = false;
        this.documentationPropertyValues = null;
        this.documentationPropertyValueChange = new EventEmitter();
        this.changed$ = new Subject();
        this.emits$ = new BehaviorSubject(1);
    }
    TuiDocDocumentationPropertyConnectorDirective.prototype.ngOnInit = function () {
        this.parseParams(this.activatedRoute.snapshot.queryParams);
    };
    Object.defineProperty(TuiDocDocumentationPropertyConnectorDirective.prototype, "attrName", {
        get: function () {
            switch (this.documentationPropertyMode) {
                case 'input':
                    return "[" + this.documentationPropertyName + "]";
                case 'output':
                    return "(" + this.documentationPropertyName + ")";
                case 'input-output':
                    return "[(" + this.documentationPropertyName + ")]";
                default:
                    return this.documentationPropertyName;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDocDocumentationPropertyConnectorDirective.prototype, "hasItems", {
        get: function () {
            return !!this.documentationPropertyValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDocDocumentationPropertyConnectorDirective.prototype, "shouldShowValues", {
        get: function () {
            return this.documentationPropertyMode !== 'output';
        },
        enumerable: true,
        configurable: true
    });
    TuiDocDocumentationPropertyConnectorDirective.prototype.ngOnChanges = function () {
        this.changed$.next();
    };
    TuiDocDocumentationPropertyConnectorDirective.prototype.onValueChange = function (value) {
        this.documentationPropertyValue = value;
        this.documentationPropertyValueChange.emit(value);
        this.setQueryParam(value);
    };
    TuiDocDocumentationPropertyConnectorDirective.prototype.emitEvent = function (event) {
        // For more convenient debugging
        console.info(this.attrName, event);
        this.emits$.next(this.emits$.value + 1);
    };
    TuiDocDocumentationPropertyConnectorDirective.prototype.parseParams = function (params) {
        var propertyValue = params[this.documentationPropertyName];
        var propertyValueWithSuffix = params["" + this.documentationPropertyName + SERIALIZED_SUFFIX];
        if (!propertyValue && !propertyValueWithSuffix) {
            return;
        }
        var value = !!propertyValueWithSuffix && this.documentationPropertyValues
            ? this.documentationPropertyValues[propertyValueWithSuffix]
            : coerceValue(propertyValue);
        this.onValueChange(value);
    };
    TuiDocDocumentationPropertyConnectorDirective.prototype.setQueryParam = function (value) {
        var _a;
        var tree = this.urlSerializer.parse(this.locationRef.path());
        var isValueAvailableByKey = value instanceof Object;
        var computedValue = isValueAvailableByKey && this.documentationPropertyValues
            ? this.documentationPropertyValues.indexOf(value)
            : value;
        var suffix = isValueAvailableByKey ? SERIALIZED_SUFFIX : '';
        var propName = this.documentationPropertyName + suffix;
        tree.queryParams = __assign(__assign({}, tree.queryParams), (_a = {}, _a[propName] = computedValue, _a));
        this.locationRef.go(String(tree));
    };
    TuiDocDocumentationPropertyConnectorDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] },
        { type: Location, decorators: [{ type: Inject, args: [Location,] }] },
        { type: ActivatedRoute, decorators: [{ type: Inject, args: [ActivatedRoute,] }] },
        { type: UrlSerializer, decorators: [{ type: Inject, args: [UrlSerializer,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyName", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyMode", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyType", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValue", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyDeprecated", void 0);
    __decorate([
        Input()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValues", void 0);
    __decorate([
        Output()
    ], TuiDocDocumentationPropertyConnectorDirective.prototype, "documentationPropertyValueChange", void 0);
    TuiDocDocumentationPropertyConnectorDirective = __decorate([
        Directive({
            selector: 'ng-template[documentationPropertyName]',
            exportAs: 'documentationProperty',
        }),
        __param(0, Inject(TemplateRef)),
        __param(1, Inject(Location)),
        __param(2, Inject(ActivatedRoute)),
        __param(3, Inject(UrlSerializer))
    ], TuiDocDocumentationPropertyConnectorDirective);
    return TuiDocDocumentationPropertyConnectorDirective;
}());
export { TuiDocDocumentationPropertyConnectorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnRhdGlvbi1wcm9wZXJ0eS1jb25uZWN0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2FkZG9uLWRvYy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZG9jdW1lbnRhdGlvbi9kb2N1bWVudGF0aW9uLXByb3BlcnR5LWNvbm5lY3Rvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsZUFBZSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU5QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFckQsSUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7QUFJOUIsNENBQTRDO0FBSzVDO0lBNEJJLHVEQUNrQyxRQUE4QyxFQUN6QyxXQUFxQixFQUNmLGNBQThCLEVBQy9CLGFBQTRCO1FBSHRDLGFBQVEsR0FBUixRQUFRLENBQXNDO1FBQ3pDLGdCQUFXLEdBQVgsV0FBVyxDQUFVO1FBQ2YsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQy9CLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBNUJ4RSw4QkFBeUIsR0FBRyxFQUFFLENBQUM7UUFHL0IsOEJBQXlCLEdBQThCLElBQUksQ0FBQztRQUc1RCw4QkFBeUIsR0FBRyxFQUFFLENBQUM7UUFNL0Isb0NBQStCLEdBQUcsS0FBSyxDQUFDO1FBR3hDLGdDQUEyQixHQUF3QixJQUFJLENBQUM7UUFHL0MscUNBQWdDLEdB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REFBQztDQUFBLEFBakhELElBaUhDO1NBakhZLDZDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkluaXQsXG4gICAgT3V0cHV0LFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGUsIFBhcmFtcywgVXJsU2VyaWFsaXplcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtjb2VyY2VWYWx1ZX0gZnJvbSAnLi4vLi4vdXRpbHMvY29lcmNlLXZhbHVlJztcblxuY29uc3QgU0VSSUFMSVpFRF9TVUZGSVggPSAnJCc7XG5cbmV4cG9ydCB0eXBlIERvY3VtZW50YXRpb25Qcm9wZXJ0eVR5cGUgPSAnaW5wdXQtb3V0cHV0JyB8ICdpbnB1dCcgfCAnb3V0cHV0JyB8IG51bGw7XG5cbi8vIEBiYWQgVE9ETzogcmVmYWN0b3Igb3V0cHV0IGFuZCB2YWx1ZSBzeW5jXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ25nLXRlbXBsYXRlW2RvY3VtZW50YXRpb25Qcm9wZXJ0eU5hbWVdJyxcbiAgICBleHBvcnRBczogJ2RvY3VtZW50YXRpb25Qcm9wZXJ0eScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURvY0RvY3VtZW50YXRpb25Qcm9wZXJ0eUNvbm5lY3RvckRpcmVjdGl2ZTxUPlxuICAgIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXNcbntcbiAgICBASW5wdXQoKVxuICAgIGRvY3VtZW50YXRpb25Qcm9wZXJ0eU5hbWUgPSAnJztcblxuICAgIEBJbnB1dCgpXG4gICAgZG9jdW1lbnRhdGlvblByb3BlcnR5TW9kZTogRG9jdW1lbnRhdGlvblByb3BlcnR5VHlwZSA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIGRvY3VtZW50YXRpb25Qcm9wZXJ0eVR5cGUgPSAnJztcblxuICAgIEBJbnB1dCgpXG4gICAgZG9jdW1lbnRhdGlvblByb3BlcnR5VmFsdWUhOiBUO1xuXG4gICAgQElucHV0KClcbiAgICBkb2N1bWVudGF0aW9uUHJvcGVydHlEZXByZWNhdGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIGRvY3VtZW50YXRpb25Qcm9wZXJ0eVZhbHVlczogcmVhZG9ubHkgVFtdIHwgbnVsbCA9IG51bGw7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBkb2N1bWVudGF0aW9uUHJvcGVydHlWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcblxuICAgIHJlYWRvbmx5IGNoYW5nZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIHJlYWRvbmx5IGVtaXRzJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoMSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZikgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgICAgQEluamVjdChMb2NhdGlvbikgcHJpdmF0ZSByZWFkb25seSBsb2NhdGlvblJlZjogTG9jYXRpb24sXG4gICAgICAgIEBJbmplY3QoQWN0aXZhdGVkUm91dGUpIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBASW5qZWN0KFVybFNlcmlhbGl6ZXIpIHByaXZhdGUgcmVhZG9ubHkgdXJsU2VyaWFsaXplcjogVXJsU2VyaWFsaXplcixcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXJzZVBhcmFtcyh0aGlzLmFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zKTtcbiAgICB9XG5cbiAgICBnZXQgYXR0ck5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmRvY3VtZW50YXRpb25Qcm9wZXJ0eU1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYFske3RoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5TmFtZX1dYDtcbiAgICAgICAgICAgIGNhc2UgJ291dHB1dCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAoJHt0aGlzLmRvY3VtZW50YXRpb25Qcm9wZXJ0eU5hbWV9KWA7XG4gICAgICAgICAgICBjYXNlICdpbnB1dC1vdXRwdXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgWygke3RoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5TmFtZX0pXWA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50YXRpb25Qcm9wZXJ0eU5hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaGFzSXRlbXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5VmFsdWVzO1xuICAgIH1cblxuICAgIGdldCBzaG91bGRTaG93VmFsdWVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudGF0aW9uUHJvcGVydHlNb2RlICE9PSAnb3V0cHV0JztcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VkJC5uZXh0KCk7XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZSh2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRvY3VtZW50YXRpb25Qcm9wZXJ0eVZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5VmFsdWVDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0UXVlcnlQYXJhbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZW1pdEV2ZW50KGV2ZW50OiB1bmtub3duKTogdm9pZCB7XG4gICAgICAgIC8vIEZvciBtb3JlIGNvbnZlbmllbnQgZGVidWdnaW5nXG4gICAgICAgIGNvbnNvbGUuaW5mbyh0aGlzLmF0dHJOYW1lLCBldmVudCk7XG5cbiAgICAgICAgdGhpcy5lbWl0cyQubmV4dCh0aGlzLmVtaXRzJC52YWx1ZSArIDEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VQYXJhbXMocGFyYW1zOiBQYXJhbXMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gcGFyYW1zW3RoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5TmFtZV07XG4gICAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWVXaXRoU3VmZml4OiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQgPVxuICAgICAgICAgICAgcGFyYW1zW2Ake3RoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5TmFtZX0ke1NFUklBTElaRURfU1VGRklYfWBdO1xuXG4gICAgICAgIGlmICghcHJvcGVydHlWYWx1ZSAmJiAhcHJvcGVydHlWYWx1ZVdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbHVlID1cbiAgICAgICAgICAgICEhcHJvcGVydHlWYWx1ZVdpdGhTdWZmaXggJiYgdGhpcy5kb2N1bWVudGF0aW9uUHJvcGVydHlWYWx1ZXNcbiAgICAgICAgICAgICAgICA/IHRoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5VmFsdWVzW3Byb3BlcnR5VmFsdWVXaXRoU3VmZml4IGFzIG51bWJlcl1cbiAgICAgICAgICAgICAgICA6IGNvZXJjZVZhbHVlKHByb3BlcnR5VmFsdWUpO1xuXG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSh2YWx1ZSBhcyBUKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFF1ZXJ5UGFyYW0odmFsdWU6IFQgfCBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0cmVlID0gdGhpcy51cmxTZXJpYWxpemVyLnBhcnNlKHRoaXMubG9jYXRpb25SZWYucGF0aCgpKTtcblxuICAgICAgICBjb25zdCBpc1ZhbHVlQXZhaWxhYmxlQnlLZXkgPSB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdDtcbiAgICAgICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9XG4gICAgICAgICAgICBpc1ZhbHVlQXZhaWxhYmxlQnlLZXkgJiYgdGhpcy5kb2N1bWVudGF0aW9uUHJvcGVydHlWYWx1ZXNcbiAgICAgICAgICAgICAgICA/IHRoaXMuZG9jdW1lbnRhdGlvblByb3BlcnR5VmFsdWVzLmluZGV4T2YodmFsdWUgYXMgVClcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuXG4gICAgICAgIGNvbnN0IHN1ZmZpeCA9IGlzVmFsdWVBdmFpbGFibGVCeUtleSA/IFNFUklBTElaRURfU1VGRklYIDogJyc7XG4gICAgICAgIGNvbnN0IHByb3BOYW1lID0gdGhpcy5kb2N1bWVudGF0aW9uUHJvcGVydHlOYW1lICsgc3VmZml4O1xuXG4gICAgICAgIHRyZWUucXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAuLi50cmVlLnF1ZXJ5UGFyYW1zLFxuICAgICAgICAgICAgW3Byb3BOYW1lXTogY29tcHV0ZWRWYWx1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvY2F0aW9uUmVmLmdvKFN0cmluZyh0cmVlKSk7XG4gICAgfVxufVxuIl19