import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
export class DroppableDirective {
    constructor(
    // tslint:disable-next-line:no-any
    document, element) {
        this.document = document;
        this.element = element;
        /** prompt for files when clicked */
        this.isClickable = true;
        /** allow multiple files dropped or selected */
        this.acceptsMultipleFiles = true;
        /** input limit accepted file types via MIME */
        this.accept = false;
        /** append CSS class when files are dragged on element */
        this.appendStatusClasses = true;
        this.dragOverClass = 'dragover';
        this.filesDropped = new EventEmitter();
        /**
         * Accessibility
         */
        this.tabIndex = 0;
        /**
         * Accessibility
         */
        this.role = 'button';
        /** File is being hovered over, can be used to show something on hover */
        this.isHover = false;
    }
    handleDragover(e) {
        e.preventDefault();
        e.stopPropagation();
        this.isHover = true;
        if (this.appendStatusClasses) {
            this.element.nativeElement.classList.add(this.dragOverClass);
        }
    }
    handleDragleave(e) {
        e.preventDefault();
        e.stopPropagation();
        this.isHover = false;
        if (this.appendStatusClasses) {
            this.element.nativeElement.classList.remove(this.dragOverClass);
        }
    }
    handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        this.isHover = false;
        if (this.appendStatusClasses) {
            this.element.nativeElement.classList.remove(this.dragOverClass);
        }
        this.onDroppableElementChange(e);
    }
    handleClick(e) {
        if (this.isClickable) {
            this.promptForFiles();
        }
    }
    handleEnter(e) {
        this.promptForFiles();
        this.element.nativeElement.blur();
    }
    ngOnChanges() {
        if (this.virtualInputElement) {
            this.setAcceptsMultipleFiles();
            this.setAccepted();
        }
    }
    ngAfterContentInit() {
        this.virtualInputElement = this.makeVirtualInputElement();
        this.virtualInputElement.addEventListener('change', this.onVirtualInputElementChange.bind(this));
        this.setAcceptsMultipleFiles();
        this.setAccepted();
    }
    setAcceptsMultipleFiles() {
        if (!this.acceptsMultipleFiles) {
            this.virtualInputElement.removeAttribute('multiple');
            return;
        }
        this.virtualInputElement.setAttribute('multiple', this.acceptsMultipleFiles.toString());
    }
    setAccepted() {
        if (!this.accept) {
            this.virtualInputElement.removeAttribute('accept');
            return;
        }
        this.virtualInputElement.setAttribute('accept', this.accept.toString());
    }
    ngOnDestroy() {
        // destroy created input
        if (this.virtualInputElement) {
            this.virtualInputElement.removeEventListener('change', this.onVirtualInputElementChange.bind(this));
        }
    }
    makeVirtualInputElement() {
        const input = this.document.createElement('input');
        input.setAttribute('type', 'file');
        input.style.display = 'none';
        return input;
    }
    onVirtualInputElementChange(e) {
        this.onDroppableElementChange(e);
        this.virtualInputElement.value = '';
    }
    // tslint:disable-next-line:no-any
    onDroppableElementChange(event) {
        let files;
        if (event.dataTransfer) {
            files = event.dataTransfer.files;
        }
        else if (event.target) {
            files = event.target.files;
        }
        else {
            throw Error('Fired event contains no files');
        }
        // Files is FileList, we convert to array
        const filesArray = Array.from(files);
        this.filesDropped.emit(filesArray);
    }
    promptForFiles() {
        this.virtualInputElement.click();
    }
}
DroppableDirective.decorators = [
    { type: Directive, args: [{ selector: '[droppable]', exportAs: 'droppable' },] }
];
DroppableDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef }
];
DroppableDirective.propDecorators = {
    isClickable: [{ type: Input }],
    acceptsMultipleFiles: [{ type: Input }],
    accept: [{ type: Input }],
    appendStatusClasses: [{ type: Input }],
    dragOverClass: [{ type: Input }],
    filesDropped: [{ type: Output }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    handleDragover: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    handleDragleave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
    handleDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
    handleClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    handleEnter: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,