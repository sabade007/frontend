{"version":3,"sources":["../../src/lib/droppable.directive.ts","../../src/lib/droppable.module.ts"],"names":["DroppableDirective","document","element","this","isClickable","acceptsMultipleFiles","accept","appendStatusClasses","dragOverClass","filesDropped","EventEmitter","tabIndex","role","isHover","prototype","handleDragover","e","preventDefault","stopPropagation","nativeElement","classList","add","handleDragleave","remove","handleDrop","onDroppableElementChange","handleClick","promptForFiles","handleEnter","blur","ngOnChanges","virtualInputElement","setAcceptsMultipleFiles","setAccepted","ngAfterContentInit","makeVirtualInputElement","addEventListener","onVirtualInputElementChange","bind","setAttribute","toString","removeAttribute","ngOnDestroy","removeEventListener","input","createElement","style","display","value","event","files","dataTransfer","target","Error","filesArray","Array","from","emit","click","Directive","args","selector","exportAs","Inject","DOCUMENT","ElementRef","Input","Output","HostBinding","HostListener","NgModule","exports","declarations"],"mappings":"waAoFE,SAAAA,EAE8BC,EACpBC,GADoBC,KAAAF,SAAAA,EACpBE,KAAAD,QAAAA,EApEDC,KAAAC,aAAc,EAEdD,KAAAE,sBAAuB,EAEvBF,KAAAG,QAAyB,EAEzBH,KAAAI,qBAAsB,EACtBJ,KAAAK,cAAgB,WACfL,KAAAM,aAAe,IAAIC,EAAAA,aAICP,KAAAQ,SAAW,EAIfR,KAAAS,KAAO,SAEjCT,KAAAU,SAAU,SAIVb,EAAAc,UAAAC,eAAA,SAAeC,GACbA,EAAEC,iBACFD,EAAEE,kBACFf,KAAKU,SAAU,EACXV,KAAKI,qBACPJ,KAAKD,QAAQiB,cAAcC,UAAUC,IAAIlB,KAAKK,gBAKlDR,EAAAc,UAAAQ,gBAAA,SAAgBN,GACdA,EAAEC,iBACFD,EAAEE,kBACFf,KAAKU,SAAU,EACXV,KAAKI,qBACPJ,KAAKD,QAAQiB,cAAcC,UAAUG,OAAOpB,KAAKK,gBAKrDR,EAAAc,UAAAU,WAAA,SAAWR,GACTA,EAAEC,iBACFD,EAAEE,kBACFf,KAAKU,SAAU,EACXV,KAAKI,qBACPJ,KAAKD,QAAQiB,cAAcC,UAAUG,OAAOpB,KAAKK,eAEnDL,KAAKsB,yBAAyBT,IAIhChB,EAAAc,UAAAY,YAAA,SAAYV,GACNb,KAAKC,aACPD,KAAKwB,kBAKT3B,EAAAc,UAAAc,YAAA,SAAYZ,GACVb,KAAKwB,iBACLxB,KAAKD,QAAQiB,cAAcU,QAS7B7B,EAAAc,UAAAgB,YAAA,WACM3B,KAAK4B,sBACP5B,KAAK6B,0BACL7B,KAAK8B,gBAITjC,EAAAc,UAAAoB,mBAAA,WACE/B,KAAK4B,oBAAsB5B,KAAKgC,0BAChChC,KAAK4B,oBAAoBK,iBACvB,SACAjC,KAAKkC,4BAA4BC,KAAKnC,OAExCA,KAAK6B,0BACL7B,KAAK8B,eAGPjC,EAAAc,UAAAkB,wBAAA,WACO7B,KAAKE,qBAIVF,KAAK4B,oBAAoBQ,aACvB,WACApC,KAAKE,qBAAqBmC,YAL1BrC,KAAK4B,oBAAoBU,gBAAgB,aAS7CzC,EAAAc,UAAAmB,YAAA,WACO9B,KAAKG,OAIVH,KAAK4B,oBAAoBQ,aAAa,SAAUpC,KAAKG,OAAOkC,YAH1DrC,KAAK4B,oBAAoBU,gBAAgB,WAM7CzC,EAAAc,UAAA4B,YAAA,WAEMvC,KAAK4B,qBACP5B,KAAK4B,oBAAoBY,oBACvB,SACAxC,KAAKkC,4BAA4BC,KAAKnC,QAK5CH,EAAAc,UAAAqB,wBAAA,WACE,IAAMS,EAA0BzC,KAAKF,SAAS4C,cAAc,SAG5D,OAFAD,EAAML,aAAa,OAAQ,QAC3BK,EAAME,MAAMC,QAAU,OACfH,GAGT5C,EAAAc,UAAAuB,4BAAA,SAA4BrB,GAC1Bb,KAAKsB,yBAAyBT,GAC9Bb,KAAK4B,oBAAoBiB,MAAQ,IAInChD,EAAAc,UAAAW,yBAAA,SAAyBwB,GACvB,IAAIC,EACJ,GAAID,EAAME,aACRD,EAAQD,EAAME,aAAaD,UACtB,CAAA,IAAID,EAAMG,OAGf,MAAMC,MAAM,iCAFZH,EAAQD,EAAMG,OAAOF,MAMvB,IAAMI,EAAqBC,MAAMC,KAAKN,GACtC/C,KAAKM,aAAagD,KAAKH,IAGzBtD,EAAAc,UAAAa,eAAA,WACExB,KAAK4B,oBAAoB2B,kCAtJ5BC,EAAAA,UAASC,KAAA,CAAC,CAAEC,SAAU,cAAeC,SAAU,kFAuE3CC,EAAAA,OAAMH,KAAA,CAACI,EAAAA,mBAlFVC,EAAAA,mDAeCC,EAAAA,oCAEAA,EAAAA,sBAEAA,EAAAA,mCAEAA,EAAAA,6BACAA,EAAAA,4BACAC,EAAAA,yBAIAC,EAAAA,YAAWR,KAAA,CAAC,+BAIZQ,EAAAA,YAAWR,KAAA,CAAC,qCAKZS,EAAAA,aAAYT,KAAA,CAAC,WAAY,CAAC,oCAU1BS,EAAAA,aAAYT,KAAA,CAAC,YAAa,CAAC,+BAU3BS,EAAAA,aAAYT,KAAA,CAAC,OAAQ,CAAC,gCAWtBS,EAAAA,aAAYT,KAAA,CAAC,QAAS,CAAC,gCAOvBS,EAAAA,aAAYT,KAAA,CAAC,gBAAiB,CAAC,oBCtElC,iCAJCU,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CAACvE,GACVwE,aAAc,CAACxE","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n} from '@angular/core';\n\n@Directive({ selector: '[droppable]', exportAs: 'droppable' })\nexport class DroppableDirective\n  implements OnChanges, OnDestroy, AfterContentInit {\n  /** prompt for files when clicked */\n  @Input() isClickable = true;\n  /** allow multiple files dropped or selected */\n  @Input() acceptsMultipleFiles = true;\n  /** input limit accepted file types via MIME */\n  @Input() accept: string | false = false;\n  /** append CSS class when files are dragged on element */\n  @Input() appendStatusClasses = true;\n  @Input() dragOverClass = 'dragover';\n  @Output() filesDropped = new EventEmitter<File[]>();\n  /**\n   * Accessibility\n   */\n  @HostBinding('attr.tabIndex') tabIndex = 0;\n  /**\n   * Accessibility\n   */\n  @HostBinding('attr.role') role = 'button';\n  /** File is being hovered over, can be used to show something on hover */\n  isHover = false;\n  private virtualInputElement!: HTMLInputElement;\n\n  @HostListener('dragover', ['$event'])\n  handleDragover(e: Event): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isHover = true;\n    if (this.appendStatusClasses) {\n      this.element.nativeElement.classList.add(this.dragOverClass);\n    }\n  }\n\n  @HostListener('dragleave', ['$event'])\n  handleDragleave(e: Event): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isHover = false;\n    if (this.appendStatusClasses) {\n      this.element.nativeElement.classList.remove(this.dragOverClass);\n    }\n  }\n\n  @HostListener('drop', ['$event'])\n  handleDrop(e: Event): void {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isHover = false;\n    if (this.appendStatusClasses) {\n      this.element.nativeElement.classList.remove(this.dragOverClass);\n    }\n    this.onDroppableElementChange(e);\n  }\n\n  @HostListener('click', ['$event'])\n  handleClick(e: Event): void {\n    if (this.isClickable) {\n      this.promptForFiles();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  handleEnter(e: Event): void {\n    this.promptForFiles();\n    this.element.nativeElement.blur();\n  }\n\n  constructor(\n    // tslint:disable-next-line:no-any\n    @Inject(DOCUMENT) protected document: any,\n    private element: ElementRef,\n  ) {}\n\n  ngOnChanges(): void {\n    if (this.virtualInputElement) {\n      this.setAcceptsMultipleFiles();\n      this.setAccepted();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.virtualInputElement = this.makeVirtualInputElement();\n    this.virtualInputElement.addEventListener(\n      'change',\n      this.onVirtualInputElementChange.bind(this),\n    );\n    this.setAcceptsMultipleFiles();\n    this.setAccepted();\n  }\n\n  setAcceptsMultipleFiles(): void {\n    if (!this.acceptsMultipleFiles) {\n      this.virtualInputElement.removeAttribute('multiple');\n      return;\n    }\n    this.virtualInputElement.setAttribute(\n      'multiple',\n      this.acceptsMultipleFiles.toString(),\n    );\n  }\n\n  setAccepted(): void {\n    if (!this.accept) {\n      this.virtualInputElement.removeAttribute('accept');\n      return;\n    }\n    this.virtualInputElement.setAttribute('accept', this.accept.toString());\n  }\n\n  ngOnDestroy(): void {\n    // destroy created input\n    if (this.virtualInputElement) {\n      this.virtualInputElement.removeEventListener(\n        'change',\n        this.onVirtualInputElementChange.bind(this),\n      );\n    }\n  }\n\n  makeVirtualInputElement(): HTMLInputElement {\n    const input: HTMLInputElement = this.document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.style.display = 'none';\n    return input;\n  }\n\n  onVirtualInputElementChange(e: Event): void {\n    this.onDroppableElementChange(e);\n    this.virtualInputElement.value = '';\n  }\n\n  // tslint:disable-next-line:no-any\n  onDroppableElementChange(event: { [key: string]: any }): void {\n    let files;\n    if (event.dataTransfer) {\n      files = event.dataTransfer.files;\n    } else if (event.target) {\n      files = event.target.files;\n    } else {\n      throw Error('Fired event contains no files');\n    }\n\n    // Files is FileList, we convert to array\n    const filesArray: File[] = Array.from(files);\n    this.filesDropped.emit(filesArray);\n  }\n\n  promptForFiles(): void {\n    this.virtualInputElement.click();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { DroppableDirective } from './droppable.directive';\n\n@NgModule({\n  exports: [DroppableDirective],\n  declarations: [DroppableDirective],\n})\nexport class DroppableModule {}\n"]}