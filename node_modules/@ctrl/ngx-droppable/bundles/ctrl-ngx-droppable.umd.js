(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ctrl/ngx-droppable', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ctrl = global.ctrl || {}, global.ctrl['ngx-droppable'] = {}), global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    var DroppableDirective = /** @class */ (function () {
        function DroppableDirective(
        // tslint:disable-next-line:no-any
        document, element) {
            this.document = document;
            this.element = element;
            /** prompt for files when clicked */
            this.isClickable = true;
            /** allow multiple files dropped or selected */
            this.acceptsMultipleFiles = true;
            /** input limit accepted file types via MIME */
            this.accept = false;
            /** append CSS class when files are dragged on element */
            this.appendStatusClasses = true;
            this.dragOverClass = 'dragover';
            this.filesDropped = new core.EventEmitter();
            /**
             * Accessibility
             */
            this.tabIndex = 0;
            /**
             * Accessibility
             */
            this.role = 'button';
            /** File is being hovered over, can be used to show something on hover */
            this.isHover = false;
        }
        DroppableDirective.prototype.handleDragover = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.isHover = true;
            if (this.appendStatusClasses) {
                this.element.nativeElement.classList.add(this.dragOverClass);
            }
        };
        DroppableDirective.prototype.handleDragleave = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.isHover = false;
            if (this.appendStatusClasses) {
                this.element.nativeElement.classList.remove(this.dragOverClass);
            }
        };
        DroppableDirective.prototype.handleDrop = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.isHover = false;
            if (this.appendStatusClasses) {
                this.element.nativeElement.classList.remove(this.dragOverClass);
            }
            this.onDroppableElementChange(e);
        };
        DroppableDirective.prototype.handleClick = function (e) {
            if (this.isClickable) {
                this.promptForFiles();
            }
        };
        DroppableDirective.prototype.handleEnter = function (e) {
            this.promptForFiles();
            this.element.nativeElement.blur();
        };
        DroppableDirective.prototype.ngOnChanges = function () {
            if (this.virtualInputElement) {
                this.setAcceptsMultipleFiles();
                this.setAccepted();
            }
        };
        DroppableDirective.prototype.ngAfterContentInit = function () {
            this.virtualInputElement = this.makeVirtualInputElement();
            this.virtualInputElement.addEventListener('change', this.onVirtualInputElementChange.bind(this));
            this.setAcceptsMultipleFiles();
            this.setAccepted();
        };
        DroppableDirective.prototype.setAcceptsMultipleFiles = function () {
            if (!this.acceptsMultipleFiles) {
                this.virtualInputElement.removeAttribute('multiple');
                return;
            }
            this.virtualInputElement.setAttribute('multiple', this.acceptsMultipleFiles.toString());
        };
        DroppableDirective.prototype.setAccepted = function () {
            if (!this.accept) {
                this.virtualInputElement.removeAttribute('accept');
                return;
            }
            this.virtualInputElement.setAttribute('accept', this.accept.toString());
        };
        DroppableDirective.prototype.ngOnDestroy = function () {
            // destroy created input
            if (this.virtualInputElement) {
                this.virtualInputElement.removeEventListener('change', this.onVirtualInputElementChange.bind(this));
            }
        };
        DroppableDirective.prototype.makeVirtualInputElement = function () {
            var input = this.document.createElement('input');
            input.setAttribute('type', 'file');
            input.style.display = 'none';
            return input;
        };
        DroppableDirective.prototype.onVirtualInputElementChange = function (e) {
            this.onDroppableElementChange(e);
            this.virtualInputElement.value = '';
        };
        // tslint:disable-next-line:no-any
        DroppableDirective.prototype.onDroppableElementChange = function (event) {
            var files;
            if (event.dataTransfer) {
                files = event.dataTransfer.files;
            }
            else if (event.target) {
                files = event.target.files;
            }
            else {
                throw Error('Fired event contains no files');
            }
            // Files is FileList, we convert to array
            var filesArray = Array.from(files);
            this.filesDropped.emit(filesArray);
        };
        DroppableDirective.prototype.promptForFiles = function () {
            this.virtualInputElement.click();
        };
        return DroppableDirective;
    }());
    DroppableDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[droppable]', exportAs: 'droppable' },] }
    ];
    DroppableDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: core.ElementRef }
    ]; };
    DroppableDirective.propDecorators = {
        isClickable: [{ type: core.Input }],
        acceptsMultipleFiles: [{ type: core.Input }],
        accept: [{ type: core.Input }],
        appendStatusClasses: [{ type: core.Input }],
        dragOverClass: [{ type: core.Input }],
        filesDropped: [{ type: core.Output }],
        tabIndex: [{ type: core.HostBinding, args: ['attr.tabIndex',] }],
        role: [{ type: core.HostBinding, args: ['attr.role',] }],
        handleDragover: [{ type: core.HostListener, args: ['dragover', ['$event'],] }],
        handleDragleave: [{ type: core.HostListener, args: ['dragleave', ['$event'],] }],
        handleDrop: [{ type: core.HostListener, args: ['drop', ['$event'],] }],
        handleClick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
        handleEnter: [{ type: core.HostListener, args: ['keydown.enter', ['$event'],] }]
    };

    var DroppableModule = /** @class */ (function () {
        function DroppableModule() {
        }
        return DroppableModule;
    }());
    DroppableModule.decorators = [
        { type: core.NgModule, args: [{
                    exports: [DroppableDirective],
                    declarations: [DroppableDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DroppableDirective = DroppableDirective;
    exports.DroppableModule = DroppableModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ctrl-ngx-droppable.umd.js.map
