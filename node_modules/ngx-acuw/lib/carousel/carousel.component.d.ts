import { AnimationBuilder } from '@angular/animations';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';
export declare class CarouselItem {
    private el;
    htmlElement: HTMLElement;
    constructor(el: ElementRef);
}
export declare class CarouselComponent implements AfterViewInit, OnDestroy, OnChanges {
    private ngZone;
    private animationBuilder;
    showDots: boolean;
    dotColor: string;
    activeDotColor: string;
    dotAnimationCircleColor: string;
    activeCarouselElement: number;
    activeCarouselElementChange: EventEmitter<number>;
    initAnimation: boolean;
    radius: number;
    yPosition: number;
    cameraFov: number;
    cameraDistance: number;
    autoPlay: boolean;
    autoPlayInterval: number;
    rotationDuration: number;
    threejsContainer: ElementRef;
    dots: ElementRef;
    carouselItemTemplates: QueryList<CarouselItem>;
    private animationFrameId;
    private css3dRenderer;
    private scene;
    private camera;
    private objectControls;
    private carouselElements;
    private carouselGroup;
    private carouselObjSubsciptions;
    private rotationSubscription;
    private animation;
    userMove: boolean;
    private dotAnimationPlayer;
    constructor(ngZone: NgZone, animationBuilder: AnimationBuilder);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Resizes the canvas and updates the texture resulution information of the images
     */
    resize(): void;
    /**
     * Animation
     */
    private animate;
    /**
     * starts the animation of the indication dots
     * @param index index number for which dot the animation should be started
     * @returns
     */
    startDotAnimation(index: number): void;
    /**
     * Resets the dot animation
     */
    resetDotAnimation(): void;
    /**
     * Initialize the carousel objects
     */
    private initCarouselObjects;
    /**
     * Rotate to next carousel item
     */
    next(): void;
    /**
     * Rotate to previous carousel item
     */
    previous(): void;
    /**
     * Rotates to a sepcific carousel item
     * @param targetIndex index of the carousel item
     */
    rotateTo(targetIndex: number): void;
    /**
     * Updates and reinits the carousel items
     */
    updateCarouselItems(): void;
    /**
     * Updates the radius of the carousel items
     */
    private updateRadius;
}
