import { animate, AnimationBuilder, query, stagger, state, style, transition, trigger } from '@angular/animations';
import { Component, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { Euler, Group, Object3D, PerspectiveCamera, Quaternion, Scene } from 'three';
import { Vector3 } from 'three';
import { CSS3DObject, CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';
import { ObjectControls } from '../controls/object-controls';
import { RxjsTween } from '../tween/rxjs-tween';
export class CarouselItem {
    constructor(el) {
        this.el = el;
        this.htmlElement = this.el.nativeElement;
    }
}
CarouselItem.decorators = [
    { type: Directive, args: [{
                selector: `acuw-carousel-item`,
                host: {
                    'class': 'acuw-carousel-item',
                }
            },] }
];
CarouselItem.ctorParameters = () => [
    { type: ElementRef }
];
export class CarouselComponent {
    constructor(ngZone, animationBuilder) {
        this.ngZone = ngZone;
        this.animationBuilder = animationBuilder;
        this.showDots = true;
        this.dotColor = '#fff';
        this.activeDotColor = '#3f51b5';
        this.dotAnimationCircleColor = '#fff';
        this.activeCarouselElement = 0;
        this.activeCarouselElementChange = new EventEmitter();
        this.initAnimation = true;
        this.radius = 200;
        this.yPosition = 0;
        this.cameraFov = 65;
        this.cameraDistance = 600;
        this.autoPlay = false;
        this.autoPlayInterval = 5000;
        this.rotationDuration = 500;
        this.css3dRenderer = new CSS3DRenderer();
        this.scene = new Scene();
        this.carouselGroup = new Group();
        this.carouselObjSubsciptions = new Array();
        this.rotationSubscription = new Subscription();
        this.animation = true;
        this.userMove = false;
    }
    ngAfterViewInit() {
        // Init camera
        this.camera = new PerspectiveCamera(this.cameraFov, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.camera.position.set(0.0, 0.0, this.cameraDistance);
        // Get the with and heigth of the threejs renderer
        const divWidth = this.threejsContainer.nativeElement.clientWidth;
        const divHeight = this.threejsContainer.nativeElement.clientHeight;
        // Create CSS3D Renderer
        this.css3dRenderer = new CSS3DRenderer();
        this.css3dRenderer.setSize(divWidth, divHeight);
        this.css3dRenderer.domElement.style.position = 'absolute';
        this.css3dRenderer.domElement.style.top = '0';
        this.threejsContainer.nativeElement.appendChild(this.css3dRenderer.domElement);
        // Init carousel elements
        this.initCarouselObjects();
        // Object-Controls
        this.objectControls = new ObjectControls(this.css3dRenderer.domElement, this.carouselGroup, this.threejsContainer.nativeElement);
        this.objectControls.userInteracted$.subscribe({
            next: val => {
                this.userMove = val;
                // Cancel the rotation, if running
                this.rotationSubscription.unsubscribe();
            }
        });
        // Initialize the animation of the inidcation dots
        if (this.autoPlay) {
            this.startDotAnimation(this.activeCarouselElement);
        }
        // Animate
        this.animate();
    }
    ngOnChanges(changes) {
        let change = changes['activeCarouselElement'];
        if (change && !change.firstChange && this.carouselGroup) {
            //console.log(`activeCarouselElement change | previousValue=${change.previousValue} | newValue=${change.currentValue} |
            //activeCarouselElement=${this.activeCarouselElement}`);
            if (change.currentValue !== this.activeCarouselElement) {
                //console.log('rotate to ' + change.currentValue);
                this.rotateTo(change.currentValue);
            }
        }
        change = changes['radius'];
        if (change && !change.firstChange && this.carouselGroup) {
            this.updateRadius();
        }
        change = changes['cameraFov'];
        if (change && !change.firstChange && this.camera) {
            this.camera.fov = this.cameraFov;
            this.camera.updateProjectionMatrix();
        }
        change = changes['cameraDistance'];
        if (change && !change.firstChange && this.camera) {
            this.camera.position.set(0, 0, this.cameraDistance);
            this.camera.updateProjectionMatrix();
        }
        change = changes['autoPlay'];
        if (change && this.carouselGroup) {
            if (change.currentValue === true) {
                this.startDotAnimation(this.activeCarouselElement);
            }
            else {
                this.resetDotAnimation();
            }
        }
    }
    ngOnDestroy() {
        // Cancel Animation
        cancelAnimationFrame(this.animationFrameId);
        // Unsubscribe Subscriptions
        this.rotationSubscription.unsubscribe();
        // Remove threejs container from DOM
        this.threejsContainer.nativeElement.removeChild(this.css3dRenderer.domElement);
        // Clear scene
        this.scene.clear();
    }
    /**
     * Resizes the canvas and updates the texture resulution information of the images
     */
    resize() {
        // Get width and heigh of the threejs dom element after window resize
        const divWidth = this.threejsContainer.nativeElement.clientWidth;
        const divHeight = this.threejsContainer.nativeElement.clientHeight;
        // Define aspect ratio
        this.camera.aspect = divWidth / divHeight;
        this.camera.updateProjectionMatrix();
        //this.renderer.setSize(divWidth, divHeight);
        this.css3dRenderer.setSize(divWidth, divHeight);
    }
    /**
     * Animation
     */
    animate() {
        if (this.animation == true) {
            this.css3dRenderer.render(this.scene, this.camera);
        }
        this.ngZone.runOutsideAngular(() => {
            this.animationFrameId = window.requestAnimationFrame(() => this.animate());
        });
    }
    /**
     * starts the animation of the indication dots
     * @param index index number for which dot the animation should be started
     * @returns
     */
    startDotAnimation(index) {
        if (this.dotAnimationPlayer || !this.dots) {
            // Animation is already ongoing
            return;
        }
        // Define the animation
        const autoPlayAnimation = this.animationBuilder.build([
            style({ strokeDasharray: '0,250.2', visibility: 'visible' }),
            animate(this.autoPlayInterval, style({ strokeDasharray: '250.2,250.2' }))
        ]);
        // Get the element for, which the animation should be applied
        const path = this.dots.nativeElement.children[index].getElementsByTagName('path')[0];
        this.dotAnimationPlayer = autoPlayAnimation.create(path);
        // Start the animation
        this.dotAnimationPlayer.play();
        // Switch to the next carousel, as soon as the animation is finished
        this.dotAnimationPlayer.onDone(() => {
            this.dotAnimationPlayer = null;
            this.next();
        });
    }
    /**
     * Resets the dot animation
     */
    resetDotAnimation() {
        if (this.dotAnimationPlayer && this.dotAnimationPlayer.hasStarted()) {
            this.dotAnimationPlayer.reset();
            this.dotAnimationPlayer = null;
        }
    }
    /**
     * Initialize the carousel objects
     */
    initCarouselObjects(animation = true) {
        var _a;
        this.carouselElements = new Array();
        for (let idx = 0; idx < this.carouselItemTemplates.length; idx++) {
            let copiedElement = ((_a = this.carouselItemTemplates.get(idx)) === null || _a === void 0 ? void 0 : _a.htmlElement);
            if (copiedElement) {
                var object = new CSS3DObject(copiedElement);
                object.element.style.pointerEvents = 'none';
                // Add element to global variable
                this.carouselElements.push(object);
                // Create subscription for tween animation
                this.carouselObjSubsciptions.push(new Subscription());
            }
        }
        // Clear the carousel group
        this.carouselGroup.clear();
        var yOrientation = -((this.activeCarouselElement) * Math.PI * 2 / this.carouselElements.length);
        this.carouselGroup.rotation.set(0, yOrientation, 0);
        var index = 0;
        const elementsCnt = this.carouselElements.length;
        this.carouselElements.forEach(obj => {
            // Unsubscribe previously subscription
            this.carouselObjSubsciptions[index].unsubscribe();
            // Define final position
            let tweenObj = new Object3D();
            let theta = index * 2 * (Math.PI / elementsCnt);
            tweenObj.position.setFromCylindricalCoords(this.radius, theta, this.yPosition);
            let vector = new Vector3(tweenObj.position.x * 2, tweenObj.position.y, tweenObj.position.z * 2);
            tweenObj.lookAt(vector);
            // Set roattion
            obj.rotation.x = tweenObj.rotation.x;
            obj.rotation.y = tweenObj.rotation.y;
            obj.rotation.z = tweenObj.rotation.z;
            if (this.initAnimation === true && animation === true) {
                // Set random position
                obj.position.x = Math.random() * 2000 - 1000;
                obj.position.y = Math.random() * 500;
                obj.position.z = Math.random() * 500;
                // Add the objects to the portfolio group
                this.carouselGroup.add(obj);
                // Tween to final position
                this.ngZone.runOutsideAngular(() => {
                    this.carouselObjSubsciptions[index] = RxjsTween.createTween(RxjsTween.easeInOutQuad, [obj.position.x, obj.position.y, obj.position.z], [tweenObj.position.x, tweenObj.position.y, tweenObj.position.z], 2000).subscribe({
                        next: tweenPos => {
                            obj.position.set(tweenPos[0], tweenPos[1], tweenPos[2]);
                        }
                    });
                });
            }
            else {
                obj.position.x = tweenObj.position.x;
                obj.position.y = tweenObj.position.y;
                obj.position.z = tweenObj.position.z;
                // Add the objects to the portfolio group
                this.carouselGroup.add(obj);
            }
            index = index + 1;
        });
        //add the group to the scene
        this.scene.add(this.carouselGroup);
    }
    /**
     * Rotate to next carousel item
     */
    next() {
        let nextElement = this.activeCarouselElement >= this.carouselElements.length - 1 ? 0 : this.activeCarouselElement + 1;
        this.resetDotAnimation();
        this.rotateTo(nextElement);
    }
    /**
     * Rotate to previous carousel item
     */
    previous() {
        let nextElement = this.activeCarouselElement == 0 ? this.carouselElements.length - 1 : this.activeCarouselElement - 1;
        this.resetDotAnimation();
        this.rotateTo(nextElement);
    }
    /**
     * Rotates to a sepcific carousel item
     * @param targetIndex index of the carousel item
     */
    rotateTo(targetIndex) {
        if (targetIndex > this.carouselElements.length - 1) {
            console.error('target index is greater than available carousel items');
            return;
        }
        if (targetIndex > this.activeCarouselElement) {
            // In case the current elment is the first again, reset the orientation
            if (this.activeCarouselElement == 0 && (this.carouselGroup.rotation.y != 0
                && this.carouselGroup.rotation.x == 0 && this.carouselGroup.rotation.z == 0)) {
                this.carouselGroup.rotation.set(0, 0, 0);
            }
        }
        else if (targetIndex == this.carouselElements.length - 1) {
            // Set position of the first element to y = -2*PI
            if (this.activeCarouselElement == 0 && (this.carouselGroup.rotation.y == 0
                && this.carouselGroup.rotation.x == 0 && this.carouselGroup.rotation.z == 0)) {
                this.carouselGroup.rotation.set(0, -2 * Math.PI, 0);
            }
        }
        const startQuaternion = this.carouselGroup.quaternion.clone();
        // Calculate the orientation of the target item
        const yOrientation = -((targetIndex) * Math.PI * 2 / this.carouselElements.length);
        let targetQuaternion = new Quaternion().setFromEuler(new Euler(0, yOrientation, 0, 'XYZ'));
        this.rotationSubscription.unsubscribe();
        // Run rotation animation outsie zgZone
        this.ngZone.runOutsideAngular(() => {
            this.rotationSubscription = RxjsTween.createTween(RxjsTween.easeInOutQuad, 0, 1, this.rotationDuration).subscribe({
                next: x => {
                    Quaternion.slerp(startQuaternion, targetQuaternion, this.carouselGroup.quaternion, x);
                },
                complete: () => {
                    Quaternion.slerp(startQuaternion, targetQuaternion, this.carouselGroup.quaternion, 1);
                    this.ngZone.run(() => {
                        this.activeCarouselElement = targetIndex;
                        this.activeCarouselElementChange.emit(this.activeCarouselElement);
                        this.objectControls.resetUserInteractionFlag();
                        if (this.autoPlay) {
                            this.startDotAnimation(this.activeCarouselElement);
                        }
                    });
                }
            });
        });
    }
    /**
     * Updates and reinits the carousel items
     */
    updateCarouselItems() {
        this.initCarouselObjects(false);
    }
    /**
     * Updates the radius of the carousel items
     */
    updateRadius() {
        for (let idx = 0; idx < this.carouselGroup.children.length; idx++) {
            let theta = idx * 2 * (Math.PI / this.carouselGroup.children.length);
            this.carouselGroup.children[idx].position.setFromCylindricalCoords(this.radius, theta, this.yPosition);
        }
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'acuw-carousel',
                template: `
    <div class="carousel-container">
      <div #threejsContainer class="threejs-container"></div>
      <!-- dots -->
      <div #indicationDots class="dots">
      <svg *ngFor="let carouselTemplate of carouselItemTemplates; index as i" viewBox="0 0 100 100">
          <circle cx="50" cy="50" r="45" [ngStyle]="{'fill': activeCarouselElement===i ? activeDotColor : dotColor}"/>
          <path id="{{i}}" fill="none" stroke-linecap="round" stroke-width="20" 
          [ngStyle]="{'stroke': dotAnimationCircleColor, 'visibility': activeCarouselElement===i && autoPlay ? 'visible' : 'hidden'}"
                d="M50 10 a 40 40 0 0 1 0 80 a 40 40 0 0 1 0 -80"/>
        </svg>
      </div>
    </div>
    
  `,
                animations: [
                    trigger('dotsAnimation', [
                        transition(':enter', [
                            query('svg', [
                                style({ opacity: 0, transform: 'translateY(200%)' }),
                                stagger(100, [
                                    animate('300ms ease-in', style({ opacity: 1, transform: 'none' }))
                                ])
                            ], { optional: true })
                        ]),
                        transition(':leave', [
                            query('svg', [
                                stagger(100, [
                                    animate('300ms ease-in', style({ opacity: 0, transform: 'translateY(200%)' }))
                                ])
                            ], { optional: true })
                        ])
                    ]),
                    trigger('autoPlayAnimation', [
                        state('false', style({ strokeDasharray: '0,250.2' })),
                        state('true', style({ strokeDasharray: '250.2,250.2' })),
                        transition('false => true', animate(5000))
                    ])
                ],
                styles: [".carousel-container,.threejs-container{position:relative;width:100%;height:100%;background-color:inherit}.threejs-container{align-items:center}.dots,.threejs-container{display:flex;justify-content:center}.dots{position:absolute;bottom:0;flex-direction:row;flex-wrap:wrap;width:100%;overflow:hidden}.dots svg{width:28px;height:28px;margin:0 5px 24px}", `
  `]
            },] }
];
CarouselComponent.ctorParameters = () => [
    { type: NgZone },
    { type: AnimationBuilder }
];
CarouselComponent.propDecorators = {
    showDots: [{ type: Input }],
    dotColor: [{ type: Input }],
    activeDotColor: [{ type: Input }],
    dotAnimationCircleColor: [{ type: Input }],
    activeCarouselElement: [{ type: Input }],
    activeCarouselElementChange: [{ type: Output }],
    initAnimation: [{ type: Input }],
    radius: [{ type: Input }],
    yPosition: [{ type: Input }],
    cameraFov: [{ type: Input }],
    cameraDistance: [{ type: Input }],
    autoPlay: [{ type: Input }],
    autoPlayInterval: [{ type: Input }],
    rotationDuration: [{ type: Input }],
    threejsContainer: [{ type: ViewChild, args: ['threejsContainer',] }],
    dots: [{ type: ViewChild, args: ['indicationDots',] }],
    carouselItemTemplates: [{ type: ContentChildren, args: [CarouselItem,] }],
    resize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWFjdXcvc3JjL2xpYi9jYXJvdXNlbC9jYXJvdXNlbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBbUIsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwSSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQXdCLE1BQU0sRUFBNEIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9NLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDckYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNoQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFRaEQsTUFBTSxPQUFPLFlBQVk7SUFJdkIsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUMzQyxDQUFDOzs7WUFaRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFv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QUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO2lDQUMvRSxDQUFDOzZCQUNILEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7eUJBQ3ZCLENBQUM7cUJBQ0gsQ0FBQztvQkFDRixPQUFPLENBQUMsbUJBQW1CLEVBQUU7d0JBQzNCLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7d0JBQ3JELEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7d0JBQ3hELFVBQVUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUMzQyxDQUFDO2lCQUNIOzBYQTFCUTtHQUNSO2FBMEJGOzs7WUFwRTZHLE1BQU07WUFEbEcsZ0JBQWdCOzs7dUJBd0UvQixLQUFLO3VCQUNMLEtBQUs7NkJBQ0wsS0FBSztzQ0FDTCxLQUFLO29DQUNMLEtBQUs7MENBQ0wsTUFBTTs0QkFDTixLQUFLO3FCQUNMLEtBQUs7d0JBQ0wsS0FBSzt3QkFDTCxLQUFLOzZCQUNMLEtBQUs7dUJBQ0wsS0FBSzsrQkFDTCxLQUFLOytCQUNMLEtBQUs7K0JBRUwsU0FBUyxTQUFDLGtCQUFrQjttQkFDNUIsU0FBUyxTQUFDLGdCQUFnQjtvQ0FFMUIsZUFBZSxTQUFDLFlBQVk7cUJBdUc1QixZQUFZLFNBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIEFuaW1hdGlvbkJ1aWxkZXIsIEFuaW1hdGlvblBsYXllciwgcXVlcnksIHN0YWdnZXIsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPdXRwdXQsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEV1bGVyLCBHcm91cCwgT2JqZWN0M0QsIFBlcnNwZWN0aXZlQ2FtZXJhLCBRdWF0ZXJuaW9uLCBTY2VuZSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBDU1MzRE9iamVjdCwgQ1NTM0RSZW5kZXJlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9yZW5kZXJlcnMvQ1NTM0RSZW5kZXJlcic7XG5pbXBvcnQgeyBPYmplY3RDb250cm9scyB9IGZyb20gJy4uL2NvbnRyb2xzL29iamVjdC1jb250cm9scyc7XG5pbXBvcnQgeyBSeGpzVHdlZW4gfSBmcm9tICcuLi90d2Vlbi9yeGpzLXR3ZWVuJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBgYWN1dy1jYXJvdXNlbC1pdGVtYCxcbiAgaG9zdDoge1xuICAgICdjbGFzcyc6ICdhY3V3LWNhcm91c2VsLWl0ZW0nLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIENhcm91c2VsSXRlbSB7XG5cbiAgaHRtbEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmh0bWxFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FjdXctY2Fyb3VzZWwnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbC1jb250YWluZXJcIj5cbiAgICAgIDxkaXYgI3RocmVlanNDb250YWluZXIgY2xhc3M9XCJ0aHJlZWpzLWNvbnRhaW5lclwiPjwvZGl2PlxuICAgICAgPCEtLSBkb3RzIC0tPlxuICAgICAgPGRpdiAjaW5kaWNhdGlvbkRvdHMgY2xhc3M9XCJkb3RzXCI+XG4gICAgICA8c3ZnICpuZ0Zvcj1cImxldCBjYXJvdXNlbFRlbXBsYXRlIG9mIGNhcm91c2VsSXRlbVRlbXBsYXRlczsgaW5kZXggYXMgaVwiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPlxuICAgICAgICAgIDxjaXJjbGUgY3g9XCI1MFwiIGN5PVwiNTBcIiByPVwiNDVcIiBbbmdTdHlsZV09XCJ7J2ZpbGwnOiBhY3RpdmVDYXJvdXNlbEVsZW1lbnQ9PT1pID8gYWN0aXZlRG90Q29sb3IgOiBkb3RDb2xvcn1cIi8+XG4gICAgICAgICAgPHBhdGggaWQ9XCJ7e2l9fVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIwXCIgXG4gICAgICAgICAgW25nU3R5bGVdPVwieydzdHJva2UnOiBkb3RBbmltYXRpb25DaXJjbGVDb2xvciwgJ3Zpc2liaWxpdHknOiBhY3RpdmVDYXJvdXNlbEVsZW1lbnQ9PT1pICYmIGF1dG9QbGF5ID8gJ3Zpc2libGUnIDogJ2hpZGRlbid9XCJcbiAgICAgICAgICAgICAgICBkPVwiTTUwIDEwIGEgNDAgNDAgMCAwIDEgMCA4MCBhIDQwIDQwIDAgMCAxIDAgLTgwXCIvPlxuICAgICAgICA8L3N2Zz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIFxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9jYXJvdXNlbC5jb21wb25lbnQuY3NzJ10sXG4gIHN0eWxlczogW2BcbiAgYFxuICBdLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcignZG90c0FuaW1hdGlvbicsIFtcbiAgICAgIHRyYW5zaXRpb24oJzplbnRlcicsIFtcbiAgICAgICAgcXVlcnkoJ3N2ZycsIFtcbiAgICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMjAwJSknIH0pLFxuICAgICAgICAgIHN0YWdnZXIoMTAwLCBbXG4gICAgICAgICAgICBhbmltYXRlKCczMDBtcyBlYXNlLWluJywgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdub25lJyB9KSlcbiAgICAgICAgICBdKVxuICAgICAgICBdLCB7IG9wdGlvbmFsOiB0cnVlIH0pXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJzpsZWF2ZScsIFtcbiAgICAgICAgcXVlcnkoJ3N2ZycsIFtcbiAgICAgICAgICBzdGFnZ2VyKDEwMCwgW1xuICAgICAgICAgICAgYW5pbWF0ZSgnMzAwbXMgZWFzZS1pbicsIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgyMDAlKScgfSkpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSwgeyBvcHRpb25hbDogdHJ1ZSB9KVxuICAgICAgXSlcbiAgICBdKSxcbiAgICB0cmlnZ2VyKCdhdXRvUGxheUFuaW1hdGlvbicsIFtcbiAgICAgIHN0YXRlKCdmYWxzZScsIHN0eWxlKHsgc3Ryb2tlRGFzaGFycmF5OiAnMCwyNTAuMicgfSkpLFxuICAgICAgc3RhdGUoJ3RydWUnLCBzdHlsZSh7IHN0cm9rZURhc2hhcnJheTogJzI1MC4yLDI1MC4yJyB9KSksXG4gICAgICB0cmFuc2l0aW9uKCdmYWxzZSA9PiB0cnVlJywgYW5pbWF0ZSg1MDAwKSlcbiAgICBdKVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHNob3dEb3RzID0gdHJ1ZTtcbiAgQElucHV0KCkgZG90Q29sb3IgPSAnI2ZmZic7XG4gIEBJbnB1dCgpIGFjdGl2ZURvdENvbG9yID0gJyMzZjUxYjUnO1xuICBASW5wdXQoKSBkb3RBbmltYXRpb25DaXJjbGVDb2xvciA9ICcjZmZmJztcbiAgQElucHV0KCkgYWN0aXZlQ2Fyb3VzZWxFbGVtZW50OiBudW1iZXIgPSAwO1xuICBAT3V0cHV0KCkgYWN0aXZlQ2Fyb3VzZWxFbGVtZW50Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIEBJbnB1dCgpIGluaXRBbmltYXRpb24gPSB0cnVlO1xuICBASW5wdXQoKSByYWRpdXMgPSAyMDA7XG4gIEBJbnB1dCgpIHlQb3NpdGlvbiA9IDA7XG4gIEBJbnB1dCgpIGNhbWVyYUZvdiA9IDY1O1xuICBASW5wdXQoKSBjYW1lcmFEaXN0YW5jZSA9IDYwMDtcbiAgQElucHV0KCkgYXV0b1BsYXkgPSBmYWxzZTtcbiAgQElucHV0KCkgYXV0b1BsYXlJbnRlcnZhbCA9IDUwMDA7XG4gIEBJbnB1dCgpIHJvdGF0aW9uRHVyYXRpb24gPSA1MDA7XG5cbiAgQFZpZXdDaGlsZCgndGhyZWVqc0NvbnRhaW5lcicpIHRocmVlanNDb250YWluZXIhOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdpbmRpY2F0aW9uRG90cycpIGRvdHMhOiBFbGVtZW50UmVmO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ2Fyb3VzZWxJdGVtKSBjYXJvdXNlbEl0ZW1UZW1wbGF0ZXMhOiBRdWVyeUxpc3Q8Q2Fyb3VzZWxJdGVtPjtcblxuICBwcml2YXRlIGFuaW1hdGlvbkZyYW1lSWQhOiBudW1iZXI7XG4gIHByaXZhdGUgY3NzM2RSZW5kZXJlciA9IG5ldyBDU1MzRFJlbmRlcmVyKCk7XG4gIHByaXZhdGUgc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgcHJpdmF0ZSBjYW1lcmEhOiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYTtcbiAgcHJpdmF0ZSBvYmplY3RDb250cm9scyE6IE9iamVjdENvbnRyb2xzO1xuICBwcml2YXRlIGNhcm91c2VsRWxlbWVudHMhOiBDU1MzRE9iamVjdFtdO1xuICBwcml2YXRlIGNhcm91c2VsR3JvdXAgPSBuZXcgR3JvdXAoKTtcbiAgcHJpdmF0ZSBjYXJvdXNlbE9ialN1YnNjaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBuZXcgQXJyYXk8U3Vic2NyaXB0aW9uPigpO1xuICBwcml2YXRlIHJvdGF0aW9uU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIHByaXZhdGUgYW5pbWF0aW9uOiBib29sZWFuID0gdHJ1ZTtcbiAgdXNlck1vdmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBkb3RBbmltYXRpb25QbGF5ZXIhOiBBbmltYXRpb25QbGF5ZXIgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgYW5pbWF0aW9uQnVpbGRlcjogQW5pbWF0aW9uQnVpbGRlcikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIC8vIEluaXQgY2FtZXJhXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEodGhpcy5jYW1lcmFGb3YsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDApO1xuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLjAsIDAuMCwgdGhpcy5jYW1lcmFEaXN0YW5jZSk7XG5cbiAgICAvLyBHZXQgdGhlIHdpdGggYW5kIGhlaWd0aCBvZiB0aGUgdGhyZWVqcyByZW5kZXJlclxuICAgIGNvbnN0IGRpdldpZHRoID0gdGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY29uc3QgZGl2SGVpZ2h0ID0gdGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgLy8gQ3JlYXRlIENTUzNEIFJlbmRlcmVyXG4gICAgdGhpcy5jc3MzZFJlbmRlcmVyID0gbmV3IENTUzNEUmVuZGVyZXIoKTtcbiAgICB0aGlzLmNzczNkUmVuZGVyZXIuc2V0U2l6ZShkaXZXaWR0aCwgZGl2SGVpZ2h0KTtcbiAgICB0aGlzLmNzczNkUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgdGhpcy5jc3MzZFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICAgIHRoaXMudGhyZWVqc0NvbnRhaW5lci5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY3NzM2RSZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgIC8vIEluaXQgY2Fyb3VzZWwgZWxlbWVudHNcbiAgICB0aGlzLmluaXRDYXJvdXNlbE9iamVjdHMoKTtcblxuICAgIC8vIE9iamVjdC1Db250cm9sc1xuICAgIHRoaXMub2JqZWN0Q29udHJvbHMgPSBuZXcgT2JqZWN0Q29udHJvbHModGhpcy5jc3MzZFJlbmRlcmVyLmRvbUVsZW1lbnQsIHRoaXMuY2Fyb3VzZWxHcm91cCwgdGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHRoaXMub2JqZWN0Q29udHJvbHMudXNlckludGVyYWN0ZWQkLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiB2YWwgPT4ge1xuICAgICAgICB0aGlzLnVzZXJNb3ZlID0gdmFsO1xuICAgICAgICAvLyBDYW5jZWwgdGhlIHJvdGF0aW9uLCBpZiBydW5uaW5nXG4gICAgICAgIHRoaXMucm90YXRpb25TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGFuaW1hdGlvbiBvZiB0aGUgaW5pZGNhdGlvbiBkb3RzXG4gICAgaWYgKHRoaXMuYXV0b1BsYXkpIHtcbiAgICAgIHRoaXMuc3RhcnREb3RBbmltYXRpb24odGhpcy5hY3RpdmVDYXJvdXNlbEVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIEFuaW1hdGVcbiAgICB0aGlzLmFuaW1hdGUoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBsZXQgY2hhbmdlID0gY2hhbmdlc1snYWN0aXZlQ2Fyb3VzZWxFbGVtZW50J107XG4gICAgaWYgKGNoYW5nZSAmJiAhY2hhbmdlLmZpcnN0Q2hhbmdlICYmIHRoaXMuY2Fyb3VzZWxHcm91cCkge1xuICAgICAgLy9jb25zb2xlLmxvZyhgYWN0aXZlQ2Fyb3VzZWxFbGVtZW50IGNoYW5nZSB8IHByZXZpb3VzVmFsdWU9JHtjaGFuZ2UucHJldmlvdXNWYWx1ZX0gfCBuZXdWYWx1ZT0ke2NoYW5nZS5jdXJyZW50VmFsdWV9IHxcbiAgICAgIC8vYWN0aXZlQ2Fyb3VzZWxFbGVtZW50PSR7dGhpcy5hY3RpdmVDYXJvdXNlbEVsZW1lbnR9YCk7XG4gICAgICBpZiAoY2hhbmdlLmN1cnJlbnRWYWx1ZSAhPT0gdGhpcy5hY3RpdmVDYXJvdXNlbEVsZW1lbnQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygncm90YXRlIHRvICcgKyBjaGFuZ2UuY3VycmVudFZhbHVlKTtcbiAgICAgICAgdGhpcy5yb3RhdGVUbyhjaGFuZ2UuY3VycmVudFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hhbmdlID0gY2hhbmdlc1sncmFkaXVzJ107XG4gICAgaWYgKGNoYW5nZSAmJiAhY2hhbmdlLmZpcnN0Q2hhbmdlICYmIHRoaXMuY2Fyb3VzZWxHcm91cCkge1xuICAgICAgdGhpcy51cGRhdGVSYWRpdXMoKTtcbiAgICB9XG4gICAgY2hhbmdlID0gY2hhbmdlc1snY2FtZXJhRm92J107XG4gICAgaWYgKGNoYW5nZSAmJiAhY2hhbmdlLmZpcnN0Q2hhbmdlICYmIHRoaXMuY2FtZXJhKSB7XG4gICAgICB0aGlzLmNhbWVyYS5mb3YgPSB0aGlzLmNhbWVyYUZvdjtcbiAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gICAgY2hhbmdlID0gY2hhbmdlc1snY2FtZXJhRGlzdGFuY2UnXTtcbiAgICBpZiAoY2hhbmdlICYmICFjaGFuZ2UuZmlyc3RDaGFuZ2UgJiYgdGhpcy5jYW1lcmEpIHtcbiAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCB0aGlzLmNhbWVyYURpc3RhbmNlKTtcbiAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gICAgY2hhbmdlID0gY2hhbmdlc1snYXV0b1BsYXknXTtcbiAgICBpZiAoY2hhbmdlICYmIHRoaXMuY2Fyb3VzZWxHcm91cCkge1xuICAgICAgaWYgKGNoYW5nZS5jdXJyZW50VmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5zdGFydERvdEFuaW1hdGlvbih0aGlzLmFjdGl2ZUNhcm91c2VsRWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc2V0RG90QW5pbWF0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgLy8gQ2FuY2VsIEFuaW1hdGlvblxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgLy8gVW5zdWJzY3JpYmUgU3Vic2NyaXB0aW9uc1xuICAgIHRoaXMucm90YXRpb25TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAvLyBSZW1vdmUgdGhyZWVqcyBjb250YWluZXIgZnJvbSBET01cbiAgICAodGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTENhbnZhc0VsZW1lbnQpLnJlbW92ZUNoaWxkKHRoaXMuY3NzM2RSZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAvLyBDbGVhciBzY2VuZVxuICAgIHRoaXMuc2NlbmUuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIHRoZSBjYW52YXMgYW5kIHVwZGF0ZXMgdGhlIHRleHR1cmUgcmVzdWx1dGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgaW1hZ2VzXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJykgcmVzaXplKCk6IHZvaWQge1xuICAgIC8vIEdldCB3aWR0aCBhbmQgaGVpZ2ggb2YgdGhlIHRocmVlanMgZG9tIGVsZW1lbnQgYWZ0ZXIgd2luZG93IHJlc2l6ZVxuICAgIGNvbnN0IGRpdldpZHRoID0gdGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY29uc3QgZGl2SGVpZ2h0ID0gdGhpcy50aHJlZWpzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIC8vIERlZmluZSBhc3BlY3QgcmF0aW9cbiAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSBkaXZXaWR0aCAvIGRpdkhlaWdodDtcbiAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgLy90aGlzLnJlbmRlcmVyLnNldFNpemUoZGl2V2lkdGgsIGRpdkhlaWdodCk7XG4gICAgdGhpcy5jc3MzZFJlbmRlcmVyLnNldFNpemUoZGl2V2lkdGgsIGRpdkhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9uXG4gICAqL1xuICBwcml2YXRlIGFuaW1hdGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uID09IHRydWUpIHtcbiAgICAgIHRoaXMuY3NzM2RSZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgIH1cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYW5pbWF0ZSgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdGFydHMgdGhlIGFuaW1hdGlvbiBvZiB0aGUgaW5kaWNhdGlvbiBkb3RzXG4gICAqIEBwYXJhbSBpbmRleCBpbmRleCBudW1iZXIgZm9yIHdoaWNoIGRvdCB0aGUgYW5pbWF0aW9uIHNob3VsZCBiZSBzdGFydGVkXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgc3RhcnREb3RBbmltYXRpb24oaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmRvdEFuaW1hdGlvblBsYXllciB8fCAhdGhpcy5kb3RzKSB7XG4gICAgICAvLyBBbmltYXRpb24gaXMgYWxyZWFkeSBvbmdvaW5nXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIERlZmluZSB0aGUgYW5pbWF0aW9uXG4gICAgY29uc3QgYXV0b1BsYXlBbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbkJ1aWxkZXIuYnVpbGQoW1xuICAgICAgc3R5bGUoeyBzdHJva2VEYXNoYXJyYXk6ICcwLDI1MC4yJywgdmlzaWJpbGl0eTogJ3Zpc2libGUnIH0pLFxuICAgICAgYW5pbWF0ZSh0aGlzLmF1dG9QbGF5SW50ZXJ2YWwsIHN0eWxlKHsgc3Ryb2tlRGFzaGFycmF5OiAnMjUwLjIsMjUwLjInIH0pKVxuICAgIF0pO1xuICAgIC8vIEdldCB0aGUgZWxlbWVudCBmb3IsIHdoaWNoIHRoZSBhbmltYXRpb24gc2hvdWxkIGJlIGFwcGxpZWRcbiAgICBjb25zdCBwYXRoID0gKHRoaXMuZG90cy5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jaGlsZHJlbltpbmRleF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhdGgnKVswXTtcbiAgICB0aGlzLmRvdEFuaW1hdGlvblBsYXllciA9IGF1dG9QbGF5QW5pbWF0aW9uLmNyZWF0ZShwYXRoKTtcbiAgICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gICAgdGhpcy5kb3RBbmltYXRpb25QbGF5ZXIucGxheSgpO1xuICAgIC8vIFN3aXRjaCB0byB0aGUgbmV4dCBjYXJvdXNlbCwgYXMgc29vbiBhcyB0aGUgYW5pbWF0aW9uIGlzIGZpbmlzaGVkXG4gICAgdGhpcy5kb3RBbmltYXRpb25QbGF5ZXIub25Eb25lKCgpID0+IHtcbiAgICAgIHRoaXMuZG90QW5pbWF0aW9uUGxheWVyID0gbnVsbDtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgZG90IGFuaW1hdGlvblxuICAgKi9cbiAgcmVzZXREb3RBbmltYXRpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZG90QW5pbWF0aW9uUGxheWVyICYmIHRoaXMuZG90QW5pbWF0aW9uUGxheWVyLmhhc1N0YXJ0ZWQoKSkge1xuICAgICAgdGhpcy5kb3RBbmltYXRpb25QbGF5ZXIucmVzZXQoKTtcbiAgICAgIHRoaXMuZG90QW5pbWF0aW9uUGxheWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgY2Fyb3VzZWwgb2JqZWN0c1xuICAgKi9cbiAgcHJpdmF0ZSBpbml0Q2Fyb3VzZWxPYmplY3RzKGFuaW1hdGlvbiA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLmNhcm91c2VsRWxlbWVudHMgPSBuZXcgQXJyYXk8Q1NTM0RPYmplY3Q+KCk7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5jYXJvdXNlbEl0ZW1UZW1wbGF0ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgbGV0IGNvcGllZEVsZW1lbnQgPSAodGhpcy5jYXJvdXNlbEl0ZW1UZW1wbGF0ZXMuZ2V0KGlkeCk/Lmh0bWxFbGVtZW50KTtcbiAgICAgIGlmIChjb3BpZWRFbGVtZW50KSB7XG4gICAgICAgIHZhciBvYmplY3QgPSBuZXcgQ1NTM0RPYmplY3QoY29waWVkRWxlbWVudCk7XG4gICAgICAgIG9iamVjdC5lbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgIC8vIEFkZCBlbGVtZW50IHRvIGdsb2JhbCB2YXJpYWJsZVxuICAgICAgICB0aGlzLmNhcm91c2VsRWxlbWVudHMucHVzaChvYmplY3QpO1xuICAgICAgICAvLyBDcmVhdGUgc3Vic2NyaXB0aW9uIGZvciB0d2VlbiBhbmltYXRpb25cbiAgICAgICAgdGhpcy5jYXJvdXNlbE9ialN1YnNjaXB0aW9ucy5wdXNoKG5ldyBTdWJzY3JpcHRpb24oKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgdGhlIGNhcm91c2VsIGdyb3VwXG4gICAgdGhpcy5jYXJvdXNlbEdyb3VwLmNsZWFyKCk7XG5cbiAgICB2YXIgeU9yaWVudGF0aW9uID0gLSgodGhpcy5hY3RpdmVDYXJvdXNlbEVsZW1lbnQpICogTWF0aC5QSSAqIDIgLyB0aGlzLmNhcm91c2VsRWxlbWVudHMubGVuZ3RoKTtcbiAgICB0aGlzLmNhcm91c2VsR3JvdXAucm90YXRpb24uc2V0KDAsIHlPcmllbnRhdGlvbiwgMCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBjb25zdCBlbGVtZW50c0NudCA9IHRoaXMuY2Fyb3VzZWxFbGVtZW50cy5sZW5ndGg7XG5cbiAgICB0aGlzLmNhcm91c2VsRWxlbWVudHMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgLy8gVW5zdWJzY3JpYmUgcHJldmlvdXNseSBzdWJzY3JpcHRpb25cbiAgICAgIHRoaXMuY2Fyb3VzZWxPYmpTdWJzY2lwdGlvbnNbaW5kZXhdLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgIC8vIERlZmluZSBmaW5hbCBwb3NpdGlvblxuICAgICAgbGV0IHR3ZWVuT2JqID0gbmV3IE9iamVjdDNEKCk7XG4gICAgICBsZXQgdGhldGEgPSBpbmRleCAqIDIgKiAoTWF0aC5QSSAvIGVsZW1lbnRzQ250KTtcbiAgICAgIHR3ZWVuT2JqLnBvc2l0aW9uLnNldEZyb21DeWxpbmRyaWNhbENvb3Jkcyh0aGlzLnJhZGl1cywgdGhldGEsIHRoaXMueVBvc2l0aW9uKTtcbiAgICAgIGxldCB2ZWN0b3IgPSBuZXcgVmVjdG9yMyh0d2Vlbk9iai5wb3NpdGlvbi54ICogMiwgdHdlZW5PYmoucG9zaXRpb24ueSwgdHdlZW5PYmoucG9zaXRpb24ueiAqIDIpO1xuICAgICAgdHdlZW5PYmoubG9va0F0KHZlY3Rvcik7XG5cbiAgICAgIC8vIFNldCByb2F0dGlvblxuICAgICAgb2JqLnJvdGF0aW9uLnggPSB0d2Vlbk9iai5yb3RhdGlvbi54O1xuICAgICAgb2JqLnJvdGF0aW9uLnkgPSB0d2Vlbk9iai5yb3RhdGlvbi55O1xuICAgICAgb2JqLnJvdGF0aW9uLnogPSB0d2Vlbk9iai5yb3RhdGlvbi56O1xuXG4gICAgICBpZiAodGhpcy5pbml0QW5pbWF0aW9uID09PSB0cnVlICYmIGFuaW1hdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBTZXQgcmFuZG9tIHBvc2l0aW9uXG4gICAgICAgIG9iai5wb3NpdGlvbi54ID0gTWF0aC5yYW5kb20oKSAqIDIwMDAgLSAxMDAwO1xuICAgICAgICBvYmoucG9zaXRpb24ueSA9IE1hdGgucmFuZG9tKCkgKiA1MDA7XG4gICAgICAgIG9iai5wb3NpdGlvbi56ID0gTWF0aC5yYW5kb20oKSAqIDUwMDtcblxuICAgICAgICAvLyBBZGQgdGhlIG9iamVjdHMgdG8gdGhlIHBvcnRmb2xpbyBncm91cFxuICAgICAgICB0aGlzLmNhcm91c2VsR3JvdXAuYWRkKG9iaik7XG5cbiAgICAgICAgLy8gVHdlZW4gdG8gZmluYWwgcG9zaXRpb25cbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2Fyb3VzZWxPYmpTdWJzY2lwdGlvbnNbaW5kZXhdID0gUnhqc1R3ZWVuLmNyZWF0ZVR3ZWVuKFJ4anNUd2Vlbi5lYXNlSW5PdXRRdWFkLCBbb2JqLnBvc2l0aW9uLngsIG9iai5wb3NpdGlvbi55LCBvYmoucG9zaXRpb24uel0sXG4gICAgICAgICAgICBbdHdlZW5PYmoucG9zaXRpb24ueCwgdHdlZW5PYmoucG9zaXRpb24ueSwgdHdlZW5PYmoucG9zaXRpb24uel0sIDIwMDApLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgIG5leHQ6IHR3ZWVuUG9zID0+IHtcbiAgICAgICAgICAgICAgICBvYmoucG9zaXRpb24uc2V0KHR3ZWVuUG9zWzBdLCB0d2VlblBvc1sxXSwgdHdlZW5Qb3NbMl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmoucG9zaXRpb24ueCA9IHR3ZWVuT2JqLnBvc2l0aW9uLng7XG4gICAgICAgIG9iai5wb3NpdGlvbi55ID0gdHdlZW5PYmoucG9zaXRpb24ueTtcbiAgICAgICAgb2JqLnBvc2l0aW9uLnogPSB0d2Vlbk9iai5wb3NpdGlvbi56O1xuXG4gICAgICAgIC8vIEFkZCB0aGUgb2JqZWN0cyB0byB0aGUgcG9ydGZvbGlvIGdyb3VwXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxHcm91cC5hZGQob2JqKTtcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBpbmRleCArIDE7XG4gICAgfSk7XG5cbiAgICAvL2FkZCB0aGUgZ3JvdXAgdG8gdGhlIHNjZW5lXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5jYXJvdXNlbEdyb3VwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGUgdG8gbmV4dCBjYXJvdXNlbCBpdGVtXG4gICAqL1xuICBuZXh0KCk6IHZvaWQge1xuICAgIGxldCBuZXh0RWxlbWVudCA9IHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50ID49IHRoaXMuY2Fyb3VzZWxFbGVtZW50cy5sZW5ndGggLSAxID8gMCA6IHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50ICsgMTtcbiAgICB0aGlzLnJlc2V0RG90QW5pbWF0aW9uKCk7XG4gICAgdGhpcy5yb3RhdGVUbyhuZXh0RWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIHRvIHByZXZpb3VzIGNhcm91c2VsIGl0ZW1cbiAgICovXG4gIHByZXZpb3VzKCk6IHZvaWQge1xuICAgIGxldCBuZXh0RWxlbWVudCA9IHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50ID09IDAgPyB0aGlzLmNhcm91c2VsRWxlbWVudHMubGVuZ3RoIC0gMSA6IHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50IC0gMTtcbiAgICB0aGlzLnJlc2V0RG90QW5pbWF0aW9uKCk7XG4gICAgdGhpcy5yb3RhdGVUbyhuZXh0RWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlcyB0byBhIHNlcGNpZmljIGNhcm91c2VsIGl0ZW1cbiAgICogQHBhcmFtIHRhcmdldEluZGV4IGluZGV4IG9mIHRoZSBjYXJvdXNlbCBpdGVtXG4gICAqL1xuICByb3RhdGVUbyh0YXJnZXRJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRhcmdldEluZGV4ID4gdGhpcy5jYXJvdXNlbEVsZW1lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ3RhcmdldCBpbmRleCBpcyBncmVhdGVyIHRoYW4gYXZhaWxhYmxlIGNhcm91c2VsIGl0ZW1zJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0YXJnZXRJbmRleCA+IHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50KSB7XG4gICAgICAvLyBJbiBjYXNlIHRoZSBjdXJyZW50IGVsbWVudCBpcyB0aGUgZmlyc3QgYWdhaW4sIHJlc2V0IHRoZSBvcmllbnRhdGlvblxuICAgICAgaWYgKHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50ID09IDAgJiYgKHRoaXMuY2Fyb3VzZWxHcm91cC5yb3RhdGlvbi55ICE9IDBcbiAgICAgICAgJiYgdGhpcy5jYXJvdXNlbEdyb3VwLnJvdGF0aW9uLnggPT0gMCAmJiB0aGlzLmNhcm91c2VsR3JvdXAucm90YXRpb24ueiA9PSAwKSkge1xuICAgICAgICB0aGlzLmNhcm91c2VsR3JvdXAucm90YXRpb24uc2V0KDAsIDAsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0SW5kZXggPT0gdGhpcy5jYXJvdXNlbEVsZW1lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgIC8vIFNldCBwb3NpdGlvbiBvZiB0aGUgZmlyc3QgZWxlbWVudCB0byB5ID0gLTIqUElcbiAgICAgIGlmICh0aGlzLmFjdGl2ZUNhcm91c2VsRWxlbWVudCA9PSAwICYmICh0aGlzLmNhcm91c2VsR3JvdXAucm90YXRpb24ueSA9PSAwXG4gICAgICAgICYmIHRoaXMuY2Fyb3VzZWxHcm91cC5yb3RhdGlvbi54ID09IDAgJiYgdGhpcy5jYXJvdXNlbEdyb3VwLnJvdGF0aW9uLnogPT0gMCkpIHtcbiAgICAgICAgdGhpcy5jYXJvdXNlbEdyb3VwLnJvdGF0aW9uLnNldCgwLCAtMiAqIE1hdGguUEksIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0UXVhdGVybmlvbiA9IHRoaXMuY2Fyb3VzZWxHcm91cC5xdWF0ZXJuaW9uLmNsb25lKCk7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgdGFyZ2V0IGl0ZW1cbiAgICBjb25zdCB5T3JpZW50YXRpb24gPSAtKCh0YXJnZXRJbmRleCkgKiBNYXRoLlBJICogMiAvIHRoaXMuY2Fyb3VzZWxFbGVtZW50cy5sZW5ndGgpO1xuICAgIGxldCB0YXJnZXRRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IEV1bGVyKDAsIHlPcmllbnRhdGlvbiwgMCwgJ1hZWicpKTtcblxuICAgIHRoaXMucm90YXRpb25TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblxuICAgIC8vIFJ1biByb3RhdGlvbiBhbmltYXRpb24gb3V0c2llIHpnWm9uZVxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMucm90YXRpb25TdWJzY3JpcHRpb24gPSBSeGpzVHdlZW4uY3JlYXRlVHdlZW4oUnhqc1R3ZWVuLmVhc2VJbk91dFF1YWQsIDAsIDEsIHRoaXMucm90YXRpb25EdXJhdGlvbikuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogeCA9PiB7XG4gICAgICAgICAgUXVhdGVybmlvbi5zbGVycChzdGFydFF1YXRlcm5pb24sIHRhcmdldFF1YXRlcm5pb24sIHRoaXMuY2Fyb3VzZWxHcm91cC5xdWF0ZXJuaW9uLCB4KTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICBRdWF0ZXJuaW9uLnNsZXJwKHN0YXJ0UXVhdGVybmlvbiwgdGFyZ2V0UXVhdGVybmlvbiwgdGhpcy5jYXJvdXNlbEdyb3VwLnF1YXRlcm5pb24sIDEpO1xuICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUNhcm91c2VsRWxlbWVudCA9IHRhcmdldEluZGV4O1xuICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUNhcm91c2VsRWxlbWVudENoYW5nZS5lbWl0KHRoaXMuYWN0aXZlQ2Fyb3VzZWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgdGhpcy5vYmplY3RDb250cm9scy5yZXNldFVzZXJJbnRlcmFjdGlvbkZsYWcoKTtcbiAgICAgICAgICAgICAgaWYodGhpcy5hdXRvUGxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREb3RBbmltYXRpb24odGhpcy5hY3RpdmVDYXJvdXNlbEVsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW5kIHJlaW5pdHMgdGhlIGNhcm91c2VsIGl0ZW1zXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQ2Fyb3VzZWxJdGVtcygpIHtcbiAgICB0aGlzLmluaXRDYXJvdXNlbE9iamVjdHMoZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHJhZGl1cyBvZiB0aGUgY2Fyb3VzZWwgaXRlbXNcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlUmFkaXVzKCkge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMuY2Fyb3VzZWxHcm91cC5jaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICBsZXQgdGhldGEgPSBpZHggKiAyICogKE1hdGguUEkgLyB0aGlzLmNhcm91c2VsR3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIHRoaXMuY2Fyb3VzZWxHcm91cC5jaGlsZHJlbltpZHhdLnBvc2l0aW9uLnNldEZyb21DeWxpbmRyaWNhbENvb3Jkcyh0aGlzLnJhZGl1cywgdGhldGEsIHRoaXMueVBvc2l0aW9uKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==