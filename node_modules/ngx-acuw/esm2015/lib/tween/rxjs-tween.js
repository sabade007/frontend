import { Observable } from 'rxjs';
export var RxjsTween;
(function (RxjsTween) {
    function createTween(easingFunction, b, c, d, s) {
        return new Observable((observer) => {
            let startTime;
            const sample = (time) => {
                startTime = startTime || time;
                const t = time - startTime;
                if (t < d) {
                    if (Array.isArray(b) && Array.isArray(c)) {
                        const tweenVals = new Array();
                        for (let idx = 0; idx < b.length; idx++) {
                            tweenVals.push(easingFunction(t, b[idx], c[idx], d, s));
                        }
                        observer.next(tweenVals);
                    }
                    else {
                        observer.next(easingFunction(t, b, c, d, s));
                    }
                    // Request the animation frame again
                    requestAnimationFrame(sample);
                }
                else {
                    // End value reached
                    if (Array.isArray(b) && Array.isArray(c)) {
                        const tweenVals = new Array();
                        for (let idx = 0; idx < b.length; idx++) {
                            tweenVals.push(c[idx]);
                        }
                        // Emitt end value of arry
                        observer.next(tweenVals);
                    }
                    else {
                        // Emitt end value
                        observer.next(c);
                    }
                    // Complete the observable
                    observer.complete();
                }
            };
            // Initially request the animation frame
            requestAnimationFrame(sample);
        });
    }
    RxjsTween.createTween = createTween;
    function linear(t, b, pc, d) {
        const c = pc - b;
        return c * t / d + b;
    }
    RxjsTween.linear = linear;
    function easeInOutQuad(t, b, pc, d) {
        const c = pc - b;
        if ((t /= d / 2) < 1) {
            return c / 2 * t * t + b;
        }
        else {
            return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
    }
    RxjsTween.easeInOutQuad = easeInOutQuad;
})(RxjsTween || (RxjsTween = {}));
//# sourceMappingURL=data:application/json;base64,