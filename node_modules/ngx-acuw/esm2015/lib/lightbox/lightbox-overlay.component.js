import { ChangeDetectorRef, Component, HostListener, ViewChild } from '@angular/core';
import { ImageTransitionComponent } from '../image-transition/image-transition.component';
export class LightboxOverlayComponent {
    constructor(changeRef) {
        this.changeRef = changeRef;
        this.imageUrls = new Array();
        this.forceFullscreen = false;
        this.forceShowNavButtons = false;
        this.imageSize = 'cover';
        this.autoPlay = false;
        this.autoPlayInterval = 5000;
        this.transitionDuration = 1000;
        this.transitionType = 'split';
        this.sizeX = 50.0;
        this.sizeY = 50.0;
        this.width = 0.5;
        this.intensity = 40.0;
        this.startIndex = 0;
        this.currentImageIndex = 1;
        this.swipeCoord = new Array();
        this.swipeTime = 0;
    }
    ngOnInit() {
    }
    keyEvent(event) {
        if (event.key === 'ArrowRight') {
            this.imageTransition.next();
        }
        if (event.key === 'ArrowLeft') {
            this.imageTransition.prev();
        }
        if (event.key === 'Escape') {
            this.close();
        }
    }
    /**
     * Close the lightbox
     */
    close() {
        var _a;
        (_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.detach();
    }
    /**
     * method to set the index counter
     * @param index index of the image
     */
    imageIndexChange(index) {
        this.currentImageIndex = index + 1;
        this.changeRef.detectChanges();
    }
    /**
     * Listen to touche events for gestures (mobile)
     * @param e touch event
     * @param when indicator if 'start' or 'end'
     */
    swipe(e, when) {
        const coord = [e.changedTouches[0].clientX, e.changedTouches[0].clientY];
        const time = new Date().getTime();
        if (when === 'start') {
            this.swipeCoord = coord;
            this.swipeTime = time;
        }
        else if (when === 'end') {
            const direction = [coord[0] - this.swipeCoord[0], coord[1] - this.swipeCoord[1]];
            const duration = time - this.swipeTime;
            if (duration < 1000 && Math.abs(direction[0]) > 30 // Long enough
                && Math.abs(direction[0]) > Math.abs(direction[1] * 3)) { // Horizontal enough
                const swipe = direction[0] < 0 ? 'next' : 'previous';
                if (swipe === 'next') {
                    this.imageTransition.next();
                }
                else if (swipe === 'previous') {
                    this.imageTransition.prev();
                }
            }
        }
    }
}
LightboxOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-lightbox-overlay',
                template: "<div [ngClass]=\"{'full-container': forceFullscreen === true, 'auto-container': forceFullscreen === false }\">\n    <div class=\"index-indicator\">\n        <span>{{ currentImageIndex }}</span>\n        <span>/</span>\n        <span>{{ imageUrls.length }}</span>\n    </div>\n    <svg class=\"ligthbox-button close-button\" (click)=\"close()\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n\n    <svg [ngClass]=\"{'auto-visibility': forceShowNavButtons === false}\" \n        class=\"ligthbox-button prev-button\" (click)=\"imageTransition.prev()\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\" />\n    </svg>\n\n    <svg [ngClass]=\"{'auto-visibility': forceShowNavButtons === false}\" \n        class=\"ligthbox-button next-button\" (click)=\"imageTransition.next()\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n    </svg>\n    <lib-image-transition #imageTransition [imageUrls]=\"imageUrls\" [startIndex]=\"startIndex\" (imageIndexChange)=\"imageIndexChange($event)\"\n        [imageSize]=\"imageSize\" [autoPlay]=\"autoPlay\" [autoPlayInterval]=\"autoPlayInterval\" [transitionDuration]=\"transitionDuration\"\n        [transitionType]=\"transitionType\" [sizeX]=\"sizeX\" [sizeY]=\"sizeY\" [width]=\"width\" [intensity]=\"intensity\"\n        (touchstart)=\"swipe($event, 'start')\" (touchend)=\"swipe($event, 'end')\">\n    </lib-image-transition>\n</div>",
                styles: [".auto-container{width:1100px;height:800px;max-width:90vw;max-height:90vh}.auto-container,.full-container{position:relative;background-color:#000;box-shadow:0 0 15px 10px rgba(0,0,0,.5)}.full-container{width:100vw;height:100vh;max-width:100vw;max-height:100vh}.index-indicator{color:#fff;border-radius:0 0 5px 0;padding:8px}.index-indicator,.ligthbox-button{position:absolute;z-index:1;background-color:rgba(0,0,0,.4)}.ligthbox-button{cursor:pointer;width:36px;height:36px}.ligthbox-button:hover{fill:hsla(0,0%,100%,.5)}.close-button{top:0;right:0;border-radius:0 0 0 5px}.prev-button{top:calc(50% - 18px);left:0;border-radius:0 5px 5px 0}.next-button{top:calc(50% - 18px);right:0;border-radius:5px 0 0 5px}@media (max-width:600px){.auto-container{width:100vw;height:100vh;max-width:100vw;max-height:100vh}.auto-visibility{visibility:collapse}}lib-image-transition{touch-action:none}"]
            },] }
];
LightboxOverlayComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
LightboxOverlayComponent.propDecorators = {
    imageTransition: [{ type: ViewChild, args: [ImageTransitionComponent,] }],
    keyEvent: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3gtb3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYWN1dy9zcmMvbGliL2xpZ2h0Ym94L2xpZ2h0Ym94LW92ZXJsYXkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQU8xRixNQUFNLE9BQU8sd0JBQXdCO0lBdUJuQyxZQUFvQixTQUE0QjtRQUE1QixjQUFTLEdBQVQsU0FBUyxDQUFtQjtRQWxCaEQsY0FBUyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDaEMsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIsd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQzVCLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFDcEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDeEIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQzFCLG1CQUFjLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLFVBQUssR0FBRyxJQUFJLENBQUM7UUFDYixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2IsVUFBSyxHQUFHLEdBQUcsQ0FBQztRQUNaLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUV0QixlQUFVLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUNqQyxjQUFTLEdBQUcsQ0FBQyxDQUFDO0lBR2QsQ0FBQztJQUVELFFBQVE7SUFDUixDQUFDO0lBR0QsUUFBUSxDQUFDLEtBQW9CO1FBQzNCLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxZQUFZLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtRQUNELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxXQUFXLEVBQUM7WUFDNUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtRQUNELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxRQUFRLEVBQUM7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLOztRQUNILE1BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxDQUFhLEVBQUUsSUFBWTtRQUUvQixNQUFNLEtBQUssR0FBcUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNGLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbEMsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ3pCLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRixNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUV2QyxJQUFJLFFBQVEsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYzttQkFDNUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLG9CQUFvQjtnQkFDOUUsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7Z0JBRXJELElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtvQkFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDN0I7cUJBQU0sSUFBSSxLQUFLLEtBQUssVUFBVSxFQUFFO29CQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUM3QjthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7WUEzRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLHcyREFBZ0Q7O2FBRWpEOzs7WUFQUSxpQkFBaUI7Ozs4QkFVdkIsU0FBUyxTQUFDLHdCQUF3Qjt1QkEyQmxDLFlBQVksU0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSG9zdExpc3RlbmVyLCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW1hZ2VUcmFuc2l0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vaW1hZ2UtdHJhbnNpdGlvbi9pbWFnZS10cmFuc2l0aW9uLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1saWdodGJveC1vdmVybGF5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpZ2h0Ym94LW92ZXJsYXkuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saWdodGJveC1vdmVybGF5LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaWdodGJveE92ZXJsYXlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBWaWV3Q2hpbGQoSW1hZ2VUcmFuc2l0aW9uQ29tcG9uZW50KSBpbWFnZVRyYW5zaXRpb24hOiBJbWFnZVRyYW5zaXRpb25Db21wb25lbnQ7XG5cbiAgb3ZlcmxheVJlZj86IE92ZXJsYXlSZWY7XG4gIGltYWdlVXJscyA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XG4gIGZvcmNlRnVsbHNjcmVlbiA9IGZhbHNlO1xuICBmb3JjZVNob3dOYXZCdXR0b25zID0gZmFsc2U7XG4gIGltYWdlU2l6ZSA9ICdjb3Zlcic7XG4gIGF1dG9QbGF5ID0gZmFsc2U7XG4gIGF1dG9QbGF5SW50ZXJ2YWwgPSA1MDAwO1xuICB0cmFuc2l0aW9uRHVyYXRpb24gPSAxMDAwO1xuICB0cmFuc2l0aW9uVHlwZSA9ICdzcGxpdCc7XG4gIHNpemVYID0gNTAuMDtcbiAgc2l6ZVkgPSA1MC4wO1xuICB3aWR0aCA9IDAuNTtcbiAgaW50ZW5zaXR5ID0gNDAuMDtcbiAgc3RhcnRJbmRleCA9IDA7XG4gIGN1cnJlbnRJbWFnZUluZGV4ID0gMTtcblxuICBzd2lwZUNvb3JkID0gbmV3IEFycmF5PG51bWJlcj4oKTtcbiAgc3dpcGVUaW1lID0gMDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZVJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmtleXVwJywgWyckZXZlbnQnXSlcbiAga2V5RXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgIHRoaXMuaW1hZ2VUcmFuc2l0aW9uLm5leHQoKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0Fycm93TGVmdCcpe1xuICAgICAgdGhpcy5pbWFnZVRyYW5zaXRpb24ucHJldigpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyl7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBsaWdodGJveFxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5vdmVybGF5UmVmPy5kZXRhY2goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBtZXRob2QgdG8gc2V0IHRoZSBpbmRleCBjb3VudGVyXG4gICAqIEBwYXJhbSBpbmRleCBpbmRleCBvZiB0aGUgaW1hZ2VcbiAgICovXG4gIGltYWdlSW5kZXhDaGFuZ2UoaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuY3VycmVudEltYWdlSW5kZXggPSBpbmRleCArIDE7XG4gICAgdGhpcy5jaGFuZ2VSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byB0b3VjaGUgZXZlbnRzIGZvciBnZXN0dXJlcyAobW9iaWxlKVxuICAgKiBAcGFyYW0gZSB0b3VjaCBldmVudFxuICAgKiBAcGFyYW0gd2hlbiBpbmRpY2F0b3IgaWYgJ3N0YXJ0JyBvciAnZW5kJ1xuICAgKi9cbiAgc3dpcGUoZTogVG91Y2hFdmVudCwgd2hlbjogc3RyaW5nKTogdm9pZCB7XG5cbiAgICBjb25zdCBjb29yZDogW251bWJlciwgbnVtYmVyXSA9IFtlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFgsIGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WV07XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgaWYgKHdoZW4gPT09ICdzdGFydCcpIHtcbiAgICAgIHRoaXMuc3dpcGVDb29yZCA9IGNvb3JkO1xuICAgICAgdGhpcy5zd2lwZVRpbWUgPSB0aW1lO1xuICAgIH0gZWxzZSBpZiAod2hlbiA9PT0gJ2VuZCcpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IFtjb29yZFswXSAtIHRoaXMuc3dpcGVDb29yZFswXSwgY29vcmRbMV0gLSB0aGlzLnN3aXBlQ29vcmRbMV1dO1xuICAgICAgY29uc3QgZHVyYXRpb24gPSB0aW1lIC0gdGhpcy5zd2lwZVRpbWU7XG5cbiAgICAgIGlmIChkdXJhdGlvbiA8IDEwMDAgJiYgTWF0aC5hYnMoZGlyZWN0aW9uWzBdKSA+IDMwIC8vIExvbmcgZW5vdWdoXG4gICAgICAgICYmIE1hdGguYWJzKGRpcmVjdGlvblswXSkgPiBNYXRoLmFicyhkaXJlY3Rpb25bMV0gKiAzKSkgeyAvLyBIb3Jpem9udGFsIGVub3VnaFxuICAgICAgICBjb25zdCBzd2lwZSA9IGRpcmVjdGlvblswXSA8IDAgPyAnbmV4dCcgOiAncHJldmlvdXMnO1xuXG4gICAgICAgIGlmIChzd2lwZSA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZVRyYW5zaXRpb24ubmV4dCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHN3aXBlID09PSAncHJldmlvdXMnKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZVRyYW5zaXRpb24ucHJldigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=