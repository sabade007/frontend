import { Subject } from 'rxjs';
import { Euler, Quaternion } from 'three';
import { Object3D, Vector2 } from 'three';
import { RxjsTween } from '../tween/rxjs-tween';
export class ObjectControls {
    constructor(rendererDom, object, touchArea) {
        // ============= Private Properties =============
        this.isUserInteracting = false;
        this.restoringAnimationOngoing = false;
        this.restoringOriginPosTimeout = 0;
        this.userInteracted = false;
        this.userInteractedSubject = new Subject();
        // ============= Public Properties =============
        this.rotationSpeed = 1;
        this.verticalRotation = true;
        this.horizontalRotation = true;
        this.autoRotationY = false;
        this.autoRotationX = false;
        this.autoRotationZ = false;
        this.restoreOriginPosition = false;
        this.autoRotationSpeed = 0.002;
        this.userInteracted$ = this.userInteractedSubject.asObservable();
        this.controlsEnabled = true;
        /******************  MOUSE interaction functions - desktop  *****/
        /**
         * Prepares everything, when the mouse is clicked
         * @param e mouse event
         */
        this.mouseDown = (e) => {
            // Ignore mouse down interaction, if the controls are not enabled
            // Ignore mouse down interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing === true)
                return;
            // Reset restoration animation timout
            window.clearTimeout(this.restoringOriginPosTimeout);
            this.isUserInteracting = true;
            this.startDraggingPosition = new Vector2(0, 0);
            this.startDraggingPosition.set(e.offsetX, e.offsetY);
            this.touchArea.addEventListener('pointermove', this.mouseMove, false);
            this.touchArea.addEventListener('pointerup', this.mouseUp, false);
        };
        /**
         * Calculates the x and y rotation of the object depending on the mouse movement
         * @param e MouseEvent
         */
        this.mouseMove = (e) => {
            // Ignore mouse movement interaction, if the controls are not enabled
            // Ignore mouse movement interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing)
                return;
            if (this.isUserInteracting) {
                if (this.userInteracted == false) {
                    this.userInteracted = true;
                    this.userInteractedSubject.next(this.userInteracted);
                }
                const deltaMove = new Vector2(e.offsetX - this.startDraggingPosition.x, e.offsetY - this.startDraggingPosition.y);
                this.startDraggingPosition.set(e.offsetX, e.offsetY);
                const rotationX = this.verticalRotation == true ? (deltaMove.x * Math.PI / 180 * this.rotationSpeed) : 0;
                const rotationY = this.horizontalRotation == true ? (deltaMove.y * Math.PI / 180 * this.rotationSpeed) : 0;
                var deltaRotationQuaternion = new Quaternion().setFromEuler(new Euler(rotationY, rotationX, 0, 'XYZ'));
                this.obj.quaternion.multiplyQuaternions(deltaRotationQuaternion, this.obj.quaternion);
                //console.log(`rotX: ${Math.round(THREE.MathUtils.radToDeg(this.obj.rotation.x))}, rotY: ${Math.round(THREE.MathUtils.radToDeg(this.obj.rotation.y))}, rotZ: ${Math.round(THREE.MathUtils.radToDeg(this.obj.rotation.z))}`);
            }
        };
        this.mouseUp = () => {
            // Ignore mouse movement interaction, if the controls are not enabled
            // Ignore mouse up interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing)
                return;
            this.resetMousePosition();
            this.isUserInteracting = false;
            if (this.restoreOriginPosition)
                this.restoreOriginalPosition();
            this.touchArea.removeEventListener('mousemove', this.mouseMove, false);
            this.touchArea.removeEventListener('mouseup', this.mouseUp, false);
        };
        /****************** TOUCH interaction functions - mobile  *****/
        this.onTouchStart = (e) => {
            // Ignore mouse movement interaction, if the controls are not enabled
            // Ignore touch start interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing)
                return;
            // Reset restoration animation timout
            window.clearTimeout(this.restoringOriginPosTimeout);
            //e.preventDefault();
            this.isUserInteracting = true;
            this.restoringAnimationOngoing = false;
            this.startDraggingPosition.set(e.touches[0].pageX, e.touches[0].pageY);
        };
        this.onTouchMove = (e) => {
            // Ignore mouse movement interaction, if the controls are not enabled
            // Ignore mouse move interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing)
                return;
            //e.preventDefault();
            if (this.isUserInteracting && !this.restoringAnimationOngoing) {
                if (this.userInteracted == false) {
                    this.userInteracted = true;
                    this.userInteractedSubject.next(this.userInteracted);
                }
                const deltaMove = new Vector2(e.touches[0].pageX - this.startDraggingPosition.x, e.touches[0].pageY - this.startDraggingPosition.y);
                this.startDraggingPosition.set(e.touches[0].pageX, e.touches[0].pageY);
                const rotationX = this.verticalRotation == true ? (deltaMove.x * Math.PI / 180 * this.rotationSpeed) : 0;
                const rotationY = this.horizontalRotation == true ? (deltaMove.y * Math.PI / 180 * this.rotationSpeed) : 0;
                var deltaRotationQuaternion = new Quaternion().setFromEuler(new Euler(rotationY, rotationX, 0, 'XYZ'));
                this.obj.quaternion.multiplyQuaternions(deltaRotationQuaternion, this.obj.quaternion);
            }
        };
        this.onTouchEnd = (e) => {
            // Ignore mouse movement interaction, if the controls are not enabled
            // Ignore mouse up interaction, if the restoration animation is ongoing
            if (this.controlsEnabled === false || this.restoringAnimationOngoing)
                return;
            //e.preventDefault();
            this.isUserInteracting = false;
            this.resetMousePosition();
            if (this.restoreOriginPosition)
                this.restoreOriginalPosition();
        };
        this.rendererDom = rendererDom;
        this.obj = object;
        this.touchArea = touchArea != null ? touchArea : this.rendererDom;
        this.startDraggingPosition = new Vector2(0, 0);
        this.addEventlisteners();
    }
    // ============= Public Methods =============
    /**
     * Method, which needs to be called, in case autorotation is used
     */
    update() {
        if (this.isUserInteracting || this.restoringAnimationOngoing || this.userInteracted)
            return;
        var rotationY = this.autoRotationY == true ? this.autoRotationSpeed : 0;
        var rotationX = this.autoRotationX == true ? this.autoRotationSpeed : 0;
        var rorationZ = this.autoRotationZ == true ? this.autoRotationSpeed : 0;
        var deltaRotationQuaternion = new Quaternion().setFromEuler(new Euler(rotationX, rotationY, rorationZ, 'XYZ'));
        this.obj.quaternion.multiplyQuaternions(deltaRotationQuaternion, this.obj.quaternion);
    }
    /**
     * Removes the event listners
     */
    removeEventlisteners() {
        // desktop events
        this.touchArea.removeEventListener('mousedown', this.mouseDown, false);
        this.touchArea.removeEventListener('mousemove', this.mouseMove, false);
        this.touchArea.removeEventListener('mouseup', this.mouseUp, false);
        // mobile events
        this.touchArea.removeEventListener('touchstart', this.onTouchStart, false);
        this.touchArea.removeEventListener('touchmove', this.onTouchMove, false);
        this.touchArea.removeEventListener('touchend', this.onTouchEnd, false);
    }
    resetUserInteractionFlag() {
        this.userInteracted = false,
            this.userInteractedSubject.next(this.userInteracted);
    }
    // ============= Private Methods =============
    /**
     * Adds the event listeners
     */
    addEventlisteners() {
        // desktop events
        this.touchArea.addEventListener('mousedown', this.mouseDown, false);
        // mobile events
        this.touchArea.addEventListener('touchend', this.onTouchEnd, false);
        this.touchArea.addEventListener('touchstart', this.onTouchStart, false);
        this.touchArea.addEventListener('touchmove', this.onTouchMove, false);
    }
    /**
     * Reset the mouse position to x=0 and y=0
     */
    resetMousePosition() {
        this.startDraggingPosition.set(0, 0);
    }
    /**
     * Rotates the object to the position 0,0,0 after a some timeout
     */
    restoreOriginalPosition() {
        this.restoringOriginPosTimeout = window.setTimeout(() => {
            var objSet = new Object3D();
            objSet.position.set(0, 0, 0);
            objSet.rotation.set(0, 0, 0);
            RxjsTween.createTween(RxjsTween.linear, [this.obj.position.x, this.obj.position.y, this.obj.position.z], [objSet.position.x, objSet.position.y, objSet.position.z], 1000).subscribe({
                next: tweenVal => {
                    if (this.restoringAnimationOngoing == false)
                        this.restoringAnimationOngoing = true;
                    this.obj.rotation.set(tweenVal[0], tweenVal[1], tweenVal[2]);
                },
                complete: () => {
                    this.restoringAnimationOngoing = false;
                    this.resetUserInteractionFlag();
                }
            });
        }, 5000);
    }
}
//# sourceMappingURL=data:application/json;base64,