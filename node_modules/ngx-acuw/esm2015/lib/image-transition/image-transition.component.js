import { Component, EventEmitter, HostListener, Input, NgZone, Output, ViewChild } from '@angular/core';
import { interval, Observable, Subscription } from 'rxjs';
import { DoubleSide, Mesh, PerspectiveCamera, PlaneBufferGeometry, Scene, ShaderMaterial, Vector4, WebGLRenderer } from 'three';
import { TextureLoader } from 'three';
import { RxjsTween } from '../tween/rxjs-tween';
import { ImageTransitionShaders } from './shaders/imageTransitionShaders';
export class ImageTransitionComponent {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.imageUrls = new Array();
        this.transitionDuration = 1000;
        this.animationEnabled = true;
        this.startIndex = 0;
        this.imageIndexChange = new EventEmitter();
        this.pAutoPlay = false;
        this.pAutoPlayInterval = 5000;
        this.pImageSize = 'cover';
        this.pTransitionType = 'split';
        this.pIntensity = 40.0;
        this.pScaleX = 50.0;
        this.pScaleY = 50.0;
        this.pWidth = 0.5;
        this.renderer = new WebGLRenderer({ antialias: true, alpha: true });
        this.scene = new Scene();
        this.textures = new Array();
        this.nextImageIndex = 0;
        this.tranistionOngoing = false;
        this.shaders = new ImageTransitionShaders();
        this.autoPlay$ = new Observable();
        this.autoPlaySubscription = new Subscription();
    }
    get imageSize() { return this.pImageSize; }
    set imageSize(imageSize) {
        this.pImageSize = imageSize;
        if (this.mesh != null) {
            this.resize();
        }
    }
    get autoPlay() { return this.pAutoPlay; }
    set autoPlay(autoplay) {
        this.pAutoPlay = autoplay;
        if (this.mesh != null) {
            if (this.pAutoPlay === true) {
                this.setAutoPlayInterval();
            }
            else {
                this.stopAutoPlayInterval();
            }
        }
    }
    get autoPlayInterval() { return this.pAutoPlayInterval; }
    set autoPlayInterval(autoPlayInterval) {
        this.pAutoPlayInterval = autoPlayInterval;
        if (this.mesh != null) {
            if (this.pAutoPlay === true) {
                this.stopAutoPlayInterval();
                this.setAutoPlayInterval();
            }
        }
    }
    get transitionType() { return this.pTransitionType; }
    set transitionType(transitionType) {
        this.pTransitionType = transitionType;
        if (this.material != null) {
            this.setShaderProperties();
        }
    }
    get sizeX() { return this.pScaleX; }
    set sizeX(sizeX) {
        this.pScaleX = sizeX;
        if (this.material != null) {
            this.setShaderProperties();
        }
    }
    get sizeY() { return this.pScaleY; }
    set sizeY(sizeY) {
        this.pScaleY = sizeY;
        if (this.material != null) {
            this.setShaderProperties();
        }
    }
    get width() { return this.pWidth; }
    set width(width) {
        this.pWidth = width;
        if (this.material != null) {
            this.setShaderProperties();
        }
    }
    get intensity() { return this.intensity; }
    set intensity(intensity) {
        this.pIntensity = intensity;
        if (this.material != null) {
            this.setShaderProperties();
        }
    }
    ngAfterViewInit() {
        // Init camera
        this.camera = new PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);
        this.camera.position.set(0, 0, 2);
        // Create scene
        this.scene = new Scene();
        // Init Mesh
        if (this.imageUrls.length < 2) {
            throw new Error('At least two images are required');
        }
        this.initMesh();
        // Init renderer
        const canvasWidth = this.threejsContainer.nativeElement.clientWidth;
        const canvasHeight = this.threejsContainer.nativeElement.clientHeight;
        this.renderer.setSize(canvasWidth, canvasHeight);
        this.threejsContainer.nativeElement.appendChild(this.renderer.domElement);
        // Init autoPlay Observable
        if (this.pAutoPlay === true) {
            this.setAutoPlayInterval();
        }
        this.animate();
    }
    ngOnDestroy() {
        // Cancel Animation
        cancelAnimationFrame(this.animationFrameId);
        // Stop autoplay animation
        this.stopAutoPlayInterval();
        // Remove threejs container from DOM
        this.threejsContainer.nativeElement.removeChild(this.renderer.domElement);
        // Dispose textures
        this.textures.forEach(t => {
            t.dispose();
        });
        // Dispose material
        if (this.material) {
            this.material.dispose();
        }
        // Clear scene
        if (this.scene) {
            this.scene.clear();
        }
        // Dispose renderer
        if (this.renderer) {
            this.renderer.dispose();
        }
    }
    /**
     * Initializes the mesh
     */
    initMesh() {
        // Create geometry
        const geometry = new PlaneBufferGeometry(1, 1, 2, 2);
        const promises = new Array();
        // Load pev, current and next textures
        this.textures = new Array(this.imageUrls.length);
        const prevImg = this.startIndex === 0 ? (this.imageUrls.length - 1) : (this.startIndex - 1);
        const nextImg = this.startIndex === (this.imageUrls.length - 1) ? 0 : (this.startIndex + 1);
        for (let idx = 0; idx < this.imageUrls.length; idx++) {
            if (idx === this.startIndex || idx === nextImg || idx === prevImg) {
                promises.push(new Promise(resolve => {
                    this.textures[idx] = (new TextureLoader()).load(this.imageUrls[idx], resolve);
                }));
            }
        }
        this.nextImageIndex = this.startIndex;
        // Emit event to set current image index
        this.imageIndexChange.emit(this.nextImageIndex);
        Promise.all(promises).then(() => {
            this.material = new ShaderMaterial({
                side: DoubleSide,
                uniforms: {
                    time: { value: 0 },
                    progress: { value: 0 },
                    border: { value: 0 },
                    intensity: { value: 50.0 },
                    scaleX: { value: 40.0 },
                    scaleY: { value: 40.0 },
                    transition: { value: 40.0 },
                    swipe: { value: 0 },
                    width: { value: 0.5 },
                    radius: { value: 0 },
                    texture1: { value: this.textures[this.startIndex] },
                    texture2: { value: this.textures[nextImg] },
                    resolution1: { value: new Vector4() },
                    resolution2: { value: new Vector4() }
                },
                // wireframe: true,
                vertexShader: this.shaders.vertex
            });
            this.setShaderProperties();
            this.mesh = new Mesh(geometry, this.material);
            this.scene.add(this.mesh);
            this.resize();
        });
    }
    /**
     * Sets the autoPlay interval
     */
    setAutoPlayInterval() {
        this.autoPlay$ = interval(this.pAutoPlayInterval);
        this.autoPlaySubscription = this.autoPlay$.subscribe({
            next: () => { this.prepAndLoadNextImg(false, true); }
        });
    }
    /**
     * Resets the autoPlay interval
     */
    resetAutoPlayInterval() {
        this.autoPlaySubscription.unsubscribe();
        this.autoPlaySubscription = this.autoPlay$.subscribe({
            next: () => { this.prepAndLoadNextImg(false, true); }
        });
    }
    /**
     * Stops the autoPlay interval
     */
    stopAutoPlayInterval() {
        this.autoPlaySubscription.unsubscribe();
    }
    /**
     * Sets the shader properties depending on the transition type
     */
    setShaderProperties() {
        switch (this.transitionType) {
            case 'split':
                this.material.uniforms.intensity.value = this.pIntensity;
                this.material.fragmentShader = this.shaders.splitTransitionFrag;
                break;
            case 'fade':
                this.material.fragmentShader = this.shaders.fadeFrag;
                break;
            case 'noise':
                this.material.uniforms.scaleX.value = this.pScaleX;
                this.material.uniforms.scaleY.value = this.pScaleY;
                this.material.uniforms.width.value = this.pWidth;
                this.material.fragmentShader = this.shaders.noiseFrag;
                break;
            case 'blur':
                this.material.uniforms.intensity.value = this.pIntensity;
                this.material.fragmentShader = this.shaders.blurFrag;
                break;
            default:
                break;
        }
        this.material.needsUpdate = true;
    }
    /**
     * Animation
     */
    animate() {
        if (this.animationEnabled === true) {
            this.renderer.render(this.scene, this.camera);
        }
        this.ngZone.runOutsideAngular(() => {
            this.animationFrameId = window.requestAnimationFrame(() => this.animate());
        });
    }
    /**
     * Resizes the canvas and updates the texture resulution information of the images
     */
    resize() {
        // Get the with and height of the container
        const containerWidth = this.threejsContainer.nativeElement.offsetWidth;
        const containerHeight = this.threejsContainer.nativeElement.offsetHeight;
        // return the function, if eihter with or heigth is undefined
        if (!containerHeight || !containerHeight) {
            return;
        }
        this.renderer.setSize(containerWidth, containerHeight);
        this.camera.aspect = containerWidth / containerHeight;
        this.updateTextureResolution(this.nextImageIndex, 1);
        const dist = this.camera.position.z;
        const height = 1;
        this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));
        this.mesh.scale.x = this.camera.aspect;
        this.mesh.scale.y = 1;
        this.camera.updateProjectionMatrix();
    }
    /**
     * Updates the resulution of the texture for the shader depending on the image size type
     * @param textureNumber Number of the texture
     */
    updateTextureResolution(textureNumber, targetGlslTexture) {
        const texture = this.textures[textureNumber];
        const containerWidth = this.threejsContainer.nativeElement.offsetWidth;
        const containerHeight = this.threejsContainer.nativeElement.offsetHeight;
        // Adapt the size of the image
        const imageAspect = texture.image.height / texture.image.width;
        const containerAspect = containerHeight / containerWidth;
        let a1;
        let a2;
        if (this.pImageSize === 'cover') {
            if (containerAspect > imageAspect) {
                a1 = (containerWidth / containerHeight) * imageAspect;
                a2 = 1;
            }
            else {
                a1 = 1;
                a2 = (containerHeight / containerWidth) / imageAspect;
            }
        }
        else if (this.pImageSize === 'contain') {
            if (containerAspect < imageAspect) {
                a1 = (containerWidth / containerHeight) * imageAspect;
                a2 = 1;
            }
            else {
                a1 = 1;
                a2 = (containerHeight / containerWidth) / imageAspect;
            }
        }
        if (targetGlslTexture === 1) {
            this.material.uniforms.resolution1.value.x = containerWidth;
            this.material.uniforms.resolution1.value.y = containerHeight;
            this.material.uniforms.resolution1.value.z = a1;
            this.material.uniforms.resolution1.value.w = a2;
        }
        else if (targetGlslTexture === 2) {
            this.material.uniforms.resolution2.value.x = containerWidth;
            this.material.uniforms.resolution2.value.y = containerHeight;
            this.material.uniforms.resolution2.value.z = a1;
            this.material.uniforms.resolution2.value.w = a2;
        }
    }
    /**
     * Starts the transition effect to the next image
     * @param posDirection indicator, if the next or previous image should be loaded
     */
    transitionToNextTexture(backw = false) {
        // Set the flag to indicate that the transition animation is ongoing
        this.tranistionOngoing = true;
        // EventEmitter
        this.imageIndexChange.emit(this.nextImageIndex);
        this.ngZone.runOutsideAngular(() => {
            if (backw === true) {
                this.material.uniforms.texture2.value = this.material.uniforms.texture1.value;
                this.material.uniforms.resolution2.value.x = this.material.uniforms.resolution1.value.x;
                this.material.uniforms.resolution2.value.y = this.material.uniforms.resolution1.value.y;
                this.material.uniforms.resolution2.value.z = this.material.uniforms.resolution1.value.z;
                this.material.uniforms.resolution2.value.w = this.material.uniforms.resolution1.value.w;
                this.material.uniforms.progress.value = 1;
                // Set the next image to texture1 and update the resolution
                this.material.uniforms.texture1.value = this.textures[this.nextImageIndex];
                this.updateTextureResolution(this.nextImageIndex, 1);
                // Start the tween for doing the transition
                RxjsTween.createTween(RxjsTween.linear, 1, 0, this.transitionDuration).subscribe({
                    next: val => {
                        this.material.uniforms.progress.value = val;
                    },
                    complete: () => {
                        // Set the transition flag to false to indicate that the transition animation is finished
                        this.tranistionOngoing = false;
                        // Reset progress to 1, thus the texture from texture 2 needs to be set to texture 1
                        this.material.uniforms.texture2.value = this.textures[this.nextImageIndex];
                        this.updateTextureResolution(this.nextImageIndex, 2);
                        this.material.uniforms.progress.value = 0;
                    }
                });
            }
            else {
                // Set the next image to texture2 and update the resolution
                this.material.uniforms.texture2.value = this.textures[this.nextImageIndex];
                this.updateTextureResolution(this.nextImageIndex, 2);
                // Start the tween for doing the transition
                RxjsTween.createTween(RxjsTween.linear, 0, 1, this.transitionDuration).subscribe({
                    next: val => {
                        this.material.uniforms.progress.value = val;
                    },
                    complete: () => {
                        // Set the transition flag to false to indicate that the transition animation is finished
                        this.tranistionOngoing = false;
                        // Reset progress to 0, thus the texture from texture 2 needs to be set to texture 1
                        this.material.uniforms.texture1.value = this.textures[this.nextImageIndex];
                        this.updateTextureResolution(this.nextImageIndex, 1);
                        this.material.uniforms.progress.value = 0;
                    }
                });
            }
        });
    }
    prepAndLoadNextImg(prev, autoPlayTriggered) {
        if (this.tranistionOngoing) {
            return;
        }
        if (this.pAutoPlay === true && autoPlayTriggered === false) {
            this.resetAutoPlayInterval();
        }
        if (prev === false) {
            // Set the next index
            this.nextImageIndex = (this.nextImageIndex < this.imageUrls.length - 1) ? this.nextImageIndex + 1 : 0;
            // Check if another texture needs to be loaded
            const nextButOne = this.nextImageIndex + 1 > this.imageUrls.length - 1 ? 0 : this.nextImageIndex + 1;
            if (this.textures[nextButOne] === undefined) {
                this.textures[nextButOne] = (new TextureLoader).load(this.imageUrls[nextButOne]);
            }
        }
        else {
            // Update the number of the current shown image
            this.nextImageIndex = (this.nextImageIndex > 0) ? this.nextImageIndex - 1 : this.imageUrls.length - 1;
            // Check if another texture needs to be loaded
            const nextButOne = this.nextImageIndex - 1 < 0 ? this.imageUrls.length - 1 : this.nextImageIndex - 1;
            if (this.textures[nextButOne] === undefined) {
                this.textures[nextButOne] = (new TextureLoader).load(this.imageUrls[nextButOne]);
            }
        }
        this.transitionToNextTexture();
    }
    //#region public methods
    next() {
        this.prepAndLoadNextImg(false, false);
    }
    prev() {
        this.prepAndLoadNextImg(true, false);
    }
}
ImageTransitionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-image-transition',
                template: "<div #threejsContainer class=\"threejs-container\"></div>",
                styles: [".threejs-container{width:100%;height:100%}"]
            },] }
];
ImageTransitionComponent.ctorParameters = () => [
    { type: NgZone }
];
ImageTransitionComponent.propDecorators = {
    imageUrls: [{ type: Input }],
    imageSize: [{ type: Input }],
    autoPlay: [{ type: Input }],
    autoPlayInterval: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    transitionType: [{ type: Input }],
    sizeX: [{ type: Input }],
    sizeY: [{ type: Input }],
    width: [{ type: Input }],
    intensity: [{ type: Input }],
    animationEnabled: [{ type: Input }],
    startIndex: [{ type: Input }],
    imageIndexChange: [{ type: Output }],
    threejsContainer: [{ type: ViewChild, args: ['threejsContainer',] }],
    resize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,