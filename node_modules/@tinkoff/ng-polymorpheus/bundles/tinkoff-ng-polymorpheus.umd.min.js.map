{"version":3,"sources":["ng://@tinkoff/ng-polymorpheus/tokens/context.ts","ng://@tinkoff/ng-polymorpheus/classes/component.ts","ng://@tinkoff/ng-polymorpheus/directives/template.ts","ng://@tinkoff/ng-polymorpheus/outlet/outlet.component.ts","ng://@tinkoff/ng-polymorpheus/pipes/injector.ts","ng://@tinkoff/ng-polymorpheus/polymorpheus.module.ts"],"names":["POLYMORPHEUS_CONTEXT","InjectionToken","PolymorpheusComponent","component","injector","this","prototype","createInjector","context","Injector","create","parent","providers","provide","useValue","PolymorpheusTemplate","template","changeDetectorRef","polymorpheus","check","markForCheck","ngTemplateContextGuard","_dir","_ctx","Directive","args","selector","exportAs","inputs","TemplateRef","decorators","type","Inject","Self","ChangeDetectorRef","PolymorpheusOutletComponent","content","Object","defineProperty","isAdvanced","isDirective","isTemplate","isComponent","getTemplate","componentTmp","guard","ngOnChanges","_a","_this","undefined","proxy","Array","isArray","Proxy","get","_","key","componentRef","outlet","ngDoCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","ViewChild","NgComponentOutlet","Input","InjectorPipe","transform","Pipe","name","PolymorpheusModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"iYAMaA,EAAuB,IAAIC,EAAAA,eACpC,iDCGA,SAAAC,EACaC,EACQC,QAAA,IAAAA,IAAAA,EAAA,MADRC,KAAAF,UAAAA,EACQE,KAAAD,SAAAA,EAczB,OAXIF,EAAAI,UAAAC,eAAA,SAAeH,EAAoBI,GAC/B,OAAOC,EAAAA,SAASC,OAAO,CACnBC,OAAQN,KAAKD,UAAYA,EACzBQ,UAAW,CACP,CACIC,QAASb,EACTc,SAAUN,OAK9BN,sBCbI,SAAAa,EAGaC,EACmCC,GADnCZ,KAAAW,SAAAA,EACmCX,KAAAY,kBAAAA,EANhDZ,KAAAa,aAA2B,GAmB/B,OAVIH,EAAAT,UAAAa,MAAA,WACId,KAAKY,kBAAkBG,gBAGpBL,EAAAM,uBAAP,SACIC,EACAC,GAEA,OAAO,uBAvBdC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4BACVC,SAAU,eACVC,OAAQ,CAAC,6DARuCC,EAAAA,YAAWC,WAAA,CAAA,CAAAC,KActDC,EAAAA,OAAMP,KAAA,CAACI,EAAAA,cAAW,CAAAE,KAClBE,EAAAA,cAfDC,EAAAA,kBAAiBJ,WAAA,CAAA,CAAAC,KAiBhBC,EAAAA,OAAMP,KAAA,CAACS,EAAAA,wBAahBnB,sBCRA,SAAAoB,IAOa9B,KAAAW,SAAkC,KAQ3CX,KAAA+B,QAAyC,KAsE7C,OAjEIC,OAAAC,eAAIH,EAAA7B,UAAA,YAAS,KAAb,WACI,OAAKD,KAAK+B,SAAW/B,KAAKkC,WAAWlC,KAAK+B,SAC/B,GAGoB,mBAAjB/B,KAAK+B,QACb/B,KAAK+B,QAAQ/B,KAAKG,SAClBH,KAAK+B,yCAGfD,EAAA7B,UAAAiC,WAAA,SACIH,GAKA,OA+DR,SACIA,GAEA,OAAOI,EAAYJ,IAAYA,aAAmBP,EAAAA,YAlEvCY,CAAWL,IAAYM,EAAYN,IAG9CD,EAAA7B,UAAAqC,YAAA,SACIP,EAIAQ,GAEA,OAAIF,EAAYN,GACLQ,EAGJJ,EAAYJ,GAAWA,EAAQpB,SAAWoB,GAGrDD,EAAA7B,UAAAuC,MAAA,SACIT,GAEA,OAAOM,EAAYN,IAGvBD,EAAA7B,UAAAwC,YAAA,SAAYC,GAAZ,IAAAC,EAAA3C,KAAa+B,EAAAW,EAAAX,QAAS5B,EAAAuC,EAAAvC,QACdA,QAA0ByC,IAAf5C,KAAK6C,QAChB7C,KAAK6C,MACuB,iBAAjB7C,KAAKG,SAAyB2C,MAAMC,QAAQ/C,KAAKG,SAIlDH,KAAKG,QAHL,IAAI6C,MAAMhD,KAAKG,QAAS,CACpB8C,IAAK,SAACC,EAAGC,GAAQ,OAAAR,EAAKxC,QAAO,WAMzCiD,GAAiBrB,GACnB5B,GACAH,KAAKqD,QACLrD,KAAKqD,OAAsB,cAE3BD,GACAA,EAAarD,SAASkD,IAAIpB,EAAAA,mBAAmBd,gBAIrDe,EAAA7B,UAAAqD,UAAA,WACQnB,EAAYnC,KAAK+B,UACjB/B,KAAK+B,QAAQjB,6BAlFxByC,EAAAA,UAASnC,KAAA,CAAC,CACPC,SAAU,wBACVV,SAAA,uvBACA6C,gBAAiBC,EAAAA,wBAAwBC,6CAGxCC,EAAAA,aAAYvC,KAAA,CAACI,EAAAA,6BAGboC,EAAAA,UAASxC,KAAA,CAACyC,EAAAA,oCAKVC,EAAAA,uBAGAA,EAAAA,SAoELhC,KAEA,SAASK,EACLJ,GAEA,OAAOA,aAAmBrB,EAG9B,SAAS2B,EACLN,GAEA,OAAOA,aAAmBlC,mBC3G1B,SAAAkE,EAA+ChE,GAAAC,KAAAD,SAAAA,EAKnD,OAHIgE,EAAA9D,UAAA+D,UAAA,SAAUjC,EAA2C5B,GACjD,OAAO4B,EAAQ7B,eAAeF,KAAKD,SAAUI,wBAPpD8D,EAAAA,KAAI7C,KAAA,CAAC,CACF8C,KAAM,wDARM9D,EAAAA,SAAQqB,WAAA,CAAA,CAAAC,KAWPC,EAAAA,OAAMP,KAAA,CAAChB,EAAAA,eAKxB2D,sBCVA,SAAAI,KAKiC,2BALhCC,EAAAA,SAAQhD,KAAA,CAAC,CACNiD,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACzC,EAA6BpB,EAAsBqD,GAClES,QAAS,CAAC1C,EAA6BpB,OAEVyD","sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletComponent}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<object>(\r\n    'Context from polymorpheus-outlet',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletComponent}\r\n *\r\n * @param component — an Angular component to be dynamically created\r\n * @param injector — optional {@link Injector} for lazy loaded module case\r\n */\r\nexport class PolymorpheusComponent<T extends object, C extends object> {\r\n    constructor(\r\n        readonly component: Type<T>,\r\n        private readonly injector: Injector | null = null,\r\n    ) {}\r\n\r\n    createInjector(injector: Injector, context: C): Injector {\r\n        return Injector.create({\r\n            parent: this.injector || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue: context,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Inject, Self, TemplateRef} from '@angular/core';\n\n/**\n * ng-template wrapper directive also stores {@link ChangeDetectorRef} to properly handle change detection.\n */\n@Directive({\n    selector: 'ng-template[polymorpheus]',\n    exportAs: 'polymorpheus',\n    inputs: ['polymorpheus'],\n})\nexport class PolymorpheusTemplate<C extends Record<any, any>> {\n    polymorpheus: C | string = '';\n\n    constructor(\n        @Inject(TemplateRef)\n        @Self()\n        readonly template: TemplateRef<C>,\n        @Inject(ChangeDetectorRef) private readonly changeDetectorRef: ChangeDetectorRef,\n    ) {}\n\n    check() {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    static ngTemplateContextGuard<T>(\n        _dir: PolymorpheusTemplate<T>,\n        _ctx: any,\n    ): _ctx is T extends string ? any : T {\n        return true;\n    }\n}\n","import {NgComponentOutlet} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ContentChild,\n    DoCheck,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport {PolymorpheusComponent} from '../classes/component';\nimport {PolymorpheusTemplate} from '../directives/template';\nimport {PolymorpheusContent} from '../types/content';\nimport {PolymorpheusPrimitive} from '../types/primitive';\n\n/**\n * Outlet instantiating {@link PolymorpheusContent} with given context\n */\n@Component({\n    selector: '[polymorpheus-outlet]',\n    templateUrl: './outlet.template.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {\n    @ContentChild(TemplateRef)\n    readonly template: TemplateRef<C> | null = null;\n\n    @ViewChild(NgComponentOutlet)\n    readonly outlet?: NgComponentOutlet;\n\n    proxy?: C;\n\n    @Input()\n    content: PolymorpheusContent<C> | null = null;\n\n    @Input()\n    context!: C;\n\n    get primitive(): PolymorpheusPrimitive {\n        if (!this.content || this.isAdvanced(this.content)) {\n            return '';\n        }\n\n        return typeof this.content === 'function'\n            ? this.content(this.context)\n            : this.content;\n    }\n\n    isAdvanced(\n        content: PolymorpheusContent<C> | null,\n    ): content is\n        | PolymorpheusTemplate<C>\n        | TemplateRef<C>\n        | PolymorpheusComponent<object, C> {\n        return isTemplate(content) || isComponent(content);\n    }\n\n    getTemplate(\n        content:\n            | PolymorpheusComponent<object, C>\n            | PolymorpheusTemplate<C>\n            | TemplateRef<C>,\n        componentTmp: TemplateRef<C>,\n    ): TemplateRef<C> {\n        if (isComponent(content)) {\n            return componentTmp;\n        }\n\n        return isDirective(content) ? content.template : content;\n    }\n\n    guard(\n        content: PolymorpheusContent<C> | null,\n    ): content is PolymorpheusComponent<object, C> {\n        return isComponent(content);\n    }\n\n    ngOnChanges({content, context}: SimpleChanges) {\n        if (context && this.proxy === undefined) {\n            this.proxy =\n                typeof this.context === 'object' && !Array.isArray(this.context)\n                    ? new Proxy(this.context, {\n                          get: (_, key) => this.context[key as keyof C],\n                      })\n                    : this.context;\n        }\n\n        // TODO: Keep an eye on private field, name can change\n        const componentRef = (!content &&\n            context &&\n            this.outlet &&\n            this.outlet['_componentRef']) as ComponentRef<object> | null | false;\n\n        if (componentRef) {\n            componentRef.injector.get(ChangeDetectorRef).markForCheck();\n        }\n    }\n\n    ngDoCheck() {\n        if (isDirective(this.content)) {\n            this.content.check();\n        }\n    }\n}\n\nfunction isDirective<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> {\n    return content instanceof PolymorpheusTemplate;\n}\n\nfunction isComponent<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusComponent<object, C> {\n    return content instanceof PolymorpheusComponent;\n}\n\nfunction isTemplate<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> | TemplateRef<C> {\n    return isDirective(content) || content instanceof TemplateRef;\n}\n","import {Inject, Injector, Pipe, PipeTransform} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\n\r\n/**\r\n * Internal use {@link Pipe} to create {@link Injector}\r\n * only when either content or context change\r\n */\r\n@Pipe({\r\n    name: 'injector',\r\n})\r\nexport class InjectorPipe<C extends object> implements PipeTransform {\r\n    constructor(@Inject(Injector) private readonly injector: Injector) {}\r\n\r\n    transform(content: PolymorpheusComponent<object, C>, context: C): Injector {\r\n        return content.createInjector(this.injector, context);\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PolymorpheusTemplate} from './directives/template';\nimport {PolymorpheusOutletComponent} from './outlet/outlet.component';\nimport {InjectorPipe} from './pipes/injector';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [PolymorpheusOutletComponent, PolymorpheusTemplate, InjectorPipe],\n    exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],\n})\nexport class PolymorpheusModule {}\n"]}