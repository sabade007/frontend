/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Inject, Self, TemplateRef } from '@angular/core';
/**
 * ng-template wrapper directive also stores {\@link ChangeDetectorRef} to properly handle change detection.
 * @template C
 */
export class PolymorpheusTemplate {
    /**
     * @param {?} template
     * @param {?} changeDetectorRef
     */
    constructor(template, changeDetectorRef) {
        this.template = template;
        this.changeDetectorRef = changeDetectorRef;
        this.polymorpheus = '';
    }
    /**
     * @return {?}
     */
    check() {
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @template T
     * @param {?} _dir
     * @param {?} _ctx
     * @return {?}
     */
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
}
PolymorpheusTemplate.decorators = [
    { type: Directive, args: [{
                selector: 'ng-template[polymorpheus]',
                exportAs: 'polymorpheus',
                inputs: ['polymorpheus'],
            },] }
];
/** @nocollapse */
PolymorpheusTemplate.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
];
if (false) {
    /** @type {?} */
    PolymorpheusTemplate.prototype.polymorpheus;
    /** @type {?} */
    PolymorpheusTemplate.prototype.template;
    /**
     * @type {?}
     * @private
     */
    PolymorpheusTemplate.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1wb2x5bW9ycGhldXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7OztBQVV0RixNQUFNLE9BQU8sb0JBQW9COzs7OztJQUc3QixZQUdhLFFBQXdCLEVBQ1csaUJBQW9DO1FBRHZFLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQ1csc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQU5wRixpQkFBWSxHQUFlLEVBQUUsQ0FBQztJQU8zQixDQUFDOzs7O0lBRUosS0FBSztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLHNCQUFzQixDQUN6QixJQUE2QixFQUM3QixJQUFTO1FBRVQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBeEJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxRQUFRLEVBQUUsY0FBYztnQkFDeEIsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDO2FBQzNCOzs7O1lBVG1ELFdBQVcsdUJBY3RELE1BQU0sU0FBQyxXQUFXLGNBQ2xCLElBQUk7WUFmTCxpQkFBaUIsdUJBaUJoQixNQUFNLFNBQUMsaUJBQWlCOzs7O0lBTjdCLDRDQUE4Qjs7SUFHMUIsd0NBRWlDOzs7OztJQUNqQyxpREFBZ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEluamVjdCwgU2VsZiwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIG5nLXRlbXBsYXRlIHdyYXBwZXIgZGlyZWN0aXZlIGFsc28gc3RvcmVzIHtAbGluayBDaGFuZ2VEZXRlY3RvclJlZn0gdG8gcHJvcGVybHkgaGFuZGxlIGNoYW5nZSBkZXRlY3Rpb24uXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnbmctdGVtcGxhdGVbcG9seW1vcnBoZXVzXScsXG4gICAgZXhwb3J0QXM6ICdwb2x5bW9ycGhldXMnLFxuICAgIGlucHV0czogWydwb2x5bW9ycGhldXMnXSxcbn0pXG5leHBvcnQgY2xhc3MgUG9seW1vcnBoZXVzVGVtcGxhdGU8QyBleHRlbmRzIFJlY29yZDxhbnksIGFueT4+IHtcbiAgICBwb2x5bW9ycGhldXM6IEMgfCBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRlbXBsYXRlUmVmKVxuICAgICAgICBAU2VsZigpXG4gICAgICAgIHJlYWRvbmx5IHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxDPixcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgKSB7fVxuXG4gICAgY2hlY2soKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIG5nVGVtcGxhdGVDb250ZXh0R3VhcmQ8VD4oXG4gICAgICAgIF9kaXI6IFBvbHltb3JwaGV1c1RlbXBsYXRlPFQ+LFxuICAgICAgICBfY3R4OiBhbnksXG4gICAgKTogX2N0eCBpcyBUIGV4dGVuZHMgc3RyaW5nID8gYW55IDogVCB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiJdfQ==