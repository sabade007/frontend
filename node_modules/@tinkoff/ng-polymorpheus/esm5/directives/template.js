/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Inject, Self, TemplateRef } from '@angular/core';
/**
 * ng-template wrapper directive also stores {\@link ChangeDetectorRef} to properly handle change detection.
 * @template C
 */
var PolymorpheusTemplate = /** @class */ (function () {
    function PolymorpheusTemplate(template, changeDetectorRef) {
        this.template = template;
        this.changeDetectorRef = changeDetectorRef;
        this.polymorpheus = '';
    }
    /**
     * @return {?}
     */
    PolymorpheusTemplate.prototype.check = /**
     * @return {?}
     */
    function () {
        this.changeDetectorRef.markForCheck();
    };
    /**
     * @template T
     * @param {?} _dir
     * @param {?} _ctx
     * @return {?}
     */
    PolymorpheusTemplate.ngTemplateContextGuard = /**
     * @template T
     * @param {?} _dir
     * @param {?} _ctx
     * @return {?}
     */
    function (_dir, _ctx) {
        return true;
    };
    PolymorpheusTemplate.decorators = [
        { type: Directive, args: [{
                    selector: 'ng-template[polymorpheus]',
                    exportAs: 'polymorpheus',
                    inputs: ['polymorpheus'],
                },] }
    ];
    /** @nocollapse */
    PolymorpheusTemplate.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    return PolymorpheusTemplate;
}());
export { PolymorpheusTemplate };
if (false) {
    /** @type {?} */
    PolymorpheusTemplate.prototype.polymorpheus;
    /** @type {?} */
    PolymorpheusTemplate.prototype.template;
    /**
     * @type {?}
     * @private
     */
    PolymorpheusTemplate.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1wb2x5bW9ycGhldXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7OztBQUt0RjtJQVFJLDhCQUdhLFFBQXdCLEVBQ1csaUJBQW9DO1FBRHZFLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQ1csc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQU5wRixpQkFBWSxHQUFlLEVBQUUsQ0FBQztJQU8zQixDQUFDOzs7O0lBRUosb0NBQUs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7Ozs7Ozs7SUFFTSwyQ0FBc0I7Ozs7OztJQUE3QixVQUNJLElBQTZCLEVBQzdCLElBQVM7UUFFVCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOztnQkF4QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFFBQVEsRUFBRSxjQUFjO29CQUN4QixNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUM7aUJBQzNCOzs7O2dCQVRtRCxXQUFXLHVCQWN0RCxNQUFNLFNBQUMsV0FBVyxjQUNsQixJQUFJO2dCQWZMLGlCQUFpQix1QkFpQmhCLE1BQU0sU0FBQyxpQkFBaUI7O0lBYWpDLDJCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0FwQlksb0JBQW9COzs7SUFDN0IsNENBQThCOztJQUcxQix3Q0FFaUM7Ozs7O0lBQ2pDLGlEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgSW5qZWN0LCBTZWxmLCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogbmctdGVtcGxhdGUgd3JhcHBlciBkaXJlY3RpdmUgYWxzbyBzdG9yZXMge0BsaW5rIENoYW5nZURldGVjdG9yUmVmfSB0byBwcm9wZXJseSBoYW5kbGUgY2hhbmdlIGRldGVjdGlvbi5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICduZy10ZW1wbGF0ZVtwb2x5bW9ycGhldXNdJyxcbiAgICBleHBvcnRBczogJ3BvbHltb3JwaGV1cycsXG4gICAgaW5wdXRzOiBbJ3BvbHltb3JwaGV1cyddLFxufSlcbmV4cG9ydCBjbGFzcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDIGV4dGVuZHMgUmVjb3JkPGFueSwgYW55Pj4ge1xuICAgIHBvbHltb3JwaGV1czogQyB8IHN0cmluZyA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPEM+LFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICApIHt9XG5cbiAgICBjaGVjaygpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmdUZW1wbGF0ZUNvbnRleHRHdWFyZDxUPihcbiAgICAgICAgX2RpcjogUG9seW1vcnBoZXVzVGVtcGxhdGU8VD4sXG4gICAgICAgIF9jdHg6IGFueSxcbiAgICApOiBfY3R4IGlzIFQgZXh0ZW5kcyBzdHJpbmcgPyBhbnkgOiBUIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIl19