/**
 * @fileoverview added by tsickle
 * Generated from: plugins/bind.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
export class BindEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = '$';
    }
    /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    addEventListener(element, event) {
        element[event] = element[event] || EMPTY;
        /** @type {?} */
        const method = this.getMethod(element, event);
        /** @type {?} */
        const zone$ = this.manager.getZone().onStable;
        /** @type {?} */
        const sub = concat(zone$.pipe(takeWhile((/**
         * @return {?}
         */
        () => element[event] === EMPTY))), defer((/**
         * @return {?}
         */
        () => element[event]))).subscribe(method);
        return (/**
         * @return {?}
         */
        () => sub.unsubscribe());
    }
    /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    getMethod(element, event) {
        const [, key, value, unit = ''] = event.split('.');
        if (event.endsWith('.attr')) {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => v === null
                ? element.removeAttribute(key)
                : element.setAttribute(key, String(v)));
        }
        if (key === 'class') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => element.classList.toggle(value, !!v));
        }
        if (key === 'style') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => element.style.setProperty(dasharize(value), `${v}${unit}`));
        }
        return (/**
         * @param {?} v
         * @return {?}
         */
        v => (element[key] = v));
    }
}
BindEventPlugin.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BindEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9iaW5kLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHdEQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsbUJBQW1CO0lBRHhEOztRQUV1QixhQUFRLEdBQUcsR0FBRyxDQUFDO0lBeUN0QyxDQUFDOzs7Ozs7SUF2Q0csZ0JBQWdCLENBQ1osT0FBMEQsRUFDMUQsS0FBYTtRQUViLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDOztjQUVuQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDOztjQUN2QyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFROztjQUN2QyxHQUFHLEdBQUcsTUFBTSxDQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBQyxDQUFDLEVBQ3JELEtBQUs7OztRQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUM5QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFFbkI7OztRQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBQztJQUNuQyxDQUFDOzs7Ozs7O0lBRU8sU0FBUyxDQUNiLE9BQThDLEVBQzlDLEtBQWE7Y0FFUCxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFbEQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCOzs7O1lBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FDUCxDQUFDLEtBQUssSUFBSTtnQkFDTixDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztTQUNsRDtRQUVELElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQjs7OztZQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztTQUNwRDtRQUVELElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQjs7OztZQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUM7U0FDMUU7UUFFRDs7OztRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUM7SUFDbkMsQ0FBQzs7O1lBMUNKLFVBQVU7Ozs7Ozs7SUFFUCxtQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2NvbmNhdCwgZGVmZXIsIEVNUFRZLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHt0YWtlV2hpbGV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtkYXNoYXJpemV9IGZyb20gJy4uL3V0aWxzL2Rhc2hhcml6ZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RFdmVudFBsdWdpbn0gZnJvbSAnLi9hYnN0cmFjdC5wbHVnaW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmluZEV2ZW50UGx1Z2luIGV4dGVuZHMgQWJzdHJhY3RFdmVudFBsdWdpbiB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnJCc7XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCAmIFJlY29yZDxzdHJpbmcsIE9ic2VydmFibGU8dW5rbm93bj4+LFxyXG4gICAgICAgIGV2ZW50OiBzdHJpbmcsXHJcbiAgICApOiBGdW5jdGlvbiB7XHJcbiAgICAgICAgZWxlbWVudFtldmVudF0gPSBlbGVtZW50W2V2ZW50XSB8fCBFTVBUWTtcclxuXHJcbiAgICAgICAgY29uc3QgbWV0aG9kID0gdGhpcy5nZXRNZXRob2QoZWxlbWVudCwgZXZlbnQpO1xyXG4gICAgICAgIGNvbnN0IHpvbmUkID0gdGhpcy5tYW5hZ2VyLmdldFpvbmUoKS5vblN0YWJsZTtcclxuICAgICAgICBjb25zdCBzdWIgPSBjb25jYXQoXHJcbiAgICAgICAgICAgIHpvbmUkLnBpcGUodGFrZVdoaWxlKCgpID0+IGVsZW1lbnRbZXZlbnRdID09PSBFTVBUWSkpLFxyXG4gICAgICAgICAgICBkZWZlcigoKSA9PiBlbGVtZW50W2V2ZW50XSksXHJcbiAgICAgICAgKS5zdWJzY3JpYmUobWV0aG9kKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgpID0+IHN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TWV0aG9kKFxyXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXHJcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcclxuICAgICk6ICh2OiB1bmtub3duKSA9PiB2b2lkIHtcclxuICAgICAgICBjb25zdCBbLCBrZXksIHZhbHVlLCB1bml0ID0gJyddID0gZXZlbnQuc3BsaXQoJy4nKTtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmVuZHNXaXRoKCcuYXR0cicpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ID0+XHJcbiAgICAgICAgICAgICAgICB2ID09PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFN0cmluZyh2KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ID0+IGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh2YWx1ZSwgISF2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHYgPT4gZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoYXJpemUodmFsdWUpLCBgJHt2fSR7dW5pdH1gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2ID0+IChlbGVtZW50W2tleV0gPSB2KTtcclxuICAgIH1cclxufVxyXG4iXX0=