/**
 * @fileoverview added by tsickle
 * Generated from: plugins/options.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
export class OptionsEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'capture.once.passive';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    supports(event) {
        return event.includes('.') && !this.unwrap(event).includes('.');
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, event, handler) {
        element.addEventListener(this.unwrap(event), handler, {
            once: event.includes('.once'),
            passive: event.includes('.passive'),
            capture: event.includes('.capture'),
        });
        return (/**
         * @return {?}
         */
        () => element.removeEventListener(this.unwrap(event), handler));
    }
}
OptionsEventPlugin.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OptionsEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9vcHRpb25zLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHdEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG1CQUFtQjtJQUQzRDs7UUFFdUIsYUFBUSxHQUFHLHNCQUFzQixDQUFDO0lBbUJ6RCxDQUFDOzs7OztJQWpCRyxRQUFRLENBQUMsS0FBYTtRQUNsQixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7Ozs7O0lBRUQsZ0JBQWdCLENBQ1osT0FBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQXNCO1FBRXRCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRTtZQUNsRCxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDN0IsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQ25DLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztTQUN0QyxDQUFDLENBQUM7UUFFSDs7O1FBQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUM7SUFDMUUsQ0FBQzs7O1lBcEJKLFVBQVU7Ozs7Ozs7SUFFUCxzQ0FBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Fic3RyYWN0RXZlbnRQbHVnaW59IGZyb20gJy4vYWJzdHJhY3QucGx1Z2luJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE9wdGlvbnNFdmVudFBsdWdpbiBleHRlbmRzIEFic3RyYWN0RXZlbnRQbHVnaW4ge1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGlmaWVyID0gJ2NhcHR1cmUub25jZS5wYXNzaXZlJztcclxuXHJcbiAgICBzdXBwb3J0cyhldmVudDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50LmluY2x1ZGVzKCcuJykgJiYgIXRoaXMudW53cmFwKGV2ZW50KS5pbmNsdWRlcygnLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcclxuICAgICAgICBoYW5kbGVyOiBFdmVudExpc3RlbmVyLFxyXG4gICAgKTogRnVuY3Rpb24ge1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIsIHtcclxuICAgICAgICAgICAgb25jZTogZXZlbnQuaW5jbHVkZXMoJy5vbmNlJyksXHJcbiAgICAgICAgICAgIHBhc3NpdmU6IGV2ZW50LmluY2x1ZGVzKCcucGFzc2l2ZScpLFxyXG4gICAgICAgICAgICBjYXB0dXJlOiBldmVudC5pbmNsdWRlcygnLmNhcHR1cmUnKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==