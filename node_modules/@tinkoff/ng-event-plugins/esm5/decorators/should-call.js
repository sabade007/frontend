/**
 * @fileoverview added by tsickle
 * Generated from: decorators/should-call.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgZone } from '@angular/core';
/**
 * TODO: This will not be needed when markDirty becomes stable API
 * @template T
 * @param {?} predicate
 * @return {?}
 */
export function shouldCall(predicate) {
    return (/**
     * @param {?} _
     * @param {?} key
     * @param {?} desc
     * @return {?}
     */
    function (_, key, desc) {
        var value = desc.value;
        desc.value = (/**
         * @this {?}
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            /** @type {?} */
            var zone = arguments[0];
            if (zone instanceof NgZone) {
                Object.defineProperty(this, key, {
                    value: /**
                     * @this {?}
                     * @param {...?} args
                     * @return {?}
                     */
                    function () {
                        var _this = this;
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (predicate.apply(this, args)) {
                            zone.run((/**
                             * @return {?}
                             */
                            function () {
                                value.apply(_this, args);
                            }));
                        }
                    },
                });
            }
            else if (predicate.apply(this, args)) {
                value.apply(this, args);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdWxkLWNhbGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsiZGVjb3JhdG9ycy9zaG91bGQtY2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7QUFNckMsTUFBTSxVQUFVLFVBQVUsQ0FBSSxTQUF1QjtJQUNqRDs7Ozs7O0lBQU8sVUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQXdCO1FBQzdCLElBQUEsa0JBQUs7UUFFWixJQUFJLENBQUMsS0FBSzs7Ozs7UUFBRztZQUFtQixjQUFjO2lCQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7Z0JBQWQseUJBQWM7OztnQkFDcEMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFFekIsSUFBSSxJQUFJLFlBQVksTUFBTSxFQUFFO2dCQUN4QixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7b0JBQzdCLEtBQUs7Ozs7O29CQUFMO3dCQUFBLGlCQU1DO3dCQU5jLGNBQWM7NkJBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYzs0QkFBZCx5QkFBYzs7d0JBQ3pCLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7NEJBQzdCLElBQUksQ0FBQyxHQUFHOzs7NEJBQUM7Z0NBQ0wsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7NEJBQzVCLENBQUMsRUFBQyxDQUFDO3lCQUNOO29CQUNMLENBQUM7aUJBQ0osQ0FBQyxDQUFDO2FBQ047aUJBQU0sSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDcEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDM0I7UUFDTCxDQUFDLENBQUEsQ0FBQztJQUNOLENBQUMsRUFBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7UHJlZGljYXRlfSBmcm9tICcuLi90eXBlcy9wcmVkaWNhdGUnO1xyXG5cclxuLyoqXHJcbiAqIFRPRE86IFRoaXMgd2lsbCBub3QgYmUgbmVlZGVkIHdoZW4gbWFya0RpcnR5IGJlY29tZXMgc3RhYmxlIEFQSVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZENhbGw8VD4ocHJlZGljYXRlOiBQcmVkaWNhdGU8VD4pOiBNZXRob2REZWNvcmF0b3Ige1xyXG4gICAgcmV0dXJuIChfLCBrZXksIGRlc2M6IFByb3BlcnR5RGVzY3JpcHRvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHt2YWx1ZX0gPSBkZXNjO1xyXG5cclxuICAgICAgICBkZXNjLnZhbHVlID0gZnVuY3Rpb24gKHRoaXM6IFQsIC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHpvbmUgPSBhcmd1bWVudHNbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoem9uZSBpbnN0YW5jZW9mIE5nWm9uZSkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlKHRoaXM6IFQsIC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRPRE86IFVzZSB0aGlzIGFmdGVyIG1hcmtEaXJ0eSBiZWNvbWVzIHB1YmxpYyBBUElcclxuICovXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBzaG91bGRDYWxsPFQgZXh0ZW5kcyBvYmplY3Q+KHByZWRpY2F0ZTogUHJlZGljYXRlPFQ+KTogTWV0aG9kRGVjb3JhdG9yIHtcclxuLy8gICAgIHJldHVybiAoXzogT2JqZWN0LCBfa2V5OiBzdHJpbmcgfCBzeW1ib2wsIGRlc2M6IFByb3BlcnR5RGVzY3JpcHRvcikgPT4ge1xyXG4vLyAgICAgICAgIGNvbnN0IHt2YWx1ZX0gPSBkZXNjO1xyXG4vL1xyXG4vLyAgICAgICAgIGRlc2MudmFsdWUgPSBmdW5jdGlvbih0aGlzOiBULCAuLi5hcmdzOiBhbnlbXSkge1xyXG4vLyAgICAgICAgICAgICBpZiAocHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpKSB7XHJcbi8vICAgICAgICAgICAgICAgICB2YWx1ZS5hcHBseSh0aGlzLCBhcmdzKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtEaXJ0eSh0aGlzKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICB9O1xyXG4vLyB9XHJcbiJdfQ==