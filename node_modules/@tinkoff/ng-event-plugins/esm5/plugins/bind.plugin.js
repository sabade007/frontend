/**
 * @fileoverview added by tsickle
 * Generated from: plugins/bind.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends, __read } from "tslib";
import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
var BindEventPlugin = /** @class */ (function (_super) {
    __extends(BindEventPlugin, _super);
    function BindEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = '$';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    BindEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    function (element, event) {
        element[event] = element[event] || EMPTY;
        /** @type {?} */
        var method = this.getMethod(element, event);
        /** @type {?} */
        var zone$ = this.manager.getZone().onStable;
        /** @type {?} */
        var sub = concat(zone$.pipe(takeWhile((/**
         * @return {?}
         */
        function () { return element[event] === EMPTY; }))), defer((/**
         * @return {?}
         */
        function () { return element[event]; }))).subscribe(method);
        return (/**
         * @return {?}
         */
        function () { return sub.unsubscribe(); });
    };
    /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    BindEventPlugin.prototype.getMethod = /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    function (element, event) {
        var _a = __read(event.split('.'), 4), key = _a[1], value = _a[2], _b = _a[3], unit = _b === void 0 ? '' : _b;
        if (event.endsWith('.attr')) {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                return v === null
                    ? element.removeAttribute(key)
                    : element.setAttribute(key, String(v));
            });
        }
        if (key === 'class') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return element.classList.toggle(value, !!v); });
        }
        if (key === 'style') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return element.style.setProperty(dasharize(value), "" + v + unit); });
        }
        return (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return (element[key] = v); });
    };
    BindEventPlugin.decorators = [
        { type: Injectable }
    ];
    return BindEventPlugin;
}(AbstractEventPlugin));
export { BindEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BindEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9iaW5kLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBQ3FDLG1DQUFtQjtJQUR4RDtRQUFBLHFFQTJDQztRQXpDc0IsY0FBUSxHQUFHLEdBQUcsQ0FBQzs7SUF5Q3RDLENBQUM7Ozs7OztJQXZDRywwQ0FBZ0I7Ozs7O0lBQWhCLFVBQ0ksT0FBMEQsRUFDMUQsS0FBYTtRQUViLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDOztZQUVuQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDOztZQUN2QyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFROztZQUN2QyxHQUFHLEdBQUcsTUFBTSxDQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQXhCLENBQXdCLEVBQUMsQ0FBQyxFQUNyRCxLQUFLOzs7UUFBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFkLENBQWMsRUFBQyxDQUM5QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFFbkI7OztRQUFPLGNBQU0sT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLEVBQUM7SUFDbkMsQ0FBQzs7Ozs7OztJQUVPLG1DQUFTOzs7Ozs7SUFBakIsVUFDSSxPQUE4QyxFQUM5QyxLQUFhO1FBRVAsSUFBQSxnQ0FBNEMsRUFBekMsV0FBRyxFQUFFLGFBQUssRUFBRSxVQUFTLEVBQVQsOEJBQTZCO1FBRWxELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN6Qjs7OztZQUFPLFVBQUEsQ0FBQztnQkFDSixPQUFBLENBQUMsS0FBSyxJQUFJO29CQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQztvQkFDOUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUYxQyxDQUUwQyxFQUFDO1NBQ2xEO1FBRUQsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ2pCOzs7O1lBQU8sVUFBQSxDQUFDLElBQUksT0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFwQyxDQUFvQyxFQUFDO1NBQ3BEO1FBRUQsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ2pCOzs7O1lBQU8sVUFBQSxDQUFDLElBQUksT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBRyxDQUFDLEdBQUcsSUFBTSxDQUFDLEVBQTFELENBQTBELEVBQUM7U0FDMUU7UUFFRDs7OztRQUFPLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQWxCLENBQWtCLEVBQUM7SUFDbkMsQ0FBQzs7Z0JBMUNKLFVBQVU7O0lBMkNYLHNCQUFDO0NBQUEsQUEzQ0QsQ0FDcUMsbUJBQW1CLEdBMEN2RDtTQTFDWSxlQUFlOzs7Ozs7SUFDeEIsbUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtjb25jYXQsIGRlZmVyLCBFTVBUWSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7dGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7ZGFzaGFyaXplfSBmcm9tICcuLi91dGlscy9kYXNoYXJpemUnO1xyXG5pbXBvcnQge0Fic3RyYWN0RXZlbnRQbHVnaW59IGZyb20gJy4vYWJzdHJhY3QucGx1Z2luJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbmRFdmVudFBsdWdpbiBleHRlbmRzIEFic3RyYWN0RXZlbnRQbHVnaW4ge1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGlmaWVyID0gJyQnO1xyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQgJiBSZWNvcmQ8c3RyaW5nLCBPYnNlcnZhYmxlPHVua25vd24+PixcclxuICAgICAgICBldmVudDogc3RyaW5nLFxyXG4gICAgKTogRnVuY3Rpb24ge1xyXG4gICAgICAgIGVsZW1lbnRbZXZlbnRdID0gZWxlbWVudFtldmVudF0gfHwgRU1QVFk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuZ2V0TWV0aG9kKGVsZW1lbnQsIGV2ZW50KTtcclxuICAgICAgICBjb25zdCB6b25lJCA9IHRoaXMubWFuYWdlci5nZXRab25lKCkub25TdGFibGU7XHJcbiAgICAgICAgY29uc3Qgc3ViID0gY29uY2F0KFxyXG4gICAgICAgICAgICB6b25lJC5waXBlKHRha2VXaGlsZSgoKSA9PiBlbGVtZW50W2V2ZW50XSA9PT0gRU1QVFkpKSxcclxuICAgICAgICAgICAgZGVmZXIoKCkgPT4gZWxlbWVudFtldmVudF0pLFxyXG4gICAgICAgICkuc3Vic2NyaWJlKG1ldGhvZCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE1ldGhvZChcclxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCAmIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxyXG4gICAgICAgIGV2ZW50OiBzdHJpbmcsXHJcbiAgICApOiAodjogdW5rbm93bikgPT4gdm9pZCB7XHJcbiAgICAgICAgY29uc3QgWywga2V5LCB2YWx1ZSwgdW5pdCA9ICcnXSA9IGV2ZW50LnNwbGl0KCcuJyk7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5lbmRzV2l0aCgnLmF0dHInKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdiA9PlxyXG4gICAgICAgICAgICAgICAgdiA9PT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIDogZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdiA9PiBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUodmFsdWUsICEhdik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ID0+IGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoZGFzaGFyaXplKHZhbHVlKSwgYCR7dn0ke3VuaXR9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdiA9PiAoZWxlbWVudFtrZXldID0gdik7XHJcbiAgICB9XHJcbn1cclxuIl19