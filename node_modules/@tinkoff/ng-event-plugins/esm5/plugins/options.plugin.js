/**
 * @fileoverview added by tsickle
 * Generated from: plugins/options.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
var OptionsEventPlugin = /** @class */ (function (_super) {
    __extends(OptionsEventPlugin, _super);
    function OptionsEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'capture.once.passive';
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    OptionsEventPlugin.prototype.supports = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.includes('.') && !this.unwrap(event).includes('.');
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    OptionsEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        var _this = this;
        element.addEventListener(this.unwrap(event), handler, {
            once: event.includes('.once'),
            passive: event.includes('.passive'),
            capture: event.includes('.capture'),
        });
        return (/**
         * @return {?}
         */
        function () { return element.removeEventListener(_this.unwrap(event), handler); });
    };
    OptionsEventPlugin.decorators = [
        { type: Injectable }
    ];
    return OptionsEventPlugin;
}(AbstractEventPlugin));
export { OptionsEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    OptionsEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9vcHRpb25zLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBQ3dDLHNDQUFtQjtJQUQzRDtRQUFBLHFFQXFCQztRQW5Cc0IsY0FBUSxHQUFHLHNCQUFzQixDQUFDOztJQW1CekQsQ0FBQzs7Ozs7SUFqQkcscUNBQVE7Ozs7SUFBUixVQUFTLEtBQWE7UUFDbEIsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7OztJQUVELDZDQUFnQjs7Ozs7O0lBQWhCLFVBQ0ksT0FBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQXNCO1FBSDFCLGlCQVlDO1FBUEcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFO1lBQ2xELElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUM3QixPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFDbkMsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1NBQ3RDLENBQUMsQ0FBQztRQUVIOzs7UUFBTyxjQUFNLE9BQUEsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQXhELENBQXdELEVBQUM7SUFDMUUsQ0FBQzs7Z0JBcEJKLFVBQVU7O0lBcUJYLHlCQUFDO0NBQUEsQUFyQkQsQ0FDd0MsbUJBQW1CLEdBb0IxRDtTQXBCWSxrQkFBa0I7Ozs7OztJQUMzQixzQ0FBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Fic3RyYWN0RXZlbnRQbHVnaW59IGZyb20gJy4vYWJzdHJhY3QucGx1Z2luJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE9wdGlvbnNFdmVudFBsdWdpbiBleHRlbmRzIEFic3RyYWN0RXZlbnRQbHVnaW4ge1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGlmaWVyID0gJ2NhcHR1cmUub25jZS5wYXNzaXZlJztcclxuXHJcbiAgICBzdXBwb3J0cyhldmVudDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50LmluY2x1ZGVzKCcuJykgJiYgIXRoaXMudW53cmFwKGV2ZW50KS5pbmNsdWRlcygnLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcclxuICAgICAgICBoYW5kbGVyOiBFdmVudExpc3RlbmVyLFxyXG4gICAgKTogRnVuY3Rpb24ge1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIsIHtcclxuICAgICAgICAgICAgb25jZTogZXZlbnQuaW5jbHVkZXMoJy5vbmNlJyksXHJcbiAgICAgICAgICAgIHBhc3NpdmU6IGV2ZW50LmluY2x1ZGVzKCcucGFzc2l2ZScpLFxyXG4gICAgICAgICAgICBjYXB0dXJlOiBldmVudC5pbmNsdWRlcygnLmNhcHR1cmUnKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==